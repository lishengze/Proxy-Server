#include "spi-transform.h"
#include "FtdcSysUserApiStruct.h"
#include "tool-function.h"
using namespace v8;

// 添加对 queue， mutex, async 全局变量的定义
#ifdef linux
#include "charset-convert-linux.h"
#endif

#ifdef __WINDOWS_
#include "charset-convert-windows.h"
#endif

#ifdef _WIN32
#include "charset-convert-windows.h"
#endif

fstream g_RunningResult_File;
Nan::Persistent<v8::Object> SpiObj;

uv_async_t    g_FrontConnected_async;

queue<int>    g_FrontDisconnected_queue;
uv_mutex_t    g_FrontDisconnected_mutex;
uv_async_t    g_FrontDisconnected_async;

queue<int>    g_HeartBeatWarning_queue;
uv_mutex_t    g_HeartBeatWarning_mutex;
uv_async_t    g_HeartBeatWarning_async;

//以下自动生成
queue<void**> g_RspQryTopCpuInfoTopic_queue;
uv_mutex_t    g_RspQryTopCpuInfoTopic_mutex;
uv_async_t    g_RspQryTopCpuInfoTopic_async;
int           g_RspQryTopCpuInfoTopic_trans_callbackNumb = 0;
int           g_RspQryTopCpuInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnTopCpuInfoTopic_queue;
uv_mutex_t    g_RtnTopCpuInfoTopic_mutex;
uv_async_t    g_RtnTopCpuInfoTopic_async;
int           g_RtnTopCpuInfoTopic_trans_callbackNumb = 0;
int           g_RtnTopCpuInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryTopMemInfoTopic_queue;
uv_mutex_t    g_RspQryTopMemInfoTopic_mutex;
uv_async_t    g_RspQryTopMemInfoTopic_async;
int           g_RspQryTopMemInfoTopic_trans_callbackNumb = 0;
int           g_RspQryTopMemInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnTopMemInfoTopic_queue;
uv_mutex_t    g_RtnTopMemInfoTopic_mutex;
uv_async_t    g_RtnTopMemInfoTopic_async;
int           g_RtnTopMemInfoTopic_trans_callbackNumb = 0;
int           g_RtnTopMemInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryTopProcessInfoTopic_queue;
uv_mutex_t    g_RspQryTopProcessInfoTopic_mutex;
uv_async_t    g_RspQryTopProcessInfoTopic_async;
int           g_RspQryTopProcessInfoTopic_trans_callbackNumb = 0;
int           g_RspQryTopProcessInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnTopProcessInfoTopic_queue;
uv_mutex_t    g_RtnTopProcessInfoTopic_mutex;
uv_async_t    g_RtnTopProcessInfoTopic_async;
int           g_RtnTopProcessInfoTopic_trans_callbackNumb = 0;
int           g_RtnTopProcessInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryFileSystemInfoTopic_queue;
uv_mutex_t    g_RspQryFileSystemInfoTopic_mutex;
uv_async_t    g_RspQryFileSystemInfoTopic_async;
int           g_RspQryFileSystemInfoTopic_trans_callbackNumb = 0;
int           g_RspQryFileSystemInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnFileSystemInfoTopic_queue;
uv_mutex_t    g_RtnFileSystemInfoTopic_mutex;
uv_async_t    g_RtnFileSystemInfoTopic_async;
int           g_RtnFileSystemInfoTopic_trans_callbackNumb = 0;
int           g_RtnFileSystemInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetworkInfoTopic_queue;
uv_mutex_t    g_RspQryNetworkInfoTopic_mutex;
uv_async_t    g_RspQryNetworkInfoTopic_async;
int           g_RspQryNetworkInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetworkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetworkInfoTopic_queue;
uv_mutex_t    g_RtnNetworkInfoTopic_mutex;
uv_async_t    g_RtnNetworkInfoTopic_async;
int           g_RtnNetworkInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetworkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryClientLoginTopic_queue;
uv_mutex_t    g_RspQryClientLoginTopic_mutex;
uv_async_t    g_RspQryClientLoginTopic_async;
int           g_RspQryClientLoginTopic_trans_callbackNumb = 0;
int           g_RspQryClientLoginTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryMonitorObjectTopic_queue;
uv_mutex_t    g_RspQryMonitorObjectTopic_mutex;
uv_async_t    g_RspQryMonitorObjectTopic_async;
int           g_RspQryMonitorObjectTopic_trans_callbackNumb = 0;
int           g_RspQryMonitorObjectTopic_trans_dataNumb     = 0;

queue<void**> g_RtnMonitorObjectTopic_queue;
uv_mutex_t    g_RtnMonitorObjectTopic_mutex;
uv_async_t    g_RtnMonitorObjectTopic_async;
int           g_RtnMonitorObjectTopic_trans_callbackNumb = 0;
int           g_RtnMonitorObjectTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryObjectRationalTopic_queue;
uv_mutex_t    g_RspQryObjectRationalTopic_mutex;
uv_async_t    g_RspQryObjectRationalTopic_async;
int           g_RspQryObjectRationalTopic_trans_callbackNumb = 0;
int           g_RspQryObjectRationalTopic_trans_dataNumb     = 0;

queue<void**> g_RtnObjectRationalTopic_queue;
uv_mutex_t    g_RtnObjectRationalTopic_mutex;
uv_async_t    g_RtnObjectRationalTopic_async;
int           g_RtnObjectRationalTopic_trans_callbackNumb = 0;
int           g_RtnObjectRationalTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySyslogInfoTopic_queue;
uv_mutex_t    g_RspQrySyslogInfoTopic_mutex;
uv_async_t    g_RspQrySyslogInfoTopic_async;
int           g_RspQrySyslogInfoTopic_trans_callbackNumb = 0;
int           g_RspQrySyslogInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnSyslogInfoTopic_queue;
uv_mutex_t    g_RtnSyslogInfoTopic_mutex;
uv_async_t    g_RtnSyslogInfoTopic_async;
int           g_RtnSyslogInfoTopic_trans_callbackNumb = 0;
int           g_RtnSyslogInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySubscriberTopic_queue;
uv_mutex_t    g_RspQrySubscriberTopic_mutex;
uv_async_t    g_RspQrySubscriberTopic_async;
int           g_RspQrySubscriberTopic_trans_callbackNumb = 0;
int           g_RspQrySubscriberTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryOidRelationTopic_queue;
uv_mutex_t    g_RspQryOidRelationTopic_mutex;
uv_async_t    g_RspQryOidRelationTopic_async;
int           g_RspQryOidRelationTopic_trans_callbackNumb = 0;
int           g_RspQryOidRelationTopic_trans_dataNumb     = 0;

queue<void**> g_RtnOidRelationTopic_queue;
uv_mutex_t    g_RtnOidRelationTopic_mutex;
uv_async_t    g_RtnOidRelationTopic_async;
int           g_RtnOidRelationTopic_trans_callbackNumb = 0;
int           g_RtnOidRelationTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryUserInfoTopic_queue;
uv_mutex_t    g_RspQryUserInfoTopic_mutex;
uv_async_t    g_RspQryUserInfoTopic_async;
int           g_RspQryUserInfoTopic_trans_callbackNumb = 0;
int           g_RspQryUserInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnUserInfoTopic_queue;
uv_mutex_t    g_RtnUserInfoTopic_mutex;
uv_async_t    g_RtnUserInfoTopic_async;
int           g_RtnUserInfoTopic_trans_callbackNumb = 0;
int           g_RtnUserInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryOnlineUserInfoTopic_queue;
uv_mutex_t    g_RspQryOnlineUserInfoTopic_mutex;
uv_async_t    g_RspQryOnlineUserInfoTopic_async;
int           g_RspQryOnlineUserInfoTopic_trans_callbackNumb = 0;
int           g_RspQryOnlineUserInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnOnlineUserInfoTopic_queue;
uv_mutex_t    g_RtnOnlineUserInfoTopic_mutex;
uv_async_t    g_RtnOnlineUserInfoTopic_async;
int           g_RtnOnlineUserInfoTopic_trans_callbackNumb = 0;
int           g_RtnOnlineUserInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryWarningEventTopic_queue;
uv_mutex_t    g_RspQryWarningEventTopic_mutex;
uv_async_t    g_RspQryWarningEventTopic_async;
int           g_RspQryWarningEventTopic_trans_callbackNumb = 0;
int           g_RspQryWarningEventTopic_trans_dataNumb     = 0;

queue<void**> g_RtnWarningEventTopic_queue;
uv_mutex_t    g_RtnWarningEventTopic_mutex;
uv_async_t    g_RtnWarningEventTopic_async;
int           g_RtnWarningEventTopic_trans_callbackNumb = 0;
int           g_RtnWarningEventTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryCPUUsageTopic_queue;
uv_mutex_t    g_RspQryCPUUsageTopic_mutex;
uv_async_t    g_RspQryCPUUsageTopic_async;
int           g_RspQryCPUUsageTopic_trans_callbackNumb = 0;
int           g_RspQryCPUUsageTopic_trans_dataNumb     = 0;

queue<void**> g_RtnCPUUsageTopic_queue;
uv_mutex_t    g_RtnCPUUsageTopic_mutex;
uv_async_t    g_RtnCPUUsageTopic_async;
int           g_RtnCPUUsageTopic_trans_callbackNumb = 0;
int           g_RtnCPUUsageTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryMemoryUsageTopic_queue;
uv_mutex_t    g_RspQryMemoryUsageTopic_mutex;
uv_async_t    g_RspQryMemoryUsageTopic_async;
int           g_RspQryMemoryUsageTopic_trans_callbackNumb = 0;
int           g_RspQryMemoryUsageTopic_trans_dataNumb     = 0;

queue<void**> g_RtnMemoryUsageTopic_queue;
uv_mutex_t    g_RtnMemoryUsageTopic_mutex;
uv_async_t    g_RtnMemoryUsageTopic_async;
int           g_RtnMemoryUsageTopic_trans_callbackNumb = 0;
int           g_RtnMemoryUsageTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryDiskUsageTopic_queue;
uv_mutex_t    g_RspQryDiskUsageTopic_mutex;
uv_async_t    g_RspQryDiskUsageTopic_async;
int           g_RspQryDiskUsageTopic_trans_callbackNumb = 0;
int           g_RspQryDiskUsageTopic_trans_dataNumb     = 0;

queue<void**> g_RtnDiskUsageTopic_queue;
uv_mutex_t    g_RtnDiskUsageTopic_mutex;
uv_async_t    g_RtnDiskUsageTopic_async;
int           g_RtnDiskUsageTopic_trans_callbackNumb = 0;
int           g_RtnDiskUsageTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryObjectAttrTopic_queue;
uv_mutex_t    g_RspQryObjectAttrTopic_mutex;
uv_async_t    g_RspQryObjectAttrTopic_async;
int           g_RspQryObjectAttrTopic_trans_callbackNumb = 0;
int           g_RspQryObjectAttrTopic_trans_dataNumb     = 0;

queue<void**> g_RtnObjectAttrTopic_queue;
uv_mutex_t    g_RtnObjectAttrTopic_mutex;
uv_async_t    g_RtnObjectAttrTopic_async;
int           g_RtnObjectAttrTopic_trans_callbackNumb = 0;
int           g_RtnObjectAttrTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryInvalidateOrderTopic_queue;
uv_mutex_t    g_RspQryInvalidateOrderTopic_mutex;
uv_async_t    g_RspQryInvalidateOrderTopic_async;
int           g_RspQryInvalidateOrderTopic_trans_callbackNumb = 0;
int           g_RspQryInvalidateOrderTopic_trans_dataNumb     = 0;

queue<void**> g_RtnInvalidateOrderTopic_queue;
uv_mutex_t    g_RtnInvalidateOrderTopic_mutex;
uv_async_t    g_RtnInvalidateOrderTopic_async;
int           g_RtnInvalidateOrderTopic_trans_callbackNumb = 0;
int           g_RtnInvalidateOrderTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryOrderStatusTopic_queue;
uv_mutex_t    g_RspQryOrderStatusTopic_mutex;
uv_async_t    g_RspQryOrderStatusTopic_async;
int           g_RspQryOrderStatusTopic_trans_callbackNumb = 0;
int           g_RspQryOrderStatusTopic_trans_dataNumb     = 0;

queue<void**> g_RtnOrderStatusTopic_queue;
uv_mutex_t    g_RtnOrderStatusTopic_mutex;
uv_async_t    g_RtnOrderStatusTopic_async;
int           g_RtnOrderStatusTopic_trans_callbackNumb = 0;
int           g_RtnOrderStatusTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryBargainOrderTopic_queue;
uv_mutex_t    g_RspQryBargainOrderTopic_mutex;
uv_async_t    g_RspQryBargainOrderTopic_async;
int           g_RspQryBargainOrderTopic_trans_callbackNumb = 0;
int           g_RspQryBargainOrderTopic_trans_dataNumb     = 0;

queue<void**> g_RtnBargainOrderTopic_queue;
uv_mutex_t    g_RtnBargainOrderTopic_mutex;
uv_async_t    g_RtnBargainOrderTopic_async;
int           g_RtnBargainOrderTopic_trans_callbackNumb = 0;
int           g_RtnBargainOrderTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryInstPropertyTopic_queue;
uv_mutex_t    g_RspQryInstPropertyTopic_mutex;
uv_async_t    g_RspQryInstPropertyTopic_async;
int           g_RspQryInstPropertyTopic_trans_callbackNumb = 0;
int           g_RspQryInstPropertyTopic_trans_dataNumb     = 0;

queue<void**> g_RtnInstPropertyTopic_queue;
uv_mutex_t    g_RtnInstPropertyTopic_mutex;
uv_async_t    g_RtnInstPropertyTopic_async;
int           g_RtnInstPropertyTopic_trans_callbackNumb = 0;
int           g_RtnInstPropertyTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryMarginRateTopic_queue;
uv_mutex_t    g_RspQryMarginRateTopic_mutex;
uv_async_t    g_RspQryMarginRateTopic_async;
int           g_RspQryMarginRateTopic_trans_callbackNumb = 0;
int           g_RspQryMarginRateTopic_trans_dataNumb     = 0;

queue<void**> g_RtnMarginRateTopic_queue;
uv_mutex_t    g_RtnMarginRateTopic_mutex;
uv_async_t    g_RtnMarginRateTopic_async;
int           g_RtnMarginRateTopic_trans_callbackNumb = 0;
int           g_RtnMarginRateTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryPriceLimitTopic_queue;
uv_mutex_t    g_RspQryPriceLimitTopic_mutex;
uv_async_t    g_RspQryPriceLimitTopic_async;
int           g_RspQryPriceLimitTopic_trans_callbackNumb = 0;
int           g_RspQryPriceLimitTopic_trans_dataNumb     = 0;

queue<void**> g_RtnPriceLimitTopic_queue;
uv_mutex_t    g_RtnPriceLimitTopic_mutex;
uv_async_t    g_RtnPriceLimitTopic_async;
int           g_RtnPriceLimitTopic_trans_callbackNumb = 0;
int           g_RtnPriceLimitTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryPartPosiLimitTopic_queue;
uv_mutex_t    g_RspQryPartPosiLimitTopic_mutex;
uv_async_t    g_RspQryPartPosiLimitTopic_async;
int           g_RspQryPartPosiLimitTopic_trans_callbackNumb = 0;
int           g_RspQryPartPosiLimitTopic_trans_dataNumb     = 0;

queue<void**> g_RtnPartPosiLimitTopic_queue;
uv_mutex_t    g_RtnPartPosiLimitTopic_mutex;
uv_async_t    g_RtnPartPosiLimitTopic_async;
int           g_RtnPartPosiLimitTopic_trans_callbackNumb = 0;
int           g_RtnPartPosiLimitTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryClientPosiLimitTopic_queue;
uv_mutex_t    g_RspQryClientPosiLimitTopic_mutex;
uv_async_t    g_RspQryClientPosiLimitTopic_async;
int           g_RspQryClientPosiLimitTopic_trans_callbackNumb = 0;
int           g_RspQryClientPosiLimitTopic_trans_dataNumb     = 0;

queue<void**> g_RtnClientPosiLimitTopic_queue;
uv_mutex_t    g_RtnClientPosiLimitTopic_mutex;
uv_async_t    g_RtnClientPosiLimitTopic_async;
int           g_RtnClientPosiLimitTopic_trans_callbackNumb = 0;
int           g_RtnClientPosiLimitTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySpecialPosiLimitTopic_queue;
uv_mutex_t    g_RspQrySpecialPosiLimitTopic_mutex;
uv_async_t    g_RspQrySpecialPosiLimitTopic_async;
int           g_RspQrySpecialPosiLimitTopic_trans_callbackNumb = 0;
int           g_RspQrySpecialPosiLimitTopic_trans_dataNumb     = 0;

queue<void**> g_RtnSpecialPosiLimitTopic_queue;
uv_mutex_t    g_RtnSpecialPosiLimitTopic_mutex;
uv_async_t    g_RtnSpecialPosiLimitTopic_async;
int           g_RtnSpecialPosiLimitTopic_trans_callbackNumb = 0;
int           g_RtnSpecialPosiLimitTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryTransactionChgTopic_queue;
uv_mutex_t    g_RspQryTransactionChgTopic_mutex;
uv_async_t    g_RspQryTransactionChgTopic_async;
int           g_RspQryTransactionChgTopic_trans_callbackNumb = 0;
int           g_RspQryTransactionChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnTransactionChgTopic_queue;
uv_mutex_t    g_RtnTransactionChgTopic_mutex;
uv_async_t    g_RtnTransactionChgTopic_async;
int           g_RtnTransactionChgTopic_trans_callbackNumb = 0;
int           g_RtnTransactionChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryClientChgTopic_queue;
uv_mutex_t    g_RspQryClientChgTopic_mutex;
uv_async_t    g_RspQryClientChgTopic_async;
int           g_RspQryClientChgTopic_trans_callbackNumb = 0;
int           g_RspQryClientChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnClientChgTopic_queue;
uv_mutex_t    g_RtnClientChgTopic_mutex;
uv_async_t    g_RtnClientChgTopic_async;
int           g_RtnClientChgTopic_trans_callbackNumb = 0;
int           g_RtnClientChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryPartClientChgTopic_queue;
uv_mutex_t    g_RspQryPartClientChgTopic_mutex;
uv_async_t    g_RspQryPartClientChgTopic_async;
int           g_RspQryPartClientChgTopic_trans_callbackNumb = 0;
int           g_RspQryPartClientChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnPartClientChgTopic_queue;
uv_mutex_t    g_RtnPartClientChgTopic_mutex;
uv_async_t    g_RtnPartClientChgTopic_async;
int           g_RtnPartClientChgTopic_trans_callbackNumb = 0;
int           g_RtnPartClientChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryPosiLimitChgTopic_queue;
uv_mutex_t    g_RspQryPosiLimitChgTopic_mutex;
uv_async_t    g_RspQryPosiLimitChgTopic_async;
int           g_RspQryPosiLimitChgTopic_trans_callbackNumb = 0;
int           g_RspQryPosiLimitChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnPosiLimitChgTopic_queue;
uv_mutex_t    g_RtnPosiLimitChgTopic_mutex;
uv_async_t    g_RtnPosiLimitChgTopic_async;
int           g_RtnPosiLimitChgTopic_trans_callbackNumb = 0;
int           g_RtnPosiLimitChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryHedgeDetailChgTopic_queue;
uv_mutex_t    g_RspQryHedgeDetailChgTopic_mutex;
uv_async_t    g_RspQryHedgeDetailChgTopic_async;
int           g_RspQryHedgeDetailChgTopic_trans_callbackNumb = 0;
int           g_RspQryHedgeDetailChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnHedgeDetailChgTopic_queue;
uv_mutex_t    g_RtnHedgeDetailChgTopic_mutex;
uv_async_t    g_RtnHedgeDetailChgTopic_async;
int           g_RtnHedgeDetailChgTopic_trans_callbackNumb = 0;
int           g_RtnHedgeDetailChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryParticipantChgTopic_queue;
uv_mutex_t    g_RspQryParticipantChgTopic_mutex;
uv_async_t    g_RspQryParticipantChgTopic_async;
int           g_RspQryParticipantChgTopic_trans_callbackNumb = 0;
int           g_RspQryParticipantChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnParticipantChgTopic_queue;
uv_mutex_t    g_RtnParticipantChgTopic_mutex;
uv_async_t    g_RtnParticipantChgTopic_async;
int           g_RtnParticipantChgTopic_trans_callbackNumb = 0;
int           g_RtnParticipantChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryMarginRateChgTopic_queue;
uv_mutex_t    g_RspQryMarginRateChgTopic_mutex;
uv_async_t    g_RspQryMarginRateChgTopic_async;
int           g_RspQryMarginRateChgTopic_trans_callbackNumb = 0;
int           g_RspQryMarginRateChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnMarginRateChgTopic_queue;
uv_mutex_t    g_RtnMarginRateChgTopic_mutex;
uv_async_t    g_RtnMarginRateChgTopic_async;
int           g_RtnMarginRateChgTopic_trans_callbackNumb = 0;
int           g_RtnMarginRateChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryUserIpChgTopic_queue;
uv_mutex_t    g_RspQryUserIpChgTopic_mutex;
uv_async_t    g_RspQryUserIpChgTopic_async;
int           g_RspQryUserIpChgTopic_trans_callbackNumb = 0;
int           g_RspQryUserIpChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnUserIpChgTopic_queue;
uv_mutex_t    g_RtnUserIpChgTopic_mutex;
uv_async_t    g_RtnUserIpChgTopic_async;
int           g_RtnUserIpChgTopic_trans_callbackNumb = 0;
int           g_RtnUserIpChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryClientPosiLimitChgTopic_queue;
uv_mutex_t    g_RspQryClientPosiLimitChgTopic_mutex;
uv_async_t    g_RspQryClientPosiLimitChgTopic_async;
int           g_RspQryClientPosiLimitChgTopic_trans_callbackNumb = 0;
int           g_RspQryClientPosiLimitChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnClientPosiLimitChgTopic_queue;
uv_mutex_t    g_RtnClientPosiLimitChgTopic_mutex;
uv_async_t    g_RtnClientPosiLimitChgTopic_async;
int           g_RtnClientPosiLimitChgTopic_trans_callbackNumb = 0;
int           g_RtnClientPosiLimitChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySpecPosiLimitChgTopic_queue;
uv_mutex_t    g_RspQrySpecPosiLimitChgTopic_mutex;
uv_async_t    g_RspQrySpecPosiLimitChgTopic_async;
int           g_RspQrySpecPosiLimitChgTopic_trans_callbackNumb = 0;
int           g_RspQrySpecPosiLimitChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnSpecPosiLimitChgTopic_queue;
uv_mutex_t    g_RtnSpecPosiLimitChgTopic_mutex;
uv_async_t    g_RtnSpecPosiLimitChgTopic_async;
int           g_RtnSpecPosiLimitChgTopic_trans_callbackNumb = 0;
int           g_RtnSpecPosiLimitChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryHistoryObjectAttrTopic_queue;
uv_mutex_t    g_RspQryHistoryObjectAttrTopic_mutex;
uv_async_t    g_RspQryHistoryObjectAttrTopic_async;
int           g_RspQryHistoryObjectAttrTopic_trans_callbackNumb = 0;
int           g_RspQryHistoryObjectAttrTopic_trans_dataNumb     = 0;

queue<void**> g_RtnHistoryObjectAttrTopic_queue;
uv_mutex_t    g_RtnHistoryObjectAttrTopic_mutex;
uv_async_t    g_RtnHistoryObjectAttrTopic_async;
int           g_RtnHistoryObjectAttrTopic_trans_callbackNumb = 0;
int           g_RtnHistoryObjectAttrTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryFrontInfoTopic_queue;
uv_mutex_t    g_RspQryFrontInfoTopic_mutex;
uv_async_t    g_RspQryFrontInfoTopic_async;
int           g_RspQryFrontInfoTopic_trans_callbackNumb = 0;
int           g_RspQryFrontInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnFrontInfoTopic_queue;
uv_mutex_t    g_RtnFrontInfoTopic_mutex;
uv_async_t    g_RtnFrontInfoTopic_async;
int           g_RtnFrontInfoTopic_trans_callbackNumb = 0;
int           g_RtnFrontInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySysUserLoginTopic_queue;
uv_mutex_t    g_RspQrySysUserLoginTopic_mutex;
uv_async_t    g_RspQrySysUserLoginTopic_async;
int           g_RspQrySysUserLoginTopic_trans_callbackNumb = 0;
int           g_RspQrySysUserLoginTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySysUserLogoutTopic_queue;
uv_mutex_t    g_RspQrySysUserLogoutTopic_mutex;
uv_async_t    g_RspQrySysUserLogoutTopic_async;
int           g_RspQrySysUserLogoutTopic_trans_callbackNumb = 0;
int           g_RspQrySysUserLogoutTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySysUserPasswordUpdateTopic_queue;
uv_mutex_t    g_RspQrySysUserPasswordUpdateTopic_mutex;
uv_async_t    g_RspQrySysUserPasswordUpdateTopic_async;
int           g_RspQrySysUserPasswordUpdateTopic_trans_callbackNumb = 0;
int           g_RspQrySysUserPasswordUpdateTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySysUserRegisterTopic_queue;
uv_mutex_t    g_RspQrySysUserRegisterTopic_mutex;
uv_async_t    g_RspQrySysUserRegisterTopic_async;
int           g_RspQrySysUserRegisterTopic_trans_callbackNumb = 0;
int           g_RspQrySysUserRegisterTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySysUserDeleteTopic_queue;
uv_mutex_t    g_RspQrySysUserDeleteTopic_mutex;
uv_async_t    g_RspQrySysUserDeleteTopic_async;
int           g_RspQrySysUserDeleteTopic_trans_callbackNumb = 0;
int           g_RspQrySysUserDeleteTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryParticipantInitTopic_queue;
uv_mutex_t    g_RspQryParticipantInitTopic_mutex;
uv_async_t    g_RspQryParticipantInitTopic_async;
int           g_RspQryParticipantInitTopic_trans_callbackNumb = 0;
int           g_RspQryParticipantInitTopic_trans_dataNumb     = 0;

queue<void**> g_RtnParticipantInitTopic_queue;
uv_mutex_t    g_RtnParticipantInitTopic_mutex;
uv_async_t    g_RtnParticipantInitTopic_async;
int           g_RtnParticipantInitTopic_trans_callbackNumb = 0;
int           g_RtnParticipantInitTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryUserInitTopic_queue;
uv_mutex_t    g_RspQryUserInitTopic_mutex;
uv_async_t    g_RspQryUserInitTopic_async;
int           g_RspQryUserInitTopic_trans_callbackNumb = 0;
int           g_RspQryUserInitTopic_trans_dataNumb     = 0;

queue<void**> g_RtnUserInitTopic_queue;
uv_mutex_t    g_RtnUserInitTopic_mutex;
uv_async_t    g_RtnUserInitTopic_async;
int           g_RtnUserInitTopic_trans_callbackNumb = 0;
int           g_RtnUserInitTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryClientInitTopic_queue;
uv_mutex_t    g_RspQryClientInitTopic_mutex;
uv_async_t    g_RspQryClientInitTopic_async;
int           g_RspQryClientInitTopic_trans_callbackNumb = 0;
int           g_RspQryClientInitTopic_trans_dataNumb     = 0;

queue<void**> g_RtnClientInitTopic_queue;
uv_mutex_t    g_RtnClientInitTopic_mutex;
uv_async_t    g_RtnClientInitTopic_async;
int           g_RtnClientInitTopic_trans_callbackNumb = 0;
int           g_RtnClientInitTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryTradeLogTopic_queue;
uv_mutex_t    g_RspQryTradeLogTopic_mutex;
uv_async_t    g_RspQryTradeLogTopic_async;
int           g_RspQryTradeLogTopic_trans_callbackNumb = 0;
int           g_RspQryTradeLogTopic_trans_dataNumb     = 0;

queue<void**> g_RtnTradeLogTopic_queue;
uv_mutex_t    g_RtnTradeLogTopic_mutex;
uv_async_t    g_RtnTradeLogTopic_async;
int           g_RtnTradeLogTopic_trans_callbackNumb = 0;
int           g_RtnTradeLogTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryTradeUserLoginInfoTopic_queue;
uv_mutex_t    g_RspQryTradeUserLoginInfoTopic_mutex;
uv_async_t    g_RspQryTradeUserLoginInfoTopic_async;
int           g_RspQryTradeUserLoginInfoTopic_trans_callbackNumb = 0;
int           g_RspQryTradeUserLoginInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnTradeUserLoginInfoTopic_queue;
uv_mutex_t    g_RtnTradeUserLoginInfoTopic_mutex;
uv_async_t    g_RtnTradeUserLoginInfoTopic_async;
int           g_RtnTradeUserLoginInfoTopic_trans_callbackNumb = 0;
int           g_RtnTradeUserLoginInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryPartTradeTopic_queue;
uv_mutex_t    g_RspQryPartTradeTopic_mutex;
uv_async_t    g_RspQryPartTradeTopic_async;
int           g_RspQryPartTradeTopic_trans_callbackNumb = 0;
int           g_RspQryPartTradeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryTradepeakTopic_queue;
uv_mutex_t    g_RspQryTradepeakTopic_mutex;
uv_async_t    g_RspQryTradepeakTopic_async;
int           g_RspQryTradepeakTopic_trans_callbackNumb = 0;
int           g_RspQryTradepeakTopic_trans_dataNumb     = 0;

queue<void**> g_RtnUpdateSysConfigTopic_queue;
uv_mutex_t    g_RtnUpdateSysConfigTopic_mutex;
uv_async_t    g_RtnUpdateSysConfigTopic_async;
int           g_RtnUpdateSysConfigTopic_trans_callbackNumb = 0;
int           g_RtnUpdateSysConfigTopic_trans_dataNumb     = 0;

queue<void**> g_RtnSysUser_queue;
uv_mutex_t    g_RtnSysUser_mutex;
uv_async_t    g_RtnSysUser_async;
int           g_RtnSysUser_trans_callbackNumb = 0;
int           g_RtnSysUser_trans_dataNumb     = 0;

queue<void**> g_RtnPriceLimitChgTopic_queue;
uv_mutex_t    g_RtnPriceLimitChgTopic_mutex;
uv_async_t    g_RtnPriceLimitChgTopic_async;
int           g_RtnPriceLimitChgTopic_trans_callbackNumb = 0;
int           g_RtnPriceLimitChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryHistoryCpuInfoTopic_queue;
uv_mutex_t    g_RspQryHistoryCpuInfoTopic_mutex;
uv_async_t    g_RspQryHistoryCpuInfoTopic_async;
int           g_RspQryHistoryCpuInfoTopic_trans_callbackNumb = 0;
int           g_RspQryHistoryCpuInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryHistoryMemInfoTopic_queue;
uv_mutex_t    g_RspQryHistoryMemInfoTopic_mutex;
uv_async_t    g_RspQryHistoryMemInfoTopic_async;
int           g_RspQryHistoryMemInfoTopic_trans_callbackNumb = 0;
int           g_RspQryHistoryMemInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryHistoryNetworkInfoTopic_queue;
uv_mutex_t    g_RspQryHistoryNetworkInfoTopic_mutex;
uv_async_t    g_RspQryHistoryNetworkInfoTopic_async;
int           g_RspQryHistoryNetworkInfoTopic_trans_callbackNumb = 0;
int           g_RspQryHistoryNetworkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryMonitorOnlineUser_queue;
uv_mutex_t    g_RspQryMonitorOnlineUser_mutex;
uv_async_t    g_RspQryMonitorOnlineUser_async;
int           g_RspQryMonitorOnlineUser_trans_callbackNumb = 0;
int           g_RspQryMonitorOnlineUser_trans_dataNumb     = 0;

queue<void**> g_RspQryFrontStat_queue;
uv_mutex_t    g_RspQryFrontStat_mutex;
uv_async_t    g_RspQryFrontStat_async;
int           g_RspQryFrontStat_trans_callbackNumb = 0;
int           g_RspQryFrontStat_trans_dataNumb     = 0;

queue<void**> g_RtnSysTimeSyncTopic_queue;
uv_mutex_t    g_RtnSysTimeSyncTopic_mutex;
uv_async_t    g_RtnSysTimeSyncTopic_async;
int           g_RtnSysTimeSyncTopic_trans_callbackNumb = 0;
int           g_RtnSysTimeSyncTopic_trans_dataNumb     = 0;

queue<void**> g_RtnDataCenterChgTopic_queue;
uv_mutex_t    g_RtnDataCenterChgTopic_mutex;
uv_async_t    g_RtnDataCenterChgTopic_async;
int           g_RtnDataCenterChgTopic_trans_callbackNumb = 0;
int           g_RtnDataCenterChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryHistoryTradePeakTopic_queue;
uv_mutex_t    g_RspQryHistoryTradePeakTopic_mutex;
uv_async_t    g_RspQryHistoryTradePeakTopic_async;
int           g_RspQryHistoryTradePeakTopic_trans_callbackNumb = 0;
int           g_RspQryHistoryTradePeakTopic_trans_dataNumb     = 0;

queue<void**> g_RtnHistoryTradePeakTopic_queue;
uv_mutex_t    g_RtnHistoryTradePeakTopic_mutex;
uv_async_t    g_RtnHistoryTradePeakTopic_async;
int           g_RtnHistoryTradePeakTopic_trans_callbackNumb = 0;
int           g_RtnHistoryTradePeakTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySyslogEventTopic_queue;
uv_mutex_t    g_RspQrySyslogEventTopic_mutex;
uv_async_t    g_RspQrySyslogEventTopic_async;
int           g_RspQrySyslogEventTopic_trans_callbackNumb = 0;
int           g_RspQrySyslogEventTopic_trans_dataNumb     = 0;

queue<void**> g_RtnSyslogEventTopic_queue;
uv_mutex_t    g_RtnSyslogEventTopic_mutex;
uv_async_t    g_RtnSyslogEventTopic_async;
int           g_RtnSyslogEventTopic_trans_callbackNumb = 0;
int           g_RtnSyslogEventTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryTradeDayChangeTopic_queue;
uv_mutex_t    g_RspQryTradeDayChangeTopic_mutex;
uv_async_t    g_RspQryTradeDayChangeTopic_async;
int           g_RspQryTradeDayChangeTopic_trans_callbackNumb = 0;
int           g_RspQryTradeDayChangeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryWebAppInfoTopic_queue;
uv_mutex_t    g_RspQryWebAppInfoTopic_mutex;
uv_async_t    g_RspQryWebAppInfoTopic_async;
int           g_RspQryWebAppInfoTopic_trans_callbackNumb = 0;
int           g_RspQryWebAppInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnWebAppInfoTopic_queue;
uv_mutex_t    g_RtnWebAppInfoTopic_mutex;
uv_async_t    g_RtnWebAppInfoTopic_async;
int           g_RtnWebAppInfoTopic_trans_callbackNumb = 0;
int           g_RtnWebAppInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryServletInfoTopic_queue;
uv_mutex_t    g_RspQryServletInfoTopic_mutex;
uv_async_t    g_RspQryServletInfoTopic_async;
int           g_RspQryServletInfoTopic_trans_callbackNumb = 0;
int           g_RspQryServletInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnServletInfoTopic_queue;
uv_mutex_t    g_RtnServletInfoTopic_mutex;
uv_async_t    g_RtnServletInfoTopic_async;
int           g_RtnServletInfoTopic_trans_callbackNumb = 0;
int           g_RtnServletInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryFileInfoTopic_queue;
uv_mutex_t    g_RspQryFileInfoTopic_mutex;
uv_async_t    g_RspQryFileInfoTopic_async;
int           g_RspQryFileInfoTopic_trans_callbackNumb = 0;
int           g_RspQryFileInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnFileInfoTopic_queue;
uv_mutex_t    g_RtnFileInfoTopic_mutex;
uv_async_t    g_RtnFileInfoTopic_async;
int           g_RtnFileInfoTopic_trans_callbackNumb = 0;
int           g_RtnFileInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQrySessionInfoTopic_queue;
uv_mutex_t    g_RspQrySessionInfoTopic_mutex;
uv_async_t    g_RspQrySessionInfoTopic_async;
int           g_RspQrySessionInfoTopic_trans_callbackNumb = 0;
int           g_RspQrySessionInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnSessionInfoTopic_queue;
uv_mutex_t    g_RtnSessionInfoTopic_mutex;
uv_async_t    g_RtnSessionInfoTopic_async;
int           g_RtnSessionInfoTopic_trans_callbackNumb = 0;
int           g_RtnSessionInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryJDBCInfoTopic_queue;
uv_mutex_t    g_RspQryJDBCInfoTopic_mutex;
uv_async_t    g_RspQryJDBCInfoTopic_async;
int           g_RspQryJDBCInfoTopic_trans_callbackNumb = 0;
int           g_RspQryJDBCInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnJDBCInfoTopic_queue;
uv_mutex_t    g_RtnJDBCInfoTopic_mutex;
uv_async_t    g_RtnJDBCInfoTopic_async;
int           g_RtnJDBCInfoTopic_trans_callbackNumb = 0;
int           g_RtnJDBCInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryThreadInfoTopic_queue;
uv_mutex_t    g_RspQryThreadInfoTopic_mutex;
uv_async_t    g_RspQryThreadInfoTopic_async;
int           g_RspQryThreadInfoTopic_trans_callbackNumb = 0;
int           g_RspQryThreadInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnThreadInfoTopic_queue;
uv_mutex_t    g_RtnThreadInfoTopic_mutex;
uv_async_t    g_RtnThreadInfoTopic_async;
int           g_RtnThreadInfoTopic_trans_callbackNumb = 0;
int           g_RtnThreadInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryVMInfoTopic_queue;
uv_mutex_t    g_RspQryVMInfoTopic_mutex;
uv_async_t    g_RspQryVMInfoTopic_async;
int           g_RspQryVMInfoTopic_trans_callbackNumb = 0;
int           g_RspQryVMInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnVMInfoTopic_queue;
uv_mutex_t    g_RtnVMInfoTopic_mutex;
uv_async_t    g_RtnVMInfoTopic_async;
int           g_RtnVMInfoTopic_trans_callbackNumb = 0;
int           g_RtnVMInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryPropertyInfoTopic_queue;
uv_mutex_t    g_RspQryPropertyInfoTopic_mutex;
uv_async_t    g_RspQryPropertyInfoTopic_async;
int           g_RspQryPropertyInfoTopic_trans_callbackNumb = 0;
int           g_RspQryPropertyInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnPropertyInfoTopic_queue;
uv_mutex_t    g_RtnPropertyInfoTopic_mutex;
uv_async_t    g_RtnPropertyInfoTopic_async;
int           g_RtnPropertyInfoTopic_trans_callbackNumb = 0;
int           g_RtnPropertyInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryMemPoolInfoTopic_queue;
uv_mutex_t    g_RspQryMemPoolInfoTopic_mutex;
uv_async_t    g_RspQryMemPoolInfoTopic_async;
int           g_RspQryMemPoolInfoTopic_trans_callbackNumb = 0;
int           g_RspQryMemPoolInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnMemPoolInfoTopic_queue;
uv_mutex_t    g_RtnMemPoolInfoTopic_mutex;
uv_async_t    g_RtnMemPoolInfoTopic_async;
int           g_RtnMemPoolInfoTopic_trans_callbackNumb = 0;
int           g_RtnMemPoolInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryFileContentInfoTopic_queue;
uv_mutex_t    g_RspQryFileContentInfoTopic_mutex;
uv_async_t    g_RspQryFileContentInfoTopic_async;
int           g_RspQryFileContentInfoTopic_trans_callbackNumb = 0;
int           g_RspQryFileContentInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnFileContentInfoTopic_queue;
uv_mutex_t    g_RtnFileContentInfoTopic_mutex;
uv_async_t    g_RtnFileContentInfoTopic_async;
int           g_RtnFileContentInfoTopic_trans_callbackNumb = 0;
int           g_RtnFileContentInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryConnectionInfoTopic_queue;
uv_mutex_t    g_RspQryConnectionInfoTopic_mutex;
uv_async_t    g_RspQryConnectionInfoTopic_async;
int           g_RspQryConnectionInfoTopic_trans_callbackNumb = 0;
int           g_RspQryConnectionInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnConnectionInfoTopic_queue;
uv_mutex_t    g_RtnConnectionInfoTopic_mutex;
uv_async_t    g_RtnConnectionInfoTopic_async;
int           g_RtnConnectionInfoTopic_trans_callbackNumb = 0;
int           g_RtnConnectionInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryConnectorInfoTopic_queue;
uv_mutex_t    g_RspQryConnectorInfoTopic_mutex;
uv_async_t    g_RspQryConnectorInfoTopic_async;
int           g_RspQryConnectorInfoTopic_trans_callbackNumb = 0;
int           g_RspQryConnectorInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnConnectorInfoTopic_queue;
uv_mutex_t    g_RtnConnectorInfoTopic_mutex;
uv_async_t    g_RtnConnectorInfoTopic_async;
int           g_RtnConnectorInfoTopic_trans_callbackNumb = 0;
int           g_RtnConnectorInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryDBQueryTopic_queue;
uv_mutex_t    g_RspQryDBQueryTopic_mutex;
uv_async_t    g_RspQryDBQueryTopic_async;
int           g_RspQryDBQueryTopic_trans_callbackNumb = 0;
int           g_RspQryDBQueryTopic_trans_dataNumb     = 0;

queue<void**> g_RtnDBQueryTopic_queue;
uv_mutex_t    g_RtnDBQueryTopic_mutex;
uv_async_t    g_RtnDBQueryTopic_async;
int           g_RtnDBQueryTopic_trans_callbackNumb = 0;
int           g_RtnDBQueryTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryGeneralFieldTopic_queue;
uv_mutex_t    g_RspQryGeneralFieldTopic_mutex;
uv_async_t    g_RspQryGeneralFieldTopic_async;
int           g_RspQryGeneralFieldTopic_trans_callbackNumb = 0;
int           g_RspQryGeneralFieldTopic_trans_dataNumb     = 0;

queue<void**> g_RtnGeneralFieldTopic_queue;
uv_mutex_t    g_RtnGeneralFieldTopic_mutex;
uv_async_t    g_RtnGeneralFieldTopic_async;
int           g_RtnGeneralFieldTopic_trans_callbackNumb = 0;
int           g_RtnGeneralFieldTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryGetFileTopic_queue;
uv_mutex_t    g_RspQryGetFileTopic_mutex;
uv_async_t    g_RspQryGetFileTopic_async;
int           g_RspQryGetFileTopic_trans_callbackNumb = 0;
int           g_RspQryGetFileTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryWarningQueryTopic_queue;
uv_mutex_t    g_RspQryWarningQueryTopic_mutex;
uv_async_t    g_RspQryWarningQueryTopic_async;
int           g_RspQryWarningQueryTopic_trans_callbackNumb = 0;
int           g_RspQryWarningQueryTopic_trans_dataNumb     = 0;

queue<void**> g_RtnWarningQueryTopic_queue;
uv_mutex_t    g_RtnWarningQueryTopic_mutex;
uv_async_t    g_RtnWarningQueryTopic_async;
int           g_RtnWarningQueryTopic_trans_callbackNumb = 0;
int           g_RtnWarningQueryTopic_trans_dataNumb     = 0;

queue<void**> g_RtnHostConfig_queue;
uv_mutex_t    g_RtnHostConfig_mutex;
uv_async_t    g_RtnHostConfig_async;
int           g_RtnHostConfig_trans_callbackNumb = 0;
int           g_RtnHostConfig_trans_dataNumb     = 0;

queue<void**> g_RspQryGeneralOperateTopic_queue;
uv_mutex_t    g_RspQryGeneralOperateTopic_mutex;
uv_async_t    g_RspQryGeneralOperateTopic_async;
int           g_RspQryGeneralOperateTopic_trans_callbackNumb = 0;
int           g_RspQryGeneralOperateTopic_trans_dataNumb     = 0;

queue<void**> g_RtnGeneralOperateTopic_queue;
uv_mutex_t    g_RtnGeneralOperateTopic_mutex;
uv_async_t    g_RtnGeneralOperateTopic_async;
int           g_RtnGeneralOperateTopic_trans_callbackNumb = 0;
int           g_RtnGeneralOperateTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetDeviceLinkedTopic_queue;
uv_mutex_t    g_RspQryNetDeviceLinkedTopic_mutex;
uv_async_t    g_RspQryNetDeviceLinkedTopic_async;
int           g_RspQryNetDeviceLinkedTopic_trans_callbackNumb = 0;
int           g_RspQryNetDeviceLinkedTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetDeviceLinkedTopic_queue;
uv_mutex_t    g_RtnNetDeviceLinkedTopic_mutex;
uv_async_t    g_RtnNetDeviceLinkedTopic_async;
int           g_RtnNetDeviceLinkedTopic_trans_callbackNumb = 0;
int           g_RtnNetDeviceLinkedTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryTradeUserLoginStatTopic_queue;
uv_mutex_t    g_RspQryTradeUserLoginStatTopic_mutex;
uv_async_t    g_RspQryTradeUserLoginStatTopic_async;
int           g_RspQryTradeUserLoginStatTopic_trans_callbackNumb = 0;
int           g_RspQryTradeUserLoginStatTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryTradeFrontOrderRttStatTopic_queue;
uv_mutex_t    g_RspQryTradeFrontOrderRttStatTopic_mutex;
uv_async_t    g_RspQryTradeFrontOrderRttStatTopic_async;
int           g_RspQryTradeFrontOrderRttStatTopic_trans_callbackNumb = 0;
int           g_RspQryTradeFrontOrderRttStatTopic_trans_dataNumb     = 0;

queue<void**> g_RtnTradeFrontOrderRttStatTopic_queue;
uv_mutex_t    g_RtnTradeFrontOrderRttStatTopic_mutex;
uv_async_t    g_RtnTradeFrontOrderRttStatTopic_async;
int           g_RtnTradeFrontOrderRttStatTopic_trans_callbackNumb = 0;
int           g_RtnTradeFrontOrderRttStatTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryParticTradeOrderStatesTopic_queue;
uv_mutex_t    g_RspQryParticTradeOrderStatesTopic_mutex;
uv_async_t    g_RspQryParticTradeOrderStatesTopic_async;
int           g_RspQryParticTradeOrderStatesTopic_trans_callbackNumb = 0;
int           g_RspQryParticTradeOrderStatesTopic_trans_dataNumb     = 0;

queue<void**> g_RtnParticTradeOrderStatesTopic_queue;
uv_mutex_t    g_RtnParticTradeOrderStatesTopic_mutex;
uv_async_t    g_RtnParticTradeOrderStatesTopic_async;
int           g_RtnParticTradeOrderStatesTopic_trans_callbackNumb = 0;
int           g_RtnParticTradeOrderStatesTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryRouterInfoTopic_queue;
uv_mutex_t    g_RspQryRouterInfoTopic_mutex;
uv_async_t    g_RspQryRouterInfoTopic_async;
int           g_RspQryRouterInfoTopic_trans_callbackNumb = 0;
int           g_RspQryRouterInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnRouterInfoTopic_queue;
uv_mutex_t    g_RtnRouterInfoTopic_mutex;
uv_async_t    g_RtnRouterInfoTopic_async;
int           g_RtnRouterInfoTopic_trans_callbackNumb = 0;
int           g_RtnRouterInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryDiskIOTopic_queue;
uv_mutex_t    g_RspQryDiskIOTopic_mutex;
uv_async_t    g_RspQryDiskIOTopic_async;
int           g_RspQryDiskIOTopic_trans_callbackNumb = 0;
int           g_RspQryDiskIOTopic_trans_dataNumb     = 0;

queue<void**> g_RtnDiskIOTopic_queue;
uv_mutex_t    g_RtnDiskIOTopic_mutex;
uv_async_t    g_RtnDiskIOTopic_async;
int           g_RtnDiskIOTopic_trans_callbackNumb = 0;
int           g_RtnDiskIOTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryStatInfoTopic_queue;
uv_mutex_t    g_RspQryStatInfoTopic_mutex;
uv_async_t    g_RspQryStatInfoTopic_async;
int           g_RspQryStatInfoTopic_trans_callbackNumb = 0;
int           g_RspQryStatInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnStatInfoTopic_queue;
uv_mutex_t    g_RtnStatInfoTopic_mutex;
uv_async_t    g_RtnStatInfoTopic_async;
int           g_RtnStatInfoTopic_trans_callbackNumb = 0;
int           g_RtnStatInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryTradeOrderRttCutLineTopic_queue;
uv_mutex_t    g_RspQryTradeOrderRttCutLineTopic_mutex;
uv_async_t    g_RspQryTradeOrderRttCutLineTopic_async;
int           g_RspQryTradeOrderRttCutLineTopic_trans_callbackNumb = 0;
int           g_RspQryTradeOrderRttCutLineTopic_trans_dataNumb     = 0;

queue<void**> g_RtnTradeOrderRttCutLineTopic_queue;
uv_mutex_t    g_RtnTradeOrderRttCutLineTopic_mutex;
uv_async_t    g_RtnTradeOrderRttCutLineTopic_async;
int           g_RtnTradeOrderRttCutLineTopic_trans_callbackNumb = 0;
int           g_RtnTradeOrderRttCutLineTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryClientInfoTopic_queue;
uv_mutex_t    g_RspQryClientInfoTopic_mutex;
uv_async_t    g_RspQryClientInfoTopic_async;
int           g_RspQryClientInfoTopic_trans_callbackNumb = 0;
int           g_RspQryClientInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnClientInfoTopic_queue;
uv_mutex_t    g_RtnClientInfoTopic_mutex;
uv_async_t    g_RtnClientInfoTopic_async;
int           g_RtnClientInfoTopic_trans_callbackNumb = 0;
int           g_RtnClientInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryEventDescriptionTopic_queue;
uv_mutex_t    g_RspQryEventDescriptionTopic_mutex;
uv_async_t    g_RspQryEventDescriptionTopic_async;
int           g_RspQryEventDescriptionTopic_trans_callbackNumb = 0;
int           g_RspQryEventDescriptionTopic_trans_dataNumb     = 0;

queue<void**> g_RtnEventDescriptionTopic_queue;
uv_mutex_t    g_RtnEventDescriptionTopic_mutex;
uv_async_t    g_RtnEventDescriptionTopic_async;
int           g_RtnEventDescriptionTopic_trans_callbackNumb = 0;
int           g_RtnEventDescriptionTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryFrontUniqueIDTopic_queue;
uv_mutex_t    g_RspQryFrontUniqueIDTopic_mutex;
uv_async_t    g_RspQryFrontUniqueIDTopic_async;
int           g_RspQryFrontUniqueIDTopic_trans_callbackNumb = 0;
int           g_RspQryFrontUniqueIDTopic_trans_dataNumb     = 0;

queue<void**> g_RtnFrontUniqueIDTopic_queue;
uv_mutex_t    g_RtnFrontUniqueIDTopic_mutex;
uv_async_t    g_RtnFrontUniqueIDTopic_async;
int           g_RtnFrontUniqueIDTopic_trans_callbackNumb = 0;
int           g_RtnFrontUniqueIDTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetPartyLinkAddrChangeTopic_queue;
uv_mutex_t    g_RspQryNetPartyLinkAddrChangeTopic_mutex;
uv_async_t    g_RspQryNetPartyLinkAddrChangeTopic_async;
int           g_RspQryNetPartyLinkAddrChangeTopic_trans_callbackNumb = 0;
int           g_RspQryNetPartyLinkAddrChangeTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetPartyLinkAddrChangeTopic_queue;
uv_mutex_t    g_RtnNetPartyLinkAddrChangeTopic_mutex;
uv_async_t    g_RtnNetPartyLinkAddrChangeTopic_async;
int           g_RtnNetPartyLinkAddrChangeTopic_trans_callbackNumb = 0;
int           g_RtnNetPartyLinkAddrChangeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetDelPartyLinkInfoTopic_queue;
uv_mutex_t    g_RspQryNetDelPartyLinkInfoTopic_mutex;
uv_async_t    g_RspQryNetDelPartyLinkInfoTopic_async;
int           g_RspQryNetDelPartyLinkInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetDelPartyLinkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetDelPartyLinkInfoTopic_queue;
uv_mutex_t    g_RtnNetDelPartyLinkInfoTopic_mutex;
uv_async_t    g_RtnNetDelPartyLinkInfoTopic_async;
int           g_RtnNetDelPartyLinkInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetDelPartyLinkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryPerformanceTopTopic_queue;
uv_mutex_t    g_RspQryPerformanceTopTopic_mutex;
uv_async_t    g_RspQryPerformanceTopTopic_async;
int           g_RspQryPerformanceTopTopic_trans_callbackNumb = 0;
int           g_RspQryPerformanceTopTopic_trans_dataNumb     = 0;

queue<void**> g_RtnPerformanceTopTopic_queue;
uv_mutex_t    g_RtnPerformanceTopTopic_mutex;
uv_async_t    g_RtnPerformanceTopTopic_async;
int           g_RtnPerformanceTopTopic_trans_callbackNumb = 0;
int           g_RtnPerformanceTopTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryInstrumentStatusTopic_queue;
uv_mutex_t    g_RspQryInstrumentStatusTopic_mutex;
uv_async_t    g_RspQryInstrumentStatusTopic_async;
int           g_RspQryInstrumentStatusTopic_trans_callbackNumb = 0;
int           g_RspQryInstrumentStatusTopic_trans_dataNumb     = 0;

queue<void**> g_RtnInstrumentStatusTopic_queue;
uv_mutex_t    g_RtnInstrumentStatusTopic_mutex;
uv_async_t    g_RtnInstrumentStatusTopic_async;
int           g_RtnInstrumentStatusTopic_trans_callbackNumb = 0;
int           g_RtnInstrumentStatusTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryCurrTradingSegmentAttrTopic_queue;
uv_mutex_t    g_RspQryCurrTradingSegmentAttrTopic_mutex;
uv_async_t    g_RspQryCurrTradingSegmentAttrTopic_async;
int           g_RspQryCurrTradingSegmentAttrTopic_trans_callbackNumb = 0;
int           g_RspQryCurrTradingSegmentAttrTopic_trans_dataNumb     = 0;

queue<void**> g_RtnCurrTradingSegmentAttrTopic_queue;
uv_mutex_t    g_RtnCurrTradingSegmentAttrTopic_mutex;
uv_async_t    g_RtnCurrTradingSegmentAttrTopic_async;
int           g_RtnCurrTradingSegmentAttrTopic_trans_callbackNumb = 0;
int           g_RtnCurrTradingSegmentAttrTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetAreaTopic_queue;
uv_mutex_t    g_RspQryNetAreaTopic_mutex;
uv_async_t    g_RspQryNetAreaTopic_async;
int           g_RspQryNetAreaTopic_trans_callbackNumb = 0;
int           g_RspQryNetAreaTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetAreaTopic_queue;
uv_mutex_t    g_RtnNetAreaTopic_mutex;
uv_async_t    g_RtnNetAreaTopic_async;
int           g_RtnNetAreaTopic_trans_callbackNumb = 0;
int           g_RtnNetAreaTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetSubAreaTopic_queue;
uv_mutex_t    g_RspQryNetSubAreaTopic_mutex;
uv_async_t    g_RspQryNetSubAreaTopic_async;
int           g_RspQryNetSubAreaTopic_trans_callbackNumb = 0;
int           g_RspQryNetSubAreaTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetSubAreaTopic_queue;
uv_mutex_t    g_RtnNetSubAreaTopic_mutex;
uv_async_t    g_RtnNetSubAreaTopic_async;
int           g_RtnNetSubAreaTopic_trans_callbackNumb = 0;
int           g_RtnNetSubAreaTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetSubAreaIPTopic_queue;
uv_mutex_t    g_RspQryNetSubAreaIPTopic_mutex;
uv_async_t    g_RspQryNetSubAreaIPTopic_async;
int           g_RspQryNetSubAreaIPTopic_trans_callbackNumb = 0;
int           g_RspQryNetSubAreaIPTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetSubAreaIPTopic_queue;
uv_mutex_t    g_RtnNetSubAreaIPTopic_mutex;
uv_async_t    g_RtnNetSubAreaIPTopic_async;
int           g_RtnNetSubAreaIPTopic_trans_callbackNumb = 0;
int           g_RtnNetSubAreaIPTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetDeviceTopic_queue;
uv_mutex_t    g_RspQryNetDeviceTopic_mutex;
uv_async_t    g_RspQryNetDeviceTopic_async;
int           g_RspQryNetDeviceTopic_trans_callbackNumb = 0;
int           g_RspQryNetDeviceTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetDeviceTopic_queue;
uv_mutex_t    g_RtnNetDeviceTopic_mutex;
uv_async_t    g_RtnNetDeviceTopic_async;
int           g_RtnNetDeviceTopic_trans_callbackNumb = 0;
int           g_RtnNetDeviceTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetDeviceDetectTopic_queue;
uv_mutex_t    g_RspQryNetDeviceDetectTopic_mutex;
uv_async_t    g_RspQryNetDeviceDetectTopic_async;
int           g_RspQryNetDeviceDetectTopic_trans_callbackNumb = 0;
int           g_RspQryNetDeviceDetectTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetBuildingTopic_queue;
uv_mutex_t    g_RspQryNetBuildingTopic_mutex;
uv_async_t    g_RspQryNetBuildingTopic_async;
int           g_RspQryNetBuildingTopic_trans_callbackNumb = 0;
int           g_RspQryNetBuildingTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetBuildingTopic_queue;
uv_mutex_t    g_RtnNetBuildingTopic_mutex;
uv_async_t    g_RtnNetBuildingTopic_async;
int           g_RtnNetBuildingTopic_trans_callbackNumb = 0;
int           g_RtnNetBuildingTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetRoomTopic_queue;
uv_mutex_t    g_RspQryNetRoomTopic_mutex;
uv_async_t    g_RspQryNetRoomTopic_async;
int           g_RspQryNetRoomTopic_trans_callbackNumb = 0;
int           g_RspQryNetRoomTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetRoomTopic_queue;
uv_mutex_t    g_RtnNetRoomTopic_mutex;
uv_async_t    g_RtnNetRoomTopic_async;
int           g_RtnNetRoomTopic_trans_callbackNumb = 0;
int           g_RtnNetRoomTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetCabinetsTopic_queue;
uv_mutex_t    g_RspQryNetCabinetsTopic_mutex;
uv_async_t    g_RspQryNetCabinetsTopic_async;
int           g_RspQryNetCabinetsTopic_trans_callbackNumb = 0;
int           g_RspQryNetCabinetsTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetCabinetsTopic_queue;
uv_mutex_t    g_RtnNetCabinetsTopic_mutex;
uv_async_t    g_RtnNetCabinetsTopic_async;
int           g_RtnNetCabinetsTopic_trans_callbackNumb = 0;
int           g_RtnNetCabinetsTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetOIDTopic_queue;
uv_mutex_t    g_RspQryNetOIDTopic_mutex;
uv_async_t    g_RspQryNetOIDTopic_async;
int           g_RspQryNetOIDTopic_trans_callbackNumb = 0;
int           g_RspQryNetOIDTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetOIDTopic_queue;
uv_mutex_t    g_RtnNetOIDTopic_mutex;
uv_async_t    g_RtnNetOIDTopic_async;
int           g_RtnNetOIDTopic_trans_callbackNumb = 0;
int           g_RtnNetOIDTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetTimePolicyTopic_queue;
uv_mutex_t    g_RspQryNetTimePolicyTopic_mutex;
uv_async_t    g_RspQryNetTimePolicyTopic_async;
int           g_RspQryNetTimePolicyTopic_trans_callbackNumb = 0;
int           g_RspQryNetTimePolicyTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetTimePolicyTopic_queue;
uv_mutex_t    g_RtnNetTimePolicyTopic_mutex;
uv_async_t    g_RtnNetTimePolicyTopic_async;
int           g_RtnNetTimePolicyTopic_trans_callbackNumb = 0;
int           g_RtnNetTimePolicyTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetGatherTaskTopic_queue;
uv_mutex_t    g_RspQryNetGatherTaskTopic_mutex;
uv_async_t    g_RspQryNetGatherTaskTopic_async;
int           g_RspQryNetGatherTaskTopic_trans_callbackNumb = 0;
int           g_RspQryNetGatherTaskTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetGatherTaskTopic_queue;
uv_mutex_t    g_RtnNetGatherTaskTopic_mutex;
uv_async_t    g_RtnNetGatherTaskTopic_async;
int           g_RtnNetGatherTaskTopic_trans_callbackNumb = 0;
int           g_RtnNetGatherTaskTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetDeviceChgTopic_queue;
uv_mutex_t    g_RspQryNetDeviceChgTopic_mutex;
uv_async_t    g_RspQryNetDeviceChgTopic_async;
int           g_RspQryNetDeviceChgTopic_trans_callbackNumb = 0;
int           g_RspQryNetDeviceChgTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetDeviceChgTopic_queue;
uv_mutex_t    g_RtnNetDeviceChgTopic_mutex;
uv_async_t    g_RtnNetDeviceChgTopic_async;
int           g_RtnNetDeviceChgTopic_trans_callbackNumb = 0;
int           g_RtnNetDeviceChgTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetDeviceTypeTopic_queue;
uv_mutex_t    g_RspQryNetDeviceTypeTopic_mutex;
uv_async_t    g_RspQryNetDeviceTypeTopic_async;
int           g_RspQryNetDeviceTypeTopic_trans_callbackNumb = 0;
int           g_RspQryNetDeviceTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetDeviceTypeTopic_queue;
uv_mutex_t    g_RtnNetDeviceTypeTopic_mutex;
uv_async_t    g_RtnNetDeviceTypeTopic_async;
int           g_RtnNetDeviceTypeTopic_trans_callbackNumb = 0;
int           g_RtnNetDeviceTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetDeviceCategoryTopic_queue;
uv_mutex_t    g_RspQryNetDeviceCategoryTopic_mutex;
uv_async_t    g_RspQryNetDeviceCategoryTopic_async;
int           g_RspQryNetDeviceCategoryTopic_trans_callbackNumb = 0;
int           g_RspQryNetDeviceCategoryTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetDeviceCategoryTopic_queue;
uv_mutex_t    g_RtnNetDeviceCategoryTopic_mutex;
uv_async_t    g_RtnNetDeviceCategoryTopic_async;
int           g_RtnNetDeviceCategoryTopic_trans_callbackNumb = 0;
int           g_RtnNetDeviceCategoryTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetManufactoryTopic_queue;
uv_mutex_t    g_RspQryNetManufactoryTopic_mutex;
uv_async_t    g_RspQryNetManufactoryTopic_async;
int           g_RspQryNetManufactoryTopic_trans_callbackNumb = 0;
int           g_RspQryNetManufactoryTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetManufactoryTopic_queue;
uv_mutex_t    g_RtnNetManufactoryTopic_mutex;
uv_async_t    g_RtnNetManufactoryTopic_async;
int           g_RtnNetManufactoryTopic_trans_callbackNumb = 0;
int           g_RtnNetManufactoryTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetCommunityTopic_queue;
uv_mutex_t    g_RspQryNetCommunityTopic_mutex;
uv_async_t    g_RspQryNetCommunityTopic_async;
int           g_RspQryNetCommunityTopic_trans_callbackNumb = 0;
int           g_RspQryNetCommunityTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetCommunityTopic_queue;
uv_mutex_t    g_RtnNetCommunityTopic_mutex;
uv_async_t    g_RtnNetCommunityTopic_async;
int           g_RtnNetCommunityTopic_trans_callbackNumb = 0;
int           g_RtnNetCommunityTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetPortTypeTopic_queue;
uv_mutex_t    g_RspQryNetPortTypeTopic_mutex;
uv_async_t    g_RspQryNetPortTypeTopic_async;
int           g_RspQryNetPortTypeTopic_trans_callbackNumb = 0;
int           g_RspQryNetPortTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetPortTypeTopic_queue;
uv_mutex_t    g_RtnNetPortTypeTopic_mutex;
uv_async_t    g_RtnNetPortTypeTopic_async;
int           g_RtnNetPortTypeTopic_trans_callbackNumb = 0;
int           g_RtnNetPortTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetPartAccessSpotTopic_queue;
uv_mutex_t    g_RspQryNetPartAccessSpotTopic_mutex;
uv_async_t    g_RspQryNetPartAccessSpotTopic_async;
int           g_RspQryNetPartAccessSpotTopic_trans_callbackNumb = 0;
int           g_RspQryNetPartAccessSpotTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetPartAccessSpotTopic_queue;
uv_mutex_t    g_RtnNetPartAccessSpotTopic_mutex;
uv_async_t    g_RtnNetPartAccessSpotTopic_async;
int           g_RtnNetPartAccessSpotTopic_trans_callbackNumb = 0;
int           g_RtnNetPartAccessSpotTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetInterfaceTopic_queue;
uv_mutex_t    g_RspQryNetInterfaceTopic_mutex;
uv_async_t    g_RspQryNetInterfaceTopic_async;
int           g_RspQryNetInterfaceTopic_trans_callbackNumb = 0;
int           g_RspQryNetInterfaceTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetInterfaceTopic_queue;
uv_mutex_t    g_RtnNetInterfaceTopic_mutex;
uv_async_t    g_RtnNetInterfaceTopic_async;
int           g_RtnNetInterfaceTopic_trans_callbackNumb = 0;
int           g_RtnNetInterfaceTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetGeneralOIDTopic_queue;
uv_mutex_t    g_RspQryNetGeneralOIDTopic_mutex;
uv_async_t    g_RspQryNetGeneralOIDTopic_async;
int           g_RspQryNetGeneralOIDTopic_trans_callbackNumb = 0;
int           g_RspQryNetGeneralOIDTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetGeneralOIDTopic_queue;
uv_mutex_t    g_RtnNetGeneralOIDTopic_mutex;
uv_async_t    g_RtnNetGeneralOIDTopic_async;
int           g_RtnNetGeneralOIDTopic_trans_callbackNumb = 0;
int           g_RtnNetGeneralOIDTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorTypeTopic_queue;
uv_mutex_t    g_RspQryNetMonitorTypeTopic_mutex;
uv_async_t    g_RspQryNetMonitorTypeTopic_async;
int           g_RspQryNetMonitorTypeTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorTypeTopic_queue;
uv_mutex_t    g_RtnNetMonitorTypeTopic_mutex;
uv_async_t    g_RtnNetMonitorTypeTopic_async;
int           g_RtnNetMonitorTypeTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorAttrScopeTopic_queue;
uv_mutex_t    g_RspQryNetMonitorAttrScopeTopic_mutex;
uv_async_t    g_RspQryNetMonitorAttrScopeTopic_async;
int           g_RspQryNetMonitorAttrScopeTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorAttrScopeTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorAttrScopeTopic_queue;
uv_mutex_t    g_RtnNetMonitorAttrScopeTopic_mutex;
uv_async_t    g_RtnNetMonitorAttrScopeTopic_async;
int           g_RtnNetMonitorAttrScopeTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorAttrScopeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorAttrTypeTopic_queue;
uv_mutex_t    g_RspQryNetMonitorAttrTypeTopic_mutex;
uv_async_t    g_RspQryNetMonitorAttrTypeTopic_async;
int           g_RspQryNetMonitorAttrTypeTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorAttrTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorAttrTypeTopic_queue;
uv_mutex_t    g_RtnNetMonitorAttrTypeTopic_mutex;
uv_async_t    g_RtnNetMonitorAttrTypeTopic_async;
int           g_RtnNetMonitorAttrTypeTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorAttrTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorObjectAttrTopic_queue;
uv_mutex_t    g_RspQryNetMonitorObjectAttrTopic_mutex;
uv_async_t    g_RspQryNetMonitorObjectAttrTopic_async;
int           g_RspQryNetMonitorObjectAttrTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorObjectAttrTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorObjectAttrTopic_queue;
uv_mutex_t    g_RtnNetMonitorObjectAttrTopic_mutex;
uv_async_t    g_RtnNetMonitorObjectAttrTopic_async;
int           g_RtnNetMonitorObjectAttrTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorObjectAttrTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetFuncAreaTopic_queue;
uv_mutex_t    g_RspQryNetFuncAreaTopic_mutex;
uv_async_t    g_RspQryNetFuncAreaTopic_async;
int           g_RspQryNetFuncAreaTopic_trans_callbackNumb = 0;
int           g_RspQryNetFuncAreaTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetFuncAreaTopic_queue;
uv_mutex_t    g_RtnNetFuncAreaTopic_mutex;
uv_async_t    g_RtnNetFuncAreaTopic_async;
int           g_RtnNetFuncAreaTopic_trans_callbackNumb = 0;
int           g_RtnNetFuncAreaTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorCommandTypeTopic_queue;
uv_mutex_t    g_RspQryNetMonitorCommandTypeTopic_mutex;
uv_async_t    g_RspQryNetMonitorCommandTypeTopic_async;
int           g_RspQryNetMonitorCommandTypeTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorCommandTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorCommandTypeTopic_queue;
uv_mutex_t    g_RtnNetMonitorCommandTypeTopic_mutex;
uv_async_t    g_RtnNetMonitorCommandTypeTopic_async;
int           g_RtnNetMonitorCommandTypeTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorCommandTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorActionGroupTopic_queue;
uv_mutex_t    g_RspQryNetMonitorActionGroupTopic_mutex;
uv_async_t    g_RspQryNetMonitorActionGroupTopic_async;
int           g_RspQryNetMonitorActionGroupTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorActionGroupTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorActionGroupTopic_queue;
uv_mutex_t    g_RtnNetMonitorActionGroupTopic_mutex;
uv_async_t    g_RtnNetMonitorActionGroupTopic_async;
int           g_RtnNetMonitorActionGroupTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorActionGroupTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorDeviceGroupTopic_queue;
uv_mutex_t    g_RspQryNetMonitorDeviceGroupTopic_mutex;
uv_async_t    g_RspQryNetMonitorDeviceGroupTopic_async;
int           g_RspQryNetMonitorDeviceGroupTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorDeviceGroupTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorDeviceGroupTopic_queue;
uv_mutex_t    g_RtnNetMonitorDeviceGroupTopic_mutex;
uv_async_t    g_RtnNetMonitorDeviceGroupTopic_async;
int           g_RtnNetMonitorDeviceGroupTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorDeviceGroupTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorTaskInfoTopic_queue;
uv_mutex_t    g_RspQryNetMonitorTaskInfoTopic_mutex;
uv_async_t    g_RspQryNetMonitorTaskInfoTopic_async;
int           g_RspQryNetMonitorTaskInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorTaskInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorTaskInfoTopic_queue;
uv_mutex_t    g_RtnNetMonitorTaskInfoTopic_mutex;
uv_async_t    g_RtnNetMonitorTaskInfoTopic_async;
int           g_RtnNetMonitorTaskInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorTaskInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorTaskResultTopic_queue;
uv_mutex_t    g_RspQryNetMonitorTaskResultTopic_mutex;
uv_async_t    g_RspQryNetMonitorTaskResultTopic_async;
int           g_RspQryNetMonitorTaskResultTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorTaskResultTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorTaskResultTopic_queue;
uv_mutex_t    g_RtnNetMonitorTaskResultTopic_mutex;
uv_async_t    g_RtnNetMonitorTaskResultTopic_async;
int           g_RtnNetMonitorTaskResultTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorTaskResultTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorTaskObjectSetTopic_queue;
uv_mutex_t    g_RspQryNetMonitorTaskObjectSetTopic_mutex;
uv_async_t    g_RspQryNetMonitorTaskObjectSetTopic_async;
int           g_RspQryNetMonitorTaskObjectSetTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorTaskObjectSetTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorTaskObjectSetTopic_queue;
uv_mutex_t    g_RtnNetMonitorTaskObjectSetTopic_mutex;
uv_async_t    g_RtnNetMonitorTaskObjectSetTopic_async;
int           g_RtnNetMonitorTaskObjectSetTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorTaskObjectSetTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetPartyLinkInfoTopic_queue;
uv_mutex_t    g_RspQryNetPartyLinkInfoTopic_mutex;
uv_async_t    g_RspQryNetPartyLinkInfoTopic_async;
int           g_RspQryNetPartyLinkInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetPartyLinkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetPartyLinkInfoTopic_queue;
uv_mutex_t    g_RtnNetPartyLinkInfoTopic_mutex;
uv_async_t    g_RtnNetPartyLinkInfoTopic_async;
int           g_RtnNetPartyLinkInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetPartyLinkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorActionAttrTopic_queue;
uv_mutex_t    g_RspQryNetMonitorActionAttrTopic_mutex;
uv_async_t    g_RspQryNetMonitorActionAttrTopic_async;
int           g_RspQryNetMonitorActionAttrTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorActionAttrTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorActionAttrTopic_queue;
uv_mutex_t    g_RtnNetMonitorActionAttrTopic_mutex;
uv_async_t    g_RtnNetMonitorActionAttrTopic_async;
int           g_RtnNetMonitorActionAttrTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorActionAttrTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetModuleTopic_queue;
uv_mutex_t    g_RspQryNetModuleTopic_mutex;
uv_async_t    g_RspQryNetModuleTopic_async;
int           g_RspQryNetModuleTopic_trans_callbackNumb = 0;
int           g_RspQryNetModuleTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetModuleTopic_queue;
uv_mutex_t    g_RtnNetModuleTopic_mutex;
uv_async_t    g_RtnNetModuleTopic_async;
int           g_RtnNetModuleTopic_trans_callbackNumb = 0;
int           g_RtnNetModuleTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetEventExprTopic_queue;
uv_mutex_t    g_RspQryNetEventExprTopic_mutex;
uv_async_t    g_RspQryNetEventExprTopic_async;
int           g_RspQryNetEventExprTopic_trans_callbackNumb = 0;
int           g_RspQryNetEventExprTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetEventExprTopic_queue;
uv_mutex_t    g_RtnNetEventExprTopic_mutex;
uv_async_t    g_RtnNetEventExprTopic_async;
int           g_RtnNetEventExprTopic_trans_callbackNumb = 0;
int           g_RtnNetEventExprTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetEventTypeTopic_queue;
uv_mutex_t    g_RspQryNetEventTypeTopic_mutex;
uv_async_t    g_RspQryNetEventTypeTopic_async;
int           g_RspQryNetEventTypeTopic_trans_callbackNumb = 0;
int           g_RspQryNetEventTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetEventTypeTopic_queue;
uv_mutex_t    g_RtnNetEventTypeTopic_mutex;
uv_async_t    g_RtnNetEventTypeTopic_async;
int           g_RtnNetEventTypeTopic_trans_callbackNumb = 0;
int           g_RtnNetEventTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetSubEventTypeTopic_queue;
uv_mutex_t    g_RspQryNetSubEventTypeTopic_mutex;
uv_async_t    g_RspQryNetSubEventTypeTopic_async;
int           g_RspQryNetSubEventTypeTopic_trans_callbackNumb = 0;
int           g_RspQryNetSubEventTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetSubEventTypeTopic_queue;
uv_mutex_t    g_RtnNetSubEventTypeTopic_mutex;
uv_async_t    g_RtnNetSubEventTypeTopic_async;
int           g_RtnNetSubEventTypeTopic_trans_callbackNumb = 0;
int           g_RtnNetSubEventTypeTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetEventLevelTopic_queue;
uv_mutex_t    g_RspQryNetEventLevelTopic_mutex;
uv_async_t    g_RspQryNetEventLevelTopic_async;
int           g_RspQryNetEventLevelTopic_trans_callbackNumb = 0;
int           g_RspQryNetEventLevelTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetEventLevelTopic_queue;
uv_mutex_t    g_RtnNetEventLevelTopic_mutex;
uv_async_t    g_RtnNetEventLevelTopic_async;
int           g_RtnNetEventLevelTopic_trans_callbackNumb = 0;
int           g_RtnNetEventLevelTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorTaskStatusResultTopic_queue;
uv_mutex_t    g_RspQryNetMonitorTaskStatusResultTopic_mutex;
uv_async_t    g_RspQryNetMonitorTaskStatusResultTopic_async;
int           g_RspQryNetMonitorTaskStatusResultTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorTaskStatusResultTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorTaskStatusResultTopic_queue;
uv_mutex_t    g_RtnNetMonitorTaskStatusResultTopic_mutex;
uv_async_t    g_RtnNetMonitorTaskStatusResultTopic_async;
int           g_RtnNetMonitorTaskStatusResultTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorTaskStatusResultTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetCfgFileTopic_queue;
uv_mutex_t    g_RspQryNetCfgFileTopic_mutex;
uv_async_t    g_RspQryNetCfgFileTopic_async;
int           g_RspQryNetCfgFileTopic_trans_callbackNumb = 0;
int           g_RspQryNetCfgFileTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetCfgFileTopic_queue;
uv_mutex_t    g_RtnNetCfgFileTopic_mutex;
uv_async_t    g_RtnNetCfgFileTopic_async;
int           g_RtnNetCfgFileTopic_trans_callbackNumb = 0;
int           g_RtnNetCfgFileTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorDeviceTaskTopic_queue;
uv_mutex_t    g_RspQryNetMonitorDeviceTaskTopic_mutex;
uv_async_t    g_RspQryNetMonitorDeviceTaskTopic_async;
int           g_RspQryNetMonitorDeviceTaskTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorDeviceTaskTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorDeviceTaskTopic_queue;
uv_mutex_t    g_RtnNetMonitorDeviceTaskTopic_mutex;
uv_async_t    g_RtnNetMonitorDeviceTaskTopic_async;
int           g_RtnNetMonitorDeviceTaskTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorDeviceTaskTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMonitorTaskInstAttrsTopic_queue;
uv_mutex_t    g_RspQryNetMonitorTaskInstAttrsTopic_mutex;
uv_async_t    g_RspQryNetMonitorTaskInstAttrsTopic_async;
int           g_RspQryNetMonitorTaskInstAttrsTopic_trans_callbackNumb = 0;
int           g_RspQryNetMonitorTaskInstAttrsTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMonitorTaskInstAttrsTopic_queue;
uv_mutex_t    g_RtnNetMonitorTaskInstAttrsTopic_mutex;
uv_async_t    g_RtnNetMonitorTaskInstAttrsTopic_async;
int           g_RtnNetMonitorTaskInstAttrsTopic_trans_callbackNumb = 0;
int           g_RtnNetMonitorTaskInstAttrsTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryFileGeneralOperTopic_queue;
uv_mutex_t    g_RspQryFileGeneralOperTopic_mutex;
uv_async_t    g_RspQryFileGeneralOperTopic_async;
int           g_RspQryFileGeneralOperTopic_trans_callbackNumb = 0;
int           g_RspQryFileGeneralOperTopic_trans_dataNumb     = 0;

queue<void**> g_RtnFileGeneralOperTopic_queue;
uv_mutex_t    g_RtnFileGeneralOperTopic_mutex;
uv_async_t    g_RtnFileGeneralOperTopic_async;
int           g_RtnFileGeneralOperTopic_trans_callbackNumb = 0;
int           g_RtnFileGeneralOperTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetBaseLineTopic_queue;
uv_mutex_t    g_RspQryNetBaseLineTopic_mutex;
uv_async_t    g_RspQryNetBaseLineTopic_async;
int           g_RspQryNetBaseLineTopic_trans_callbackNumb = 0;
int           g_RspQryNetBaseLineTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetBaseLineTopic_queue;
uv_mutex_t    g_RtnNetBaseLineTopic_mutex;
uv_async_t    g_RtnNetBaseLineTopic_async;
int           g_RtnNetBaseLineTopic_trans_callbackNumb = 0;
int           g_RtnNetBaseLineTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetBaseLineTaskTopic_queue;
uv_mutex_t    g_RspQryNetBaseLineTaskTopic_mutex;
uv_async_t    g_RspQryNetBaseLineTaskTopic_async;
int           g_RspQryNetBaseLineTaskTopic_trans_callbackNumb = 0;
int           g_RspQryNetBaseLineTaskTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetBaseLineTaskTopic_queue;
uv_mutex_t    g_RtnNetBaseLineTaskTopic_mutex;
uv_async_t    g_RtnNetBaseLineTaskTopic_async;
int           g_RtnNetBaseLineTaskTopic_trans_callbackNumb = 0;
int           g_RtnNetBaseLineTaskTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetBaseLineResultTopic_queue;
uv_mutex_t    g_RspQryNetBaseLineResultTopic_mutex;
uv_async_t    g_RspQryNetBaseLineResultTopic_async;
int           g_RspQryNetBaseLineResultTopic_trans_callbackNumb = 0;
int           g_RspQryNetBaseLineResultTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetBaseLineResultTopic_queue;
uv_mutex_t    g_RtnNetBaseLineResultTopic_mutex;
uv_async_t    g_RtnNetBaseLineResultTopic_async;
int           g_RtnNetBaseLineResultTopic_trans_callbackNumb = 0;
int           g_RtnNetBaseLineResultTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetPartyLinkStatusInfoTopic_queue;
uv_mutex_t    g_RspQryNetPartyLinkStatusInfoTopic_mutex;
uv_async_t    g_RspQryNetPartyLinkStatusInfoTopic_async;
int           g_RspQryNetPartyLinkStatusInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetPartyLinkStatusInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetPartyLinkStatusInfoTopic_queue;
uv_mutex_t    g_RtnNetPartyLinkStatusInfoTopic_mutex;
uv_async_t    g_RtnNetPartyLinkStatusInfoTopic_async;
int           g_RtnNetPartyLinkStatusInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetPartyLinkStatusInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetMemberSDHLineInfoTopic_queue;
uv_mutex_t    g_RspQryNetMemberSDHLineInfoTopic_mutex;
uv_async_t    g_RspQryNetMemberSDHLineInfoTopic_async;
int           g_RspQryNetMemberSDHLineInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetMemberSDHLineInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetMemberSDHLineInfoTopic_queue;
uv_mutex_t    g_RtnNetMemberSDHLineInfoTopic_mutex;
uv_async_t    g_RtnNetMemberSDHLineInfoTopic_async;
int           g_RtnNetMemberSDHLineInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetMemberSDHLineInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetDDNLinkInfoTopic_queue;
uv_mutex_t    g_RspQryNetDDNLinkInfoTopic_mutex;
uv_async_t    g_RspQryNetDDNLinkInfoTopic_async;
int           g_RspQryNetDDNLinkInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetDDNLinkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetDDNLinkInfoTopic_queue;
uv_mutex_t    g_RtnNetDDNLinkInfoTopic_mutex;
uv_async_t    g_RtnNetDDNLinkInfoTopic_async;
int           g_RtnNetDDNLinkInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetDDNLinkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetPseudMemberLinkInfoTopic_queue;
uv_mutex_t    g_RspQryNetPseudMemberLinkInfoTopic_mutex;
uv_async_t    g_RspQryNetPseudMemberLinkInfoTopic_async;
int           g_RspQryNetPseudMemberLinkInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetPseudMemberLinkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetPseudMemberLinkInfoTopic_queue;
uv_mutex_t    g_RtnNetPseudMemberLinkInfoTopic_mutex;
uv_async_t    g_RtnNetPseudMemberLinkInfoTopic_async;
int           g_RtnNetPseudMemberLinkInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetPseudMemberLinkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryOuterDeviceInfTopic_queue;
uv_mutex_t    g_RspQryOuterDeviceInfTopic_mutex;
uv_async_t    g_RspQryOuterDeviceInfTopic_async;
int           g_RspQryOuterDeviceInfTopic_trans_callbackNumb = 0;
int           g_RspQryOuterDeviceInfTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetOuterDeviceInfTopic_queue;
uv_mutex_t    g_RtnNetOuterDeviceInfTopic_mutex;
uv_async_t    g_RtnNetOuterDeviceInfTopic_async;
int           g_RtnNetOuterDeviceInfTopic_trans_callbackNumb = 0;
int           g_RtnNetOuterDeviceInfTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetLocalPingResultInfoTopic_queue;
uv_mutex_t    g_RspQryNetLocalPingResultInfoTopic_mutex;
uv_async_t    g_RspQryNetLocalPingResultInfoTopic_async;
int           g_RspQryNetLocalPingResultInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetLocalPingResultInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetLocalPingResultInfoTopic_queue;
uv_mutex_t    g_RtnNetLocalPingResultInfoTopic_mutex;
uv_async_t    g_RtnNetLocalPingResultInfoTopic_async;
int           g_RtnNetLocalPingResultInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetLocalPingResultInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetRomotePingResultInfoTopic_queue;
uv_mutex_t    g_RspQryNetRomotePingResultInfoTopic_mutex;
uv_async_t    g_RspQryNetRomotePingResultInfoTopic_async;
int           g_RspQryNetRomotePingResultInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetRomotePingResultInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetRomotePingResultInfoTopic_queue;
uv_mutex_t    g_RtnNetRomotePingResultInfoTopic_mutex;
uv_async_t    g_RtnNetRomotePingResultInfoTopic_async;
int           g_RtnNetRomotePingResultInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetRomotePingResultInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnMonitorTopProcessInfo_queue;
uv_mutex_t    g_RtnMonitorTopProcessInfo_mutex;
uv_async_t    g_RtnMonitorTopProcessInfo_async;
int           g_RtnMonitorTopProcessInfo_trans_callbackNumb = 0;
int           g_RtnMonitorTopProcessInfo_trans_dataNumb     = 0;

queue<void**> g_RspQrySysInternalTopologyTopic_queue;
uv_mutex_t    g_RspQrySysInternalTopologyTopic_mutex;
uv_async_t    g_RspQrySysInternalTopologyTopic_async;
int           g_RspQrySysInternalTopologyTopic_trans_callbackNumb = 0;
int           g_RspQrySysInternalTopologyTopic_trans_dataNumb     = 0;

queue<void**> g_RtnSysInternalTopologyTopic_queue;
uv_mutex_t    g_RtnSysInternalTopologyTopic_mutex;
uv_async_t    g_RtnSysInternalTopologyTopic_async;
int           g_RtnSysInternalTopologyTopic_trans_callbackNumb = 0;
int           g_RtnSysInternalTopologyTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryMemberLinkCostTopic_queue;
uv_mutex_t    g_RspQryMemberLinkCostTopic_mutex;
uv_async_t    g_RspQryMemberLinkCostTopic_async;
int           g_RspQryMemberLinkCostTopic_trans_callbackNumb = 0;
int           g_RspQryMemberLinkCostTopic_trans_dataNumb     = 0;

queue<void**> g_RtnMemberLinkCostTopic_queue;
uv_mutex_t    g_RtnMemberLinkCostTopic_mutex;
uv_async_t    g_RtnMemberLinkCostTopic_async;
int           g_RtnMemberLinkCostTopic_trans_callbackNumb = 0;
int           g_RtnMemberLinkCostTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetPartylinkMonthlyRentTopic_queue;
uv_mutex_t    g_RspQryNetPartylinkMonthlyRentTopic_mutex;
uv_async_t    g_RspQryNetPartylinkMonthlyRentTopic_async;
int           g_RspQryNetPartylinkMonthlyRentTopic_trans_callbackNumb = 0;
int           g_RspQryNetPartylinkMonthlyRentTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetPartylinkMonthlyRentTopic_queue;
uv_mutex_t    g_RtnNetPartylinkMonthlyRentTopic_mutex;
uv_async_t    g_RtnNetPartylinkMonthlyRentTopic_async;
int           g_RtnNetPartylinkMonthlyRentTopic_trans_callbackNumb = 0;
int           g_RtnNetPartylinkMonthlyRentTopic_trans_dataNumb     = 0;

queue<void**> g_RspQryNetNonPartyLinkInfoTopic_queue;
uv_mutex_t    g_RspQryNetNonPartyLinkInfoTopic_mutex;
uv_async_t    g_RspQryNetNonPartyLinkInfoTopic_async;
int           g_RspQryNetNonPartyLinkInfoTopic_trans_callbackNumb = 0;
int           g_RspQryNetNonPartyLinkInfoTopic_trans_dataNumb     = 0;

queue<void**> g_RtnNetNonPartyLinkInfoTopic_queue;
uv_mutex_t    g_RtnNetNonPartyLinkInfoTopic_mutex;
uv_async_t    g_RtnNetNonPartyLinkInfoTopic_async;
int           g_RtnNetNonPartyLinkInfoTopic_trans_callbackNumb = 0;
int           g_RtnNetNonPartyLinkInfoTopic_trans_dataNumb     = 0;



void OnFrontConnected(uv_async_t *handle)
{   
    Nan::HandleScope scope;

    if(SpiObj.IsEmpty()){
        return;
    }

    v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get(Nan::New<v8::String>("OnFrontConnected").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
        v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
        Nan::Callback callback(function);
        callback.Call(0, 0);
    }
}

void OnFrontDisconnected(uv_async_t *handle) {

    queue<int> receivedData;
    uv_mutex_lock(&g_FrontDisconnected_mutex);
    while (!g_FrontDisconnected_queue.empty()) {
      receivedData.push(g_FrontDisconnected_queue.front());
      g_FrontDisconnected_queue.pop();
    }
    uv_mutex_unlock(&g_FrontDisconnected_mutex);

    while( !receivedData.empty() ) {
        int nReason = receivedData.front();
        receivedData.pop();

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTopCpuInfoTopic").ToLocalChecked());

        if(!OnFrontConnected->IsFunction()){
            OutputCallbackMessage("Disconnect reason: ", nReason, g_RunningResult_File);
            v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);
            int nReason = *(int*)handle->data;
            v8::Local<v8::Integer> nReasonJS=Nan::New<v8::Integer>(nReason);
            v8::Local<v8::Value> param[1];
            param[0]=Local<v8::Value>(nReasonJS);
            callback.Call(1, param);
        }
    }
}

void OnHeartBeatWarning(uv_async_t *handle)
{
    queue<int> receivedData;
    uv_mutex_lock(&g_HeartBeatWarning_mutex);
    while (!g_HeartBeatWarning_queue.empty()) {
      receivedData.push(g_HeartBeatWarning_queue.front());
      g_HeartBeatWarning_queue.pop();
    }
    uv_mutex_unlock(&g_HeartBeatWarning_mutex);

    while( !receivedData.empty() ) {
        int nTimeLapse = receivedData.front();
        receivedData.pop();

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTopCpuInfoTopic").ToLocalChecked());

        if(OnFrontConnected->IsFunction()){
                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
                Nan::Callback callback(function);
                v8::Local<v8::Integer> nTimeLapseJS = Nan::New<v8::Integer>(nTimeLapse);
                v8::Local<v8::Value> param[1];
                param[0] = Local<v8::Value>(nTimeLapseJS);
                callback.Call(1, param);
         }
    }

}

 void OnRspQryTopCpuInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTopCpuInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTopCpuInfoTopic_trans_callbackNumb: ", g_RspQryTopCpuInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTopCpuInfoTopic_mutex);

    int dataNumb = g_RspQryTopCpuInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTopCpuInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTopCpuInfoTopic_trans_dataNumb: ", g_RspQryTopCpuInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTopCpuInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryTopCpuInfoTopic_queue.front());
        g_RspQryTopCpuInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTopCpuInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTopCpuInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTopCpuInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTopCpuInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTopCpuInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTopCpuInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryTopCpuInfoField* pRspQryTopCpuInfo = (CShfeFtdcRspQryTopCpuInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTopCpuInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTopCpuInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopCpuInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryTopCpuInfo->HostName).ToLocalChecked();
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopCpuInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryTopCpuInfo->MonDate).ToLocalChecked();
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopCpuInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryTopCpuInfo->MonTime).ToLocalChecked();
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopCpuInfo->CPU, utf8string);
                v8::Local<v8::String> CPUValue = Nan::New<v8::String> (pRspQryTopCpuInfo->CPU).ToLocalChecked();
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                v8::Local<v8::String> LOAD = Nan::New<v8::String> ("LOAD").ToLocalChecked();
                v8::Local<v8::Number> LOADValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->LOAD);
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (LOAD), Local<v8::Value>(LOADValue));

                v8::Local<v8::String> USER = Nan::New<v8::String> ("USER").ToLocalChecked();
                v8::Local<v8::Number> USERValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->USER);
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (USER), Local<v8::Value>(USERValue));

                v8::Local<v8::String> NICE = Nan::New<v8::String> ("NICE").ToLocalChecked();
                v8::Local<v8::Number> NICEValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->NICE);
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (NICE), Local<v8::Value>(NICEValue));

                v8::Local<v8::String> SYS = Nan::New<v8::String> ("SYS").ToLocalChecked();
                v8::Local<v8::Number> SYSValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->SYS);
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (SYS), Local<v8::Value>(SYSValue));

                v8::Local<v8::String> IDLE = Nan::New<v8::String> ("IDLE").ToLocalChecked();
                v8::Local<v8::Number> IDLEValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->IDLE);
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (IDLE), Local<v8::Value>(IDLEValue));

                v8::Local<v8::String> BLOCK = Nan::New<v8::String> ("BLOCK").ToLocalChecked();
                v8::Local<v8::Number> BLOCKValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->BLOCK);
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (BLOCK), Local<v8::Value>(BLOCKValue));

                v8::Local<v8::String> SWAIT = Nan::New<v8::String> ("SWAIT").ToLocalChecked();
                v8::Local<v8::Number> SWAITValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->SWAIT);
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (SWAIT), Local<v8::Value>(SWAITValue));

                v8::Local<v8::String> INTR = Nan::New<v8::String> ("INTR").ToLocalChecked();
                v8::Local<v8::Number> INTRValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->INTR);
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (INTR), Local<v8::Value>(INTRValue));

                v8::Local<v8::String> SSYS = Nan::New<v8::String> ("SSYS").ToLocalChecked();
                v8::Local<v8::Number> SSYSValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->SSYS);
                pRspQryTopCpuInfoJS->Set(Local<v8::Value> (SSYS), Local<v8::Value>(SSYSValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTopCpuInfo) { 
                params[0] = Local<v8::Value>(pRspQryTopCpuInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTopCpuInfo) { 
            delete[] pRspQryTopCpuInfo;
            pRspQryTopCpuInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTopCpuInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTopCpuInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnTopCpuInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnTopCpuInfoTopic_trans_callbackNumb: ", g_RtnTopCpuInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnTopCpuInfoTopic_mutex);

    int dataNumb = g_RtnTopCpuInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnTopCpuInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnTopCpuInfoTopic_trans_dataNumb: ", g_RtnTopCpuInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnTopCpuInfoTopic_queue.empty()) {
        receivedData.push (g_RtnTopCpuInfoTopic_queue.front());
        g_RtnTopCpuInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnTopCpuInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnTopCpuInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTopCpuInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnTopCpuInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTopCpuInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnTopCpuInfoTopic").ToLocalChecked());

        CShfeFtdcRtnTopCpuInfoField* pRtnTopCpuInfo = (CShfeFtdcRtnTopCpuInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnTopCpuInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnTopCpuInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopCpuInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRtnTopCpuInfo->HostName).ToLocalChecked();
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopCpuInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnTopCpuInfo->MonDate).ToLocalChecked();
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopCpuInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnTopCpuInfo->MonTime).ToLocalChecked();
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopCpuInfo->CPU, utf8string);
                v8::Local<v8::String> CPUValue = Nan::New<v8::String> (pRtnTopCpuInfo->CPU).ToLocalChecked();
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                v8::Local<v8::String> LOAD = Nan::New<v8::String> ("LOAD").ToLocalChecked();
                v8::Local<v8::Number> LOADValue = Nan::New<v8::Number> (pRtnTopCpuInfo->LOAD);
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (LOAD), Local<v8::Value>(LOADValue));

                v8::Local<v8::String> USER = Nan::New<v8::String> ("USER").ToLocalChecked();
                v8::Local<v8::Number> USERValue = Nan::New<v8::Number> (pRtnTopCpuInfo->USER);
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (USER), Local<v8::Value>(USERValue));

                v8::Local<v8::String> NICE = Nan::New<v8::String> ("NICE").ToLocalChecked();
                v8::Local<v8::Number> NICEValue = Nan::New<v8::Number> (pRtnTopCpuInfo->NICE);
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (NICE), Local<v8::Value>(NICEValue));

                v8::Local<v8::String> SYS = Nan::New<v8::String> ("SYS").ToLocalChecked();
                v8::Local<v8::Number> SYSValue = Nan::New<v8::Number> (pRtnTopCpuInfo->SYS);
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (SYS), Local<v8::Value>(SYSValue));

                v8::Local<v8::String> IDLE = Nan::New<v8::String> ("IDLE").ToLocalChecked();
                v8::Local<v8::Number> IDLEValue = Nan::New<v8::Number> (pRtnTopCpuInfo->IDLE);
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (IDLE), Local<v8::Value>(IDLEValue));

                v8::Local<v8::String> BLOCK = Nan::New<v8::String> ("BLOCK").ToLocalChecked();
                v8::Local<v8::Number> BLOCKValue = Nan::New<v8::Number> (pRtnTopCpuInfo->BLOCK);
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (BLOCK), Local<v8::Value>(BLOCKValue));

                v8::Local<v8::String> SWAIT = Nan::New<v8::String> ("SWAIT").ToLocalChecked();
                v8::Local<v8::Number> SWAITValue = Nan::New<v8::Number> (pRtnTopCpuInfo->SWAIT);
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (SWAIT), Local<v8::Value>(SWAITValue));

                v8::Local<v8::String> INTR = Nan::New<v8::String> ("INTR").ToLocalChecked();
                v8::Local<v8::Number> INTRValue = Nan::New<v8::Number> (pRtnTopCpuInfo->INTR);
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (INTR), Local<v8::Value>(INTRValue));

                v8::Local<v8::String> SSYS = Nan::New<v8::String> ("SSYS").ToLocalChecked();
                v8::Local<v8::Number> SSYSValue = Nan::New<v8::Number> (pRtnTopCpuInfo->SSYS);
                pRtnTopCpuInfoJS->Set(Local<v8::Value> (SSYS), Local<v8::Value>(SSYSValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnTopCpuInfo) { 
                params[0] = Local<v8::Value>(pRtnTopCpuInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnTopCpuInfo) { 
            delete[] pRtnTopCpuInfo;
            pRtnTopCpuInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnTopCpuInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTopMemInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTopMemInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTopMemInfoTopic_trans_callbackNumb: ", g_RspQryTopMemInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTopMemInfoTopic_mutex);

    int dataNumb = g_RspQryTopMemInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTopMemInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTopMemInfoTopic_trans_dataNumb: ", g_RspQryTopMemInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTopMemInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryTopMemInfoTopic_queue.front());
        g_RspQryTopMemInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTopMemInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTopMemInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTopMemInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTopMemInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTopMemInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTopMemInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryTopMemInfoField* pRspQryTopMemInfo = (CShfeFtdcRspQryTopMemInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTopMemInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTopMemInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopMemInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryTopMemInfo->HostName).ToLocalChecked();
                pRspQryTopMemInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopMemInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryTopMemInfo->MonDate).ToLocalChecked();
                pRspQryTopMemInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopMemInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryTopMemInfo->MonTime).ToLocalChecked();
                pRspQryTopMemInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> TOTALREAL = Nan::New<v8::String> ("TOTALREAL").ToLocalChecked();
                v8::Local<v8::Integer> TOTALREALValue = Nan::New<v8::Integer> (pRspQryTopMemInfo->TOTALREAL);
                pRspQryTopMemInfoJS->Set(Local<v8::Value> (TOTALREAL), Local<v8::Value>(TOTALREALValue));

                v8::Local<v8::String> ACTIVEREAL = Nan::New<v8::String> ("ACTIVEREAL").ToLocalChecked();
                v8::Local<v8::Integer> ACTIVEREALValue = Nan::New<v8::Integer> (pRspQryTopMemInfo->ACTIVEREAL);
                pRspQryTopMemInfoJS->Set(Local<v8::Value> (ACTIVEREAL), Local<v8::Value>(ACTIVEREALValue));

                v8::Local<v8::String> TOTALVIRTUAL = Nan::New<v8::String> ("TOTALVIRTUAL").ToLocalChecked();
                v8::Local<v8::Integer> TOTALVIRTUALValue = Nan::New<v8::Integer> (pRspQryTopMemInfo->TOTALVIRTUAL);
                pRspQryTopMemInfoJS->Set(Local<v8::Value> (TOTALVIRTUAL), Local<v8::Value>(TOTALVIRTUALValue));

                v8::Local<v8::String> ACTIVEVIRTUAL = Nan::New<v8::String> ("ACTIVEVIRTUAL").ToLocalChecked();
                v8::Local<v8::Integer> ACTIVEVIRTUALValue = Nan::New<v8::Integer> (pRspQryTopMemInfo->ACTIVEVIRTUAL);
                pRspQryTopMemInfoJS->Set(Local<v8::Value> (ACTIVEVIRTUAL), Local<v8::Value>(ACTIVEVIRTUALValue));

                v8::Local<v8::String> FREE = Nan::New<v8::String> ("FREE").ToLocalChecked();
                v8::Local<v8::Integer> FREEValue = Nan::New<v8::Integer> (pRspQryTopMemInfo->FREE);
                pRspQryTopMemInfoJS->Set(Local<v8::Value> (FREE), Local<v8::Value>(FREEValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTopMemInfo) { 
                params[0] = Local<v8::Value>(pRspQryTopMemInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTopMemInfo) { 
            delete[] pRspQryTopMemInfo;
            pRspQryTopMemInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTopMemInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTopMemInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnTopMemInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnTopMemInfoTopic_trans_callbackNumb: ", g_RtnTopMemInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnTopMemInfoTopic_mutex);

    int dataNumb = g_RtnTopMemInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnTopMemInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnTopMemInfoTopic_trans_dataNumb: ", g_RtnTopMemInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnTopMemInfoTopic_queue.empty()) {
        receivedData.push (g_RtnTopMemInfoTopic_queue.front());
        g_RtnTopMemInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnTopMemInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnTopMemInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTopMemInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnTopMemInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTopMemInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnTopMemInfoTopic").ToLocalChecked());

        CShfeFtdcRtnTopMemInfoField* pRtnTopMemInfo = (CShfeFtdcRtnTopMemInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnTopMemInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnTopMemInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopMemInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRtnTopMemInfo->HostName).ToLocalChecked();
                pRtnTopMemInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopMemInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnTopMemInfo->MonDate).ToLocalChecked();
                pRtnTopMemInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopMemInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnTopMemInfo->MonTime).ToLocalChecked();
                pRtnTopMemInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> TOTALREAL = Nan::New<v8::String> ("TOTALREAL").ToLocalChecked();
                v8::Local<v8::Integer> TOTALREALValue = Nan::New<v8::Integer> (pRtnTopMemInfo->TOTALREAL);
                pRtnTopMemInfoJS->Set(Local<v8::Value> (TOTALREAL), Local<v8::Value>(TOTALREALValue));

                v8::Local<v8::String> ACTIVEREAL = Nan::New<v8::String> ("ACTIVEREAL").ToLocalChecked();
                v8::Local<v8::Integer> ACTIVEREALValue = Nan::New<v8::Integer> (pRtnTopMemInfo->ACTIVEREAL);
                pRtnTopMemInfoJS->Set(Local<v8::Value> (ACTIVEREAL), Local<v8::Value>(ACTIVEREALValue));

                v8::Local<v8::String> TOTALVIRTUAL = Nan::New<v8::String> ("TOTALVIRTUAL").ToLocalChecked();
                v8::Local<v8::Integer> TOTALVIRTUALValue = Nan::New<v8::Integer> (pRtnTopMemInfo->TOTALVIRTUAL);
                pRtnTopMemInfoJS->Set(Local<v8::Value> (TOTALVIRTUAL), Local<v8::Value>(TOTALVIRTUALValue));

                v8::Local<v8::String> ACTIVEVIRTUAL = Nan::New<v8::String> ("ACTIVEVIRTUAL").ToLocalChecked();
                v8::Local<v8::Integer> ACTIVEVIRTUALValue = Nan::New<v8::Integer> (pRtnTopMemInfo->ACTIVEVIRTUAL);
                pRtnTopMemInfoJS->Set(Local<v8::Value> (ACTIVEVIRTUAL), Local<v8::Value>(ACTIVEVIRTUALValue));

                v8::Local<v8::String> FREE = Nan::New<v8::String> ("FREE").ToLocalChecked();
                v8::Local<v8::Integer> FREEValue = Nan::New<v8::Integer> (pRtnTopMemInfo->FREE);
                pRtnTopMemInfoJS->Set(Local<v8::Value> (FREE), Local<v8::Value>(FREEValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnTopMemInfo) { 
                params[0] = Local<v8::Value>(pRtnTopMemInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnTopMemInfo) { 
            delete[] pRtnTopMemInfo;
            pRtnTopMemInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnTopMemInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTopProcessInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTopProcessInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTopProcessInfoTopic_trans_callbackNumb: ", g_RspQryTopProcessInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTopProcessInfoTopic_mutex);

    int dataNumb = g_RspQryTopProcessInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTopProcessInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTopProcessInfoTopic_trans_dataNumb: ", g_RspQryTopProcessInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTopProcessInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryTopProcessInfoTopic_queue.front());
        g_RspQryTopProcessInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTopProcessInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTopProcessInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTopProcessInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTopProcessInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTopProcessInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTopProcessInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryTopProcessInfoField* pRspQryTopProcessInfo = (CShfeFtdcRspQryTopProcessInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTopProcessInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTopProcessInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopProcessInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryTopProcessInfo->HostName).ToLocalChecked();
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopProcessInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryTopProcessInfo->MonDate).ToLocalChecked();
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopProcessInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryTopProcessInfo->MonTime).ToLocalChecked();
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopProcessInfo->CPU, utf8string);
                v8::Local<v8::String> CPUValue = Nan::New<v8::String> (pRspQryTopProcessInfo->CPU).ToLocalChecked();
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                v8::Local<v8::String> TTY = Nan::New<v8::String> ("TTY").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopProcessInfo->TTY, utf8string);
                v8::Local<v8::String> TTYValue = Nan::New<v8::String> (pRspQryTopProcessInfo->TTY).ToLocalChecked();
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (TTY), Local<v8::Value>(TTYValue));

                v8::Local<v8::String> PID = Nan::New<v8::String> ("PID").ToLocalChecked();
                v8::Local<v8::Integer> PIDValue = Nan::New<v8::Integer> (pRspQryTopProcessInfo->PID);
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (PID), Local<v8::Value>(PIDValue));

                v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopProcessInfo->USERNAME, utf8string);
                v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (pRspQryTopProcessInfo->USERNAME).ToLocalChecked();
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                v8::Local<v8::String> PRI = Nan::New<v8::String> ("PRI").ToLocalChecked();
                v8::Local<v8::Integer> PRIValue = Nan::New<v8::Integer> (pRspQryTopProcessInfo->PRI);
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (PRI), Local<v8::Value>(PRIValue));

                v8::Local<v8::String> NI = Nan::New<v8::String> ("NI").ToLocalChecked();
                v8::Local<v8::Integer> NIValue = Nan::New<v8::Integer> (pRspQryTopProcessInfo->NI);
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (NI), Local<v8::Value>(NIValue));

                v8::Local<v8::String> SIZE = Nan::New<v8::String> ("SIZE").ToLocalChecked();
                v8::Local<v8::Integer> SIZEValue = Nan::New<v8::Integer> (pRspQryTopProcessInfo->SIZE);
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (SIZE), Local<v8::Value>(SIZEValue));

                v8::Local<v8::String> RES = Nan::New<v8::String> ("RES").ToLocalChecked();
                v8::Local<v8::Integer> RESValue = Nan::New<v8::Integer> (pRspQryTopProcessInfo->RES);
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (RES), Local<v8::Value>(RESValue));

                v8::Local<v8::String> STATE = Nan::New<v8::String> ("STATE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopProcessInfo->STATE, utf8string);
                v8::Local<v8::String> STATEValue = Nan::New<v8::String> (pRspQryTopProcessInfo->STATE).ToLocalChecked();
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (STATE), Local<v8::Value>(STATEValue));

                v8::Local<v8::String> TIME = Nan::New<v8::String> ("TIME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopProcessInfo->TIME, utf8string);
                v8::Local<v8::String> TIMEValue = Nan::New<v8::String> (pRspQryTopProcessInfo->TIME).ToLocalChecked();
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (TIME), Local<v8::Value>(TIMEValue));

                v8::Local<v8::String> pWCPU = Nan::New<v8::String> ("pWCPU").ToLocalChecked();
                v8::Local<v8::Number> pWCPUValue = Nan::New<v8::Number> (pRspQryTopProcessInfo->pWCPU);
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (pWCPU), Local<v8::Value>(pWCPUValue));

                v8::Local<v8::String> pCPU = Nan::New<v8::String> ("pCPU").ToLocalChecked();
                v8::Local<v8::Number> pCPUValue = Nan::New<v8::Number> (pRspQryTopProcessInfo->pCPU);
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (pCPU), Local<v8::Value>(pCPUValue));

                v8::Local<v8::String> COMMAND = Nan::New<v8::String> ("COMMAND").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTopProcessInfo->COMMAND, utf8string);
                v8::Local<v8::String> COMMANDValue = Nan::New<v8::String> (pRspQryTopProcessInfo->COMMAND).ToLocalChecked();
                pRspQryTopProcessInfoJS->Set(Local<v8::Value> (COMMAND), Local<v8::Value>(COMMANDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTopProcessInfo) { 
                params[0] = Local<v8::Value>(pRspQryTopProcessInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTopProcessInfo) { 
            delete[] pRspQryTopProcessInfo;
            pRspQryTopProcessInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTopProcessInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTopProcessInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnTopProcessInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnTopProcessInfoTopic_trans_callbackNumb: ", g_RtnTopProcessInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnTopProcessInfoTopic_mutex);

    int dataNumb = g_RtnTopProcessInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnTopProcessInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnTopProcessInfoTopic_trans_dataNumb: ", g_RtnTopProcessInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnTopProcessInfoTopic_queue.empty()) {
        receivedData.push (g_RtnTopProcessInfoTopic_queue.front());
        g_RtnTopProcessInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnTopProcessInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnTopProcessInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTopProcessInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnTopProcessInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTopProcessInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnTopProcessInfoTopic").ToLocalChecked());

        CShfeFtdcRtnTopProcessInfoField* pRtnTopProcessInfo = (CShfeFtdcRtnTopProcessInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnTopProcessInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnTopProcessInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopProcessInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRtnTopProcessInfo->HostName).ToLocalChecked();
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopProcessInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnTopProcessInfo->MonDate).ToLocalChecked();
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopProcessInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnTopProcessInfo->MonTime).ToLocalChecked();
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopProcessInfo->CPU, utf8string);
                v8::Local<v8::String> CPUValue = Nan::New<v8::String> (pRtnTopProcessInfo->CPU).ToLocalChecked();
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                v8::Local<v8::String> TTY = Nan::New<v8::String> ("TTY").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopProcessInfo->TTY, utf8string);
                v8::Local<v8::String> TTYValue = Nan::New<v8::String> (pRtnTopProcessInfo->TTY).ToLocalChecked();
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (TTY), Local<v8::Value>(TTYValue));

                v8::Local<v8::String> PID = Nan::New<v8::String> ("PID").ToLocalChecked();
                v8::Local<v8::Integer> PIDValue = Nan::New<v8::Integer> (pRtnTopProcessInfo->PID);
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (PID), Local<v8::Value>(PIDValue));

                v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopProcessInfo->USERNAME, utf8string);
                v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (pRtnTopProcessInfo->USERNAME).ToLocalChecked();
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                v8::Local<v8::String> PRI = Nan::New<v8::String> ("PRI").ToLocalChecked();
                v8::Local<v8::Integer> PRIValue = Nan::New<v8::Integer> (pRtnTopProcessInfo->PRI);
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (PRI), Local<v8::Value>(PRIValue));

                v8::Local<v8::String> NI = Nan::New<v8::String> ("NI").ToLocalChecked();
                v8::Local<v8::Integer> NIValue = Nan::New<v8::Integer> (pRtnTopProcessInfo->NI);
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (NI), Local<v8::Value>(NIValue));

                v8::Local<v8::String> SIZE = Nan::New<v8::String> ("SIZE").ToLocalChecked();
                v8::Local<v8::Integer> SIZEValue = Nan::New<v8::Integer> (pRtnTopProcessInfo->SIZE);
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (SIZE), Local<v8::Value>(SIZEValue));

                v8::Local<v8::String> RES = Nan::New<v8::String> ("RES").ToLocalChecked();
                v8::Local<v8::Integer> RESValue = Nan::New<v8::Integer> (pRtnTopProcessInfo->RES);
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (RES), Local<v8::Value>(RESValue));

                v8::Local<v8::String> STATE = Nan::New<v8::String> ("STATE").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopProcessInfo->STATE, utf8string);
                v8::Local<v8::String> STATEValue = Nan::New<v8::String> (pRtnTopProcessInfo->STATE).ToLocalChecked();
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (STATE), Local<v8::Value>(STATEValue));

                v8::Local<v8::String> TIME = Nan::New<v8::String> ("TIME").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopProcessInfo->TIME, utf8string);
                v8::Local<v8::String> TIMEValue = Nan::New<v8::String> (pRtnTopProcessInfo->TIME).ToLocalChecked();
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (TIME), Local<v8::Value>(TIMEValue));

                v8::Local<v8::String> pWCPU = Nan::New<v8::String> ("pWCPU").ToLocalChecked();
                v8::Local<v8::Number> pWCPUValue = Nan::New<v8::Number> (pRtnTopProcessInfo->pWCPU);
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (pWCPU), Local<v8::Value>(pWCPUValue));

                v8::Local<v8::String> pCPU = Nan::New<v8::String> ("pCPU").ToLocalChecked();
                v8::Local<v8::Number> pCPUValue = Nan::New<v8::Number> (pRtnTopProcessInfo->pCPU);
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (pCPU), Local<v8::Value>(pCPUValue));

                v8::Local<v8::String> COMMAND = Nan::New<v8::String> ("COMMAND").ToLocalChecked();
                Gb2312ToUtf8(pRtnTopProcessInfo->COMMAND, utf8string);
                v8::Local<v8::String> COMMANDValue = Nan::New<v8::String> (pRtnTopProcessInfo->COMMAND).ToLocalChecked();
                pRtnTopProcessInfoJS->Set(Local<v8::Value> (COMMAND), Local<v8::Value>(COMMANDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnTopProcessInfo) { 
                params[0] = Local<v8::Value>(pRtnTopProcessInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnTopProcessInfo) { 
            delete[] pRtnTopProcessInfo;
            pRtnTopProcessInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnTopProcessInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFileSystemInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryFileSystemInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryFileSystemInfoTopic_trans_callbackNumb: ", g_RspQryFileSystemInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryFileSystemInfoTopic_mutex);

    int dataNumb = g_RspQryFileSystemInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryFileSystemInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryFileSystemInfoTopic_trans_dataNumb: ", g_RspQryFileSystemInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryFileSystemInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryFileSystemInfoTopic_queue.front());
        g_RspQryFileSystemInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryFileSystemInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryFileSystemInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFileSystemInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryFileSystemInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFileSystemInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryFileSystemInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryFileSystemInfoField* pRspQryFileSystemInfo = (CShfeFtdcRspQryFileSystemInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryFileSystemInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryFileSystemInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileSystemInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryFileSystemInfo->HostName).ToLocalChecked();
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileSystemInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryFileSystemInfo->MonDate).ToLocalChecked();
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileSystemInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryFileSystemInfo->MonTime).ToLocalChecked();
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> FILESYSTEM = Nan::New<v8::String> ("FILESYSTEM").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileSystemInfo->FILESYSTEM, utf8string);
                v8::Local<v8::String> FILESYSTEMValue = Nan::New<v8::String> (pRspQryFileSystemInfo->FILESYSTEM).ToLocalChecked();
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (FILESYSTEM), Local<v8::Value>(FILESYSTEMValue));

                v8::Local<v8::String> SIZE = Nan::New<v8::String> ("SIZE").ToLocalChecked();
                v8::Local<v8::Integer> SIZEValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->SIZE);
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (SIZE), Local<v8::Value>(SIZEValue));

                v8::Local<v8::String> USED = Nan::New<v8::String> ("USED").ToLocalChecked();
                v8::Local<v8::Integer> USEDValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->USED);
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (USED), Local<v8::Value>(USEDValue));

                v8::Local<v8::String> AVAIL = Nan::New<v8::String> ("AVAIL").ToLocalChecked();
                v8::Local<v8::Integer> AVAILValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->AVAIL);
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (AVAIL), Local<v8::Value>(AVAILValue));

                v8::Local<v8::String> pUSERD = Nan::New<v8::String> ("pUSERD").ToLocalChecked();
                v8::Local<v8::Number> pUSERDValue = Nan::New<v8::Number> (pRspQryFileSystemInfo->pUSERD);
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (pUSERD), Local<v8::Value>(pUSERDValue));

                v8::Local<v8::String> ISIZE = Nan::New<v8::String> ("ISIZE").ToLocalChecked();
                v8::Local<v8::Integer> ISIZEValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->ISIZE);
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (ISIZE), Local<v8::Value>(ISIZEValue));

                v8::Local<v8::String> IUSED = Nan::New<v8::String> ("IUSED").ToLocalChecked();
                v8::Local<v8::Integer> IUSEDValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->IUSED);
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (IUSED), Local<v8::Value>(IUSEDValue));

                v8::Local<v8::String> IFREE = Nan::New<v8::String> ("IFREE").ToLocalChecked();
                v8::Local<v8::Integer> IFREEValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->IFREE);
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (IFREE), Local<v8::Value>(IFREEValue));

                v8::Local<v8::String> pIUSED = Nan::New<v8::String> ("pIUSED").ToLocalChecked();
                v8::Local<v8::Number> pIUSEDValue = Nan::New<v8::Number> (pRspQryFileSystemInfo->pIUSED);
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (pIUSED), Local<v8::Value>(pIUSEDValue));

                v8::Local<v8::String> MountedOn = Nan::New<v8::String> ("MountedOn").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileSystemInfo->MountedOn, utf8string);
                v8::Local<v8::String> MountedOnValue = Nan::New<v8::String> (pRspQryFileSystemInfo->MountedOn).ToLocalChecked();
                pRspQryFileSystemInfoJS->Set(Local<v8::Value> (MountedOn), Local<v8::Value>(MountedOnValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryFileSystemInfo) { 
                params[0] = Local<v8::Value>(pRspQryFileSystemInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryFileSystemInfo) { 
            delete[] pRspQryFileSystemInfo;
            pRspQryFileSystemInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryFileSystemInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFileSystemInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnFileSystemInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnFileSystemInfoTopic_trans_callbackNumb: ", g_RtnFileSystemInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnFileSystemInfoTopic_mutex);

    int dataNumb = g_RtnFileSystemInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnFileSystemInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnFileSystemInfoTopic_trans_dataNumb: ", g_RtnFileSystemInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnFileSystemInfoTopic_queue.empty()) {
        receivedData.push (g_RtnFileSystemInfoTopic_queue.front());
        g_RtnFileSystemInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnFileSystemInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnFileSystemInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFileSystemInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnFileSystemInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFileSystemInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnFileSystemInfoTopic").ToLocalChecked());

        CShfeFtdcRtnFileSystemInfoField* pRtnFileSystemInfo = (CShfeFtdcRtnFileSystemInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnFileSystemInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnFileSystemInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileSystemInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRtnFileSystemInfo->HostName).ToLocalChecked();
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileSystemInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnFileSystemInfo->MonDate).ToLocalChecked();
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileSystemInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnFileSystemInfo->MonTime).ToLocalChecked();
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> FILESYSTEM = Nan::New<v8::String> ("FILESYSTEM").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileSystemInfo->FILESYSTEM, utf8string);
                v8::Local<v8::String> FILESYSTEMValue = Nan::New<v8::String> (pRtnFileSystemInfo->FILESYSTEM).ToLocalChecked();
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (FILESYSTEM), Local<v8::Value>(FILESYSTEMValue));

                v8::Local<v8::String> SIZE = Nan::New<v8::String> ("SIZE").ToLocalChecked();
                v8::Local<v8::Integer> SIZEValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->SIZE);
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (SIZE), Local<v8::Value>(SIZEValue));

                v8::Local<v8::String> USED = Nan::New<v8::String> ("USED").ToLocalChecked();
                v8::Local<v8::Integer> USEDValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->USED);
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (USED), Local<v8::Value>(USEDValue));

                v8::Local<v8::String> AVAIL = Nan::New<v8::String> ("AVAIL").ToLocalChecked();
                v8::Local<v8::Integer> AVAILValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->AVAIL);
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (AVAIL), Local<v8::Value>(AVAILValue));

                v8::Local<v8::String> pUSERD = Nan::New<v8::String> ("pUSERD").ToLocalChecked();
                v8::Local<v8::Number> pUSERDValue = Nan::New<v8::Number> (pRtnFileSystemInfo->pUSERD);
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (pUSERD), Local<v8::Value>(pUSERDValue));

                v8::Local<v8::String> ISIZE = Nan::New<v8::String> ("ISIZE").ToLocalChecked();
                v8::Local<v8::Integer> ISIZEValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->ISIZE);
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (ISIZE), Local<v8::Value>(ISIZEValue));

                v8::Local<v8::String> IUSED = Nan::New<v8::String> ("IUSED").ToLocalChecked();
                v8::Local<v8::Integer> IUSEDValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->IUSED);
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (IUSED), Local<v8::Value>(IUSEDValue));

                v8::Local<v8::String> IFREE = Nan::New<v8::String> ("IFREE").ToLocalChecked();
                v8::Local<v8::Integer> IFREEValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->IFREE);
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (IFREE), Local<v8::Value>(IFREEValue));

                v8::Local<v8::String> pIUSED = Nan::New<v8::String> ("pIUSED").ToLocalChecked();
                v8::Local<v8::Number> pIUSEDValue = Nan::New<v8::Number> (pRtnFileSystemInfo->pIUSED);
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (pIUSED), Local<v8::Value>(pIUSEDValue));

                v8::Local<v8::String> MountedOn = Nan::New<v8::String> ("MountedOn").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileSystemInfo->MountedOn, utf8string);
                v8::Local<v8::String> MountedOnValue = Nan::New<v8::String> (pRtnFileSystemInfo->MountedOn).ToLocalChecked();
                pRtnFileSystemInfoJS->Set(Local<v8::Value> (MountedOn), Local<v8::Value>(MountedOnValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnFileSystemInfo) { 
                params[0] = Local<v8::Value>(pRtnFileSystemInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnFileSystemInfo) { 
            delete[] pRtnFileSystemInfo;
            pRtnFileSystemInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnFileSystemInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetworkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetworkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetworkInfoTopic_trans_callbackNumb: ", g_RspQryNetworkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetworkInfoTopic_mutex);

    int dataNumb = g_RspQryNetworkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetworkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetworkInfoTopic_trans_dataNumb: ", g_RspQryNetworkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetworkInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetworkInfoTopic_queue.front());
        g_RspQryNetworkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetworkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetworkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetworkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetworkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetworkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetworkInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetworkInfoField* pRspQryNetworkInfo = (CShfeFtdcRspQryNetworkInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetworkInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetworkInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetworkInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryNetworkInfo->HostName).ToLocalChecked();
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetworkInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryNetworkInfo->MonDate).ToLocalChecked();
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetworkInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryNetworkInfo->MonTime).ToLocalChecked();
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> LANNAME = Nan::New<v8::String> ("LANNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetworkInfo->LANNAME, utf8string);
                v8::Local<v8::String> LANNAMEValue = Nan::New<v8::String> (pRspQryNetworkInfo->LANNAME).ToLocalChecked();
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (LANNAME), Local<v8::Value>(LANNAMEValue));

                v8::Local<v8::String> LANSTATUS = Nan::New<v8::String> ("LANSTATUS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetworkInfo->LANSTATUS, utf8string);
                v8::Local<v8::String> LANSTATUSValue = Nan::New<v8::String> (pRspQryNetworkInfo->LANSTATUS).ToLocalChecked();
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (LANSTATUS), Local<v8::Value>(LANSTATUSValue));

                v8::Local<v8::String> IPADDRESS = Nan::New<v8::String> ("IPADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetworkInfo->IPADDRESS, utf8string);
                v8::Local<v8::String> IPADDRESSValue = Nan::New<v8::String> (pRspQryNetworkInfo->IPADDRESS).ToLocalChecked();
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (IPADDRESS), Local<v8::Value>(IPADDRESSValue));

                v8::Local<v8::String> RECVBYTES = Nan::New<v8::String> ("RECVBYTES").ToLocalChecked();
                v8::Local<v8::Number> RECVBYTESValue = Nan::New<v8::Number> (pRspQryNetworkInfo->RECVBYTES);
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (RECVBYTES), Local<v8::Value>(RECVBYTESValue));

                v8::Local<v8::String> RECVPACKETS = Nan::New<v8::String> ("RECVPACKETS").ToLocalChecked();
                v8::Local<v8::Number> RECVPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->RECVPACKETS);
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (RECVPACKETS), Local<v8::Value>(RECVPACKETSValue));

                v8::Local<v8::String> RECVERRORPACKETS = Nan::New<v8::String> ("RECVERRORPACKETS").ToLocalChecked();
                v8::Local<v8::Number> RECVERRORPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->RECVERRORPACKETS);
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (RECVERRORPACKETS), Local<v8::Value>(RECVERRORPACKETSValue));

                v8::Local<v8::String> RECVDROPPACKETS = Nan::New<v8::String> ("RECVDROPPACKETS").ToLocalChecked();
                v8::Local<v8::Number> RECVDROPPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->RECVDROPPACKETS);
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (RECVDROPPACKETS), Local<v8::Value>(RECVDROPPACKETSValue));

                v8::Local<v8::String> SENDBYTES = Nan::New<v8::String> ("SENDBYTES").ToLocalChecked();
                v8::Local<v8::Number> SENDBYTESValue = Nan::New<v8::Number> (pRspQryNetworkInfo->SENDBYTES);
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (SENDBYTES), Local<v8::Value>(SENDBYTESValue));

                v8::Local<v8::String> SENDPACKETS = Nan::New<v8::String> ("SENDPACKETS").ToLocalChecked();
                v8::Local<v8::Number> SENDPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->SENDPACKETS);
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (SENDPACKETS), Local<v8::Value>(SENDPACKETSValue));

                v8::Local<v8::String> SENDERRORPACKETS = Nan::New<v8::String> ("SENDERRORPACKETS").ToLocalChecked();
                v8::Local<v8::Number> SENDERRORPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->SENDERRORPACKETS);
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (SENDERRORPACKETS), Local<v8::Value>(SENDERRORPACKETSValue));

                v8::Local<v8::String> SENDDROPPACKETS = Nan::New<v8::String> ("SENDDROPPACKETS").ToLocalChecked();
                v8::Local<v8::Number> SENDDROPPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->SENDDROPPACKETS);
                pRspQryNetworkInfoJS->Set(Local<v8::Value> (SENDDROPPACKETS), Local<v8::Value>(SENDDROPPACKETSValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetworkInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetworkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetworkInfo) { 
            delete[] pRspQryNetworkInfo;
            pRspQryNetworkInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetworkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetworkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetworkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetworkInfoTopic_trans_callbackNumb: ", g_RtnNetworkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetworkInfoTopic_mutex);

    int dataNumb = g_RtnNetworkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetworkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetworkInfoTopic_trans_dataNumb: ", g_RtnNetworkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetworkInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetworkInfoTopic_queue.front());
        g_RtnNetworkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetworkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetworkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetworkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetworkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetworkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetworkInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetworkInfoField* pRtnNetworkInfo = (CShfeFtdcRtnNetworkInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetworkInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetworkInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetworkInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRtnNetworkInfo->HostName).ToLocalChecked();
                pRtnNetworkInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetworkInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnNetworkInfo->MonDate).ToLocalChecked();
                pRtnNetworkInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetworkInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnNetworkInfo->MonTime).ToLocalChecked();
                pRtnNetworkInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> LANNAME = Nan::New<v8::String> ("LANNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetworkInfo->LANNAME, utf8string);
                v8::Local<v8::String> LANNAMEValue = Nan::New<v8::String> (pRtnNetworkInfo->LANNAME).ToLocalChecked();
                pRtnNetworkInfoJS->Set(Local<v8::Value> (LANNAME), Local<v8::Value>(LANNAMEValue));

                v8::Local<v8::String> LANSTATUS = Nan::New<v8::String> ("LANSTATUS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetworkInfo->LANSTATUS, utf8string);
                v8::Local<v8::String> LANSTATUSValue = Nan::New<v8::String> (pRtnNetworkInfo->LANSTATUS).ToLocalChecked();
                pRtnNetworkInfoJS->Set(Local<v8::Value> (LANSTATUS), Local<v8::Value>(LANSTATUSValue));

                v8::Local<v8::String> IPADDRESS = Nan::New<v8::String> ("IPADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetworkInfo->IPADDRESS, utf8string);
                v8::Local<v8::String> IPADDRESSValue = Nan::New<v8::String> (pRtnNetworkInfo->IPADDRESS).ToLocalChecked();
                pRtnNetworkInfoJS->Set(Local<v8::Value> (IPADDRESS), Local<v8::Value>(IPADDRESSValue));

                v8::Local<v8::String> RECVBYTES = Nan::New<v8::String> ("RECVBYTES").ToLocalChecked();
                v8::Local<v8::Number> RECVBYTESValue = Nan::New<v8::Number> (pRtnNetworkInfo->RECVBYTES);
                pRtnNetworkInfoJS->Set(Local<v8::Value> (RECVBYTES), Local<v8::Value>(RECVBYTESValue));

                v8::Local<v8::String> RECVPACKETS = Nan::New<v8::String> ("RECVPACKETS").ToLocalChecked();
                v8::Local<v8::Number> RECVPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->RECVPACKETS);
                pRtnNetworkInfoJS->Set(Local<v8::Value> (RECVPACKETS), Local<v8::Value>(RECVPACKETSValue));

                v8::Local<v8::String> RECVERRORPACKETS = Nan::New<v8::String> ("RECVERRORPACKETS").ToLocalChecked();
                v8::Local<v8::Number> RECVERRORPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->RECVERRORPACKETS);
                pRtnNetworkInfoJS->Set(Local<v8::Value> (RECVERRORPACKETS), Local<v8::Value>(RECVERRORPACKETSValue));

                v8::Local<v8::String> RECVDROPPACKETS = Nan::New<v8::String> ("RECVDROPPACKETS").ToLocalChecked();
                v8::Local<v8::Number> RECVDROPPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->RECVDROPPACKETS);
                pRtnNetworkInfoJS->Set(Local<v8::Value> (RECVDROPPACKETS), Local<v8::Value>(RECVDROPPACKETSValue));

                v8::Local<v8::String> SENDBYTES = Nan::New<v8::String> ("SENDBYTES").ToLocalChecked();
                v8::Local<v8::Number> SENDBYTESValue = Nan::New<v8::Number> (pRtnNetworkInfo->SENDBYTES);
                pRtnNetworkInfoJS->Set(Local<v8::Value> (SENDBYTES), Local<v8::Value>(SENDBYTESValue));

                v8::Local<v8::String> SENDPACKETS = Nan::New<v8::String> ("SENDPACKETS").ToLocalChecked();
                v8::Local<v8::Number> SENDPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->SENDPACKETS);
                pRtnNetworkInfoJS->Set(Local<v8::Value> (SENDPACKETS), Local<v8::Value>(SENDPACKETSValue));

                v8::Local<v8::String> SENDERRORPACKETS = Nan::New<v8::String> ("SENDERRORPACKETS").ToLocalChecked();
                v8::Local<v8::Number> SENDERRORPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->SENDERRORPACKETS);
                pRtnNetworkInfoJS->Set(Local<v8::Value> (SENDERRORPACKETS), Local<v8::Value>(SENDERRORPACKETSValue));

                v8::Local<v8::String> SENDDROPPACKETS = Nan::New<v8::String> ("SENDDROPPACKETS").ToLocalChecked();
                v8::Local<v8::Number> SENDDROPPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->SENDDROPPACKETS);
                pRtnNetworkInfoJS->Set(Local<v8::Value> (SENDDROPPACKETS), Local<v8::Value>(SENDDROPPACKETSValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetworkInfo) { 
                params[0] = Local<v8::Value>(pRtnNetworkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetworkInfo) { 
            delete[] pRtnNetworkInfo;
            pRtnNetworkInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetworkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientLoginTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryClientLoginTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryClientLoginTopic_trans_callbackNumb: ", g_RspQryClientLoginTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryClientLoginTopic_mutex);

    int dataNumb = g_RspQryClientLoginTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryClientLoginTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryClientLoginTopic_trans_dataNumb: ", g_RspQryClientLoginTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryClientLoginTopic_queue.empty()) {
        receivedData.push (g_RspQryClientLoginTopic_queue.front());
        g_RspQryClientLoginTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryClientLoginTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryClientLoginTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientLoginTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryClientLoginTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientLoginTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryClientLoginTopic").ToLocalChecked());

        CShfeFtdcRspQryClientLoginField* pRspQryClientLogin = (CShfeFtdcRspQryClientLoginField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryClientLoginJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryClientLogin) { 
                string utf8string;
                v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientLogin->UserName, utf8string);
                v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (pRspQryClientLogin->UserName).ToLocalChecked();
                pRspQryClientLoginJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                v8::Local<v8::String> Privalage = Nan::New<v8::String> ("Privalage").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientLogin->Privalage, utf8string);
                v8::Local<v8::String> PrivalageValue = Nan::New<v8::String> (pRspQryClientLogin->Privalage).ToLocalChecked();
                pRspQryClientLoginJS->Set(Local<v8::Value> (Privalage), Local<v8::Value>(PrivalageValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryClientLogin) { 
                params[0] = Local<v8::Value>(pRspQryClientLoginJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryClientLogin) { 
            delete[] pRspQryClientLogin;
            pRspQryClientLogin = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryClientLoginTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMonitorObjectTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryMonitorObjectTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryMonitorObjectTopic_trans_callbackNumb: ", g_RspQryMonitorObjectTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryMonitorObjectTopic_mutex);

    int dataNumb = g_RspQryMonitorObjectTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryMonitorObjectTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryMonitorObjectTopic_trans_dataNumb: ", g_RspQryMonitorObjectTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryMonitorObjectTopic_queue.empty()) {
        receivedData.push (g_RspQryMonitorObjectTopic_queue.front());
        g_RspQryMonitorObjectTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryMonitorObjectTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryMonitorObjectTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMonitorObjectTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryMonitorObjectTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMonitorObjectTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryMonitorObjectTopic").ToLocalChecked());

        CShfeFtdcRspQryMonitorObjectField* pRspQryMonitorObject = (CShfeFtdcRspQryMonitorObjectField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryMonitorObjectJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryMonitorObject) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMonitorObject->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryMonitorObject->ObjectID).ToLocalChecked();
                pRspQryMonitorObjectJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> ObjectName = Nan::New<v8::String> ("ObjectName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMonitorObject->ObjectName, utf8string);
                v8::Local<v8::String> ObjectNameValue = Nan::New<v8::String> (pRspQryMonitorObject->ObjectName).ToLocalChecked();
                pRspQryMonitorObjectJS->Set(Local<v8::Value> (ObjectName), Local<v8::Value>(ObjectNameValue));

                v8::Local<v8::String> WarningActive = Nan::New<v8::String> ("WarningActive").ToLocalChecked();
                v8::Local<v8::Integer> WarningActiveValue = Nan::New<v8::Integer> (pRspQryMonitorObject->WarningActive);
                pRspQryMonitorObjectJS->Set(Local<v8::Value> (WarningActive), Local<v8::Value>(WarningActiveValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryMonitorObject) { 
                params[0] = Local<v8::Value>(pRspQryMonitorObjectJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryMonitorObject) { 
            delete[] pRspQryMonitorObject;
            pRspQryMonitorObject = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryMonitorObjectTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMonitorObjectTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnMonitorObjectTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnMonitorObjectTopic_trans_callbackNumb: ", g_RtnMonitorObjectTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnMonitorObjectTopic_mutex);

    int dataNumb = g_RtnMonitorObjectTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnMonitorObjectTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnMonitorObjectTopic_trans_dataNumb: ", g_RtnMonitorObjectTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnMonitorObjectTopic_queue.empty()) {
        receivedData.push (g_RtnMonitorObjectTopic_queue.front());
        g_RtnMonitorObjectTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnMonitorObjectTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnMonitorObjectTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMonitorObjectTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnMonitorObjectTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMonitorObjectTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnMonitorObjectTopic").ToLocalChecked());

        CShfeFtdcRtnMonitorObjectField* pRtnMonitorObject = (CShfeFtdcRtnMonitorObjectField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnMonitorObjectJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnMonitorObject) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorObject->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnMonitorObject->ObjectID).ToLocalChecked();
                pRtnMonitorObjectJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> ObjectName = Nan::New<v8::String> ("ObjectName").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorObject->ObjectName, utf8string);
                v8::Local<v8::String> ObjectNameValue = Nan::New<v8::String> (pRtnMonitorObject->ObjectName).ToLocalChecked();
                pRtnMonitorObjectJS->Set(Local<v8::Value> (ObjectName), Local<v8::Value>(ObjectNameValue));

                v8::Local<v8::String> WarningActive = Nan::New<v8::String> ("WarningActive").ToLocalChecked();
                v8::Local<v8::Integer> WarningActiveValue = Nan::New<v8::Integer> (pRtnMonitorObject->WarningActive);
                pRtnMonitorObjectJS->Set(Local<v8::Value> (WarningActive), Local<v8::Value>(WarningActiveValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnMonitorObject) { 
                params[0] = Local<v8::Value>(pRtnMonitorObjectJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnMonitorObject) { 
            delete[] pRtnMonitorObject;
            pRtnMonitorObject = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnMonitorObjectTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryObjectRationalTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryObjectRationalTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryObjectRationalTopic_trans_callbackNumb: ", g_RspQryObjectRationalTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryObjectRationalTopic_mutex);

    int dataNumb = g_RspQryObjectRationalTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryObjectRationalTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryObjectRationalTopic_trans_dataNumb: ", g_RspQryObjectRationalTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryObjectRationalTopic_queue.empty()) {
        receivedData.push (g_RspQryObjectRationalTopic_queue.front());
        g_RspQryObjectRationalTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryObjectRationalTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryObjectRationalTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryObjectRationalTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryObjectRationalTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryObjectRationalTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryObjectRationalTopic").ToLocalChecked());

        CShfeFtdcRspQryObjectRationalField* pRspQryObjectRational = (CShfeFtdcRspQryObjectRationalField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryObjectRationalJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryObjectRational) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryObjectRational->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryObjectRational->ObjectID).ToLocalChecked();
                pRspQryObjectRationalJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> HostObjectID = Nan::New<v8::String> ("HostObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryObjectRational->HostObjectID, utf8string);
                v8::Local<v8::String> HostObjectIDValue = Nan::New<v8::String> (pRspQryObjectRational->HostObjectID).ToLocalChecked();
                pRspQryObjectRationalJS->Set(Local<v8::Value> (HostObjectID), Local<v8::Value>(HostObjectIDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryObjectRational) { 
                params[0] = Local<v8::Value>(pRspQryObjectRationalJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryObjectRational) { 
            delete[] pRspQryObjectRational;
            pRspQryObjectRational = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryObjectRationalTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnObjectRationalTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnObjectRationalTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnObjectRationalTopic_trans_callbackNumb: ", g_RtnObjectRationalTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnObjectRationalTopic_mutex);

    int dataNumb = g_RtnObjectRationalTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnObjectRationalTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnObjectRationalTopic_trans_dataNumb: ", g_RtnObjectRationalTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnObjectRationalTopic_queue.empty()) {
        receivedData.push (g_RtnObjectRationalTopic_queue.front());
        g_RtnObjectRationalTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnObjectRationalTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnObjectRationalTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnObjectRationalTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnObjectRationalTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnObjectRationalTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnObjectRationalTopic").ToLocalChecked());

        CShfeFtdcRtnObjectRationalField* pRtnObjectRational = (CShfeFtdcRtnObjectRationalField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnObjectRationalJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnObjectRational) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnObjectRational->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnObjectRational->ObjectID).ToLocalChecked();
                pRtnObjectRationalJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> HostObjectID = Nan::New<v8::String> ("HostObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnObjectRational->HostObjectID, utf8string);
                v8::Local<v8::String> HostObjectIDValue = Nan::New<v8::String> (pRtnObjectRational->HostObjectID).ToLocalChecked();
                pRtnObjectRationalJS->Set(Local<v8::Value> (HostObjectID), Local<v8::Value>(HostObjectIDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnObjectRational) { 
                params[0] = Local<v8::Value>(pRtnObjectRationalJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnObjectRational) { 
            delete[] pRtnObjectRational;
            pRtnObjectRational = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnObjectRationalTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySyslogInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySyslogInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySyslogInfoTopic_trans_callbackNumb: ", g_RspQrySyslogInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySyslogInfoTopic_mutex);

    int dataNumb = g_RspQrySyslogInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySyslogInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySyslogInfoTopic_trans_dataNumb: ", g_RspQrySyslogInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySyslogInfoTopic_queue.empty()) {
        receivedData.push (g_RspQrySyslogInfoTopic_queue.front());
        g_RspQrySyslogInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySyslogInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySyslogInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySyslogInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySyslogInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySyslogInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySyslogInfoTopic").ToLocalChecked());

        CShfeFtdcRspQrySyslogInfoField* pRspQrySyslogInfo = (CShfeFtdcRspQrySyslogInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySyslogInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySyslogInfo) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQrySyslogInfo->MonDate).ToLocalChecked();
                pRspQrySyslogInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQrySyslogInfo->MonTime).ToLocalChecked();
                pRspQrySyslogInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQrySyslogInfo->ObjectID).ToLocalChecked();
                pRspQrySyslogInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogInfo->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRspQrySyslogInfo->AttrType).ToLocalChecked();
                pRspQrySyslogInfoJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> ContLen = Nan::New<v8::String> ("ContLen").ToLocalChecked();
                v8::Local<v8::Integer> ContLenValue = Nan::New<v8::Integer> (pRspQrySyslogInfo->ContLen);
                pRspQrySyslogInfoJS->Set(Local<v8::Value> (ContLen), Local<v8::Value>(ContLenValue));

                v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogInfo->FileContent, utf8string);
                v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (pRspQrySyslogInfo->FileContent).ToLocalChecked();
                pRspQrySyslogInfoJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySyslogInfo) { 
                params[0] = Local<v8::Value>(pRspQrySyslogInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySyslogInfo) { 
            delete[] pRspQrySyslogInfo;
            pRspQrySyslogInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySyslogInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSyslogInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnSyslogInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnSyslogInfoTopic_trans_callbackNumb: ", g_RtnSyslogInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnSyslogInfoTopic_mutex);

    int dataNumb = g_RtnSyslogInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnSyslogInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnSyslogInfoTopic_trans_dataNumb: ", g_RtnSyslogInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnSyslogInfoTopic_queue.empty()) {
        receivedData.push (g_RtnSyslogInfoTopic_queue.front());
        g_RtnSyslogInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnSyslogInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnSyslogInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSyslogInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnSyslogInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSyslogInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnSyslogInfoTopic").ToLocalChecked());

        CShfeFtdcRtnSyslogInfoField* pRtnSyslogInfo = (CShfeFtdcRtnSyslogInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnSyslogInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnSyslogInfo) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnSyslogInfo->MonDate).ToLocalChecked();
                pRtnSyslogInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnSyslogInfo->MonTime).ToLocalChecked();
                pRtnSyslogInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnSyslogInfo->ObjectID).ToLocalChecked();
                pRtnSyslogInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogInfo->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRtnSyslogInfo->AttrType).ToLocalChecked();
                pRtnSyslogInfoJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> ContLen = Nan::New<v8::String> ("ContLen").ToLocalChecked();
                v8::Local<v8::Integer> ContLenValue = Nan::New<v8::Integer> (pRtnSyslogInfo->ContLen);
                pRtnSyslogInfoJS->Set(Local<v8::Value> (ContLen), Local<v8::Value>(ContLenValue));

                v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogInfo->FileContent, utf8string);
                v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (pRtnSyslogInfo->FileContent).ToLocalChecked();
                pRtnSyslogInfoJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnSyslogInfo) { 
                params[0] = Local<v8::Value>(pRtnSyslogInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnSyslogInfo) { 
            delete[] pRtnSyslogInfo;
            pRtnSyslogInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnSyslogInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySubscriberTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySubscriberTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySubscriberTopic_trans_callbackNumb: ", g_RspQrySubscriberTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySubscriberTopic_mutex);

    int dataNumb = g_RspQrySubscriberTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySubscriberTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySubscriberTopic_trans_dataNumb: ", g_RspQrySubscriberTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySubscriberTopic_queue.empty()) {
        receivedData.push (g_RspQrySubscriberTopic_queue.front());
        g_RspQrySubscriberTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySubscriberTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySubscriberTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySubscriberTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySubscriberTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySubscriberTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySubscriberTopic").ToLocalChecked());

        CShfeFtdcRspQrySubscriberField* pRspQrySubscriber = (CShfeFtdcRspQrySubscriberField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySubscriberJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySubscriber) { 
                string utf8string;
                v8::Local<v8::String> ErrorID = Nan::New<v8::String> ("ErrorID").ToLocalChecked();
                v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer> (pRspQrySubscriber->ErrorID);
                pRspQrySubscriberJS->Set(Local<v8::Value> (ErrorID), Local<v8::Value>(ErrorIDValue));

                v8::Local<v8::String> ErrorMsg = Nan::New<v8::String> ("ErrorMsg").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySubscriber->ErrorMsg, utf8string);
                v8::Local<v8::String> ErrorMsgValue = Nan::New<v8::String> (pRspQrySubscriber->ErrorMsg).ToLocalChecked();
                pRspQrySubscriberJS->Set(Local<v8::Value> (ErrorMsg), Local<v8::Value>(ErrorMsgValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySubscriber->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQrySubscriber->ObjectID).ToLocalChecked();
                pRspQrySubscriberJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySubscriber) { 
                params[0] = Local<v8::Value>(pRspQrySubscriberJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySubscriber) { 
            delete[] pRspQrySubscriber;
            pRspQrySubscriber = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySubscriberTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryOidRelationTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryOidRelationTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryOidRelationTopic_trans_callbackNumb: ", g_RspQryOidRelationTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryOidRelationTopic_mutex);

    int dataNumb = g_RspQryOidRelationTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryOidRelationTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryOidRelationTopic_trans_dataNumb: ", g_RspQryOidRelationTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryOidRelationTopic_queue.empty()) {
        receivedData.push (g_RspQryOidRelationTopic_queue.front());
        g_RspQryOidRelationTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryOidRelationTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryOidRelationTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryOidRelationTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryOidRelationTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryOidRelationTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryOidRelationTopic").ToLocalChecked());

        CShfeFtdcRspQryOidRelationField* pRspQryOidRelation = (CShfeFtdcRspQryOidRelationField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryOidRelationJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryOidRelation) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOidRelation->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryOidRelation->ObjectID).ToLocalChecked();
                pRspQryOidRelationJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> HoldObjectID = Nan::New<v8::String> ("HoldObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOidRelation->HoldObjectID, utf8string);
                v8::Local<v8::String> HoldObjectIDValue = Nan::New<v8::String> (pRspQryOidRelation->HoldObjectID).ToLocalChecked();
                pRspQryOidRelationJS->Set(Local<v8::Value> (HoldObjectID), Local<v8::Value>(HoldObjectIDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryOidRelation) { 
                params[0] = Local<v8::Value>(pRspQryOidRelationJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryOidRelation) { 
            delete[] pRspQryOidRelation;
            pRspQryOidRelation = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryOidRelationTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnOidRelationTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnOidRelationTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnOidRelationTopic_trans_callbackNumb: ", g_RtnOidRelationTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnOidRelationTopic_mutex);

    int dataNumb = g_RtnOidRelationTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnOidRelationTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnOidRelationTopic_trans_dataNumb: ", g_RtnOidRelationTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnOidRelationTopic_queue.empty()) {
        receivedData.push (g_RtnOidRelationTopic_queue.front());
        g_RtnOidRelationTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnOidRelationTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnOidRelationTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnOidRelationTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnOidRelationTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnOidRelationTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnOidRelationTopic").ToLocalChecked());

        CShfeFtdcRtnOidRelationField* pRtnOidRelation = (CShfeFtdcRtnOidRelationField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnOidRelationJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnOidRelation) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnOidRelation->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnOidRelation->ObjectID).ToLocalChecked();
                pRtnOidRelationJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> HoldObjectID = Nan::New<v8::String> ("HoldObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnOidRelation->HoldObjectID, utf8string);
                v8::Local<v8::String> HoldObjectIDValue = Nan::New<v8::String> (pRtnOidRelation->HoldObjectID).ToLocalChecked();
                pRtnOidRelationJS->Set(Local<v8::Value> (HoldObjectID), Local<v8::Value>(HoldObjectIDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnOidRelation) { 
                params[0] = Local<v8::Value>(pRtnOidRelationJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnOidRelation) { 
            delete[] pRtnOidRelation;
            pRtnOidRelation = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnOidRelationTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryUserInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryUserInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryUserInfoTopic_trans_callbackNumb: ", g_RspQryUserInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryUserInfoTopic_mutex);

    int dataNumb = g_RspQryUserInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryUserInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryUserInfoTopic_trans_dataNumb: ", g_RspQryUserInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryUserInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryUserInfoTopic_queue.front());
        g_RspQryUserInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryUserInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryUserInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryUserInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryUserInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryUserInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryUserInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryUserInfoField* pRspQryUserInfo = (CShfeFtdcRspQryUserInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryUserInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryUserInfo) { 
                string utf8string;
                v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserInfo->USERNAME, utf8string);
                v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (pRspQryUserInfo->USERNAME).ToLocalChecked();
                pRspQryUserInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                v8::Local<v8::String> USERID = Nan::New<v8::String> ("USERID").ToLocalChecked();
                v8::Local<v8::Integer> USERIDValue = Nan::New<v8::Integer> (pRspQryUserInfo->USERID);
                pRspQryUserInfoJS->Set(Local<v8::Value> (USERID), Local<v8::Value>(USERIDValue));

                v8::Local<v8::String> GROUPNAME = Nan::New<v8::String> ("GROUPNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserInfo->GROUPNAME, utf8string);
                v8::Local<v8::String> GROUPNAMEValue = Nan::New<v8::String> (pRspQryUserInfo->GROUPNAME).ToLocalChecked();
                pRspQryUserInfoJS->Set(Local<v8::Value> (GROUPNAME), Local<v8::Value>(GROUPNAMEValue));

                v8::Local<v8::String> GROUPID = Nan::New<v8::String> ("GROUPID").ToLocalChecked();
                v8::Local<v8::Integer> GROUPIDValue = Nan::New<v8::Integer> (pRspQryUserInfo->GROUPID);
                pRspQryUserInfoJS->Set(Local<v8::Value> (GROUPID), Local<v8::Value>(GROUPIDValue));

                v8::Local<v8::String> HOMEPATH = Nan::New<v8::String> ("HOMEPATH").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserInfo->HOMEPATH, utf8string);
                v8::Local<v8::String> HOMEPATHValue = Nan::New<v8::String> (pRspQryUserInfo->HOMEPATH).ToLocalChecked();
                pRspQryUserInfoJS->Set(Local<v8::Value> (HOMEPATH), Local<v8::Value>(HOMEPATHValue));

                v8::Local<v8::String> SHELL = Nan::New<v8::String> ("SHELL").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserInfo->SHELL, utf8string);
                v8::Local<v8::String> SHELLValue = Nan::New<v8::String> (pRspQryUserInfo->SHELL).ToLocalChecked();
                pRspQryUserInfoJS->Set(Local<v8::Value> (SHELL), Local<v8::Value>(SHELLValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryUserInfo->ObjectID).ToLocalChecked();
                pRspQryUserInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryUserInfo->MonTime).ToLocalChecked();
                pRspQryUserInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryUserInfo->MonDate).ToLocalChecked();
                pRspQryUserInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryUserInfo) { 
                params[0] = Local<v8::Value>(pRspQryUserInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryUserInfo) { 
            delete[] pRspQryUserInfo;
            pRspQryUserInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryUserInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnUserInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnUserInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnUserInfoTopic_trans_callbackNumb: ", g_RtnUserInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnUserInfoTopic_mutex);

    int dataNumb = g_RtnUserInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnUserInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnUserInfoTopic_trans_dataNumb: ", g_RtnUserInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnUserInfoTopic_queue.empty()) {
        receivedData.push (g_RtnUserInfoTopic_queue.front());
        g_RtnUserInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnUserInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnUserInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnUserInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnUserInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnUserInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnUserInfoTopic").ToLocalChecked());

        CShfeFtdcRtnUserInfoField* pRtnUserInfo = (CShfeFtdcRtnUserInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnUserInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnUserInfo) { 
                string utf8string;
                v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserInfo->USERNAME, utf8string);
                v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (pRtnUserInfo->USERNAME).ToLocalChecked();
                pRtnUserInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                v8::Local<v8::String> USERID = Nan::New<v8::String> ("USERID").ToLocalChecked();
                v8::Local<v8::Integer> USERIDValue = Nan::New<v8::Integer> (pRtnUserInfo->USERID);
                pRtnUserInfoJS->Set(Local<v8::Value> (USERID), Local<v8::Value>(USERIDValue));

                v8::Local<v8::String> GROUPNAME = Nan::New<v8::String> ("GROUPNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserInfo->GROUPNAME, utf8string);
                v8::Local<v8::String> GROUPNAMEValue = Nan::New<v8::String> (pRtnUserInfo->GROUPNAME).ToLocalChecked();
                pRtnUserInfoJS->Set(Local<v8::Value> (GROUPNAME), Local<v8::Value>(GROUPNAMEValue));

                v8::Local<v8::String> GROUPID = Nan::New<v8::String> ("GROUPID").ToLocalChecked();
                v8::Local<v8::Integer> GROUPIDValue = Nan::New<v8::Integer> (pRtnUserInfo->GROUPID);
                pRtnUserInfoJS->Set(Local<v8::Value> (GROUPID), Local<v8::Value>(GROUPIDValue));

                v8::Local<v8::String> HOMEPATH = Nan::New<v8::String> ("HOMEPATH").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserInfo->HOMEPATH, utf8string);
                v8::Local<v8::String> HOMEPATHValue = Nan::New<v8::String> (pRtnUserInfo->HOMEPATH).ToLocalChecked();
                pRtnUserInfoJS->Set(Local<v8::Value> (HOMEPATH), Local<v8::Value>(HOMEPATHValue));

                v8::Local<v8::String> SHELL = Nan::New<v8::String> ("SHELL").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserInfo->SHELL, utf8string);
                v8::Local<v8::String> SHELLValue = Nan::New<v8::String> (pRtnUserInfo->SHELL).ToLocalChecked();
                pRtnUserInfoJS->Set(Local<v8::Value> (SHELL), Local<v8::Value>(SHELLValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnUserInfo->ObjectID).ToLocalChecked();
                pRtnUserInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnUserInfo->MonTime).ToLocalChecked();
                pRtnUserInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnUserInfo->MonDate).ToLocalChecked();
                pRtnUserInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnUserInfo) { 
                params[0] = Local<v8::Value>(pRtnUserInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnUserInfo) { 
            delete[] pRtnUserInfo;
            pRtnUserInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnUserInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryOnlineUserInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryOnlineUserInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryOnlineUserInfoTopic_trans_callbackNumb: ", g_RspQryOnlineUserInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryOnlineUserInfoTopic_mutex);

    int dataNumb = g_RspQryOnlineUserInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryOnlineUserInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryOnlineUserInfoTopic_trans_dataNumb: ", g_RspQryOnlineUserInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryOnlineUserInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryOnlineUserInfoTopic_queue.front());
        g_RspQryOnlineUserInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryOnlineUserInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryOnlineUserInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryOnlineUserInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryOnlineUserInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryOnlineUserInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryOnlineUserInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryOnlineUserInfoField* pRspQryOnlineUserInfo = (CShfeFtdcRspQryOnlineUserInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryOnlineUserInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryOnlineUserInfo) { 
                string utf8string;
                v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOnlineUserInfo->USERNAME, utf8string);
                v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (pRspQryOnlineUserInfo->USERNAME).ToLocalChecked();
                pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                v8::Local<v8::String> TIME = Nan::New<v8::String> ("TIME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOnlineUserInfo->TIME, utf8string);
                v8::Local<v8::String> TIMEValue = Nan::New<v8::String> (pRspQryOnlineUserInfo->TIME).ToLocalChecked();
                pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (TIME), Local<v8::Value>(TIMEValue));

                v8::Local<v8::String> TTY = Nan::New<v8::String> ("TTY").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOnlineUserInfo->TTY, utf8string);
                v8::Local<v8::String> TTYValue = Nan::New<v8::String> (pRspQryOnlineUserInfo->TTY).ToLocalChecked();
                pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (TTY), Local<v8::Value>(TTYValue));

                v8::Local<v8::String> IP = Nan::New<v8::String> ("IP").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOnlineUserInfo->IP, utf8string);
                v8::Local<v8::String> IPValue = Nan::New<v8::String> (pRspQryOnlineUserInfo->IP).ToLocalChecked();
                pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (IP), Local<v8::Value>(IPValue));

                v8::Local<v8::String> CONNECTIME = Nan::New<v8::String> ("CONNECTIME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOnlineUserInfo->CONNECTIME, utf8string);
                v8::Local<v8::String> CONNECTIMEValue = Nan::New<v8::String> (pRspQryOnlineUserInfo->CONNECTIME).ToLocalChecked();
                pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (CONNECTIME), Local<v8::Value>(CONNECTIMEValue));

                v8::Local<v8::String> PID = Nan::New<v8::String> ("PID").ToLocalChecked();
                v8::Local<v8::Integer> PIDValue = Nan::New<v8::Integer> (pRspQryOnlineUserInfo->PID);
                pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (PID), Local<v8::Value>(PIDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOnlineUserInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryOnlineUserInfo->ObjectID).ToLocalChecked();
                pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOnlineUserInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryOnlineUserInfo->MonTime).ToLocalChecked();
                pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOnlineUserInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryOnlineUserInfo->MonDate).ToLocalChecked();
                pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryOnlineUserInfo) { 
                params[0] = Local<v8::Value>(pRspQryOnlineUserInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryOnlineUserInfo) { 
            delete[] pRspQryOnlineUserInfo;
            pRspQryOnlineUserInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryOnlineUserInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnOnlineUserInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnOnlineUserInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnOnlineUserInfoTopic_trans_callbackNumb: ", g_RtnOnlineUserInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnOnlineUserInfoTopic_mutex);

    int dataNumb = g_RtnOnlineUserInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnOnlineUserInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnOnlineUserInfoTopic_trans_dataNumb: ", g_RtnOnlineUserInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnOnlineUserInfoTopic_queue.empty()) {
        receivedData.push (g_RtnOnlineUserInfoTopic_queue.front());
        g_RtnOnlineUserInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnOnlineUserInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnOnlineUserInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnOnlineUserInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnOnlineUserInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnOnlineUserInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnOnlineUserInfoTopic").ToLocalChecked());

        CShfeFtdcRtnOnlineUserInfoField* pRtnOnlineUserInfo = (CShfeFtdcRtnOnlineUserInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnOnlineUserInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnOnlineUserInfo) { 
                string utf8string;
                v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnOnlineUserInfo->USERNAME, utf8string);
                v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (pRtnOnlineUserInfo->USERNAME).ToLocalChecked();
                pRtnOnlineUserInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                v8::Local<v8::String> TIME = Nan::New<v8::String> ("TIME").ToLocalChecked();
                Gb2312ToUtf8(pRtnOnlineUserInfo->TIME, utf8string);
                v8::Local<v8::String> TIMEValue = Nan::New<v8::String> (pRtnOnlineUserInfo->TIME).ToLocalChecked();
                pRtnOnlineUserInfoJS->Set(Local<v8::Value> (TIME), Local<v8::Value>(TIMEValue));

                v8::Local<v8::String> TTY = Nan::New<v8::String> ("TTY").ToLocalChecked();
                Gb2312ToUtf8(pRtnOnlineUserInfo->TTY, utf8string);
                v8::Local<v8::String> TTYValue = Nan::New<v8::String> (pRtnOnlineUserInfo->TTY).ToLocalChecked();
                pRtnOnlineUserInfoJS->Set(Local<v8::Value> (TTY), Local<v8::Value>(TTYValue));

                v8::Local<v8::String> IP = Nan::New<v8::String> ("IP").ToLocalChecked();
                Gb2312ToUtf8(pRtnOnlineUserInfo->IP, utf8string);
                v8::Local<v8::String> IPValue = Nan::New<v8::String> (pRtnOnlineUserInfo->IP).ToLocalChecked();
                pRtnOnlineUserInfoJS->Set(Local<v8::Value> (IP), Local<v8::Value>(IPValue));

                v8::Local<v8::String> CONNECTIME = Nan::New<v8::String> ("CONNECTIME").ToLocalChecked();
                Gb2312ToUtf8(pRtnOnlineUserInfo->CONNECTIME, utf8string);
                v8::Local<v8::String> CONNECTIMEValue = Nan::New<v8::String> (pRtnOnlineUserInfo->CONNECTIME).ToLocalChecked();
                pRtnOnlineUserInfoJS->Set(Local<v8::Value> (CONNECTIME), Local<v8::Value>(CONNECTIMEValue));

                v8::Local<v8::String> PID = Nan::New<v8::String> ("PID").ToLocalChecked();
                v8::Local<v8::Integer> PIDValue = Nan::New<v8::Integer> (pRtnOnlineUserInfo->PID);
                pRtnOnlineUserInfoJS->Set(Local<v8::Value> (PID), Local<v8::Value>(PIDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnOnlineUserInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnOnlineUserInfo->ObjectID).ToLocalChecked();
                pRtnOnlineUserInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnOnlineUserInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnOnlineUserInfo->MonTime).ToLocalChecked();
                pRtnOnlineUserInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnOnlineUserInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnOnlineUserInfo->MonDate).ToLocalChecked();
                pRtnOnlineUserInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnOnlineUserInfo) { 
                params[0] = Local<v8::Value>(pRtnOnlineUserInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnOnlineUserInfo) { 
            delete[] pRtnOnlineUserInfo;
            pRtnOnlineUserInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnOnlineUserInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryWarningEventTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryWarningEventTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryWarningEventTopic_trans_callbackNumb: ", g_RspQryWarningEventTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryWarningEventTopic_mutex);

    int dataNumb = g_RspQryWarningEventTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryWarningEventTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryWarningEventTopic_trans_dataNumb: ", g_RspQryWarningEventTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryWarningEventTopic_queue.empty()) {
        receivedData.push (g_RspQryWarningEventTopic_queue.front());
        g_RspQryWarningEventTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryWarningEventTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryWarningEventTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryWarningEventTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryWarningEventTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryWarningEventTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryWarningEventTopic").ToLocalChecked());

        CShfeFtdcRspQryWarningEventField* pRspQryWarningEvent = (CShfeFtdcRspQryWarningEventField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryWarningEventJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryWarningEvent) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryWarningEvent->MonDate).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryWarningEvent->MonTime).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> OccurDate = Nan::New<v8::String> ("OccurDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->OccurDate, utf8string);
                v8::Local<v8::String> OccurDateValue = Nan::New<v8::String> (pRspQryWarningEvent->OccurDate).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (OccurDate), Local<v8::Value>(OccurDateValue));

                v8::Local<v8::String> OccurTime = Nan::New<v8::String> ("OccurTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->OccurTime, utf8string);
                v8::Local<v8::String> OccurTimeValue = Nan::New<v8::String> (pRspQryWarningEvent->OccurTime).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (OccurTime), Local<v8::Value>(OccurTimeValue));

                v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRspQryWarningEvent->EvendID);
                pRspQryWarningEventJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryWarningEvent->ObjectID).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRspQryWarningEvent->IPAddress).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> EventName = Nan::New<v8::String> ("EventName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->EventName, utf8string);
                v8::Local<v8::String> EventNameValue = Nan::New<v8::String> (pRspQryWarningEvent->EventName).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (EventName), Local<v8::Value>(EventNameValue));

                v8::Local<v8::String> EventNum = Nan::New<v8::String> ("EventNum").ToLocalChecked();
                v8::Local<v8::Integer> EventNumValue = Nan::New<v8::Integer> (pRspQryWarningEvent->EventNum);
                pRspQryWarningEventJS->Set(Local<v8::Value> (EventNum), Local<v8::Value>(EventNumValue));

                v8::Local<v8::String> EventType = Nan::New<v8::String> ("EventType").ToLocalChecked();
                v8::Local<v8::Integer> EventTypeValue = Nan::New<v8::Integer> (pRspQryWarningEvent->EventType);
                pRspQryWarningEventJS->Set(Local<v8::Value> (EventType), Local<v8::Value>(EventTypeValue));

                v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->EventDes, utf8string);
                v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (pRspQryWarningEvent->EventDes).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

                v8::Local<v8::String> ProcessFlag = Nan::New<v8::String> ("ProcessFlag").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->ProcessFlag, utf8string);
                v8::Local<v8::String> ProcessFlagValue = Nan::New<v8::String> (pRspQryWarningEvent->ProcessFlag).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (ProcessFlag), Local<v8::Value>(ProcessFlagValue));

                v8::Local<v8::String> WarningLevel = Nan::New<v8::String> ("WarningLevel").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->WarningLevel, utf8string);
                v8::Local<v8::String> WarningLevelValue = Nan::New<v8::String> (pRspQryWarningEvent->WarningLevel).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (WarningLevel), Local<v8::Value>(WarningLevelValue));

                v8::Local<v8::String> EventDealDes = Nan::New<v8::String> ("EventDealDes").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->EventDealDes, utf8string);
                v8::Local<v8::String> EventDealDesValue = Nan::New<v8::String> (pRspQryWarningEvent->EventDealDes).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (EventDealDes), Local<v8::Value>(EventDealDesValue));

                v8::Local<v8::String> FullEventName = Nan::New<v8::String> ("FullEventName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningEvent->FullEventName, utf8string);
                v8::Local<v8::String> FullEventNameValue = Nan::New<v8::String> (pRspQryWarningEvent->FullEventName).ToLocalChecked();
                pRspQryWarningEventJS->Set(Local<v8::Value> (FullEventName), Local<v8::Value>(FullEventNameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryWarningEvent) { 
                params[0] = Local<v8::Value>(pRspQryWarningEventJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryWarningEvent) { 
            delete[] pRspQryWarningEvent;
            pRspQryWarningEvent = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryWarningEventTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnWarningEventTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnWarningEventTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnWarningEventTopic_trans_callbackNumb: ", g_RtnWarningEventTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnWarningEventTopic_mutex);

    int dataNumb = g_RtnWarningEventTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnWarningEventTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnWarningEventTopic_trans_dataNumb: ", g_RtnWarningEventTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnWarningEventTopic_queue.empty()) {
        receivedData.push (g_RtnWarningEventTopic_queue.front());
        g_RtnWarningEventTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnWarningEventTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnWarningEventTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnWarningEventTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnWarningEventTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnWarningEventTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnWarningEventTopic").ToLocalChecked());

        CShfeFtdcRtnWarningEventField* pRtnWarningEvent = (CShfeFtdcRtnWarningEventField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnWarningEventJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnWarningEvent) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnWarningEvent->MonDate).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnWarningEvent->MonTime).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> OccurDate = Nan::New<v8::String> ("OccurDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->OccurDate, utf8string);
                v8::Local<v8::String> OccurDateValue = Nan::New<v8::String> (pRtnWarningEvent->OccurDate).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (OccurDate), Local<v8::Value>(OccurDateValue));

                v8::Local<v8::String> OccurTime = Nan::New<v8::String> ("OccurTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->OccurTime, utf8string);
                v8::Local<v8::String> OccurTimeValue = Nan::New<v8::String> (pRtnWarningEvent->OccurTime).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (OccurTime), Local<v8::Value>(OccurTimeValue));

                v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRtnWarningEvent->EvendID);
                pRtnWarningEventJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnWarningEvent->ObjectID).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRtnWarningEvent->IPAddress).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> EventName = Nan::New<v8::String> ("EventName").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->EventName, utf8string);
                v8::Local<v8::String> EventNameValue = Nan::New<v8::String> (pRtnWarningEvent->EventName).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (EventName), Local<v8::Value>(EventNameValue));

                v8::Local<v8::String> EventNum = Nan::New<v8::String> ("EventNum").ToLocalChecked();
                v8::Local<v8::Integer> EventNumValue = Nan::New<v8::Integer> (pRtnWarningEvent->EventNum);
                pRtnWarningEventJS->Set(Local<v8::Value> (EventNum), Local<v8::Value>(EventNumValue));

                v8::Local<v8::String> EventType = Nan::New<v8::String> ("EventType").ToLocalChecked();
                v8::Local<v8::Integer> EventTypeValue = Nan::New<v8::Integer> (pRtnWarningEvent->EventType);
                pRtnWarningEventJS->Set(Local<v8::Value> (EventType), Local<v8::Value>(EventTypeValue));

                v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->EventDes, utf8string);
                v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (pRtnWarningEvent->EventDes).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

                v8::Local<v8::String> ProcessFlag = Nan::New<v8::String> ("ProcessFlag").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->ProcessFlag, utf8string);
                v8::Local<v8::String> ProcessFlagValue = Nan::New<v8::String> (pRtnWarningEvent->ProcessFlag).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (ProcessFlag), Local<v8::Value>(ProcessFlagValue));

                v8::Local<v8::String> WarningLevel = Nan::New<v8::String> ("WarningLevel").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->WarningLevel, utf8string);
                v8::Local<v8::String> WarningLevelValue = Nan::New<v8::String> (pRtnWarningEvent->WarningLevel).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (WarningLevel), Local<v8::Value>(WarningLevelValue));

                v8::Local<v8::String> EventDealDes = Nan::New<v8::String> ("EventDealDes").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->EventDealDes, utf8string);
                v8::Local<v8::String> EventDealDesValue = Nan::New<v8::String> (pRtnWarningEvent->EventDealDes).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (EventDealDes), Local<v8::Value>(EventDealDesValue));

                v8::Local<v8::String> FullEventName = Nan::New<v8::String> ("FullEventName").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningEvent->FullEventName, utf8string);
                v8::Local<v8::String> FullEventNameValue = Nan::New<v8::String> (pRtnWarningEvent->FullEventName).ToLocalChecked();
                pRtnWarningEventJS->Set(Local<v8::Value> (FullEventName), Local<v8::Value>(FullEventNameValue));

                v8::Local<v8::String> EventCount = Nan::New<v8::String> ("EventCount").ToLocalChecked();
                v8::Local<v8::Integer> EventCountValue = Nan::New<v8::Integer> (pRtnWarningEvent->EventCount);
                pRtnWarningEventJS->Set(Local<v8::Value> (EventCount), Local<v8::Value>(EventCountValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnWarningEvent) { 
                params[0] = Local<v8::Value>(pRtnWarningEventJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnWarningEvent) { 
            delete[] pRtnWarningEvent;
            pRtnWarningEvent = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnWarningEventTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryCPUUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryCPUUsageTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryCPUUsageTopic_trans_callbackNumb: ", g_RspQryCPUUsageTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryCPUUsageTopic_mutex);

    int dataNumb = g_RspQryCPUUsageTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryCPUUsageTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryCPUUsageTopic_trans_dataNumb: ", g_RspQryCPUUsageTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryCPUUsageTopic_queue.empty()) {
        receivedData.push (g_RspQryCPUUsageTopic_queue.front());
        g_RspQryCPUUsageTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryCPUUsageTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryCPUUsageTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryCPUUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryCPUUsageTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryCPUUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryCPUUsageTopic").ToLocalChecked());

        CShfeFtdcRspQryCPUUsageField* pRspQryCPUUsage = (CShfeFtdcRspQryCPUUsageField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryCPUUsageJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryCPUUsage) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryCPUUsage->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryCPUUsage->ObjectID).ToLocalChecked();
                pRspQryCPUUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryCPUUsage->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryCPUUsage->MonDate).ToLocalChecked();
                pRspQryCPUUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryCPUUsage->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryCPUUsage->MonTime).ToLocalChecked();
                pRspQryCPUUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> CPUUsage = Nan::New<v8::String> ("CPUUsage").ToLocalChecked();
                v8::Local<v8::Number> CPUUsageValue = Nan::New<v8::Number> (pRspQryCPUUsage->CPUUsage);
                pRspQryCPUUsageJS->Set(Local<v8::Value> (CPUUsage), Local<v8::Value>(CPUUsageValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryCPUUsage) { 
                params[0] = Local<v8::Value>(pRspQryCPUUsageJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryCPUUsage) { 
            delete[] pRspQryCPUUsage;
            pRspQryCPUUsage = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryCPUUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnCPUUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnCPUUsageTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnCPUUsageTopic_trans_callbackNumb: ", g_RtnCPUUsageTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnCPUUsageTopic_mutex);

    int dataNumb = g_RtnCPUUsageTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnCPUUsageTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnCPUUsageTopic_trans_dataNumb: ", g_RtnCPUUsageTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnCPUUsageTopic_queue.empty()) {
        receivedData.push (g_RtnCPUUsageTopic_queue.front());
        g_RtnCPUUsageTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnCPUUsageTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnCPUUsageTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnCPUUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnCPUUsageTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnCPUUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnCPUUsageTopic").ToLocalChecked());

        CShfeFtdcRtnCPUUsageField* pRtnCPUUsage = (CShfeFtdcRtnCPUUsageField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnCPUUsageJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnCPUUsage) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnCPUUsage->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnCPUUsage->ObjectID).ToLocalChecked();
                pRtnCPUUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnCPUUsage->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnCPUUsage->MonDate).ToLocalChecked();
                pRtnCPUUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnCPUUsage->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnCPUUsage->MonTime).ToLocalChecked();
                pRtnCPUUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> CPUUsage = Nan::New<v8::String> ("CPUUsage").ToLocalChecked();
                v8::Local<v8::Number> CPUUsageValue = Nan::New<v8::Number> (pRtnCPUUsage->CPUUsage);
                pRtnCPUUsageJS->Set(Local<v8::Value> (CPUUsage), Local<v8::Value>(CPUUsageValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnCPUUsage) { 
                params[0] = Local<v8::Value>(pRtnCPUUsageJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnCPUUsage) { 
            delete[] pRtnCPUUsage;
            pRtnCPUUsage = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnCPUUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMemoryUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryMemoryUsageTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryMemoryUsageTopic_trans_callbackNumb: ", g_RspQryMemoryUsageTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryMemoryUsageTopic_mutex);

    int dataNumb = g_RspQryMemoryUsageTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryMemoryUsageTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryMemoryUsageTopic_trans_dataNumb: ", g_RspQryMemoryUsageTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryMemoryUsageTopic_queue.empty()) {
        receivedData.push (g_RspQryMemoryUsageTopic_queue.front());
        g_RspQryMemoryUsageTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryMemoryUsageTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryMemoryUsageTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMemoryUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryMemoryUsageTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMemoryUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryMemoryUsageTopic").ToLocalChecked());

        CShfeFtdcRspQryMemoryUsageField* pRspQryMemoryUsage = (CShfeFtdcRspQryMemoryUsageField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryMemoryUsageJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryMemoryUsage) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemoryUsage->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryMemoryUsage->ObjectID).ToLocalChecked();
                pRspQryMemoryUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemoryUsage->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryMemoryUsage->MonDate).ToLocalChecked();
                pRspQryMemoryUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemoryUsage->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryMemoryUsage->MonTime).ToLocalChecked();
                pRspQryMemoryUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> MemoryUsage = Nan::New<v8::String> ("MemoryUsage").ToLocalChecked();
                v8::Local<v8::Number> MemoryUsageValue = Nan::New<v8::Number> (pRspQryMemoryUsage->MemoryUsage);
                pRspQryMemoryUsageJS->Set(Local<v8::Value> (MemoryUsage), Local<v8::Value>(MemoryUsageValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryMemoryUsage) { 
                params[0] = Local<v8::Value>(pRspQryMemoryUsageJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryMemoryUsage) { 
            delete[] pRspQryMemoryUsage;
            pRspQryMemoryUsage = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryMemoryUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMemoryUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnMemoryUsageTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnMemoryUsageTopic_trans_callbackNumb: ", g_RtnMemoryUsageTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnMemoryUsageTopic_mutex);

    int dataNumb = g_RtnMemoryUsageTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnMemoryUsageTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnMemoryUsageTopic_trans_dataNumb: ", g_RtnMemoryUsageTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnMemoryUsageTopic_queue.empty()) {
        receivedData.push (g_RtnMemoryUsageTopic_queue.front());
        g_RtnMemoryUsageTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnMemoryUsageTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnMemoryUsageTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMemoryUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnMemoryUsageTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMemoryUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnMemoryUsageTopic").ToLocalChecked());

        CShfeFtdcRtnMemoryUsageField* pRtnMemoryUsage = (CShfeFtdcRtnMemoryUsageField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnMemoryUsageJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnMemoryUsage) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemoryUsage->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnMemoryUsage->ObjectID).ToLocalChecked();
                pRtnMemoryUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemoryUsage->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnMemoryUsage->MonDate).ToLocalChecked();
                pRtnMemoryUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemoryUsage->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnMemoryUsage->MonTime).ToLocalChecked();
                pRtnMemoryUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> MemoryUsage = Nan::New<v8::String> ("MemoryUsage").ToLocalChecked();
                v8::Local<v8::Number> MemoryUsageValue = Nan::New<v8::Number> (pRtnMemoryUsage->MemoryUsage);
                pRtnMemoryUsageJS->Set(Local<v8::Value> (MemoryUsage), Local<v8::Value>(MemoryUsageValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnMemoryUsage) { 
                params[0] = Local<v8::Value>(pRtnMemoryUsageJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnMemoryUsage) { 
            delete[] pRtnMemoryUsage;
            pRtnMemoryUsage = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnMemoryUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryDiskUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryDiskUsageTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryDiskUsageTopic_trans_callbackNumb: ", g_RspQryDiskUsageTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryDiskUsageTopic_mutex);

    int dataNumb = g_RspQryDiskUsageTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryDiskUsageTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryDiskUsageTopic_trans_dataNumb: ", g_RspQryDiskUsageTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryDiskUsageTopic_queue.empty()) {
        receivedData.push (g_RspQryDiskUsageTopic_queue.front());
        g_RspQryDiskUsageTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryDiskUsageTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryDiskUsageTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryDiskUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryDiskUsageTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryDiskUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryDiskUsageTopic").ToLocalChecked());

        CShfeFtdcRspQryDiskUsageField* pRspQryDiskUsage = (CShfeFtdcRspQryDiskUsageField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryDiskUsageJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryDiskUsage) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDiskUsage->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryDiskUsage->ObjectID).ToLocalChecked();
                pRspQryDiskUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDiskUsage->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryDiskUsage->MonDate).ToLocalChecked();
                pRspQryDiskUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDiskUsage->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryDiskUsage->MonTime).ToLocalChecked();
                pRspQryDiskUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> DiskUsage = Nan::New<v8::String> ("DiskUsage").ToLocalChecked();
                v8::Local<v8::Number> DiskUsageValue = Nan::New<v8::Number> (pRspQryDiskUsage->DiskUsage);
                pRspQryDiskUsageJS->Set(Local<v8::Value> (DiskUsage), Local<v8::Value>(DiskUsageValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryDiskUsage) { 
                params[0] = Local<v8::Value>(pRspQryDiskUsageJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryDiskUsage) { 
            delete[] pRspQryDiskUsage;
            pRspQryDiskUsage = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryDiskUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnDiskUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnDiskUsageTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnDiskUsageTopic_trans_callbackNumb: ", g_RtnDiskUsageTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnDiskUsageTopic_mutex);

    int dataNumb = g_RtnDiskUsageTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnDiskUsageTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnDiskUsageTopic_trans_dataNumb: ", g_RtnDiskUsageTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnDiskUsageTopic_queue.empty()) {
        receivedData.push (g_RtnDiskUsageTopic_queue.front());
        g_RtnDiskUsageTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnDiskUsageTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnDiskUsageTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnDiskUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnDiskUsageTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnDiskUsageTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnDiskUsageTopic").ToLocalChecked());

        CShfeFtdcRtnDiskUsageField* pRtnDiskUsage = (CShfeFtdcRtnDiskUsageField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnDiskUsageJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnDiskUsage) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnDiskUsage->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnDiskUsage->ObjectID).ToLocalChecked();
                pRtnDiskUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnDiskUsage->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnDiskUsage->MonDate).ToLocalChecked();
                pRtnDiskUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnDiskUsage->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnDiskUsage->MonTime).ToLocalChecked();
                pRtnDiskUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> DiskUsage = Nan::New<v8::String> ("DiskUsage").ToLocalChecked();
                v8::Local<v8::Number> DiskUsageValue = Nan::New<v8::Number> (pRtnDiskUsage->DiskUsage);
                pRtnDiskUsageJS->Set(Local<v8::Value> (DiskUsage), Local<v8::Value>(DiskUsageValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnDiskUsage) { 
                params[0] = Local<v8::Value>(pRtnDiskUsageJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnDiskUsage) { 
            delete[] pRtnDiskUsage;
            pRtnDiskUsage = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnDiskUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryObjectAttrTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryObjectAttrTopic_trans_callbackNumb: ", g_RspQryObjectAttrTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryObjectAttrTopic_mutex);

    int dataNumb = g_RspQryObjectAttrTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryObjectAttrTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryObjectAttrTopic_trans_dataNumb: ", g_RspQryObjectAttrTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryObjectAttrTopic_queue.empty()) {
        receivedData.push (g_RspQryObjectAttrTopic_queue.front());
        g_RspQryObjectAttrTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryObjectAttrTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryObjectAttrTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryObjectAttrTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryObjectAttrTopic").ToLocalChecked());

        CShfeFtdcRspQryObjectAttrField* pRspQryObjectAttr = (CShfeFtdcRspQryObjectAttrField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryObjectAttrJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryObjectAttr) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryObjectAttr->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryObjectAttr->ObjectID).ToLocalChecked();
                pRspQryObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryObjectAttr->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRspQryObjectAttr->AttrType).ToLocalChecked();
                pRspQryObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryObjectAttr->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryObjectAttr->MonDate).ToLocalChecked();
                pRspQryObjectAttrJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryObjectAttr->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryObjectAttr->MonTime).ToLocalChecked();
                pRspQryObjectAttrJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ValueType = Nan::New<v8::String> ("ValueType").ToLocalChecked();
                v8::Local<v8::Integer> ValueTypeValue = Nan::New<v8::Integer> (pRspQryObjectAttr->ValueType);
                pRspQryObjectAttrJS->Set(Local<v8::Value> (ValueType), Local<v8::Value>(ValueTypeValue));

                v8::Local<v8::String> AttrValue = Nan::New<v8::String> ("AttrValue").ToLocalChecked();
                Gb2312ToUtf8(pRspQryObjectAttr->AttrValue, utf8string);
                v8::Local<v8::String> AttrValueValue = Nan::New<v8::String> (pRspQryObjectAttr->AttrValue).ToLocalChecked();
                pRspQryObjectAttrJS->Set(Local<v8::Value> (AttrValue), Local<v8::Value>(AttrValueValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryObjectAttr) { 
                params[0] = Local<v8::Value>(pRspQryObjectAttrJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryObjectAttr) { 
            delete[] pRspQryObjectAttr;
            pRspQryObjectAttr = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnObjectAttrTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnObjectAttrTopic_trans_callbackNumb: ", g_RtnObjectAttrTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnObjectAttrTopic_mutex);

    int dataNumb = g_RtnObjectAttrTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnObjectAttrTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnObjectAttrTopic_trans_dataNumb: ", g_RtnObjectAttrTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnObjectAttrTopic_queue.empty()) {
        receivedData.push (g_RtnObjectAttrTopic_queue.front());
        g_RtnObjectAttrTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnObjectAttrTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnObjectAttrTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnObjectAttrTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnObjectAttrTopic").ToLocalChecked());

        CShfeFtdcRtnObjectAttrField* pRtnObjectAttr = (CShfeFtdcRtnObjectAttrField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnObjectAttrJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnObjectAttr) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnObjectAttr->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnObjectAttr->ObjectID).ToLocalChecked();
                pRtnObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRtnObjectAttr->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRtnObjectAttr->AttrType).ToLocalChecked();
                pRtnObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnObjectAttr->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnObjectAttr->MonDate).ToLocalChecked();
                pRtnObjectAttrJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnObjectAttr->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnObjectAttr->MonTime).ToLocalChecked();
                pRtnObjectAttrJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ValueType = Nan::New<v8::String> ("ValueType").ToLocalChecked();
                v8::Local<v8::Integer> ValueTypeValue = Nan::New<v8::Integer> (pRtnObjectAttr->ValueType);
                pRtnObjectAttrJS->Set(Local<v8::Value> (ValueType), Local<v8::Value>(ValueTypeValue));

                v8::Local<v8::String> AttrValue = Nan::New<v8::String> ("AttrValue").ToLocalChecked();
                Gb2312ToUtf8(pRtnObjectAttr->AttrValue, utf8string);
                v8::Local<v8::String> AttrValueValue = Nan::New<v8::String> (pRtnObjectAttr->AttrValue).ToLocalChecked();
                pRtnObjectAttrJS->Set(Local<v8::Value> (AttrValue), Local<v8::Value>(AttrValueValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnObjectAttr) { 
                params[0] = Local<v8::Value>(pRtnObjectAttrJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnObjectAttr) { 
            delete[] pRtnObjectAttr;
            pRtnObjectAttr = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryInvalidateOrderTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryInvalidateOrderTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryInvalidateOrderTopic_trans_callbackNumb: ", g_RspQryInvalidateOrderTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryInvalidateOrderTopic_mutex);

    int dataNumb = g_RspQryInvalidateOrderTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryInvalidateOrderTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryInvalidateOrderTopic_trans_dataNumb: ", g_RspQryInvalidateOrderTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryInvalidateOrderTopic_queue.empty()) {
        receivedData.push (g_RspQryInvalidateOrderTopic_queue.front());
        g_RspQryInvalidateOrderTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryInvalidateOrderTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryInvalidateOrderTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryInvalidateOrderTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryInvalidateOrderTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryInvalidateOrderTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryInvalidateOrderTopic").ToLocalChecked());

        CShfeFtdcRspQryInvalidateOrderField* pRspQryInvalidateOrder = (CShfeFtdcRspQryInvalidateOrderField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryInvalidateOrderJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryInvalidateOrder) { 
                string utf8string;
                v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->OrderSysID, utf8string);
                v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (pRspQryInvalidateOrder->OrderSysID).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                v8::Local<v8::String> OrderLocalID = Nan::New<v8::String> ("OrderLocalID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->OrderLocalID, utf8string);
                v8::Local<v8::String> OrderLocalIDValue = Nan::New<v8::String> (pRspQryInvalidateOrder->OrderLocalID).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (OrderLocalID), Local<v8::Value>(OrderLocalIDValue));

                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryInvalidateOrder->ActionDate).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryInvalidateOrder->ActionTime).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ErrorMsg = Nan::New<v8::String> ("ErrorMsg").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->ErrorMsg, utf8string);
                v8::Local<v8::String> ErrorMsgValue = Nan::New<v8::String> (pRspQryInvalidateOrder->ErrorMsg).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (ErrorMsg), Local<v8::Value>(ErrorMsgValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryInvalidateOrder->ParticipantID).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQryInvalidateOrder->UserID).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRspQryInvalidateOrder->ClientID).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryInvalidateOrder->InstrumentID).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> Direction = Nan::New<v8::String> ("Direction").ToLocalChecked();
                v8::Local<v8::Integer> DirectionValue = Nan::New<v8::Integer> (pRspQryInvalidateOrder->Direction);
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (Direction), Local<v8::Value>(DirectionValue));

                v8::Local<v8::String> CombOffsetFlag = Nan::New<v8::String> ("CombOffsetFlag").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->CombOffsetFlag, utf8string);
                v8::Local<v8::String> CombOffsetFlagValue = Nan::New<v8::String> (pRspQryInvalidateOrder->CombOffsetFlag).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (CombOffsetFlag), Local<v8::Value>(CombOffsetFlagValue));

                v8::Local<v8::String> CombHedgeFlag = Nan::New<v8::String> ("CombHedgeFlag").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInvalidateOrder->CombHedgeFlag, utf8string);
                v8::Local<v8::String> CombHedgeFlagValue = Nan::New<v8::String> (pRspQryInvalidateOrder->CombHedgeFlag).ToLocalChecked();
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (CombHedgeFlag), Local<v8::Value>(CombHedgeFlagValue));

                v8::Local<v8::String> LimitPrice = Nan::New<v8::String> ("LimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LimitPriceValue = Nan::New<v8::Number> (pRspQryInvalidateOrder->LimitPrice);
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (LimitPrice), Local<v8::Value>(LimitPriceValue));

                v8::Local<v8::String> VolumeTotalOriginal = Nan::New<v8::String> ("VolumeTotalOriginal").ToLocalChecked();
                v8::Local<v8::Integer> VolumeTotalOriginalValue = Nan::New<v8::Integer> (pRspQryInvalidateOrder->VolumeTotalOriginal);
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (VolumeTotalOriginal), Local<v8::Value>(VolumeTotalOriginalValue));

                v8::Local<v8::String> TimeCondition = Nan::New<v8::String> ("TimeCondition").ToLocalChecked();
                v8::Local<v8::Integer> TimeConditionValue = Nan::New<v8::Integer> (pRspQryInvalidateOrder->TimeCondition);
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (TimeCondition), Local<v8::Value>(TimeConditionValue));

                v8::Local<v8::String> VolumeCondition = Nan::New<v8::String> ("VolumeCondition").ToLocalChecked();
                v8::Local<v8::Integer> VolumeConditionValue = Nan::New<v8::Integer> (pRspQryInvalidateOrder->VolumeCondition);
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (VolumeCondition), Local<v8::Value>(VolumeConditionValue));

                v8::Local<v8::String> MinVolume = Nan::New<v8::String> ("MinVolume").ToLocalChecked();
                v8::Local<v8::Integer> MinVolumeValue = Nan::New<v8::Integer> (pRspQryInvalidateOrder->MinVolume);
                pRspQryInvalidateOrderJS->Set(Local<v8::Value> (MinVolume), Local<v8::Value>(MinVolumeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryInvalidateOrder) { 
                params[0] = Local<v8::Value>(pRspQryInvalidateOrderJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryInvalidateOrder) { 
            delete[] pRspQryInvalidateOrder;
            pRspQryInvalidateOrder = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryInvalidateOrderTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnInvalidateOrderTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnInvalidateOrderTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnInvalidateOrderTopic_trans_callbackNumb: ", g_RtnInvalidateOrderTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnInvalidateOrderTopic_mutex);

    int dataNumb = g_RtnInvalidateOrderTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnInvalidateOrderTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnInvalidateOrderTopic_trans_dataNumb: ", g_RtnInvalidateOrderTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnInvalidateOrderTopic_queue.empty()) {
        receivedData.push (g_RtnInvalidateOrderTopic_queue.front());
        g_RtnInvalidateOrderTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnInvalidateOrderTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnInvalidateOrderTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnInvalidateOrderTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnInvalidateOrderTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnInvalidateOrderTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnInvalidateOrderTopic").ToLocalChecked());

        CShfeFtdcRtnInvalidateOrderField* pRtnInvalidateOrder = (CShfeFtdcRtnInvalidateOrderField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnInvalidateOrderJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnInvalidateOrder) { 
                string utf8string;
                v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->OrderSysID, utf8string);
                v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (pRtnInvalidateOrder->OrderSysID).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                v8::Local<v8::String> OrderLocalID = Nan::New<v8::String> ("OrderLocalID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->OrderLocalID, utf8string);
                v8::Local<v8::String> OrderLocalIDValue = Nan::New<v8::String> (pRtnInvalidateOrder->OrderLocalID).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (OrderLocalID), Local<v8::Value>(OrderLocalIDValue));

                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnInvalidateOrder->ActionDate).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnInvalidateOrder->ActionTime).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ErrorMsg = Nan::New<v8::String> ("ErrorMsg").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->ErrorMsg, utf8string);
                v8::Local<v8::String> ErrorMsgValue = Nan::New<v8::String> (pRtnInvalidateOrder->ErrorMsg).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (ErrorMsg), Local<v8::Value>(ErrorMsgValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnInvalidateOrder->ParticipantID).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRtnInvalidateOrder->UserID).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRtnInvalidateOrder->ClientID).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnInvalidateOrder->InstrumentID).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> Direction = Nan::New<v8::String> ("Direction").ToLocalChecked();
                v8::Local<v8::Integer> DirectionValue = Nan::New<v8::Integer> (pRtnInvalidateOrder->Direction);
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (Direction), Local<v8::Value>(DirectionValue));

                v8::Local<v8::String> CombOffsetFlag = Nan::New<v8::String> ("CombOffsetFlag").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->CombOffsetFlag, utf8string);
                v8::Local<v8::String> CombOffsetFlagValue = Nan::New<v8::String> (pRtnInvalidateOrder->CombOffsetFlag).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (CombOffsetFlag), Local<v8::Value>(CombOffsetFlagValue));

                v8::Local<v8::String> CombHedgeFlag = Nan::New<v8::String> ("CombHedgeFlag").ToLocalChecked();
                Gb2312ToUtf8(pRtnInvalidateOrder->CombHedgeFlag, utf8string);
                v8::Local<v8::String> CombHedgeFlagValue = Nan::New<v8::String> (pRtnInvalidateOrder->CombHedgeFlag).ToLocalChecked();
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (CombHedgeFlag), Local<v8::Value>(CombHedgeFlagValue));

                v8::Local<v8::String> LimitPrice = Nan::New<v8::String> ("LimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LimitPriceValue = Nan::New<v8::Number> (pRtnInvalidateOrder->LimitPrice);
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (LimitPrice), Local<v8::Value>(LimitPriceValue));

                v8::Local<v8::String> VolumeTotalOriginal = Nan::New<v8::String> ("VolumeTotalOriginal").ToLocalChecked();
                v8::Local<v8::Integer> VolumeTotalOriginalValue = Nan::New<v8::Integer> (pRtnInvalidateOrder->VolumeTotalOriginal);
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (VolumeTotalOriginal), Local<v8::Value>(VolumeTotalOriginalValue));

                v8::Local<v8::String> TimeCondition = Nan::New<v8::String> ("TimeCondition").ToLocalChecked();
                v8::Local<v8::Integer> TimeConditionValue = Nan::New<v8::Integer> (pRtnInvalidateOrder->TimeCondition);
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (TimeCondition), Local<v8::Value>(TimeConditionValue));

                v8::Local<v8::String> VolumeCondition = Nan::New<v8::String> ("VolumeCondition").ToLocalChecked();
                v8::Local<v8::Integer> VolumeConditionValue = Nan::New<v8::Integer> (pRtnInvalidateOrder->VolumeCondition);
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (VolumeCondition), Local<v8::Value>(VolumeConditionValue));

                v8::Local<v8::String> MinVolume = Nan::New<v8::String> ("MinVolume").ToLocalChecked();
                v8::Local<v8::Integer> MinVolumeValue = Nan::New<v8::Integer> (pRtnInvalidateOrder->MinVolume);
                pRtnInvalidateOrderJS->Set(Local<v8::Value> (MinVolume), Local<v8::Value>(MinVolumeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnInvalidateOrder) { 
                params[0] = Local<v8::Value>(pRtnInvalidateOrderJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnInvalidateOrder) { 
            delete[] pRtnInvalidateOrder;
            pRtnInvalidateOrder = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnInvalidateOrderTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryOrderStatusTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryOrderStatusTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryOrderStatusTopic_trans_callbackNumb: ", g_RspQryOrderStatusTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryOrderStatusTopic_mutex);

    int dataNumb = g_RspQryOrderStatusTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryOrderStatusTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryOrderStatusTopic_trans_dataNumb: ", g_RspQryOrderStatusTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryOrderStatusTopic_queue.empty()) {
        receivedData.push (g_RspQryOrderStatusTopic_queue.front());
        g_RspQryOrderStatusTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryOrderStatusTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryOrderStatusTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryOrderStatusTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryOrderStatusTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryOrderStatusTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryOrderStatusTopic").ToLocalChecked());

        CShfeFtdcRspQryOrderStatusField* pRspQryOrderStatus = (CShfeFtdcRspQryOrderStatusField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryOrderStatusJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryOrderStatus) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryOrderStatus->ActionDate).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryOrderStatus->ActionTime).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->OrderSysID, utf8string);
                v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (pRspQryOrderStatus->OrderSysID).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                v8::Local<v8::String> OrderLocalID = Nan::New<v8::String> ("OrderLocalID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->OrderLocalID, utf8string);
                v8::Local<v8::String> OrderLocalIDValue = Nan::New<v8::String> (pRspQryOrderStatus->OrderLocalID).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (OrderLocalID), Local<v8::Value>(OrderLocalIDValue));

                v8::Local<v8::String> InsertDate = Nan::New<v8::String> ("InsertDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->InsertDate, utf8string);
                v8::Local<v8::String> InsertDateValue = Nan::New<v8::String> (pRspQryOrderStatus->InsertDate).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (InsertDate), Local<v8::Value>(InsertDateValue));

                v8::Local<v8::String> InsertTime = Nan::New<v8::String> ("InsertTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->InsertTime, utf8string);
                v8::Local<v8::String> InsertTimeValue = Nan::New<v8::String> (pRspQryOrderStatus->InsertTime).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (InsertTime), Local<v8::Value>(InsertTimeValue));

                v8::Local<v8::String> OrderStatus = Nan::New<v8::String> ("OrderStatus").ToLocalChecked();
                v8::Local<v8::Integer> OrderStatusValue = Nan::New<v8::Integer> (pRspQryOrderStatus->OrderStatus);
                pRspQryOrderStatusJS->Set(Local<v8::Value> (OrderStatus), Local<v8::Value>(OrderStatusValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryOrderStatus->ParticipantID).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQryOrderStatus->UserID).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRspQryOrderStatus->ClientID).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryOrderStatus->InstrumentID).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> Direction = Nan::New<v8::String> ("Direction").ToLocalChecked();
                v8::Local<v8::Integer> DirectionValue = Nan::New<v8::Integer> (pRspQryOrderStatus->Direction);
                pRspQryOrderStatusJS->Set(Local<v8::Value> (Direction), Local<v8::Value>(DirectionValue));

                v8::Local<v8::String> CombOffsetFlag = Nan::New<v8::String> ("CombOffsetFlag").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->CombOffsetFlag, utf8string);
                v8::Local<v8::String> CombOffsetFlagValue = Nan::New<v8::String> (pRspQryOrderStatus->CombOffsetFlag).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (CombOffsetFlag), Local<v8::Value>(CombOffsetFlagValue));

                v8::Local<v8::String> CombHedgeFlag = Nan::New<v8::String> ("CombHedgeFlag").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOrderStatus->CombHedgeFlag, utf8string);
                v8::Local<v8::String> CombHedgeFlagValue = Nan::New<v8::String> (pRspQryOrderStatus->CombHedgeFlag).ToLocalChecked();
                pRspQryOrderStatusJS->Set(Local<v8::Value> (CombHedgeFlag), Local<v8::Value>(CombHedgeFlagValue));

                v8::Local<v8::String> LimitPrice = Nan::New<v8::String> ("LimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LimitPriceValue = Nan::New<v8::Number> (pRspQryOrderStatus->LimitPrice);
                pRspQryOrderStatusJS->Set(Local<v8::Value> (LimitPrice), Local<v8::Value>(LimitPriceValue));

                v8::Local<v8::String> VolumeTotalOriginal = Nan::New<v8::String> ("VolumeTotalOriginal").ToLocalChecked();
                v8::Local<v8::Integer> VolumeTotalOriginalValue = Nan::New<v8::Integer> (pRspQryOrderStatus->VolumeTotalOriginal);
                pRspQryOrderStatusJS->Set(Local<v8::Value> (VolumeTotalOriginal), Local<v8::Value>(VolumeTotalOriginalValue));

                v8::Local<v8::String> TimeCondition = Nan::New<v8::String> ("TimeCondition").ToLocalChecked();
                v8::Local<v8::Integer> TimeConditionValue = Nan::New<v8::Integer> (pRspQryOrderStatus->TimeCondition);
                pRspQryOrderStatusJS->Set(Local<v8::Value> (TimeCondition), Local<v8::Value>(TimeConditionValue));

                v8::Local<v8::String> VolumeCondition = Nan::New<v8::String> ("VolumeCondition").ToLocalChecked();
                v8::Local<v8::Integer> VolumeConditionValue = Nan::New<v8::Integer> (pRspQryOrderStatus->VolumeCondition);
                pRspQryOrderStatusJS->Set(Local<v8::Value> (VolumeCondition), Local<v8::Value>(VolumeConditionValue));

                v8::Local<v8::String> MinVolume = Nan::New<v8::String> ("MinVolume").ToLocalChecked();
                v8::Local<v8::Integer> MinVolumeValue = Nan::New<v8::Integer> (pRspQryOrderStatus->MinVolume);
                pRspQryOrderStatusJS->Set(Local<v8::Value> (MinVolume), Local<v8::Value>(MinVolumeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryOrderStatus) { 
                params[0] = Local<v8::Value>(pRspQryOrderStatusJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryOrderStatus) { 
            delete[] pRspQryOrderStatus;
            pRspQryOrderStatus = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryOrderStatusTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnOrderStatusTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnOrderStatusTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnOrderStatusTopic_trans_callbackNumb: ", g_RtnOrderStatusTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnOrderStatusTopic_mutex);

    int dataNumb = g_RtnOrderStatusTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnOrderStatusTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnOrderStatusTopic_trans_dataNumb: ", g_RtnOrderStatusTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnOrderStatusTopic_queue.empty()) {
        receivedData.push (g_RtnOrderStatusTopic_queue.front());
        g_RtnOrderStatusTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnOrderStatusTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnOrderStatusTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnOrderStatusTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnOrderStatusTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnOrderStatusTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnOrderStatusTopic").ToLocalChecked());

        CShfeFtdcRtnOrderStatusField* pRtnOrderStatus = (CShfeFtdcRtnOrderStatusField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnOrderStatusJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnOrderStatus) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnOrderStatus->ActionDate).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnOrderStatus->ActionTime).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->OrderSysID, utf8string);
                v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (pRtnOrderStatus->OrderSysID).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                v8::Local<v8::String> OrderLocalID = Nan::New<v8::String> ("OrderLocalID").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->OrderLocalID, utf8string);
                v8::Local<v8::String> OrderLocalIDValue = Nan::New<v8::String> (pRtnOrderStatus->OrderLocalID).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (OrderLocalID), Local<v8::Value>(OrderLocalIDValue));

                v8::Local<v8::String> InsertDate = Nan::New<v8::String> ("InsertDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->InsertDate, utf8string);
                v8::Local<v8::String> InsertDateValue = Nan::New<v8::String> (pRtnOrderStatus->InsertDate).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (InsertDate), Local<v8::Value>(InsertDateValue));

                v8::Local<v8::String> InsertTime = Nan::New<v8::String> ("InsertTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->InsertTime, utf8string);
                v8::Local<v8::String> InsertTimeValue = Nan::New<v8::String> (pRtnOrderStatus->InsertTime).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (InsertTime), Local<v8::Value>(InsertTimeValue));

                v8::Local<v8::String> OrderStatus = Nan::New<v8::String> ("OrderStatus").ToLocalChecked();
                v8::Local<v8::Integer> OrderStatusValue = Nan::New<v8::Integer> (pRtnOrderStatus->OrderStatus);
                pRtnOrderStatusJS->Set(Local<v8::Value> (OrderStatus), Local<v8::Value>(OrderStatusValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnOrderStatus->ParticipantID).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRtnOrderStatus->UserID).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRtnOrderStatus->ClientID).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnOrderStatus->InstrumentID).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> Direction = Nan::New<v8::String> ("Direction").ToLocalChecked();
                v8::Local<v8::Integer> DirectionValue = Nan::New<v8::Integer> (pRtnOrderStatus->Direction);
                pRtnOrderStatusJS->Set(Local<v8::Value> (Direction), Local<v8::Value>(DirectionValue));

                v8::Local<v8::String> CombOffsetFlag = Nan::New<v8::String> ("CombOffsetFlag").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->CombOffsetFlag, utf8string);
                v8::Local<v8::String> CombOffsetFlagValue = Nan::New<v8::String> (pRtnOrderStatus->CombOffsetFlag).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (CombOffsetFlag), Local<v8::Value>(CombOffsetFlagValue));

                v8::Local<v8::String> CombHedgeFlag = Nan::New<v8::String> ("CombHedgeFlag").ToLocalChecked();
                Gb2312ToUtf8(pRtnOrderStatus->CombHedgeFlag, utf8string);
                v8::Local<v8::String> CombHedgeFlagValue = Nan::New<v8::String> (pRtnOrderStatus->CombHedgeFlag).ToLocalChecked();
                pRtnOrderStatusJS->Set(Local<v8::Value> (CombHedgeFlag), Local<v8::Value>(CombHedgeFlagValue));

                v8::Local<v8::String> LimitPrice = Nan::New<v8::String> ("LimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LimitPriceValue = Nan::New<v8::Number> (pRtnOrderStatus->LimitPrice);
                pRtnOrderStatusJS->Set(Local<v8::Value> (LimitPrice), Local<v8::Value>(LimitPriceValue));

                v8::Local<v8::String> VolumeTotalOriginal = Nan::New<v8::String> ("VolumeTotalOriginal").ToLocalChecked();
                v8::Local<v8::Integer> VolumeTotalOriginalValue = Nan::New<v8::Integer> (pRtnOrderStatus->VolumeTotalOriginal);
                pRtnOrderStatusJS->Set(Local<v8::Value> (VolumeTotalOriginal), Local<v8::Value>(VolumeTotalOriginalValue));

                v8::Local<v8::String> TimeCondition = Nan::New<v8::String> ("TimeCondition").ToLocalChecked();
                v8::Local<v8::Integer> TimeConditionValue = Nan::New<v8::Integer> (pRtnOrderStatus->TimeCondition);
                pRtnOrderStatusJS->Set(Local<v8::Value> (TimeCondition), Local<v8::Value>(TimeConditionValue));

                v8::Local<v8::String> VolumeCondition = Nan::New<v8::String> ("VolumeCondition").ToLocalChecked();
                v8::Local<v8::Integer> VolumeConditionValue = Nan::New<v8::Integer> (pRtnOrderStatus->VolumeCondition);
                pRtnOrderStatusJS->Set(Local<v8::Value> (VolumeCondition), Local<v8::Value>(VolumeConditionValue));

                v8::Local<v8::String> MinVolume = Nan::New<v8::String> ("MinVolume").ToLocalChecked();
                v8::Local<v8::Integer> MinVolumeValue = Nan::New<v8::Integer> (pRtnOrderStatus->MinVolume);
                pRtnOrderStatusJS->Set(Local<v8::Value> (MinVolume), Local<v8::Value>(MinVolumeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnOrderStatus) { 
                params[0] = Local<v8::Value>(pRtnOrderStatusJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnOrderStatus) { 
            delete[] pRtnOrderStatus;
            pRtnOrderStatus = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnOrderStatusTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryBargainOrderTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryBargainOrderTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryBargainOrderTopic_trans_callbackNumb: ", g_RspQryBargainOrderTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryBargainOrderTopic_mutex);

    int dataNumb = g_RspQryBargainOrderTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryBargainOrderTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryBargainOrderTopic_trans_dataNumb: ", g_RspQryBargainOrderTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryBargainOrderTopic_queue.empty()) {
        receivedData.push (g_RspQryBargainOrderTopic_queue.front());
        g_RspQryBargainOrderTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryBargainOrderTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryBargainOrderTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryBargainOrderTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryBargainOrderTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryBargainOrderTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryBargainOrderTopic").ToLocalChecked());

        CShfeFtdcRspQryBargainOrderField* pRspQryBargainOrder = (CShfeFtdcRspQryBargainOrderField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryBargainOrderJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryBargainOrder) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryBargainOrder->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryBargainOrder->ActionDate).ToLocalChecked();
                pRspQryBargainOrderJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryBargainOrder->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryBargainOrder->ActionTime).ToLocalChecked();
                pRspQryBargainOrderJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> TradeID = Nan::New<v8::String> ("TradeID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryBargainOrder->TradeID, utf8string);
                v8::Local<v8::String> TradeIDValue = Nan::New<v8::String> (pRspQryBargainOrder->TradeID).ToLocalChecked();
                pRspQryBargainOrderJS->Set(Local<v8::Value> (TradeID), Local<v8::Value>(TradeIDValue));

                v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryBargainOrder->OrderSysID, utf8string);
                v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (pRspQryBargainOrder->OrderSysID).ToLocalChecked();
                pRspQryBargainOrderJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryBargainOrder->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryBargainOrder->InstrumentID).ToLocalChecked();
                pRspQryBargainOrderJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> Price = Nan::New<v8::String> ("Price").ToLocalChecked();
                v8::Local<v8::Number> PriceValue = Nan::New<v8::Number> (pRspQryBargainOrder->Price);
                pRspQryBargainOrderJS->Set(Local<v8::Value> (Price), Local<v8::Value>(PriceValue));

                v8::Local<v8::String> Volume = Nan::New<v8::String> ("Volume").ToLocalChecked();
                v8::Local<v8::Integer> VolumeValue = Nan::New<v8::Integer> (pRspQryBargainOrder->Volume);
                pRspQryBargainOrderJS->Set(Local<v8::Value> (Volume), Local<v8::Value>(VolumeValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryBargainOrder->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryBargainOrder->ParticipantID).ToLocalChecked();
                pRspQryBargainOrderJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryBargainOrder->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQryBargainOrder->UserID).ToLocalChecked();
                pRspQryBargainOrderJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryBargainOrder->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRspQryBargainOrder->ClientID).ToLocalChecked();
                pRspQryBargainOrderJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryBargainOrder) { 
                params[0] = Local<v8::Value>(pRspQryBargainOrderJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryBargainOrder) { 
            delete[] pRspQryBargainOrder;
            pRspQryBargainOrder = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryBargainOrderTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnBargainOrderTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnBargainOrderTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnBargainOrderTopic_trans_callbackNumb: ", g_RtnBargainOrderTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnBargainOrderTopic_mutex);

    int dataNumb = g_RtnBargainOrderTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnBargainOrderTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnBargainOrderTopic_trans_dataNumb: ", g_RtnBargainOrderTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnBargainOrderTopic_queue.empty()) {
        receivedData.push (g_RtnBargainOrderTopic_queue.front());
        g_RtnBargainOrderTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnBargainOrderTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnBargainOrderTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnBargainOrderTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnBargainOrderTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnBargainOrderTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnBargainOrderTopic").ToLocalChecked());

        CShfeFtdcRtnBargainOrderField* pRtnBargainOrder = (CShfeFtdcRtnBargainOrderField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnBargainOrderJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnBargainOrder) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnBargainOrder->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnBargainOrder->ActionDate).ToLocalChecked();
                pRtnBargainOrderJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnBargainOrder->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnBargainOrder->ActionTime).ToLocalChecked();
                pRtnBargainOrderJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> TradeID = Nan::New<v8::String> ("TradeID").ToLocalChecked();
                Gb2312ToUtf8(pRtnBargainOrder->TradeID, utf8string);
                v8::Local<v8::String> TradeIDValue = Nan::New<v8::String> (pRtnBargainOrder->TradeID).ToLocalChecked();
                pRtnBargainOrderJS->Set(Local<v8::Value> (TradeID), Local<v8::Value>(TradeIDValue));

                v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                Gb2312ToUtf8(pRtnBargainOrder->OrderSysID, utf8string);
                v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (pRtnBargainOrder->OrderSysID).ToLocalChecked();
                pRtnBargainOrderJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnBargainOrder->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnBargainOrder->InstrumentID).ToLocalChecked();
                pRtnBargainOrderJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> Price = Nan::New<v8::String> ("Price").ToLocalChecked();
                v8::Local<v8::Number> PriceValue = Nan::New<v8::Number> (pRtnBargainOrder->Price);
                pRtnBargainOrderJS->Set(Local<v8::Value> (Price), Local<v8::Value>(PriceValue));

                v8::Local<v8::String> Volume = Nan::New<v8::String> ("Volume").ToLocalChecked();
                v8::Local<v8::Integer> VolumeValue = Nan::New<v8::Integer> (pRtnBargainOrder->Volume);
                pRtnBargainOrderJS->Set(Local<v8::Value> (Volume), Local<v8::Value>(VolumeValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnBargainOrder->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnBargainOrder->ParticipantID).ToLocalChecked();
                pRtnBargainOrderJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRtnBargainOrder->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRtnBargainOrder->UserID).ToLocalChecked();
                pRtnBargainOrderJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRtnBargainOrder->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRtnBargainOrder->ClientID).ToLocalChecked();
                pRtnBargainOrderJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnBargainOrder) { 
                params[0] = Local<v8::Value>(pRtnBargainOrderJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnBargainOrder) { 
            delete[] pRtnBargainOrder;
            pRtnBargainOrder = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnBargainOrderTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryInstPropertyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryInstPropertyTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryInstPropertyTopic_trans_callbackNumb: ", g_RspQryInstPropertyTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryInstPropertyTopic_mutex);

    int dataNumb = g_RspQryInstPropertyTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryInstPropertyTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryInstPropertyTopic_trans_dataNumb: ", g_RspQryInstPropertyTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryInstPropertyTopic_queue.empty()) {
        receivedData.push (g_RspQryInstPropertyTopic_queue.front());
        g_RspQryInstPropertyTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryInstPropertyTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryInstPropertyTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryInstPropertyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryInstPropertyTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryInstPropertyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryInstPropertyTopic").ToLocalChecked());

        CShfeFtdcRspQryInstPropertyField* pRspQryInstProperty = (CShfeFtdcRspQryInstPropertyField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryInstPropertyJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryInstProperty) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstProperty->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryInstProperty->ActionDate).ToLocalChecked();
                pRspQryInstPropertyJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstProperty->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryInstProperty->ActionTime).ToLocalChecked();
                pRspQryInstPropertyJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstProperty->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryInstProperty->InstrumentID).ToLocalChecked();
                pRspQryInstPropertyJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstProperty->SettlementGroupID, utf8string);
                v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (pRspQryInstProperty->SettlementGroupID).ToLocalChecked();
                pRspQryInstPropertyJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                v8::Local<v8::String> UnderlyingInstrID = Nan::New<v8::String> ("UnderlyingInstrID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstProperty->UnderlyingInstrID, utf8string);
                v8::Local<v8::String> UnderlyingInstrIDValue = Nan::New<v8::String> (pRspQryInstProperty->UnderlyingInstrID).ToLocalChecked();
                pRspQryInstPropertyJS->Set(Local<v8::Value> (UnderlyingInstrID), Local<v8::Value>(UnderlyingInstrIDValue));

                v8::Local<v8::String> ProductClass = Nan::New<v8::String> ("ProductClass").ToLocalChecked();
                v8::Local<v8::Integer> ProductClassValue = Nan::New<v8::Integer> (pRspQryInstProperty->ProductClass);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (ProductClass), Local<v8::Value>(ProductClassValue));

                v8::Local<v8::String> PositionType = Nan::New<v8::String> ("PositionType").ToLocalChecked();
                v8::Local<v8::Integer> PositionTypeValue = Nan::New<v8::Integer> (pRspQryInstProperty->PositionType);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (PositionType), Local<v8::Value>(PositionTypeValue));

                v8::Local<v8::String> VolumeMultiple = Nan::New<v8::String> ("VolumeMultiple").ToLocalChecked();
                v8::Local<v8::Integer> VolumeMultipleValue = Nan::New<v8::Integer> (pRspQryInstProperty->VolumeMultiple);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (VolumeMultiple), Local<v8::Value>(VolumeMultipleValue));

                v8::Local<v8::String> UnderlyingMultiple = Nan::New<v8::String> ("UnderlyingMultiple").ToLocalChecked();
                v8::Local<v8::Number> UnderlyingMultipleValue = Nan::New<v8::Number> (pRspQryInstProperty->UnderlyingMultiple);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (UnderlyingMultiple), Local<v8::Value>(UnderlyingMultipleValue));

                v8::Local<v8::String> InstLifePhase = Nan::New<v8::String> ("InstLifePhase").ToLocalChecked();
                v8::Local<v8::Integer> InstLifePhaseValue = Nan::New<v8::Integer> (pRspQryInstProperty->InstLifePhase);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (InstLifePhase), Local<v8::Value>(InstLifePhaseValue));

                v8::Local<v8::String> OpenDate = Nan::New<v8::String> ("OpenDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstProperty->OpenDate, utf8string);
                v8::Local<v8::String> OpenDateValue = Nan::New<v8::String> (pRspQryInstProperty->OpenDate).ToLocalChecked();
                pRspQryInstPropertyJS->Set(Local<v8::Value> (OpenDate), Local<v8::Value>(OpenDateValue));

                v8::Local<v8::String> ExpireDate = Nan::New<v8::String> ("ExpireDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstProperty->ExpireDate, utf8string);
                v8::Local<v8::String> ExpireDateValue = Nan::New<v8::String> (pRspQryInstProperty->ExpireDate).ToLocalChecked();
                pRspQryInstPropertyJS->Set(Local<v8::Value> (ExpireDate), Local<v8::Value>(ExpireDateValue));

                v8::Local<v8::String> StartDelivDate = Nan::New<v8::String> ("StartDelivDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstProperty->StartDelivDate, utf8string);
                v8::Local<v8::String> StartDelivDateValue = Nan::New<v8::String> (pRspQryInstProperty->StartDelivDate).ToLocalChecked();
                pRspQryInstPropertyJS->Set(Local<v8::Value> (StartDelivDate), Local<v8::Value>(StartDelivDateValue));

                v8::Local<v8::String> EndDelivDate = Nan::New<v8::String> ("EndDelivDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstProperty->EndDelivDate, utf8string);
                v8::Local<v8::String> EndDelivDateValue = Nan::New<v8::String> (pRspQryInstProperty->EndDelivDate).ToLocalChecked();
                pRspQryInstPropertyJS->Set(Local<v8::Value> (EndDelivDate), Local<v8::Value>(EndDelivDateValue));

                v8::Local<v8::String> BasisPrice = Nan::New<v8::String> ("BasisPrice").ToLocalChecked();
                v8::Local<v8::Number> BasisPriceValue = Nan::New<v8::Number> (pRspQryInstProperty->BasisPrice);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (BasisPrice), Local<v8::Value>(BasisPriceValue));

                v8::Local<v8::String> MaxMarketOrderVolume = Nan::New<v8::String> ("MaxMarketOrderVolume").ToLocalChecked();
                v8::Local<v8::Integer> MaxMarketOrderVolumeValue = Nan::New<v8::Integer> (pRspQryInstProperty->MaxMarketOrderVolume);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (MaxMarketOrderVolume), Local<v8::Value>(MaxMarketOrderVolumeValue));

                v8::Local<v8::String> MinMarketOrderVolume = Nan::New<v8::String> ("MinMarketOrderVolume").ToLocalChecked();
                v8::Local<v8::Integer> MinMarketOrderVolumeValue = Nan::New<v8::Integer> (pRspQryInstProperty->MinMarketOrderVolume);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (MinMarketOrderVolume), Local<v8::Value>(MinMarketOrderVolumeValue));

                v8::Local<v8::String> MaxLimitOrderVolume = Nan::New<v8::String> ("MaxLimitOrderVolume").ToLocalChecked();
                v8::Local<v8::Integer> MaxLimitOrderVolumeValue = Nan::New<v8::Integer> (pRspQryInstProperty->MaxLimitOrderVolume);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (MaxLimitOrderVolume), Local<v8::Value>(MaxLimitOrderVolumeValue));

                v8::Local<v8::String> MinLimitOrderVolume = Nan::New<v8::String> ("MinLimitOrderVolume").ToLocalChecked();
                v8::Local<v8::Integer> MinLimitOrderVolumeValue = Nan::New<v8::Integer> (pRspQryInstProperty->MinLimitOrderVolume);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (MinLimitOrderVolume), Local<v8::Value>(MinLimitOrderVolumeValue));

                v8::Local<v8::String> PriceTick = Nan::New<v8::String> ("PriceTick").ToLocalChecked();
                v8::Local<v8::Number> PriceTickValue = Nan::New<v8::Number> (pRspQryInstProperty->PriceTick);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (PriceTick), Local<v8::Value>(PriceTickValue));

                v8::Local<v8::String> AllowDelivPersonOpen = Nan::New<v8::String> ("AllowDelivPersonOpen").ToLocalChecked();
                v8::Local<v8::Integer> AllowDelivPersonOpenValue = Nan::New<v8::Integer> (pRspQryInstProperty->AllowDelivPersonOpen);
                pRspQryInstPropertyJS->Set(Local<v8::Value> (AllowDelivPersonOpen), Local<v8::Value>(AllowDelivPersonOpenValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryInstProperty) { 
                params[0] = Local<v8::Value>(pRspQryInstPropertyJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryInstProperty) { 
            delete[] pRspQryInstProperty;
            pRspQryInstProperty = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryInstPropertyTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnInstPropertyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnInstPropertyTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnInstPropertyTopic_trans_callbackNumb: ", g_RtnInstPropertyTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnInstPropertyTopic_mutex);

    int dataNumb = g_RtnInstPropertyTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnInstPropertyTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnInstPropertyTopic_trans_dataNumb: ", g_RtnInstPropertyTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnInstPropertyTopic_queue.empty()) {
        receivedData.push (g_RtnInstPropertyTopic_queue.front());
        g_RtnInstPropertyTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnInstPropertyTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnInstPropertyTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnInstPropertyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnInstPropertyTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnInstPropertyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnInstPropertyTopic").ToLocalChecked());

        CShfeFtdcRtnInstPropertyField* pRtnInstProperty = (CShfeFtdcRtnInstPropertyField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnInstPropertyJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnInstProperty) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstProperty->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnInstProperty->ActionDate).ToLocalChecked();
                pRtnInstPropertyJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstProperty->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnInstProperty->ActionTime).ToLocalChecked();
                pRtnInstPropertyJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstProperty->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnInstProperty->InstrumentID).ToLocalChecked();
                pRtnInstPropertyJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstProperty->SettlementGroupID, utf8string);
                v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (pRtnInstProperty->SettlementGroupID).ToLocalChecked();
                pRtnInstPropertyJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                v8::Local<v8::String> UnderlyingInstrID = Nan::New<v8::String> ("UnderlyingInstrID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstProperty->UnderlyingInstrID, utf8string);
                v8::Local<v8::String> UnderlyingInstrIDValue = Nan::New<v8::String> (pRtnInstProperty->UnderlyingInstrID).ToLocalChecked();
                pRtnInstPropertyJS->Set(Local<v8::Value> (UnderlyingInstrID), Local<v8::Value>(UnderlyingInstrIDValue));

                v8::Local<v8::String> ProductClass = Nan::New<v8::String> ("ProductClass").ToLocalChecked();
                v8::Local<v8::Integer> ProductClassValue = Nan::New<v8::Integer> (pRtnInstProperty->ProductClass);
                pRtnInstPropertyJS->Set(Local<v8::Value> (ProductClass), Local<v8::Value>(ProductClassValue));

                v8::Local<v8::String> PositionType = Nan::New<v8::String> ("PositionType").ToLocalChecked();
                v8::Local<v8::Integer> PositionTypeValue = Nan::New<v8::Integer> (pRtnInstProperty->PositionType);
                pRtnInstPropertyJS->Set(Local<v8::Value> (PositionType), Local<v8::Value>(PositionTypeValue));

                v8::Local<v8::String> VolumeMultiple = Nan::New<v8::String> ("VolumeMultiple").ToLocalChecked();
                v8::Local<v8::Integer> VolumeMultipleValue = Nan::New<v8::Integer> (pRtnInstProperty->VolumeMultiple);
                pRtnInstPropertyJS->Set(Local<v8::Value> (VolumeMultiple), Local<v8::Value>(VolumeMultipleValue));

                v8::Local<v8::String> UnderlyingMultiple = Nan::New<v8::String> ("UnderlyingMultiple").ToLocalChecked();
                v8::Local<v8::Number> UnderlyingMultipleValue = Nan::New<v8::Number> (pRtnInstProperty->UnderlyingMultiple);
                pRtnInstPropertyJS->Set(Local<v8::Value> (UnderlyingMultiple), Local<v8::Value>(UnderlyingMultipleValue));

                v8::Local<v8::String> InstLifePhase = Nan::New<v8::String> ("InstLifePhase").ToLocalChecked();
                v8::Local<v8::Integer> InstLifePhaseValue = Nan::New<v8::Integer> (pRtnInstProperty->InstLifePhase);
                pRtnInstPropertyJS->Set(Local<v8::Value> (InstLifePhase), Local<v8::Value>(InstLifePhaseValue));

                v8::Local<v8::String> OpenDate = Nan::New<v8::String> ("OpenDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstProperty->OpenDate, utf8string);
                v8::Local<v8::String> OpenDateValue = Nan::New<v8::String> (pRtnInstProperty->OpenDate).ToLocalChecked();
                pRtnInstPropertyJS->Set(Local<v8::Value> (OpenDate), Local<v8::Value>(OpenDateValue));

                v8::Local<v8::String> ExpireDate = Nan::New<v8::String> ("ExpireDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstProperty->ExpireDate, utf8string);
                v8::Local<v8::String> ExpireDateValue = Nan::New<v8::String> (pRtnInstProperty->ExpireDate).ToLocalChecked();
                pRtnInstPropertyJS->Set(Local<v8::Value> (ExpireDate), Local<v8::Value>(ExpireDateValue));

                v8::Local<v8::String> StartDelivDate = Nan::New<v8::String> ("StartDelivDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstProperty->StartDelivDate, utf8string);
                v8::Local<v8::String> StartDelivDateValue = Nan::New<v8::String> (pRtnInstProperty->StartDelivDate).ToLocalChecked();
                pRtnInstPropertyJS->Set(Local<v8::Value> (StartDelivDate), Local<v8::Value>(StartDelivDateValue));

                v8::Local<v8::String> EndDelivDate = Nan::New<v8::String> ("EndDelivDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstProperty->EndDelivDate, utf8string);
                v8::Local<v8::String> EndDelivDateValue = Nan::New<v8::String> (pRtnInstProperty->EndDelivDate).ToLocalChecked();
                pRtnInstPropertyJS->Set(Local<v8::Value> (EndDelivDate), Local<v8::Value>(EndDelivDateValue));

                v8::Local<v8::String> BasisPrice = Nan::New<v8::String> ("BasisPrice").ToLocalChecked();
                v8::Local<v8::Number> BasisPriceValue = Nan::New<v8::Number> (pRtnInstProperty->BasisPrice);
                pRtnInstPropertyJS->Set(Local<v8::Value> (BasisPrice), Local<v8::Value>(BasisPriceValue));

                v8::Local<v8::String> MaxMarketOrderVolume = Nan::New<v8::String> ("MaxMarketOrderVolume").ToLocalChecked();
                v8::Local<v8::Integer> MaxMarketOrderVolumeValue = Nan::New<v8::Integer> (pRtnInstProperty->MaxMarketOrderVolume);
                pRtnInstPropertyJS->Set(Local<v8::Value> (MaxMarketOrderVolume), Local<v8::Value>(MaxMarketOrderVolumeValue));

                v8::Local<v8::String> MinMarketOrderVolume = Nan::New<v8::String> ("MinMarketOrderVolume").ToLocalChecked();
                v8::Local<v8::Integer> MinMarketOrderVolumeValue = Nan::New<v8::Integer> (pRtnInstProperty->MinMarketOrderVolume);
                pRtnInstPropertyJS->Set(Local<v8::Value> (MinMarketOrderVolume), Local<v8::Value>(MinMarketOrderVolumeValue));

                v8::Local<v8::String> MaxLimitOrderVolume = Nan::New<v8::String> ("MaxLimitOrderVolume").ToLocalChecked();
                v8::Local<v8::Integer> MaxLimitOrderVolumeValue = Nan::New<v8::Integer> (pRtnInstProperty->MaxLimitOrderVolume);
                pRtnInstPropertyJS->Set(Local<v8::Value> (MaxLimitOrderVolume), Local<v8::Value>(MaxLimitOrderVolumeValue));

                v8::Local<v8::String> MinLimitOrderVolume = Nan::New<v8::String> ("MinLimitOrderVolume").ToLocalChecked();
                v8::Local<v8::Integer> MinLimitOrderVolumeValue = Nan::New<v8::Integer> (pRtnInstProperty->MinLimitOrderVolume);
                pRtnInstPropertyJS->Set(Local<v8::Value> (MinLimitOrderVolume), Local<v8::Value>(MinLimitOrderVolumeValue));

                v8::Local<v8::String> PriceTick = Nan::New<v8::String> ("PriceTick").ToLocalChecked();
                v8::Local<v8::Number> PriceTickValue = Nan::New<v8::Number> (pRtnInstProperty->PriceTick);
                pRtnInstPropertyJS->Set(Local<v8::Value> (PriceTick), Local<v8::Value>(PriceTickValue));

                v8::Local<v8::String> AllowDelivPersonOpen = Nan::New<v8::String> ("AllowDelivPersonOpen").ToLocalChecked();
                v8::Local<v8::Integer> AllowDelivPersonOpenValue = Nan::New<v8::Integer> (pRtnInstProperty->AllowDelivPersonOpen);
                pRtnInstPropertyJS->Set(Local<v8::Value> (AllowDelivPersonOpen), Local<v8::Value>(AllowDelivPersonOpenValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnInstProperty) { 
                params[0] = Local<v8::Value>(pRtnInstPropertyJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnInstProperty) { 
            delete[] pRtnInstProperty;
            pRtnInstProperty = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnInstPropertyTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMarginRateTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryMarginRateTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryMarginRateTopic_trans_callbackNumb: ", g_RspQryMarginRateTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryMarginRateTopic_mutex);

    int dataNumb = g_RspQryMarginRateTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryMarginRateTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryMarginRateTopic_trans_dataNumb: ", g_RspQryMarginRateTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryMarginRateTopic_queue.empty()) {
        receivedData.push (g_RspQryMarginRateTopic_queue.front());
        g_RspQryMarginRateTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryMarginRateTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryMarginRateTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMarginRateTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryMarginRateTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMarginRateTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryMarginRateTopic").ToLocalChecked());

        CShfeFtdcRspQryMarginRateField* pRspQryMarginRate = (CShfeFtdcRspQryMarginRateField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryMarginRateJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryMarginRate) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMarginRate->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryMarginRate->ActionDate).ToLocalChecked();
                pRspQryMarginRateJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMarginRate->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryMarginRate->ActionTime).ToLocalChecked();
                pRspQryMarginRateJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMarginRate->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryMarginRate->InstrumentID).ToLocalChecked();
                pRspQryMarginRateJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMarginRate->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryMarginRate->ParticipantID).ToLocalChecked();
                pRspQryMarginRateJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryMarginRate->TradingRole);
                pRspQryMarginRateJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> HedgeFlag = Nan::New<v8::String> ("HedgeFlag").ToLocalChecked();
                v8::Local<v8::Integer> HedgeFlagValue = Nan::New<v8::Integer> (pRspQryMarginRate->HedgeFlag);
                pRspQryMarginRateJS->Set(Local<v8::Value> (HedgeFlag), Local<v8::Value>(HedgeFlagValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryMarginRate->ValueMode);
                pRspQryMarginRateJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongMarginRatio = Nan::New<v8::String> ("LongMarginRatio").ToLocalChecked();
                v8::Local<v8::Number> LongMarginRatioValue = Nan::New<v8::Number> (pRspQryMarginRate->LongMarginRatio);
                pRspQryMarginRateJS->Set(Local<v8::Value> (LongMarginRatio), Local<v8::Value>(LongMarginRatioValue));

                v8::Local<v8::String> ShortMarginRatio = Nan::New<v8::String> ("ShortMarginRatio").ToLocalChecked();
                v8::Local<v8::Number> ShortMarginRatioValue = Nan::New<v8::Number> (pRspQryMarginRate->ShortMarginRatio);
                pRspQryMarginRateJS->Set(Local<v8::Value> (ShortMarginRatio), Local<v8::Value>(ShortMarginRatioValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryMarginRate) { 
                params[0] = Local<v8::Value>(pRspQryMarginRateJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryMarginRate) { 
            delete[] pRspQryMarginRate;
            pRspQryMarginRate = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryMarginRateTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMarginRateTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnMarginRateTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnMarginRateTopic_trans_callbackNumb: ", g_RtnMarginRateTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnMarginRateTopic_mutex);

    int dataNumb = g_RtnMarginRateTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnMarginRateTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnMarginRateTopic_trans_dataNumb: ", g_RtnMarginRateTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnMarginRateTopic_queue.empty()) {
        receivedData.push (g_RtnMarginRateTopic_queue.front());
        g_RtnMarginRateTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnMarginRateTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnMarginRateTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMarginRateTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnMarginRateTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMarginRateTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnMarginRateTopic").ToLocalChecked());

        CShfeFtdcRtnMarginRateField* pRtnMarginRate = (CShfeFtdcRtnMarginRateField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnMarginRateJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnMarginRate) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnMarginRate->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnMarginRate->ActionDate).ToLocalChecked();
                pRtnMarginRateJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnMarginRate->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnMarginRate->ActionTime).ToLocalChecked();
                pRtnMarginRateJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnMarginRate->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnMarginRate->InstrumentID).ToLocalChecked();
                pRtnMarginRateJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnMarginRate->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnMarginRate->ParticipantID).ToLocalChecked();
                pRtnMarginRateJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnMarginRate->TradingRole);
                pRtnMarginRateJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> HedgeFlag = Nan::New<v8::String> ("HedgeFlag").ToLocalChecked();
                v8::Local<v8::Integer> HedgeFlagValue = Nan::New<v8::Integer> (pRtnMarginRate->HedgeFlag);
                pRtnMarginRateJS->Set(Local<v8::Value> (HedgeFlag), Local<v8::Value>(HedgeFlagValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnMarginRate->ValueMode);
                pRtnMarginRateJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongMarginRatio = Nan::New<v8::String> ("LongMarginRatio").ToLocalChecked();
                v8::Local<v8::Number> LongMarginRatioValue = Nan::New<v8::Number> (pRtnMarginRate->LongMarginRatio);
                pRtnMarginRateJS->Set(Local<v8::Value> (LongMarginRatio), Local<v8::Value>(LongMarginRatioValue));

                v8::Local<v8::String> ShortMarginRatio = Nan::New<v8::String> ("ShortMarginRatio").ToLocalChecked();
                v8::Local<v8::Number> ShortMarginRatioValue = Nan::New<v8::Number> (pRtnMarginRate->ShortMarginRatio);
                pRtnMarginRateJS->Set(Local<v8::Value> (ShortMarginRatio), Local<v8::Value>(ShortMarginRatioValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnMarginRate) { 
                params[0] = Local<v8::Value>(pRtnMarginRateJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnMarginRate) { 
            delete[] pRtnMarginRate;
            pRtnMarginRate = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnMarginRateTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPriceLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryPriceLimitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryPriceLimitTopic_trans_callbackNumb: ", g_RspQryPriceLimitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryPriceLimitTopic_mutex);

    int dataNumb = g_RspQryPriceLimitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryPriceLimitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryPriceLimitTopic_trans_dataNumb: ", g_RspQryPriceLimitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryPriceLimitTopic_queue.empty()) {
        receivedData.push (g_RspQryPriceLimitTopic_queue.front());
        g_RspQryPriceLimitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryPriceLimitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryPriceLimitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPriceLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryPriceLimitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPriceLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryPriceLimitTopic").ToLocalChecked());

        CShfeFtdcRspQryPriceLimitField* pRspQryPriceLimit = (CShfeFtdcRspQryPriceLimitField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryPriceLimitJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryPriceLimit) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPriceLimit->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryPriceLimit->ActionDate).ToLocalChecked();
                pRspQryPriceLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPriceLimit->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryPriceLimit->ActionTime).ToLocalChecked();
                pRspQryPriceLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPriceLimit->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryPriceLimit->InstrumentID).ToLocalChecked();
                pRspQryPriceLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryPriceLimit->ValueMode);
                pRspQryPriceLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> RoundingMode = Nan::New<v8::String> ("RoundingMode").ToLocalChecked();
                v8::Local<v8::Integer> RoundingModeValue = Nan::New<v8::Integer> (pRspQryPriceLimit->RoundingMode);
                pRspQryPriceLimitJS->Set(Local<v8::Value> (RoundingMode), Local<v8::Value>(RoundingModeValue));

                v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRspQryPriceLimit->UpperLimitPrice);
                pRspQryPriceLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRspQryPriceLimit->LowerLimitPrice);
                pRspQryPriceLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryPriceLimit) { 
                params[0] = Local<v8::Value>(pRspQryPriceLimitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryPriceLimit) { 
            delete[] pRspQryPriceLimit;
            pRspQryPriceLimit = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryPriceLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPriceLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnPriceLimitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnPriceLimitTopic_trans_callbackNumb: ", g_RtnPriceLimitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnPriceLimitTopic_mutex);

    int dataNumb = g_RtnPriceLimitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnPriceLimitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnPriceLimitTopic_trans_dataNumb: ", g_RtnPriceLimitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnPriceLimitTopic_queue.empty()) {
        receivedData.push (g_RtnPriceLimitTopic_queue.front());
        g_RtnPriceLimitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnPriceLimitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnPriceLimitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPriceLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnPriceLimitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPriceLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnPriceLimitTopic").ToLocalChecked());

        CShfeFtdcRtnPriceLimitField* pRtnPriceLimit = (CShfeFtdcRtnPriceLimitField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnPriceLimitJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnPriceLimit) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnPriceLimit->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnPriceLimit->ActionDate).ToLocalChecked();
                pRtnPriceLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnPriceLimit->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnPriceLimit->ActionTime).ToLocalChecked();
                pRtnPriceLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnPriceLimit->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnPriceLimit->InstrumentID).ToLocalChecked();
                pRtnPriceLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnPriceLimit->ValueMode);
                pRtnPriceLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> RoundingMode = Nan::New<v8::String> ("RoundingMode").ToLocalChecked();
                v8::Local<v8::Integer> RoundingModeValue = Nan::New<v8::Integer> (pRtnPriceLimit->RoundingMode);
                pRtnPriceLimitJS->Set(Local<v8::Value> (RoundingMode), Local<v8::Value>(RoundingModeValue));

                v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRtnPriceLimit->UpperLimitPrice);
                pRtnPriceLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRtnPriceLimit->LowerLimitPrice);
                pRtnPriceLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnPriceLimit) { 
                params[0] = Local<v8::Value>(pRtnPriceLimitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnPriceLimit) { 
            delete[] pRtnPriceLimit;
            pRtnPriceLimit = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnPriceLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPartPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryPartPosiLimitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryPartPosiLimitTopic_trans_callbackNumb: ", g_RspQryPartPosiLimitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryPartPosiLimitTopic_mutex);

    int dataNumb = g_RspQryPartPosiLimitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryPartPosiLimitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryPartPosiLimitTopic_trans_dataNumb: ", g_RspQryPartPosiLimitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryPartPosiLimitTopic_queue.empty()) {
        receivedData.push (g_RspQryPartPosiLimitTopic_queue.front());
        g_RspQryPartPosiLimitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryPartPosiLimitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryPartPosiLimitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPartPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryPartPosiLimitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPartPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryPartPosiLimitTopic").ToLocalChecked());

        CShfeFtdcRspQryPartPosiLimitField* pRspQryPartPosiLimit = (CShfeFtdcRspQryPartPosiLimitField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryPartPosiLimitJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryPartPosiLimit) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartPosiLimit->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryPartPosiLimit->ActionDate).ToLocalChecked();
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartPosiLimit->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryPartPosiLimit->ActionTime).ToLocalChecked();
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartPosiLimit->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryPartPosiLimit->InstrumentID).ToLocalChecked();
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartPosiLimit->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryPartPosiLimit->ParticipantID).ToLocalChecked();
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryPartPosiLimit->TradingRole);
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQryPartPosiLimit->StartTotalPosition);
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryPartPosiLimit->ValueMode);
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQryPartPosiLimit->LongPosLimit);
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQryPartPosiLimit->ShortPosLimit);
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRspQryPartPosiLimit->UpperLimitPrice);
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRspQryPartPosiLimit->LowerLimitPrice);
                pRspQryPartPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryPartPosiLimit) { 
                params[0] = Local<v8::Value>(pRspQryPartPosiLimitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryPartPosiLimit) { 
            delete[] pRspQryPartPosiLimit;
            pRspQryPartPosiLimit = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryPartPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPartPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnPartPosiLimitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnPartPosiLimitTopic_trans_callbackNumb: ", g_RtnPartPosiLimitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnPartPosiLimitTopic_mutex);

    int dataNumb = g_RtnPartPosiLimitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnPartPosiLimitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnPartPosiLimitTopic_trans_dataNumb: ", g_RtnPartPosiLimitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnPartPosiLimitTopic_queue.empty()) {
        receivedData.push (g_RtnPartPosiLimitTopic_queue.front());
        g_RtnPartPosiLimitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnPartPosiLimitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnPartPosiLimitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPartPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnPartPosiLimitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPartPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnPartPosiLimitTopic").ToLocalChecked());

        CShfeFtdcRtnPartPosiLimitField* pRtnPartPosiLimit = (CShfeFtdcRtnPartPosiLimitField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnPartPosiLimitJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnPartPosiLimit) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnPartPosiLimit->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnPartPosiLimit->ActionDate).ToLocalChecked();
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnPartPosiLimit->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnPartPosiLimit->ActionTime).ToLocalChecked();
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnPartPosiLimit->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnPartPosiLimit->InstrumentID).ToLocalChecked();
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnPartPosiLimit->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnPartPosiLimit->ParticipantID).ToLocalChecked();
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnPartPosiLimit->TradingRole);
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnPartPosiLimit->StartTotalPosition);
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnPartPosiLimit->ValueMode);
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnPartPosiLimit->LongPosLimit);
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnPartPosiLimit->ShortPosLimit);
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRtnPartPosiLimit->UpperLimitPrice);
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRtnPartPosiLimit->LowerLimitPrice);
                pRtnPartPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnPartPosiLimit) { 
                params[0] = Local<v8::Value>(pRtnPartPosiLimitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnPartPosiLimit) { 
            delete[] pRtnPartPosiLimit;
            pRtnPartPosiLimit = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnPartPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryClientPosiLimitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryClientPosiLimitTopic_trans_callbackNumb: ", g_RspQryClientPosiLimitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryClientPosiLimitTopic_mutex);

    int dataNumb = g_RspQryClientPosiLimitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryClientPosiLimitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryClientPosiLimitTopic_trans_dataNumb: ", g_RspQryClientPosiLimitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryClientPosiLimitTopic_queue.empty()) {
        receivedData.push (g_RspQryClientPosiLimitTopic_queue.front());
        g_RspQryClientPosiLimitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryClientPosiLimitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryClientPosiLimitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryClientPosiLimitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryClientPosiLimitTopic").ToLocalChecked());

        CShfeFtdcRspQryClientPosiLimitField* pRspQryClientPosiLimit = (CShfeFtdcRspQryClientPosiLimitField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryClientPosiLimitJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryClientPosiLimit) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientPosiLimit->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryClientPosiLimit->ActionDate).ToLocalChecked();
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientPosiLimit->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryClientPosiLimit->ActionTime).ToLocalChecked();
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientPosiLimit->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryClientPosiLimit->InstrumentID).ToLocalChecked();
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRspQryClientPosiLimit->ClientType);
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryClientPosiLimit->TradingRole);
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQryClientPosiLimit->StartTotalPosition);
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryClientPosiLimit->ValueMode);
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQryClientPosiLimit->LongPosLimit);
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQryClientPosiLimit->ShortPosLimit);
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRspQryClientPosiLimit->UpperLimitPrice);
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRspQryClientPosiLimit->LowerLimitPrice);
                pRspQryClientPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryClientPosiLimit) { 
                params[0] = Local<v8::Value>(pRspQryClientPosiLimitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryClientPosiLimit) { 
            delete[] pRspQryClientPosiLimit;
            pRspQryClientPosiLimit = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryClientPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnClientPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnClientPosiLimitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnClientPosiLimitTopic_trans_callbackNumb: ", g_RtnClientPosiLimitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnClientPosiLimitTopic_mutex);

    int dataNumb = g_RtnClientPosiLimitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnClientPosiLimitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnClientPosiLimitTopic_trans_dataNumb: ", g_RtnClientPosiLimitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnClientPosiLimitTopic_queue.empty()) {
        receivedData.push (g_RtnClientPosiLimitTopic_queue.front());
        g_RtnClientPosiLimitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnClientPosiLimitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnClientPosiLimitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnClientPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnClientPosiLimitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnClientPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnClientPosiLimitTopic").ToLocalChecked());

        CShfeFtdcRtnClientPosiLimitField* pRtnClientPosiLimit = (CShfeFtdcRtnClientPosiLimitField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnClientPosiLimitJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnClientPosiLimit) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientPosiLimit->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnClientPosiLimit->ActionDate).ToLocalChecked();
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientPosiLimit->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnClientPosiLimit->ActionTime).ToLocalChecked();
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientPosiLimit->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnClientPosiLimit->InstrumentID).ToLocalChecked();
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRtnClientPosiLimit->ClientType);
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnClientPosiLimit->TradingRole);
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnClientPosiLimit->StartTotalPosition);
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnClientPosiLimit->ValueMode);
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnClientPosiLimit->LongPosLimit);
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnClientPosiLimit->ShortPosLimit);
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRtnClientPosiLimit->UpperLimitPrice);
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRtnClientPosiLimit->LowerLimitPrice);
                pRtnClientPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnClientPosiLimit) { 
                params[0] = Local<v8::Value>(pRtnClientPosiLimitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnClientPosiLimit) { 
            delete[] pRtnClientPosiLimit;
            pRtnClientPosiLimit = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnClientPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySpecialPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySpecialPosiLimitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySpecialPosiLimitTopic_trans_callbackNumb: ", g_RspQrySpecialPosiLimitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySpecialPosiLimitTopic_mutex);

    int dataNumb = g_RspQrySpecialPosiLimitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySpecialPosiLimitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySpecialPosiLimitTopic_trans_dataNumb: ", g_RspQrySpecialPosiLimitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySpecialPosiLimitTopic_queue.empty()) {
        receivedData.push (g_RspQrySpecialPosiLimitTopic_queue.front());
        g_RspQrySpecialPosiLimitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySpecialPosiLimitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySpecialPosiLimitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySpecialPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySpecialPosiLimitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySpecialPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySpecialPosiLimitTopic").ToLocalChecked());

        CShfeFtdcRspQrySpecialPosiLimitField* pRspQrySpecialPosiLimit = (CShfeFtdcRspQrySpecialPosiLimitField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySpecialPosiLimitJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySpecialPosiLimit) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySpecialPosiLimit->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQrySpecialPosiLimit->ActionDate).ToLocalChecked();
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySpecialPosiLimit->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQrySpecialPosiLimit->ActionTime).ToLocalChecked();
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySpecialPosiLimit->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQrySpecialPosiLimit->InstrumentID).ToLocalChecked();
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySpecialPosiLimit->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRspQrySpecialPosiLimit->ClientID).ToLocalChecked();
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQrySpecialPosiLimit->TradingRole);
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQrySpecialPosiLimit->StartTotalPosition);
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQrySpecialPosiLimit->ValueMode);
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQrySpecialPosiLimit->LongPosLimit);
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQrySpecialPosiLimit->ShortPosLimit);
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRspQrySpecialPosiLimit->UpperLimitPrice);
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRspQrySpecialPosiLimit->LowerLimitPrice);
                pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySpecialPosiLimit) { 
                params[0] = Local<v8::Value>(pRspQrySpecialPosiLimitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySpecialPosiLimit) { 
            delete[] pRspQrySpecialPosiLimit;
            pRspQrySpecialPosiLimit = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySpecialPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSpecialPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnSpecialPosiLimitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnSpecialPosiLimitTopic_trans_callbackNumb: ", g_RtnSpecialPosiLimitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnSpecialPosiLimitTopic_mutex);

    int dataNumb = g_RtnSpecialPosiLimitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnSpecialPosiLimitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnSpecialPosiLimitTopic_trans_dataNumb: ", g_RtnSpecialPosiLimitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnSpecialPosiLimitTopic_queue.empty()) {
        receivedData.push (g_RtnSpecialPosiLimitTopic_queue.front());
        g_RtnSpecialPosiLimitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnSpecialPosiLimitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnSpecialPosiLimitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSpecialPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnSpecialPosiLimitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSpecialPosiLimitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnSpecialPosiLimitTopic").ToLocalChecked());

        CShfeFtdcRtnSpecialPosiLimitField* pRtnSpecialPosiLimit = (CShfeFtdcRtnSpecialPosiLimitField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnSpecialPosiLimitJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnSpecialPosiLimit) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnSpecialPosiLimit->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnSpecialPosiLimit->ActionDate).ToLocalChecked();
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnSpecialPosiLimit->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnSpecialPosiLimit->ActionTime).ToLocalChecked();
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSpecialPosiLimit->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnSpecialPosiLimit->InstrumentID).ToLocalChecked();
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSpecialPosiLimit->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRtnSpecialPosiLimit->ClientID).ToLocalChecked();
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnSpecialPosiLimit->TradingRole);
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnSpecialPosiLimit->StartTotalPosition);
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnSpecialPosiLimit->ValueMode);
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnSpecialPosiLimit->LongPosLimit);
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnSpecialPosiLimit->ShortPosLimit);
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRtnSpecialPosiLimit->UpperLimitPrice);
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRtnSpecialPosiLimit->LowerLimitPrice);
                pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnSpecialPosiLimit) { 
                params[0] = Local<v8::Value>(pRtnSpecialPosiLimitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnSpecialPosiLimit) { 
            delete[] pRtnSpecialPosiLimit;
            pRtnSpecialPosiLimit = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnSpecialPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTransactionChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTransactionChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTransactionChgTopic_trans_callbackNumb: ", g_RspQryTransactionChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTransactionChgTopic_mutex);

    int dataNumb = g_RspQryTransactionChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTransactionChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTransactionChgTopic_trans_dataNumb: ", g_RspQryTransactionChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTransactionChgTopic_queue.empty()) {
        receivedData.push (g_RspQryTransactionChgTopic_queue.front());
        g_RspQryTransactionChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTransactionChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTransactionChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTransactionChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTransactionChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTransactionChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTransactionChgTopic").ToLocalChecked());

        CShfeFtdcRspQryTransactionChgField* pRspQryTransactionChg = (CShfeFtdcRspQryTransactionChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTransactionChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTransactionChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTransactionChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryTransactionChg->ActionDate).ToLocalChecked();
                pRspQryTransactionChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTransactionChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryTransactionChg->ActionTime).ToLocalChecked();
                pRspQryTransactionChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> BillSN = Nan::New<v8::String> ("BillSN").ToLocalChecked();
                v8::Local<v8::Integer> BillSNValue = Nan::New<v8::Integer> (pRspQryTransactionChg->BillSN);
                pRspQryTransactionChgJS->Set(Local<v8::Value> (BillSN), Local<v8::Value>(BillSNValue));

                v8::Local<v8::String> ParticipantAccount = Nan::New<v8::String> ("ParticipantAccount").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTransactionChg->ParticipantAccount, utf8string);
                v8::Local<v8::String> ParticipantAccountValue = Nan::New<v8::String> (pRspQryTransactionChg->ParticipantAccount).ToLocalChecked();
                pRspQryTransactionChgJS->Set(Local<v8::Value> (ParticipantAccount), Local<v8::Value>(ParticipantAccountValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTransactionChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryTransactionChg->ParticipantID).ToLocalChecked();
                pRspQryTransactionChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> Amount = Nan::New<v8::String> ("Amount").ToLocalChecked();
                v8::Local<v8::Number> AmountValue = Nan::New<v8::Number> (pRspQryTransactionChg->Amount);
                pRspQryTransactionChgJS->Set(Local<v8::Value> (Amount), Local<v8::Value>(AmountValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTransactionChg) { 
                params[0] = Local<v8::Value>(pRspQryTransactionChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTransactionChg) { 
            delete[] pRspQryTransactionChg;
            pRspQryTransactionChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTransactionChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTransactionChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnTransactionChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnTransactionChgTopic_trans_callbackNumb: ", g_RtnTransactionChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnTransactionChgTopic_mutex);

    int dataNumb = g_RtnTransactionChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnTransactionChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnTransactionChgTopic_trans_dataNumb: ", g_RtnTransactionChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnTransactionChgTopic_queue.empty()) {
        receivedData.push (g_RtnTransactionChgTopic_queue.front());
        g_RtnTransactionChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnTransactionChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnTransactionChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTransactionChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnTransactionChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTransactionChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnTransactionChgTopic").ToLocalChecked());

        CShfeFtdcRtnTransactionChgField* pRtnTransactionChg = (CShfeFtdcRtnTransactionChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnTransactionChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnTransactionChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnTransactionChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnTransactionChg->ActionDate).ToLocalChecked();
                pRtnTransactionChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnTransactionChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnTransactionChg->ActionTime).ToLocalChecked();
                pRtnTransactionChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> BillSN = Nan::New<v8::String> ("BillSN").ToLocalChecked();
                v8::Local<v8::Integer> BillSNValue = Nan::New<v8::Integer> (pRtnTransactionChg->BillSN);
                pRtnTransactionChgJS->Set(Local<v8::Value> (BillSN), Local<v8::Value>(BillSNValue));

                v8::Local<v8::String> ParticipantAccount = Nan::New<v8::String> ("ParticipantAccount").ToLocalChecked();
                Gb2312ToUtf8(pRtnTransactionChg->ParticipantAccount, utf8string);
                v8::Local<v8::String> ParticipantAccountValue = Nan::New<v8::String> (pRtnTransactionChg->ParticipantAccount).ToLocalChecked();
                pRtnTransactionChgJS->Set(Local<v8::Value> (ParticipantAccount), Local<v8::Value>(ParticipantAccountValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnTransactionChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnTransactionChg->ParticipantID).ToLocalChecked();
                pRtnTransactionChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> Amount = Nan::New<v8::String> ("Amount").ToLocalChecked();
                v8::Local<v8::Number> AmountValue = Nan::New<v8::Number> (pRtnTransactionChg->Amount);
                pRtnTransactionChgJS->Set(Local<v8::Value> (Amount), Local<v8::Value>(AmountValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnTransactionChg) { 
                params[0] = Local<v8::Value>(pRtnTransactionChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnTransactionChg) { 
            delete[] pRtnTransactionChg;
            pRtnTransactionChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnTransactionChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryClientChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryClientChgTopic_trans_callbackNumb: ", g_RspQryClientChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryClientChgTopic_mutex);

    int dataNumb = g_RspQryClientChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryClientChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryClientChgTopic_trans_dataNumb: ", g_RspQryClientChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryClientChgTopic_queue.empty()) {
        receivedData.push (g_RspQryClientChgTopic_queue.front());
        g_RspQryClientChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryClientChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryClientChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryClientChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryClientChgTopic").ToLocalChecked());

        CShfeFtdcRspQryClientChgField* pRspQryClientChg = (CShfeFtdcRspQryClientChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryClientChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryClientChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryClientChg->ActionDate).ToLocalChecked();
                pRspQryClientChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryClientChg->ActionTime).ToLocalChecked();
                pRspQryClientChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientChg->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRspQryClientChg->ClientID).ToLocalChecked();
                pRspQryClientChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientChg->ClientName, utf8string);
                v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (pRspQryClientChg->ClientName).ToLocalChecked();
                pRspQryClientChgJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRspQryClientChg->ClientType);
                pRspQryClientChgJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryClientChg->IsActive);
                pRspQryClientChgJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientChg->IdentifiedCardType, utf8string);
                v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (pRspQryClientChg->IdentifiedCardType).ToLocalChecked();
                pRspQryClientChgJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientChg->IdentifiedCardNo, utf8string);
                v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (pRspQryClientChg->IdentifiedCardNo).ToLocalChecked();
                pRspQryClientChgJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryClientChg->OperationType);
                pRspQryClientChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryClientChg) { 
                params[0] = Local<v8::Value>(pRspQryClientChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryClientChg) { 
            delete[] pRspQryClientChg;
            pRspQryClientChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryClientChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnClientChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnClientChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnClientChgTopic_trans_callbackNumb: ", g_RtnClientChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnClientChgTopic_mutex);

    int dataNumb = g_RtnClientChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnClientChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnClientChgTopic_trans_dataNumb: ", g_RtnClientChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnClientChgTopic_queue.empty()) {
        receivedData.push (g_RtnClientChgTopic_queue.front());
        g_RtnClientChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnClientChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnClientChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnClientChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnClientChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnClientChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnClientChgTopic").ToLocalChecked());

        CShfeFtdcRtnClientChgField* pRtnClientChg = (CShfeFtdcRtnClientChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnClientChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnClientChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnClientChg->ActionDate).ToLocalChecked();
                pRtnClientChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnClientChg->ActionTime).ToLocalChecked();
                pRtnClientChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientChg->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRtnClientChg->ClientID).ToLocalChecked();
                pRtnClientChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientChg->ClientName, utf8string);
                v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (pRtnClientChg->ClientName).ToLocalChecked();
                pRtnClientChgJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRtnClientChg->ClientType);
                pRtnClientChgJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnClientChg->IsActive);
                pRtnClientChgJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientChg->IdentifiedCardType, utf8string);
                v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (pRtnClientChg->IdentifiedCardType).ToLocalChecked();
                pRtnClientChgJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientChg->IdentifiedCardNo, utf8string);
                v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (pRtnClientChg->IdentifiedCardNo).ToLocalChecked();
                pRtnClientChgJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnClientChg->OperationType);
                pRtnClientChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnClientChg) { 
                params[0] = Local<v8::Value>(pRtnClientChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnClientChg) { 
            delete[] pRtnClientChg;
            pRtnClientChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnClientChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPartClientChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryPartClientChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryPartClientChgTopic_trans_callbackNumb: ", g_RspQryPartClientChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryPartClientChgTopic_mutex);

    int dataNumb = g_RspQryPartClientChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryPartClientChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryPartClientChgTopic_trans_dataNumb: ", g_RspQryPartClientChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryPartClientChgTopic_queue.empty()) {
        receivedData.push (g_RspQryPartClientChgTopic_queue.front());
        g_RspQryPartClientChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryPartClientChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryPartClientChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPartClientChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryPartClientChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPartClientChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryPartClientChgTopic").ToLocalChecked());

        CShfeFtdcRspQryPartClientChgField* pRspQryPartClientChg = (CShfeFtdcRspQryPartClientChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryPartClientChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryPartClientChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartClientChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryPartClientChg->ActionDate).ToLocalChecked();
                pRspQryPartClientChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartClientChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryPartClientChg->ActionTime).ToLocalChecked();
                pRspQryPartClientChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartClientChg->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRspQryPartClientChg->ClientID).ToLocalChecked();
                pRspQryPartClientChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartClientChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryPartClientChg->ParticipantID).ToLocalChecked();
                pRspQryPartClientChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryPartClientChg->OperationType);
                pRspQryPartClientChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryPartClientChg) { 
                params[0] = Local<v8::Value>(pRspQryPartClientChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryPartClientChg) { 
            delete[] pRspQryPartClientChg;
            pRspQryPartClientChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryPartClientChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPartClientChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnPartClientChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnPartClientChgTopic_trans_callbackNumb: ", g_RtnPartClientChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnPartClientChgTopic_mutex);

    int dataNumb = g_RtnPartClientChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnPartClientChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnPartClientChgTopic_trans_dataNumb: ", g_RtnPartClientChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnPartClientChgTopic_queue.empty()) {
        receivedData.push (g_RtnPartClientChgTopic_queue.front());
        g_RtnPartClientChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnPartClientChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnPartClientChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPartClientChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnPartClientChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPartClientChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnPartClientChgTopic").ToLocalChecked());

        CShfeFtdcRtnPartClientChgField* pRtnPartClientChg = (CShfeFtdcRtnPartClientChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnPartClientChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnPartClientChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnPartClientChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnPartClientChg->ActionDate).ToLocalChecked();
                pRtnPartClientChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnPartClientChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnPartClientChg->ActionTime).ToLocalChecked();
                pRtnPartClientChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRtnPartClientChg->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRtnPartClientChg->ClientID).ToLocalChecked();
                pRtnPartClientChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnPartClientChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnPartClientChg->ParticipantID).ToLocalChecked();
                pRtnPartClientChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnPartClientChg->OperationType);
                pRtnPartClientChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnPartClientChg) { 
                params[0] = Local<v8::Value>(pRtnPartClientChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnPartClientChg) { 
            delete[] pRtnPartClientChg;
            pRtnPartClientChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnPartClientChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryPosiLimitChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryPosiLimitChgTopic_trans_callbackNumb: ", g_RspQryPosiLimitChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryPosiLimitChgTopic_mutex);

    int dataNumb = g_RspQryPosiLimitChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryPosiLimitChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryPosiLimitChgTopic_trans_dataNumb: ", g_RspQryPosiLimitChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryPosiLimitChgTopic_queue.empty()) {
        receivedData.push (g_RspQryPosiLimitChgTopic_queue.front());
        g_RspQryPosiLimitChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryPosiLimitChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryPosiLimitChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryPosiLimitChgTopic").ToLocalChecked());

        CShfeFtdcRspQryPosiLimitChgField* pRspQryPosiLimitChg = (CShfeFtdcRspQryPosiLimitChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryPosiLimitChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryPosiLimitChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPosiLimitChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryPosiLimitChg->ActionDate).ToLocalChecked();
                pRspQryPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPosiLimitChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryPosiLimitChg->ActionTime).ToLocalChecked();
                pRspQryPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPosiLimitChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryPosiLimitChg->InstrumentID).ToLocalChecked();
                pRspQryPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPosiLimitChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryPosiLimitChg->ParticipantID).ToLocalChecked();
                pRspQryPosiLimitChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryPosiLimitChg->TradingRole);
                pRspQryPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQryPosiLimitChg->StartTotalPosition);
                pRspQryPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryPosiLimitChg->ValueMode);
                pRspQryPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQryPosiLimitChg->LongPosLimit);
                pRspQryPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQryPosiLimitChg->ShortPosLimit);
                pRspQryPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryPosiLimitChg->OperationType);
                pRspQryPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryPosiLimitChg) { 
                params[0] = Local<v8::Value>(pRspQryPosiLimitChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryPosiLimitChg) { 
            delete[] pRspQryPosiLimitChg;
            pRspQryPosiLimitChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnPosiLimitChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnPosiLimitChgTopic_trans_callbackNumb: ", g_RtnPosiLimitChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnPosiLimitChgTopic_mutex);

    int dataNumb = g_RtnPosiLimitChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnPosiLimitChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnPosiLimitChgTopic_trans_dataNumb: ", g_RtnPosiLimitChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnPosiLimitChgTopic_queue.empty()) {
        receivedData.push (g_RtnPosiLimitChgTopic_queue.front());
        g_RtnPosiLimitChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnPosiLimitChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnPosiLimitChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnPosiLimitChgTopic").ToLocalChecked());

        CShfeFtdcRtnPosiLimitChgField* pRtnPosiLimitChg = (CShfeFtdcRtnPosiLimitChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnPosiLimitChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnPosiLimitChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnPosiLimitChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnPosiLimitChg->ActionDate).ToLocalChecked();
                pRtnPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnPosiLimitChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnPosiLimitChg->ActionTime).ToLocalChecked();
                pRtnPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnPosiLimitChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnPosiLimitChg->InstrumentID).ToLocalChecked();
                pRtnPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnPosiLimitChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnPosiLimitChg->ParticipantID).ToLocalChecked();
                pRtnPosiLimitChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnPosiLimitChg->TradingRole);
                pRtnPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnPosiLimitChg->StartTotalPosition);
                pRtnPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnPosiLimitChg->ValueMode);
                pRtnPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnPosiLimitChg->LongPosLimit);
                pRtnPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnPosiLimitChg->ShortPosLimit);
                pRtnPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnPosiLimitChg->OperationType);
                pRtnPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnPosiLimitChg) { 
                params[0] = Local<v8::Value>(pRtnPosiLimitChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnPosiLimitChg) { 
            delete[] pRtnPosiLimitChg;
            pRtnPosiLimitChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHedgeDetailChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryHedgeDetailChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryHedgeDetailChgTopic_trans_callbackNumb: ", g_RspQryHedgeDetailChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryHedgeDetailChgTopic_mutex);

    int dataNumb = g_RspQryHedgeDetailChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryHedgeDetailChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryHedgeDetailChgTopic_trans_dataNumb: ", g_RspQryHedgeDetailChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryHedgeDetailChgTopic_queue.empty()) {
        receivedData.push (g_RspQryHedgeDetailChgTopic_queue.front());
        g_RspQryHedgeDetailChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryHedgeDetailChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryHedgeDetailChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHedgeDetailChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryHedgeDetailChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHedgeDetailChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryHedgeDetailChgTopic").ToLocalChecked());

        CShfeFtdcRspQryHedgeDetailChgField* pRspQryHedgeDetailChg = (CShfeFtdcRspQryHedgeDetailChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryHedgeDetailChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryHedgeDetailChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHedgeDetailChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryHedgeDetailChg->ActionDate).ToLocalChecked();
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHedgeDetailChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryHedgeDetailChg->ActionTime).ToLocalChecked();
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHedgeDetailChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryHedgeDetailChg->ParticipantID).ToLocalChecked();
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHedgeDetailChg->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRspQryHedgeDetailChg->ClientID).ToLocalChecked();
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> OperatorID = Nan::New<v8::String> ("OperatorID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHedgeDetailChg->OperatorID, utf8string);
                v8::Local<v8::String> OperatorIDValue = Nan::New<v8::String> (pRspQryHedgeDetailChg->OperatorID).ToLocalChecked();
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (OperatorID), Local<v8::Value>(OperatorIDValue));

                v8::Local<v8::String> Time = Nan::New<v8::String> ("Time").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHedgeDetailChg->Time, utf8string);
                v8::Local<v8::String> TimeValue = Nan::New<v8::String> (pRspQryHedgeDetailChg->Time).ToLocalChecked();
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (Time), Local<v8::Value>(TimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHedgeDetailChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryHedgeDetailChg->InstrumentID).ToLocalChecked();
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> PosiDirection = Nan::New<v8::String> ("PosiDirection").ToLocalChecked();
                v8::Local<v8::Integer> PosiDirectionValue = Nan::New<v8::Integer> (pRspQryHedgeDetailChg->PosiDirection);
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (PosiDirection), Local<v8::Value>(PosiDirectionValue));

                v8::Local<v8::String> TradingVolume = Nan::New<v8::String> ("TradingVolume").ToLocalChecked();
                v8::Local<v8::Integer> TradingVolumeValue = Nan::New<v8::Integer> (pRspQryHedgeDetailChg->TradingVolume);
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (TradingVolume), Local<v8::Value>(TradingVolumeValue));

                v8::Local<v8::String> HedgeQuota = Nan::New<v8::String> ("HedgeQuota").ToLocalChecked();
                v8::Local<v8::Integer> HedgeQuotaValue = Nan::New<v8::Integer> (pRspQryHedgeDetailChg->HedgeQuota);
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (HedgeQuota), Local<v8::Value>(HedgeQuotaValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryHedgeDetailChg->OperationType);
                pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryHedgeDetailChg) { 
                params[0] = Local<v8::Value>(pRspQryHedgeDetailChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryHedgeDetailChg) { 
            delete[] pRspQryHedgeDetailChg;
            pRspQryHedgeDetailChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryHedgeDetailChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnHedgeDetailChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnHedgeDetailChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnHedgeDetailChgTopic_trans_callbackNumb: ", g_RtnHedgeDetailChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnHedgeDetailChgTopic_mutex);

    int dataNumb = g_RtnHedgeDetailChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnHedgeDetailChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnHedgeDetailChgTopic_trans_dataNumb: ", g_RtnHedgeDetailChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnHedgeDetailChgTopic_queue.empty()) {
        receivedData.push (g_RtnHedgeDetailChgTopic_queue.front());
        g_RtnHedgeDetailChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnHedgeDetailChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnHedgeDetailChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnHedgeDetailChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnHedgeDetailChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnHedgeDetailChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnHedgeDetailChgTopic").ToLocalChecked());

        CShfeFtdcRtnHedgeDetailChgField* pRtnHedgeDetailChg = (CShfeFtdcRtnHedgeDetailChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnHedgeDetailChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnHedgeDetailChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnHedgeDetailChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnHedgeDetailChg->ActionDate).ToLocalChecked();
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnHedgeDetailChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnHedgeDetailChg->ActionTime).ToLocalChecked();
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnHedgeDetailChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnHedgeDetailChg->ParticipantID).ToLocalChecked();
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRtnHedgeDetailChg->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRtnHedgeDetailChg->ClientID).ToLocalChecked();
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> OperatorID = Nan::New<v8::String> ("OperatorID").ToLocalChecked();
                Gb2312ToUtf8(pRtnHedgeDetailChg->OperatorID, utf8string);
                v8::Local<v8::String> OperatorIDValue = Nan::New<v8::String> (pRtnHedgeDetailChg->OperatorID).ToLocalChecked();
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (OperatorID), Local<v8::Value>(OperatorIDValue));

                v8::Local<v8::String> Time = Nan::New<v8::String> ("Time").ToLocalChecked();
                Gb2312ToUtf8(pRtnHedgeDetailChg->Time, utf8string);
                v8::Local<v8::String> TimeValue = Nan::New<v8::String> (pRtnHedgeDetailChg->Time).ToLocalChecked();
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (Time), Local<v8::Value>(TimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnHedgeDetailChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnHedgeDetailChg->InstrumentID).ToLocalChecked();
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> PosiDirection = Nan::New<v8::String> ("PosiDirection").ToLocalChecked();
                v8::Local<v8::Integer> PosiDirectionValue = Nan::New<v8::Integer> (pRtnHedgeDetailChg->PosiDirection);
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (PosiDirection), Local<v8::Value>(PosiDirectionValue));

                v8::Local<v8::String> TradingVolume = Nan::New<v8::String> ("TradingVolume").ToLocalChecked();
                v8::Local<v8::Integer> TradingVolumeValue = Nan::New<v8::Integer> (pRtnHedgeDetailChg->TradingVolume);
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (TradingVolume), Local<v8::Value>(TradingVolumeValue));

                v8::Local<v8::String> HedgeQuota = Nan::New<v8::String> ("HedgeQuota").ToLocalChecked();
                v8::Local<v8::Integer> HedgeQuotaValue = Nan::New<v8::Integer> (pRtnHedgeDetailChg->HedgeQuota);
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (HedgeQuota), Local<v8::Value>(HedgeQuotaValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnHedgeDetailChg->OperationType);
                pRtnHedgeDetailChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnHedgeDetailChg) { 
                params[0] = Local<v8::Value>(pRtnHedgeDetailChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnHedgeDetailChg) { 
            delete[] pRtnHedgeDetailChg;
            pRtnHedgeDetailChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnHedgeDetailChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryParticipantChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryParticipantChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryParticipantChgTopic_trans_callbackNumb: ", g_RspQryParticipantChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryParticipantChgTopic_mutex);

    int dataNumb = g_RspQryParticipantChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryParticipantChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryParticipantChgTopic_trans_dataNumb: ", g_RspQryParticipantChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryParticipantChgTopic_queue.empty()) {
        receivedData.push (g_RspQryParticipantChgTopic_queue.front());
        g_RspQryParticipantChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryParticipantChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryParticipantChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryParticipantChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryParticipantChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryParticipantChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryParticipantChgTopic").ToLocalChecked());

        CShfeFtdcRspQryParticipantChgField* pRspQryParticipantChg = (CShfeFtdcRspQryParticipantChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryParticipantChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryParticipantChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticipantChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryParticipantChg->ActionDate).ToLocalChecked();
                pRspQryParticipantChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticipantChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryParticipantChg->ActionTime).ToLocalChecked();
                pRspQryParticipantChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticipantChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryParticipantChg->ParticipantID).ToLocalChecked();
                pRspQryParticipantChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticipantChg->ParticipantName, utf8string);
                v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (pRspQryParticipantChg->ParticipantName).ToLocalChecked();
                pRspQryParticipantChgJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                v8::Local<v8::String> ParticipantAbbr = Nan::New<v8::String> ("ParticipantAbbr").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticipantChg->ParticipantAbbr, utf8string);
                v8::Local<v8::String> ParticipantAbbrValue = Nan::New<v8::String> (pRspQryParticipantChg->ParticipantAbbr).ToLocalChecked();
                pRspQryParticipantChgJS->Set(Local<v8::Value> (ParticipantAbbr), Local<v8::Value>(ParticipantAbbrValue));

                v8::Local<v8::String> MemberType = Nan::New<v8::String> ("MemberType").ToLocalChecked();
                v8::Local<v8::Integer> MemberTypeValue = Nan::New<v8::Integer> (pRspQryParticipantChg->MemberType);
                pRspQryParticipantChgJS->Set(Local<v8::Value> (MemberType), Local<v8::Value>(MemberTypeValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryParticipantChg->IsActive);
                pRspQryParticipantChgJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryParticipantChg->OperationType);
                pRspQryParticipantChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryParticipantChg) { 
                params[0] = Local<v8::Value>(pRspQryParticipantChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryParticipantChg) { 
            delete[] pRspQryParticipantChg;
            pRspQryParticipantChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryParticipantChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnParticipantChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnParticipantChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnParticipantChgTopic_trans_callbackNumb: ", g_RtnParticipantChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnParticipantChgTopic_mutex);

    int dataNumb = g_RtnParticipantChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnParticipantChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnParticipantChgTopic_trans_dataNumb: ", g_RtnParticipantChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnParticipantChgTopic_queue.empty()) {
        receivedData.push (g_RtnParticipantChgTopic_queue.front());
        g_RtnParticipantChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnParticipantChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnParticipantChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnParticipantChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnParticipantChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnParticipantChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnParticipantChgTopic").ToLocalChecked());

        CShfeFtdcRtnParticipantChgField* pRtnParticipantChg = (CShfeFtdcRtnParticipantChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnParticipantChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnParticipantChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticipantChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnParticipantChg->ActionDate).ToLocalChecked();
                pRtnParticipantChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticipantChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnParticipantChg->ActionTime).ToLocalChecked();
                pRtnParticipantChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticipantChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnParticipantChg->ParticipantID).ToLocalChecked();
                pRtnParticipantChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticipantChg->ParticipantName, utf8string);
                v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (pRtnParticipantChg->ParticipantName).ToLocalChecked();
                pRtnParticipantChgJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                v8::Local<v8::String> ParticipantAbbr = Nan::New<v8::String> ("ParticipantAbbr").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticipantChg->ParticipantAbbr, utf8string);
                v8::Local<v8::String> ParticipantAbbrValue = Nan::New<v8::String> (pRtnParticipantChg->ParticipantAbbr).ToLocalChecked();
                pRtnParticipantChgJS->Set(Local<v8::Value> (ParticipantAbbr), Local<v8::Value>(ParticipantAbbrValue));

                v8::Local<v8::String> MemberType = Nan::New<v8::String> ("MemberType").ToLocalChecked();
                v8::Local<v8::Integer> MemberTypeValue = Nan::New<v8::Integer> (pRtnParticipantChg->MemberType);
                pRtnParticipantChgJS->Set(Local<v8::Value> (MemberType), Local<v8::Value>(MemberTypeValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnParticipantChg->IsActive);
                pRtnParticipantChgJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnParticipantChg->OperationType);
                pRtnParticipantChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnParticipantChg) { 
                params[0] = Local<v8::Value>(pRtnParticipantChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnParticipantChg) { 
            delete[] pRtnParticipantChg;
            pRtnParticipantChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnParticipantChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMarginRateChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryMarginRateChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryMarginRateChgTopic_trans_callbackNumb: ", g_RspQryMarginRateChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryMarginRateChgTopic_mutex);

    int dataNumb = g_RspQryMarginRateChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryMarginRateChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryMarginRateChgTopic_trans_dataNumb: ", g_RspQryMarginRateChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryMarginRateChgTopic_queue.empty()) {
        receivedData.push (g_RspQryMarginRateChgTopic_queue.front());
        g_RspQryMarginRateChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryMarginRateChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryMarginRateChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMarginRateChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryMarginRateChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMarginRateChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryMarginRateChgTopic").ToLocalChecked());

        CShfeFtdcRspQryMarginRateChgField* pRspQryMarginRateChg = (CShfeFtdcRspQryMarginRateChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryMarginRateChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryMarginRateChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMarginRateChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryMarginRateChg->ActionDate).ToLocalChecked();
                pRspQryMarginRateChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMarginRateChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryMarginRateChg->ActionTime).ToLocalChecked();
                pRspQryMarginRateChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMarginRateChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryMarginRateChg->InstrumentID).ToLocalChecked();
                pRspQryMarginRateChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMarginRateChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryMarginRateChg->ParticipantID).ToLocalChecked();
                pRspQryMarginRateChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryMarginRateChg->TradingRole);
                pRspQryMarginRateChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> HedgeFlag = Nan::New<v8::String> ("HedgeFlag").ToLocalChecked();
                v8::Local<v8::Integer> HedgeFlagValue = Nan::New<v8::Integer> (pRspQryMarginRateChg->HedgeFlag);
                pRspQryMarginRateChgJS->Set(Local<v8::Value> (HedgeFlag), Local<v8::Value>(HedgeFlagValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryMarginRateChg->ValueMode);
                pRspQryMarginRateChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongMarginRatio = Nan::New<v8::String> ("LongMarginRatio").ToLocalChecked();
                v8::Local<v8::Number> LongMarginRatioValue = Nan::New<v8::Number> (pRspQryMarginRateChg->LongMarginRatio);
                pRspQryMarginRateChgJS->Set(Local<v8::Value> (LongMarginRatio), Local<v8::Value>(LongMarginRatioValue));

                v8::Local<v8::String> ShortMarginRatio = Nan::New<v8::String> ("ShortMarginRatio").ToLocalChecked();
                v8::Local<v8::Number> ShortMarginRatioValue = Nan::New<v8::Number> (pRspQryMarginRateChg->ShortMarginRatio);
                pRspQryMarginRateChgJS->Set(Local<v8::Value> (ShortMarginRatio), Local<v8::Value>(ShortMarginRatioValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryMarginRateChg->OperationType);
                pRspQryMarginRateChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryMarginRateChg) { 
                params[0] = Local<v8::Value>(pRspQryMarginRateChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryMarginRateChg) { 
            delete[] pRspQryMarginRateChg;
            pRspQryMarginRateChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryMarginRateChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMarginRateChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnMarginRateChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnMarginRateChgTopic_trans_callbackNumb: ", g_RtnMarginRateChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnMarginRateChgTopic_mutex);

    int dataNumb = g_RtnMarginRateChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnMarginRateChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnMarginRateChgTopic_trans_dataNumb: ", g_RtnMarginRateChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnMarginRateChgTopic_queue.empty()) {
        receivedData.push (g_RtnMarginRateChgTopic_queue.front());
        g_RtnMarginRateChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnMarginRateChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnMarginRateChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMarginRateChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnMarginRateChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMarginRateChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnMarginRateChgTopic").ToLocalChecked());

        CShfeFtdcRtnMarginRateChgField* pRtnMarginRateChg = (CShfeFtdcRtnMarginRateChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnMarginRateChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnMarginRateChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnMarginRateChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnMarginRateChg->ActionDate).ToLocalChecked();
                pRtnMarginRateChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnMarginRateChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnMarginRateChg->ActionTime).ToLocalChecked();
                pRtnMarginRateChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnMarginRateChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnMarginRateChg->InstrumentID).ToLocalChecked();
                pRtnMarginRateChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnMarginRateChg->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnMarginRateChg->ParticipantID).ToLocalChecked();
                pRtnMarginRateChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnMarginRateChg->TradingRole);
                pRtnMarginRateChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> HedgeFlag = Nan::New<v8::String> ("HedgeFlag").ToLocalChecked();
                v8::Local<v8::Integer> HedgeFlagValue = Nan::New<v8::Integer> (pRtnMarginRateChg->HedgeFlag);
                pRtnMarginRateChgJS->Set(Local<v8::Value> (HedgeFlag), Local<v8::Value>(HedgeFlagValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnMarginRateChg->ValueMode);
                pRtnMarginRateChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongMarginRatio = Nan::New<v8::String> ("LongMarginRatio").ToLocalChecked();
                v8::Local<v8::Number> LongMarginRatioValue = Nan::New<v8::Number> (pRtnMarginRateChg->LongMarginRatio);
                pRtnMarginRateChgJS->Set(Local<v8::Value> (LongMarginRatio), Local<v8::Value>(LongMarginRatioValue));

                v8::Local<v8::String> ShortMarginRatio = Nan::New<v8::String> ("ShortMarginRatio").ToLocalChecked();
                v8::Local<v8::Number> ShortMarginRatioValue = Nan::New<v8::Number> (pRtnMarginRateChg->ShortMarginRatio);
                pRtnMarginRateChgJS->Set(Local<v8::Value> (ShortMarginRatio), Local<v8::Value>(ShortMarginRatioValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnMarginRateChg->OperationType);
                pRtnMarginRateChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnMarginRateChg) { 
                params[0] = Local<v8::Value>(pRtnMarginRateChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnMarginRateChg) { 
            delete[] pRtnMarginRateChg;
            pRtnMarginRateChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnMarginRateChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryUserIpChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryUserIpChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryUserIpChgTopic_trans_callbackNumb: ", g_RspQryUserIpChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryUserIpChgTopic_mutex);

    int dataNumb = g_RspQryUserIpChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryUserIpChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryUserIpChgTopic_trans_dataNumb: ", g_RspQryUserIpChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryUserIpChgTopic_queue.empty()) {
        receivedData.push (g_RspQryUserIpChgTopic_queue.front());
        g_RspQryUserIpChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryUserIpChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryUserIpChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryUserIpChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryUserIpChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryUserIpChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryUserIpChgTopic").ToLocalChecked());

        CShfeFtdcRspQryUserIpChgField* pRspQryUserIpChg = (CShfeFtdcRspQryUserIpChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryUserIpChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryUserIpChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserIpChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryUserIpChg->ActionDate).ToLocalChecked();
                pRspQryUserIpChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserIpChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryUserIpChg->ActionTime).ToLocalChecked();
                pRspQryUserIpChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserIpChg->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQryUserIpChg->UserID).ToLocalChecked();
                pRspQryUserIpChgJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserIpChg->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRspQryUserIpChg->IPAddress).ToLocalChecked();
                pRspQryUserIpChgJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> IPMask = Nan::New<v8::String> ("IPMask").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserIpChg->IPMask, utf8string);
                v8::Local<v8::String> IPMaskValue = Nan::New<v8::String> (pRspQryUserIpChg->IPMask).ToLocalChecked();
                pRspQryUserIpChgJS->Set(Local<v8::Value> (IPMask), Local<v8::Value>(IPMaskValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryUserIpChg->OperationType);
                pRspQryUserIpChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryUserIpChg) { 
                params[0] = Local<v8::Value>(pRspQryUserIpChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryUserIpChg) { 
            delete[] pRspQryUserIpChg;
            pRspQryUserIpChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryUserIpChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnUserIpChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnUserIpChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnUserIpChgTopic_trans_callbackNumb: ", g_RtnUserIpChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnUserIpChgTopic_mutex);

    int dataNumb = g_RtnUserIpChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnUserIpChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnUserIpChgTopic_trans_dataNumb: ", g_RtnUserIpChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnUserIpChgTopic_queue.empty()) {
        receivedData.push (g_RtnUserIpChgTopic_queue.front());
        g_RtnUserIpChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnUserIpChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnUserIpChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnUserIpChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnUserIpChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnUserIpChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnUserIpChgTopic").ToLocalChecked());

        CShfeFtdcRtnUserIpChgField* pRtnUserIpChg = (CShfeFtdcRtnUserIpChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnUserIpChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnUserIpChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserIpChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnUserIpChg->ActionDate).ToLocalChecked();
                pRtnUserIpChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserIpChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnUserIpChg->ActionTime).ToLocalChecked();
                pRtnUserIpChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserIpChg->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRtnUserIpChg->UserID).ToLocalChecked();
                pRtnUserIpChgJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserIpChg->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRtnUserIpChg->IPAddress).ToLocalChecked();
                pRtnUserIpChgJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> IPMask = Nan::New<v8::String> ("IPMask").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserIpChg->IPMask, utf8string);
                v8::Local<v8::String> IPMaskValue = Nan::New<v8::String> (pRtnUserIpChg->IPMask).ToLocalChecked();
                pRtnUserIpChgJS->Set(Local<v8::Value> (IPMask), Local<v8::Value>(IPMaskValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnUserIpChg->OperationType);
                pRtnUserIpChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnUserIpChg) { 
                params[0] = Local<v8::Value>(pRtnUserIpChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnUserIpChg) { 
            delete[] pRtnUserIpChg;
            pRtnUserIpChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnUserIpChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryClientPosiLimitChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryClientPosiLimitChgTopic_trans_callbackNumb: ", g_RspQryClientPosiLimitChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryClientPosiLimitChgTopic_mutex);

    int dataNumb = g_RspQryClientPosiLimitChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryClientPosiLimitChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryClientPosiLimitChgTopic_trans_dataNumb: ", g_RspQryClientPosiLimitChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryClientPosiLimitChgTopic_queue.empty()) {
        receivedData.push (g_RspQryClientPosiLimitChgTopic_queue.front());
        g_RspQryClientPosiLimitChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryClientPosiLimitChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryClientPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryClientPosiLimitChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryClientPosiLimitChgTopic").ToLocalChecked());

        CShfeFtdcRspQryClientPosiLimitChgField* pRspQryClientPosiLimitChg = (CShfeFtdcRspQryClientPosiLimitChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryClientPosiLimitChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryClientPosiLimitChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientPosiLimitChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryClientPosiLimitChg->ActionDate).ToLocalChecked();
                pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientPosiLimitChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryClientPosiLimitChg->ActionTime).ToLocalChecked();
                pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientPosiLimitChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryClientPosiLimitChg->InstrumentID).ToLocalChecked();
                pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRspQryClientPosiLimitChg->ClientType);
                pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryClientPosiLimitChg->TradingRole);
                pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQryClientPosiLimitChg->StartTotalPosition);
                pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryClientPosiLimitChg->ValueMode);
                pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQryClientPosiLimitChg->LongPosLimit);
                pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQryClientPosiLimitChg->ShortPosLimit);
                pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryClientPosiLimitChg->OperationType);
                pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryClientPosiLimitChg) { 
                params[0] = Local<v8::Value>(pRspQryClientPosiLimitChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryClientPosiLimitChg) { 
            delete[] pRspQryClientPosiLimitChg;
            pRspQryClientPosiLimitChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryClientPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnClientPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnClientPosiLimitChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnClientPosiLimitChgTopic_trans_callbackNumb: ", g_RtnClientPosiLimitChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnClientPosiLimitChgTopic_mutex);

    int dataNumb = g_RtnClientPosiLimitChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnClientPosiLimitChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnClientPosiLimitChgTopic_trans_dataNumb: ", g_RtnClientPosiLimitChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnClientPosiLimitChgTopic_queue.empty()) {
        receivedData.push (g_RtnClientPosiLimitChgTopic_queue.front());
        g_RtnClientPosiLimitChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnClientPosiLimitChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnClientPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnClientPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnClientPosiLimitChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnClientPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnClientPosiLimitChgTopic").ToLocalChecked());

        CShfeFtdcRtnClientPosiLimitChgField* pRtnClientPosiLimitChg = (CShfeFtdcRtnClientPosiLimitChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnClientPosiLimitChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnClientPosiLimitChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientPosiLimitChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnClientPosiLimitChg->ActionDate).ToLocalChecked();
                pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientPosiLimitChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnClientPosiLimitChg->ActionTime).ToLocalChecked();
                pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientPosiLimitChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnClientPosiLimitChg->InstrumentID).ToLocalChecked();
                pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRtnClientPosiLimitChg->ClientType);
                pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnClientPosiLimitChg->TradingRole);
                pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnClientPosiLimitChg->StartTotalPosition);
                pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnClientPosiLimitChg->ValueMode);
                pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnClientPosiLimitChg->LongPosLimit);
                pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnClientPosiLimitChg->ShortPosLimit);
                pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnClientPosiLimitChg->OperationType);
                pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnClientPosiLimitChg) { 
                params[0] = Local<v8::Value>(pRtnClientPosiLimitChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnClientPosiLimitChg) { 
            delete[] pRtnClientPosiLimitChg;
            pRtnClientPosiLimitChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnClientPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySpecPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySpecPosiLimitChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySpecPosiLimitChgTopic_trans_callbackNumb: ", g_RspQrySpecPosiLimitChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySpecPosiLimitChgTopic_mutex);

    int dataNumb = g_RspQrySpecPosiLimitChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySpecPosiLimitChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySpecPosiLimitChgTopic_trans_dataNumb: ", g_RspQrySpecPosiLimitChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySpecPosiLimitChgTopic_queue.empty()) {
        receivedData.push (g_RspQrySpecPosiLimitChgTopic_queue.front());
        g_RspQrySpecPosiLimitChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySpecPosiLimitChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySpecPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySpecPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySpecPosiLimitChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySpecPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySpecPosiLimitChgTopic").ToLocalChecked());

        CShfeFtdcRspQrySpecPosiLimitChgField* pRspQrySpecPosiLimitChg = (CShfeFtdcRspQrySpecPosiLimitChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySpecPosiLimitChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySpecPosiLimitChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySpecPosiLimitChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQrySpecPosiLimitChg->ActionDate).ToLocalChecked();
                pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySpecPosiLimitChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQrySpecPosiLimitChg->ActionTime).ToLocalChecked();
                pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySpecPosiLimitChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQrySpecPosiLimitChg->InstrumentID).ToLocalChecked();
                pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySpecPosiLimitChg->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRspQrySpecPosiLimitChg->ClientID).ToLocalChecked();
                pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQrySpecPosiLimitChg->TradingRole);
                pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQrySpecPosiLimitChg->StartTotalPosition);
                pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQrySpecPosiLimitChg->ValueMode);
                pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQrySpecPosiLimitChg->LongPosLimit);
                pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQrySpecPosiLimitChg->ShortPosLimit);
                pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQrySpecPosiLimitChg->OperationType);
                pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySpecPosiLimitChg) { 
                params[0] = Local<v8::Value>(pRspQrySpecPosiLimitChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySpecPosiLimitChg) { 
            delete[] pRspQrySpecPosiLimitChg;
            pRspQrySpecPosiLimitChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySpecPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSpecPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnSpecPosiLimitChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnSpecPosiLimitChgTopic_trans_callbackNumb: ", g_RtnSpecPosiLimitChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnSpecPosiLimitChgTopic_mutex);

    int dataNumb = g_RtnSpecPosiLimitChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnSpecPosiLimitChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnSpecPosiLimitChgTopic_trans_dataNumb: ", g_RtnSpecPosiLimitChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnSpecPosiLimitChgTopic_queue.empty()) {
        receivedData.push (g_RtnSpecPosiLimitChgTopic_queue.front());
        g_RtnSpecPosiLimitChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnSpecPosiLimitChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnSpecPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSpecPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnSpecPosiLimitChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSpecPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnSpecPosiLimitChgTopic").ToLocalChecked());

        CShfeFtdcRtnSpecPosiLimitChgField* pRtnSpecPosiLimitChg = (CShfeFtdcRtnSpecPosiLimitChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnSpecPosiLimitChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnSpecPosiLimitChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnSpecPosiLimitChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnSpecPosiLimitChg->ActionDate).ToLocalChecked();
                pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnSpecPosiLimitChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnSpecPosiLimitChg->ActionTime).ToLocalChecked();
                pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSpecPosiLimitChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnSpecPosiLimitChg->InstrumentID).ToLocalChecked();
                pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSpecPosiLimitChg->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRtnSpecPosiLimitChg->ClientID).ToLocalChecked();
                pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnSpecPosiLimitChg->TradingRole);
                pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnSpecPosiLimitChg->StartTotalPosition);
                pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnSpecPosiLimitChg->ValueMode);
                pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnSpecPosiLimitChg->LongPosLimit);
                pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnSpecPosiLimitChg->ShortPosLimit);
                pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnSpecPosiLimitChg->OperationType);
                pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnSpecPosiLimitChg) { 
                params[0] = Local<v8::Value>(pRtnSpecPosiLimitChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnSpecPosiLimitChg) { 
            delete[] pRtnSpecPosiLimitChg;
            pRtnSpecPosiLimitChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnSpecPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHistoryObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryHistoryObjectAttrTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryHistoryObjectAttrTopic_trans_callbackNumb: ", g_RspQryHistoryObjectAttrTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryHistoryObjectAttrTopic_mutex);

    int dataNumb = g_RspQryHistoryObjectAttrTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryHistoryObjectAttrTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryHistoryObjectAttrTopic_trans_dataNumb: ", g_RspQryHistoryObjectAttrTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryHistoryObjectAttrTopic_queue.empty()) {
        receivedData.push (g_RspQryHistoryObjectAttrTopic_queue.front());
        g_RspQryHistoryObjectAttrTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryHistoryObjectAttrTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryHistoryObjectAttrTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHistoryObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryHistoryObjectAttrTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHistoryObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryHistoryObjectAttrTopic").ToLocalChecked());

        CShfeFtdcRspQryHistoryObjectAttrField* pRspQryHistoryObjectAttr = (CShfeFtdcRspQryHistoryObjectAttrField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryHistoryObjectAttrJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryHistoryObjectAttr) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryObjectAttr->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryHistoryObjectAttr->MonDate).ToLocalChecked();
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> BeginTime = Nan::New<v8::String> ("BeginTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryObjectAttr->BeginTime, utf8string);
                v8::Local<v8::String> BeginTimeValue = Nan::New<v8::String> (pRspQryHistoryObjectAttr->BeginTime).ToLocalChecked();
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (BeginTime), Local<v8::Value>(BeginTimeValue));

                v8::Local<v8::String> EndTime = Nan::New<v8::String> ("EndTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryObjectAttr->EndTime, utf8string);
                v8::Local<v8::String> EndTimeValue = Nan::New<v8::String> (pRspQryHistoryObjectAttr->EndTime).ToLocalChecked();
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (EndTime), Local<v8::Value>(EndTimeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryObjectAttr->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryHistoryObjectAttr->ObjectID).ToLocalChecked();
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryObjectAttr->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRspQryHistoryObjectAttr->AttrType).ToLocalChecked();
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> ValueType = Nan::New<v8::String> ("ValueType").ToLocalChecked();
                v8::Local<v8::Integer> ValueTypeValue = Nan::New<v8::Integer> (pRspQryHistoryObjectAttr->ValueType);
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (ValueType), Local<v8::Value>(ValueTypeValue));

                v8::Local<v8::String> FirstValue = Nan::New<v8::String> ("FirstValue").ToLocalChecked();
                v8::Local<v8::Number> FirstValueValue = Nan::New<v8::Number> (pRspQryHistoryObjectAttr->FirstValue);
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (FirstValue), Local<v8::Value>(FirstValueValue));

                v8::Local<v8::String> EndValue = Nan::New<v8::String> ("EndValue").ToLocalChecked();
                v8::Local<v8::Number> EndValueValue = Nan::New<v8::Number> (pRspQryHistoryObjectAttr->EndValue);
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (EndValue), Local<v8::Value>(EndValueValue));

                v8::Local<v8::String> AvgValue = Nan::New<v8::String> ("AvgValue").ToLocalChecked();
                v8::Local<v8::Number> AvgValueValue = Nan::New<v8::Number> (pRspQryHistoryObjectAttr->AvgValue);
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (AvgValue), Local<v8::Value>(AvgValueValue));

                v8::Local<v8::String> MinValue = Nan::New<v8::String> ("MinValue").ToLocalChecked();
                v8::Local<v8::Number> MinValueValue = Nan::New<v8::Number> (pRspQryHistoryObjectAttr->MinValue);
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (MinValue), Local<v8::Value>(MinValueValue));

                v8::Local<v8::String> MaxValue = Nan::New<v8::String> ("MaxValue").ToLocalChecked();
                v8::Local<v8::Number> MaxValueValue = Nan::New<v8::Number> (pRspQryHistoryObjectAttr->MaxValue);
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (MaxValue), Local<v8::Value>(MaxValueValue));

                v8::Local<v8::String> ValueCount = Nan::New<v8::String> ("ValueCount").ToLocalChecked();
                v8::Local<v8::Integer> ValueCountValue = Nan::New<v8::Integer> (pRspQryHistoryObjectAttr->ValueCount);
                pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (ValueCount), Local<v8::Value>(ValueCountValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryHistoryObjectAttr) { 
                params[0] = Local<v8::Value>(pRspQryHistoryObjectAttrJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryHistoryObjectAttr) { 
            delete[] pRspQryHistoryObjectAttr;
            pRspQryHistoryObjectAttr = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryHistoryObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnHistoryObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnHistoryObjectAttrTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnHistoryObjectAttrTopic_trans_callbackNumb: ", g_RtnHistoryObjectAttrTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnHistoryObjectAttrTopic_mutex);

    int dataNumb = g_RtnHistoryObjectAttrTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnHistoryObjectAttrTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnHistoryObjectAttrTopic_trans_dataNumb: ", g_RtnHistoryObjectAttrTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnHistoryObjectAttrTopic_queue.empty()) {
        receivedData.push (g_RtnHistoryObjectAttrTopic_queue.front());
        g_RtnHistoryObjectAttrTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnHistoryObjectAttrTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnHistoryObjectAttrTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnHistoryObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnHistoryObjectAttrTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnHistoryObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnHistoryObjectAttrTopic").ToLocalChecked());

        CShfeFtdcRtnHistoryObjectAttrField* pRtnHistoryObjectAttr = (CShfeFtdcRtnHistoryObjectAttrField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnHistoryObjectAttrJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnHistoryObjectAttr) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryObjectAttr->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnHistoryObjectAttr->MonDate).ToLocalChecked();
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> BeginTime = Nan::New<v8::String> ("BeginTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryObjectAttr->BeginTime, utf8string);
                v8::Local<v8::String> BeginTimeValue = Nan::New<v8::String> (pRtnHistoryObjectAttr->BeginTime).ToLocalChecked();
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (BeginTime), Local<v8::Value>(BeginTimeValue));

                v8::Local<v8::String> EndTime = Nan::New<v8::String> ("EndTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryObjectAttr->EndTime, utf8string);
                v8::Local<v8::String> EndTimeValue = Nan::New<v8::String> (pRtnHistoryObjectAttr->EndTime).ToLocalChecked();
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (EndTime), Local<v8::Value>(EndTimeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryObjectAttr->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnHistoryObjectAttr->ObjectID).ToLocalChecked();
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryObjectAttr->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRtnHistoryObjectAttr->AttrType).ToLocalChecked();
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> ValueType = Nan::New<v8::String> ("ValueType").ToLocalChecked();
                v8::Local<v8::Integer> ValueTypeValue = Nan::New<v8::Integer> (pRtnHistoryObjectAttr->ValueType);
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (ValueType), Local<v8::Value>(ValueTypeValue));

                v8::Local<v8::String> FirstValue = Nan::New<v8::String> ("FirstValue").ToLocalChecked();
                v8::Local<v8::Number> FirstValueValue = Nan::New<v8::Number> (pRtnHistoryObjectAttr->FirstValue);
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (FirstValue), Local<v8::Value>(FirstValueValue));

                v8::Local<v8::String> EndValue = Nan::New<v8::String> ("EndValue").ToLocalChecked();
                v8::Local<v8::Number> EndValueValue = Nan::New<v8::Number> (pRtnHistoryObjectAttr->EndValue);
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (EndValue), Local<v8::Value>(EndValueValue));

                v8::Local<v8::String> AvgValue = Nan::New<v8::String> ("AvgValue").ToLocalChecked();
                v8::Local<v8::Number> AvgValueValue = Nan::New<v8::Number> (pRtnHistoryObjectAttr->AvgValue);
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (AvgValue), Local<v8::Value>(AvgValueValue));

                v8::Local<v8::String> MinValue = Nan::New<v8::String> ("MinValue").ToLocalChecked();
                v8::Local<v8::Number> MinValueValue = Nan::New<v8::Number> (pRtnHistoryObjectAttr->MinValue);
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (MinValue), Local<v8::Value>(MinValueValue));

                v8::Local<v8::String> MaxValue = Nan::New<v8::String> ("MaxValue").ToLocalChecked();
                v8::Local<v8::Number> MaxValueValue = Nan::New<v8::Number> (pRtnHistoryObjectAttr->MaxValue);
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (MaxValue), Local<v8::Value>(MaxValueValue));

                v8::Local<v8::String> ValueCount = Nan::New<v8::String> ("ValueCount").ToLocalChecked();
                v8::Local<v8::Integer> ValueCountValue = Nan::New<v8::Integer> (pRtnHistoryObjectAttr->ValueCount);
                pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (ValueCount), Local<v8::Value>(ValueCountValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnHistoryObjectAttr) { 
                params[0] = Local<v8::Value>(pRtnHistoryObjectAttrJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnHistoryObjectAttr) { 
            delete[] pRtnHistoryObjectAttr;
            pRtnHistoryObjectAttr = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnHistoryObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFrontInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryFrontInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryFrontInfoTopic_trans_callbackNumb: ", g_RspQryFrontInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryFrontInfoTopic_mutex);

    int dataNumb = g_RspQryFrontInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryFrontInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryFrontInfoTopic_trans_dataNumb: ", g_RspQryFrontInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryFrontInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryFrontInfoTopic_queue.front());
        g_RspQryFrontInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryFrontInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryFrontInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFrontInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryFrontInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFrontInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryFrontInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryFrontInfoField* pRspQryFrontInfo = (CShfeFtdcRspQryFrontInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryFrontInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryFrontInfo) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFrontInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryFrontInfo->MonDate).ToLocalChecked();
                pRspQryFrontInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFrontInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryFrontInfo->MonTime).ToLocalChecked();
                pRspQryFrontInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> FrontId = Nan::New<v8::String> ("FrontId").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFrontInfo->FrontId, utf8string);
                v8::Local<v8::String> FrontIdValue = Nan::New<v8::String> (pRspQryFrontInfo->FrontId).ToLocalChecked();
                pRspQryFrontInfoJS->Set(Local<v8::Value> (FrontId), Local<v8::Value>(FrontIdValue));

                v8::Local<v8::String> RspCondition = Nan::New<v8::String> ("RspCondition").ToLocalChecked();
                v8::Local<v8::Integer> RspConditionValue = Nan::New<v8::Integer> (pRspQryFrontInfo->RspCondition);
                pRspQryFrontInfoJS->Set(Local<v8::Value> (RspCondition), Local<v8::Value>(RspConditionValue));

                v8::Local<v8::String> ReqCount = Nan::New<v8::String> ("ReqCount").ToLocalChecked();
                v8::Local<v8::Integer> ReqCountValue = Nan::New<v8::Integer> (pRspQryFrontInfo->ReqCount);
                pRspQryFrontInfoJS->Set(Local<v8::Value> (ReqCount), Local<v8::Value>(ReqCountValue));

                v8::Local<v8::String> ReqRate = Nan::New<v8::String> ("ReqRate").ToLocalChecked();
                v8::Local<v8::Number> ReqRateValue = Nan::New<v8::Number> (pRspQryFrontInfo->ReqRate);
                pRspQryFrontInfoJS->Set(Local<v8::Value> (ReqRate), Local<v8::Value>(ReqRateValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryFrontInfo) { 
                params[0] = Local<v8::Value>(pRspQryFrontInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryFrontInfo) { 
            delete[] pRspQryFrontInfo;
            pRspQryFrontInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryFrontInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFrontInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnFrontInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnFrontInfoTopic_trans_callbackNumb: ", g_RtnFrontInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnFrontInfoTopic_mutex);

    int dataNumb = g_RtnFrontInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnFrontInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnFrontInfoTopic_trans_dataNumb: ", g_RtnFrontInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnFrontInfoTopic_queue.empty()) {
        receivedData.push (g_RtnFrontInfoTopic_queue.front());
        g_RtnFrontInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnFrontInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnFrontInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFrontInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnFrontInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFrontInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnFrontInfoTopic").ToLocalChecked());

        CShfeFtdcRtnFrontInfoField* pRtnFrontInfo = (CShfeFtdcRtnFrontInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnFrontInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnFrontInfo) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnFrontInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnFrontInfo->MonDate).ToLocalChecked();
                pRtnFrontInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnFrontInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnFrontInfo->MonTime).ToLocalChecked();
                pRtnFrontInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> FrontId = Nan::New<v8::String> ("FrontId").ToLocalChecked();
                Gb2312ToUtf8(pRtnFrontInfo->FrontId, utf8string);
                v8::Local<v8::String> FrontIdValue = Nan::New<v8::String> (pRtnFrontInfo->FrontId).ToLocalChecked();
                pRtnFrontInfoJS->Set(Local<v8::Value> (FrontId), Local<v8::Value>(FrontIdValue));

                v8::Local<v8::String> RspCondition = Nan::New<v8::String> ("RspCondition").ToLocalChecked();
                v8::Local<v8::Integer> RspConditionValue = Nan::New<v8::Integer> (pRtnFrontInfo->RspCondition);
                pRtnFrontInfoJS->Set(Local<v8::Value> (RspCondition), Local<v8::Value>(RspConditionValue));

                v8::Local<v8::String> ReqCount = Nan::New<v8::String> ("ReqCount").ToLocalChecked();
                v8::Local<v8::Integer> ReqCountValue = Nan::New<v8::Integer> (pRtnFrontInfo->ReqCount);
                pRtnFrontInfoJS->Set(Local<v8::Value> (ReqCount), Local<v8::Value>(ReqCountValue));

                v8::Local<v8::String> ReqRate = Nan::New<v8::String> ("ReqRate").ToLocalChecked();
                v8::Local<v8::Number> ReqRateValue = Nan::New<v8::Number> (pRtnFrontInfo->ReqRate);
                pRtnFrontInfoJS->Set(Local<v8::Value> (ReqRate), Local<v8::Value>(ReqRateValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnFrontInfo) { 
                params[0] = Local<v8::Value>(pRtnFrontInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnFrontInfo) { 
            delete[] pRtnFrontInfo;
            pRtnFrontInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnFrontInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysUserLoginTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySysUserLoginTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySysUserLoginTopic_trans_callbackNumb: ", g_RspQrySysUserLoginTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySysUserLoginTopic_mutex);

    int dataNumb = g_RspQrySysUserLoginTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySysUserLoginTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySysUserLoginTopic_trans_dataNumb: ", g_RspQrySysUserLoginTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySysUserLoginTopic_queue.empty()) {
        receivedData.push (g_RspQrySysUserLoginTopic_queue.front());
        g_RspQrySysUserLoginTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySysUserLoginTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySysUserLoginTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysUserLoginTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySysUserLoginTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysUserLoginTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySysUserLoginTopic").ToLocalChecked());

        CShfeFtdcRspQrySysUserLoginField* pRspQrySysUserLogin = (CShfeFtdcRspQrySysUserLoginField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySysUserLoginJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySysUserLogin) { 
                string utf8string;
                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysUserLogin->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQrySysUserLogin->UserID).ToLocalChecked();
                pRspQrySysUserLoginJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> TradingDay = Nan::New<v8::String> ("TradingDay").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysUserLogin->TradingDay, utf8string);
                v8::Local<v8::String> TradingDayValue = Nan::New<v8::String> (pRspQrySysUserLogin->TradingDay).ToLocalChecked();
                pRspQrySysUserLoginJS->Set(Local<v8::Value> (TradingDay), Local<v8::Value>(TradingDayValue));

                v8::Local<v8::String> LoginTime = Nan::New<v8::String> ("LoginTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysUserLogin->LoginTime, utf8string);
                v8::Local<v8::String> LoginTimeValue = Nan::New<v8::String> (pRspQrySysUserLogin->LoginTime).ToLocalChecked();
                pRspQrySysUserLoginJS->Set(Local<v8::Value> (LoginTime), Local<v8::Value>(LoginTimeValue));

                v8::Local<v8::String> Privilege = Nan::New<v8::String> ("Privilege").ToLocalChecked();
                v8::Local<v8::Integer> PrivilegeValue = Nan::New<v8::Integer> (pRspQrySysUserLogin->Privilege);
                pRspQrySysUserLoginJS->Set(Local<v8::Value> (Privilege), Local<v8::Value>(PrivilegeValue));

                v8::Local<v8::String> VersionFlag = Nan::New<v8::String> ("VersionFlag").ToLocalChecked();
                v8::Local<v8::Integer> VersionFlagValue = Nan::New<v8::Integer> (pRspQrySysUserLogin->VersionFlag);
                pRspQrySysUserLoginJS->Set(Local<v8::Value> (VersionFlag), Local<v8::Value>(VersionFlagValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySysUserLogin) { 
                params[0] = Local<v8::Value>(pRspQrySysUserLoginJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySysUserLogin) { 
            delete[] pRspQrySysUserLogin;
            pRspQrySysUserLogin = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySysUserLoginTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysUserLogoutTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySysUserLogoutTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySysUserLogoutTopic_trans_callbackNumb: ", g_RspQrySysUserLogoutTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySysUserLogoutTopic_mutex);

    int dataNumb = g_RspQrySysUserLogoutTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySysUserLogoutTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySysUserLogoutTopic_trans_dataNumb: ", g_RspQrySysUserLogoutTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySysUserLogoutTopic_queue.empty()) {
        receivedData.push (g_RspQrySysUserLogoutTopic_queue.front());
        g_RspQrySysUserLogoutTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySysUserLogoutTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySysUserLogoutTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysUserLogoutTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySysUserLogoutTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysUserLogoutTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySysUserLogoutTopic").ToLocalChecked());

        CShfeFtdcRspQrySysUserLogoutField* pRspQrySysUserLogout = (CShfeFtdcRspQrySysUserLogoutField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySysUserLogoutJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySysUserLogout) { 
                string utf8string;
                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysUserLogout->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQrySysUserLogout->UserID).ToLocalChecked();
                pRspQrySysUserLogoutJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySysUserLogout) { 
                params[0] = Local<v8::Value>(pRspQrySysUserLogoutJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySysUserLogout) { 
            delete[] pRspQrySysUserLogout;
            pRspQrySysUserLogout = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySysUserLogoutTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysUserPasswordUpdateTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySysUserPasswordUpdateTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySysUserPasswordUpdateTopic_trans_callbackNumb: ", g_RspQrySysUserPasswordUpdateTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySysUserPasswordUpdateTopic_mutex);

    int dataNumb = g_RspQrySysUserPasswordUpdateTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySysUserPasswordUpdateTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySysUserPasswordUpdateTopic_trans_dataNumb: ", g_RspQrySysUserPasswordUpdateTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySysUserPasswordUpdateTopic_queue.empty()) {
        receivedData.push (g_RspQrySysUserPasswordUpdateTopic_queue.front());
        g_RspQrySysUserPasswordUpdateTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySysUserPasswordUpdateTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySysUserPasswordUpdateTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysUserPasswordUpdateTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySysUserPasswordUpdateTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysUserPasswordUpdateTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySysUserPasswordUpdateTopic").ToLocalChecked());

        CShfeFtdcRspQrySysUserPasswordUpdateField* pRspQrySysUserPasswordUpdate = (CShfeFtdcRspQrySysUserPasswordUpdateField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySysUserPasswordUpdateJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySysUserPasswordUpdate) { 
                string utf8string;
                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysUserPasswordUpdate->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQrySysUserPasswordUpdate->UserID).ToLocalChecked();
                pRspQrySysUserPasswordUpdateJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> PasswordChgMsg = Nan::New<v8::String> ("PasswordChgMsg").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysUserPasswordUpdate->PasswordChgMsg, utf8string);
                v8::Local<v8::String> PasswordChgMsgValue = Nan::New<v8::String> (pRspQrySysUserPasswordUpdate->PasswordChgMsg).ToLocalChecked();
                pRspQrySysUserPasswordUpdateJS->Set(Local<v8::Value> (PasswordChgMsg), Local<v8::Value>(PasswordChgMsgValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySysUserPasswordUpdate) { 
                params[0] = Local<v8::Value>(pRspQrySysUserPasswordUpdateJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySysUserPasswordUpdate) { 
            delete[] pRspQrySysUserPasswordUpdate;
            pRspQrySysUserPasswordUpdate = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySysUserPasswordUpdateTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysUserRegisterTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySysUserRegisterTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySysUserRegisterTopic_trans_callbackNumb: ", g_RspQrySysUserRegisterTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySysUserRegisterTopic_mutex);

    int dataNumb = g_RspQrySysUserRegisterTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySysUserRegisterTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySysUserRegisterTopic_trans_dataNumb: ", g_RspQrySysUserRegisterTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySysUserRegisterTopic_queue.empty()) {
        receivedData.push (g_RspQrySysUserRegisterTopic_queue.front());
        g_RspQrySysUserRegisterTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySysUserRegisterTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySysUserRegisterTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysUserRegisterTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySysUserRegisterTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysUserRegisterTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySysUserRegisterTopic").ToLocalChecked());

        CShfeFtdcRspQrySysUserRegisterField* pRspQrySysUserRegister = (CShfeFtdcRspQrySysUserRegisterField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySysUserRegisterJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySysUserRegister) { 
                string utf8string;
                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysUserRegister->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQrySysUserRegister->UserID).ToLocalChecked();
                pRspQrySysUserRegisterJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> Privilege = Nan::New<v8::String> ("Privilege").ToLocalChecked();
                v8::Local<v8::Integer> PrivilegeValue = Nan::New<v8::Integer> (pRspQrySysUserRegister->Privilege);
                pRspQrySysUserRegisterJS->Set(Local<v8::Value> (Privilege), Local<v8::Value>(PrivilegeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySysUserRegister) { 
                params[0] = Local<v8::Value>(pRspQrySysUserRegisterJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySysUserRegister) { 
            delete[] pRspQrySysUserRegister;
            pRspQrySysUserRegister = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySysUserRegisterTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysUserDeleteTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySysUserDeleteTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySysUserDeleteTopic_trans_callbackNumb: ", g_RspQrySysUserDeleteTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySysUserDeleteTopic_mutex);

    int dataNumb = g_RspQrySysUserDeleteTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySysUserDeleteTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySysUserDeleteTopic_trans_dataNumb: ", g_RspQrySysUserDeleteTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySysUserDeleteTopic_queue.empty()) {
        receivedData.push (g_RspQrySysUserDeleteTopic_queue.front());
        g_RspQrySysUserDeleteTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySysUserDeleteTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySysUserDeleteTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysUserDeleteTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySysUserDeleteTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysUserDeleteTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySysUserDeleteTopic").ToLocalChecked());

        CShfeFtdcRspQrySysUserDeleteField* pRspQrySysUserDelete = (CShfeFtdcRspQrySysUserDeleteField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySysUserDeleteJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySysUserDelete) { 
                string utf8string;
                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysUserDelete->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQrySysUserDelete->UserID).ToLocalChecked();
                pRspQrySysUserDeleteJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySysUserDelete) { 
                params[0] = Local<v8::Value>(pRspQrySysUserDeleteJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySysUserDelete) { 
            delete[] pRspQrySysUserDelete;
            pRspQrySysUserDelete = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySysUserDeleteTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryParticipantInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryParticipantInitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryParticipantInitTopic_trans_callbackNumb: ", g_RspQryParticipantInitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryParticipantInitTopic_mutex);

    int dataNumb = g_RspQryParticipantInitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryParticipantInitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryParticipantInitTopic_trans_dataNumb: ", g_RspQryParticipantInitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryParticipantInitTopic_queue.empty()) {
        receivedData.push (g_RspQryParticipantInitTopic_queue.front());
        g_RspQryParticipantInitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryParticipantInitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryParticipantInitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryParticipantInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryParticipantInitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryParticipantInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryParticipantInitTopic").ToLocalChecked());

        CShfeFtdcRspQryParticipantInitField* pRspQryParticipantInit = (CShfeFtdcRspQryParticipantInitField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryParticipantInitJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryParticipantInit) { 
                string utf8string;
                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticipantInit->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryParticipantInit->ParticipantID).ToLocalChecked();
                pRspQryParticipantInitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticipantInit->ParticipantName, utf8string);
                v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (pRspQryParticipantInit->ParticipantName).ToLocalChecked();
                pRspQryParticipantInitJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                v8::Local<v8::String> ParticipantAbbr = Nan::New<v8::String> ("ParticipantAbbr").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticipantInit->ParticipantAbbr, utf8string);
                v8::Local<v8::String> ParticipantAbbrValue = Nan::New<v8::String> (pRspQryParticipantInit->ParticipantAbbr).ToLocalChecked();
                pRspQryParticipantInitJS->Set(Local<v8::Value> (ParticipantAbbr), Local<v8::Value>(ParticipantAbbrValue));

                v8::Local<v8::String> MemberType = Nan::New<v8::String> ("MemberType").ToLocalChecked();
                v8::Local<v8::Integer> MemberTypeValue = Nan::New<v8::Integer> (pRspQryParticipantInit->MemberType);
                pRspQryParticipantInitJS->Set(Local<v8::Value> (MemberType), Local<v8::Value>(MemberTypeValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryParticipantInit->IsActive);
                pRspQryParticipantInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryParticipantInit->OperationType);
                pRspQryParticipantInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryParticipantInit) { 
                params[0] = Local<v8::Value>(pRspQryParticipantInitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryParticipantInit) { 
            delete[] pRspQryParticipantInit;
            pRspQryParticipantInit = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryParticipantInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnParticipantInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnParticipantInitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnParticipantInitTopic_trans_callbackNumb: ", g_RtnParticipantInitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnParticipantInitTopic_mutex);

    int dataNumb = g_RtnParticipantInitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnParticipantInitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnParticipantInitTopic_trans_dataNumb: ", g_RtnParticipantInitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnParticipantInitTopic_queue.empty()) {
        receivedData.push (g_RtnParticipantInitTopic_queue.front());
        g_RtnParticipantInitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnParticipantInitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnParticipantInitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnParticipantInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnParticipantInitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnParticipantInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnParticipantInitTopic").ToLocalChecked());

        CShfeFtdcRtnParticipantInitField* pRtnParticipantInit = (CShfeFtdcRtnParticipantInitField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnParticipantInitJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnParticipantInit) { 
                string utf8string;
                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticipantInit->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnParticipantInit->ParticipantID).ToLocalChecked();
                pRtnParticipantInitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticipantInit->ParticipantName, utf8string);
                v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (pRtnParticipantInit->ParticipantName).ToLocalChecked();
                pRtnParticipantInitJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                v8::Local<v8::String> ParticipantAbbr = Nan::New<v8::String> ("ParticipantAbbr").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticipantInit->ParticipantAbbr, utf8string);
                v8::Local<v8::String> ParticipantAbbrValue = Nan::New<v8::String> (pRtnParticipantInit->ParticipantAbbr).ToLocalChecked();
                pRtnParticipantInitJS->Set(Local<v8::Value> (ParticipantAbbr), Local<v8::Value>(ParticipantAbbrValue));

                v8::Local<v8::String> MemberType = Nan::New<v8::String> ("MemberType").ToLocalChecked();
                v8::Local<v8::Integer> MemberTypeValue = Nan::New<v8::Integer> (pRtnParticipantInit->MemberType);
                pRtnParticipantInitJS->Set(Local<v8::Value> (MemberType), Local<v8::Value>(MemberTypeValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnParticipantInit->IsActive);
                pRtnParticipantInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnParticipantInit->OperationType);
                pRtnParticipantInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnParticipantInit) { 
                params[0] = Local<v8::Value>(pRtnParticipantInitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnParticipantInit) { 
            delete[] pRtnParticipantInit;
            pRtnParticipantInit = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnParticipantInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryUserInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryUserInitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryUserInitTopic_trans_callbackNumb: ", g_RspQryUserInitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryUserInitTopic_mutex);

    int dataNumb = g_RspQryUserInitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryUserInitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryUserInitTopic_trans_dataNumb: ", g_RspQryUserInitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryUserInitTopic_queue.empty()) {
        receivedData.push (g_RspQryUserInitTopic_queue.front());
        g_RspQryUserInitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryUserInitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryUserInitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryUserInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryUserInitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryUserInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryUserInitTopic").ToLocalChecked());

        CShfeFtdcRspQryUserInitField* pRspQryUserInit = (CShfeFtdcRspQryUserInitField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryUserInitJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryUserInit) { 
                string utf8string;
                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserInit->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryUserInit->ParticipantID).ToLocalChecked();
                pRspQryUserInitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserInit->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQryUserInit->UserID).ToLocalChecked();
                pRspQryUserInitJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> UserType = Nan::New<v8::String> ("UserType").ToLocalChecked();
                v8::Local<v8::Integer> UserTypeValue = Nan::New<v8::Integer> (pRspQryUserInit->UserType);
                pRspQryUserInitJS->Set(Local<v8::Value> (UserType), Local<v8::Value>(UserTypeValue));

                v8::Local<v8::String> Password = Nan::New<v8::String> ("Password").ToLocalChecked();
                Gb2312ToUtf8(pRspQryUserInit->Password, utf8string);
                v8::Local<v8::String> PasswordValue = Nan::New<v8::String> (pRspQryUserInit->Password).ToLocalChecked();
                pRspQryUserInitJS->Set(Local<v8::Value> (Password), Local<v8::Value>(PasswordValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryUserInit->IsActive);
                pRspQryUserInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryUserInit->OperationType);
                pRspQryUserInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryUserInit) { 
                params[0] = Local<v8::Value>(pRspQryUserInitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryUserInit) { 
            delete[] pRspQryUserInit;
            pRspQryUserInit = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryUserInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnUserInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnUserInitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnUserInitTopic_trans_callbackNumb: ", g_RtnUserInitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnUserInitTopic_mutex);

    int dataNumb = g_RtnUserInitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnUserInitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnUserInitTopic_trans_dataNumb: ", g_RtnUserInitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnUserInitTopic_queue.empty()) {
        receivedData.push (g_RtnUserInitTopic_queue.front());
        g_RtnUserInitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnUserInitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnUserInitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnUserInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnUserInitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnUserInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnUserInitTopic").ToLocalChecked());

        CShfeFtdcRtnUserInitField* pRtnUserInit = (CShfeFtdcRtnUserInitField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnUserInitJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnUserInit) { 
                string utf8string;
                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserInit->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnUserInit->ParticipantID).ToLocalChecked();
                pRtnUserInitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserInit->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRtnUserInit->UserID).ToLocalChecked();
                pRtnUserInitJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> UserType = Nan::New<v8::String> ("UserType").ToLocalChecked();
                v8::Local<v8::Integer> UserTypeValue = Nan::New<v8::Integer> (pRtnUserInit->UserType);
                pRtnUserInitJS->Set(Local<v8::Value> (UserType), Local<v8::Value>(UserTypeValue));

                v8::Local<v8::String> Password = Nan::New<v8::String> ("Password").ToLocalChecked();
                Gb2312ToUtf8(pRtnUserInit->Password, utf8string);
                v8::Local<v8::String> PasswordValue = Nan::New<v8::String> (pRtnUserInit->Password).ToLocalChecked();
                pRtnUserInitJS->Set(Local<v8::Value> (Password), Local<v8::Value>(PasswordValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnUserInit->IsActive);
                pRtnUserInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnUserInit->OperationType);
                pRtnUserInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnUserInit) { 
                params[0] = Local<v8::Value>(pRtnUserInitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnUserInit) { 
            delete[] pRtnUserInit;
            pRtnUserInit = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnUserInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryClientInitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryClientInitTopic_trans_callbackNumb: ", g_RspQryClientInitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryClientInitTopic_mutex);

    int dataNumb = g_RspQryClientInitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryClientInitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryClientInitTopic_trans_dataNumb: ", g_RspQryClientInitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryClientInitTopic_queue.empty()) {
        receivedData.push (g_RspQryClientInitTopic_queue.front());
        g_RspQryClientInitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryClientInitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryClientInitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryClientInitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryClientInitTopic").ToLocalChecked());

        CShfeFtdcRspQryClientInitField* pRspQryClientInit = (CShfeFtdcRspQryClientInitField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryClientInitJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryClientInit) { 
                string utf8string;
                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientInit->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRspQryClientInit->ClientID).ToLocalChecked();
                pRspQryClientInitJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientInit->ClientName, utf8string);
                v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (pRspQryClientInit->ClientName).ToLocalChecked();
                pRspQryClientInitJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientInit->IdentifiedCardType, utf8string);
                v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (pRspQryClientInit->IdentifiedCardType).ToLocalChecked();
                pRspQryClientInitJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientInit->IdentifiedCardNo, utf8string);
                v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (pRspQryClientInit->IdentifiedCardNo).ToLocalChecked();
                pRspQryClientInitJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryClientInit->TradingRole);
                pRspQryClientInitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRspQryClientInit->ClientType);
                pRspQryClientInitJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryClientInit->IsActive);
                pRspQryClientInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryClientInit->OperationType);
                pRspQryClientInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryClientInit) { 
                params[0] = Local<v8::Value>(pRspQryClientInitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryClientInit) { 
            delete[] pRspQryClientInit;
            pRspQryClientInit = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryClientInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnClientInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnClientInitTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnClientInitTopic_trans_callbackNumb: ", g_RtnClientInitTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnClientInitTopic_mutex);

    int dataNumb = g_RtnClientInitTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnClientInitTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnClientInitTopic_trans_dataNumb: ", g_RtnClientInitTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnClientInitTopic_queue.empty()) {
        receivedData.push (g_RtnClientInitTopic_queue.front());
        g_RtnClientInitTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnClientInitTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnClientInitTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnClientInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnClientInitTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnClientInitTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnClientInitTopic").ToLocalChecked());

        CShfeFtdcRtnClientInitField* pRtnClientInit = (CShfeFtdcRtnClientInitField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnClientInitJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnClientInit) { 
                string utf8string;
                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientInit->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRtnClientInit->ClientID).ToLocalChecked();
                pRtnClientInitJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientInit->ClientName, utf8string);
                v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (pRtnClientInit->ClientName).ToLocalChecked();
                pRtnClientInitJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientInit->IdentifiedCardType, utf8string);
                v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (pRtnClientInit->IdentifiedCardType).ToLocalChecked();
                pRtnClientInitJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientInit->IdentifiedCardNo, utf8string);
                v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (pRtnClientInit->IdentifiedCardNo).ToLocalChecked();
                pRtnClientInitJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnClientInit->TradingRole);
                pRtnClientInitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRtnClientInit->ClientType);
                pRtnClientInitJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnClientInit->IsActive);
                pRtnClientInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnClientInit->OperationType);
                pRtnClientInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnClientInit) { 
                params[0] = Local<v8::Value>(pRtnClientInitJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnClientInit) { 
            delete[] pRtnClientInit;
            pRtnClientInit = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnClientInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeLogTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTradeLogTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTradeLogTopic_trans_callbackNumb: ", g_RspQryTradeLogTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTradeLogTopic_mutex);

    int dataNumb = g_RspQryTradeLogTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTradeLogTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTradeLogTopic_trans_dataNumb: ", g_RspQryTradeLogTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTradeLogTopic_queue.empty()) {
        receivedData.push (g_RspQryTradeLogTopic_queue.front());
        g_RspQryTradeLogTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTradeLogTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTradeLogTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeLogTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTradeLogTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeLogTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTradeLogTopic").ToLocalChecked());

        CShfeFtdcRspQryTradeLogField* pRspQryTradeLog = (CShfeFtdcRspQryTradeLogField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTradeLogJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTradeLog) { 
                string utf8string;
                v8::Local<v8::String> bFlag = Nan::New<v8::String> ("bFlag").ToLocalChecked();
                v8::Local<v8::Integer> bFlagValue = Nan::New<v8::Integer> (pRspQryTradeLog->bFlag);
                pRspQryTradeLogJS->Set(Local<v8::Value> (bFlag), Local<v8::Value>(bFlagValue));

                v8::Local<v8::String> TradeLogStr = Nan::New<v8::String> ("TradeLogStr").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeLog->TradeLogStr, utf8string);
                v8::Local<v8::String> TradeLogStrValue = Nan::New<v8::String> (pRspQryTradeLog->TradeLogStr).ToLocalChecked();
                pRspQryTradeLogJS->Set(Local<v8::Value> (TradeLogStr), Local<v8::Value>(TradeLogStrValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTradeLog) { 
                params[0] = Local<v8::Value>(pRspQryTradeLogJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTradeLog) { 
            delete[] pRspQryTradeLog;
            pRspQryTradeLog = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTradeLogTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTradeLogTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnTradeLogTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnTradeLogTopic_trans_callbackNumb: ", g_RtnTradeLogTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnTradeLogTopic_mutex);

    int dataNumb = g_RtnTradeLogTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnTradeLogTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnTradeLogTopic_trans_dataNumb: ", g_RtnTradeLogTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnTradeLogTopic_queue.empty()) {
        receivedData.push (g_RtnTradeLogTopic_queue.front());
        g_RtnTradeLogTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnTradeLogTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnTradeLogTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTradeLogTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnTradeLogTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTradeLogTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnTradeLogTopic").ToLocalChecked());

        CShfeFtdcRtnTradeLogField* pRtnTradeLog = (CShfeFtdcRtnTradeLogField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnTradeLogJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnTradeLog) { 
                string utf8string;
                v8::Local<v8::String> bFlag = Nan::New<v8::String> ("bFlag").ToLocalChecked();
                v8::Local<v8::Integer> bFlagValue = Nan::New<v8::Integer> (pRtnTradeLog->bFlag);
                pRtnTradeLogJS->Set(Local<v8::Value> (bFlag), Local<v8::Value>(bFlagValue));

                v8::Local<v8::String> TradeLogStr = Nan::New<v8::String> ("TradeLogStr").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeLog->TradeLogStr, utf8string);
                v8::Local<v8::String> TradeLogStrValue = Nan::New<v8::String> (pRtnTradeLog->TradeLogStr).ToLocalChecked();
                pRtnTradeLogJS->Set(Local<v8::Value> (TradeLogStr), Local<v8::Value>(TradeLogStrValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnTradeLog) { 
                params[0] = Local<v8::Value>(pRtnTradeLogJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnTradeLog) { 
            delete[] pRtnTradeLog;
            pRtnTradeLog = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnTradeLogTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeUserLoginInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTradeUserLoginInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTradeUserLoginInfoTopic_trans_callbackNumb: ", g_RspQryTradeUserLoginInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTradeUserLoginInfoTopic_mutex);

    int dataNumb = g_RspQryTradeUserLoginInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTradeUserLoginInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTradeUserLoginInfoTopic_trans_dataNumb: ", g_RspQryTradeUserLoginInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTradeUserLoginInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryTradeUserLoginInfoTopic_queue.front());
        g_RspQryTradeUserLoginInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTradeUserLoginInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTradeUserLoginInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeUserLoginInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTradeUserLoginInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeUserLoginInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTradeUserLoginInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryTradeUserLoginInfoField* pRspQryTradeUserLoginInfo = (CShfeFtdcRspQryTradeUserLoginInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTradeUserLoginInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTradeUserLoginInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryTradeUserLoginInfo->ObjectID).ToLocalChecked();
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginInfo->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQryTradeUserLoginInfo->UserID).ToLocalChecked();
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginInfo->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryTradeUserLoginInfo->ParticipantID).ToLocalChecked();
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> ProtocolInfo = Nan::New<v8::String> ("ProtocolInfo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginInfo->ProtocolInfo, utf8string);
                v8::Local<v8::String> ProtocolInfoValue = Nan::New<v8::String> (pRspQryTradeUserLoginInfo->ProtocolInfo).ToLocalChecked();
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ProtocolInfo), Local<v8::Value>(ProtocolInfoValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginInfo->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRspQryTradeUserLoginInfo->IPAddress).ToLocalChecked();
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRspQryTradeUserLoginInfo->FrontID);
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                v8::Local<v8::String> UserType = Nan::New<v8::String> ("UserType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginInfo->UserType, utf8string);
                v8::Local<v8::String> UserTypeValue = Nan::New<v8::String> (pRspQryTradeUserLoginInfo->UserType).ToLocalChecked();
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (UserType), Local<v8::Value>(UserTypeValue));

                v8::Local<v8::String> AccessType = Nan::New<v8::String> ("AccessType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginInfo->AccessType, utf8string);
                v8::Local<v8::String> AccessTypeValue = Nan::New<v8::String> (pRspQryTradeUserLoginInfo->AccessType).ToLocalChecked();
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (AccessType), Local<v8::Value>(AccessTypeValue));

                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginInfo->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryTradeUserLoginInfo->ActionDate).ToLocalChecked();
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginInfo->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryTradeUserLoginInfo->ActionTime).ToLocalChecked();
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ActionFlag = Nan::New<v8::String> ("ActionFlag").ToLocalChecked();
                v8::Local<v8::Integer> ActionFlagValue = Nan::New<v8::Integer> (pRspQryTradeUserLoginInfo->ActionFlag);
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionFlag), Local<v8::Value>(ActionFlagValue));

                v8::Local<v8::String> DataCenter = Nan::New<v8::String> ("DataCenter").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginInfo->DataCenter, utf8string);
                v8::Local<v8::String> DataCenterValue = Nan::New<v8::String> (pRspQryTradeUserLoginInfo->DataCenter).ToLocalChecked();
                pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (DataCenter), Local<v8::Value>(DataCenterValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTradeUserLoginInfo) { 
                params[0] = Local<v8::Value>(pRspQryTradeUserLoginInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTradeUserLoginInfo) { 
            delete[] pRspQryTradeUserLoginInfo;
            pRspQryTradeUserLoginInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTradeUserLoginInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTradeUserLoginInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnTradeUserLoginInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnTradeUserLoginInfoTopic_trans_callbackNumb: ", g_RtnTradeUserLoginInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnTradeUserLoginInfoTopic_mutex);

    int dataNumb = g_RtnTradeUserLoginInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnTradeUserLoginInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnTradeUserLoginInfoTopic_trans_dataNumb: ", g_RtnTradeUserLoginInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnTradeUserLoginInfoTopic_queue.empty()) {
        receivedData.push (g_RtnTradeUserLoginInfoTopic_queue.front());
        g_RtnTradeUserLoginInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnTradeUserLoginInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnTradeUserLoginInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTradeUserLoginInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnTradeUserLoginInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTradeUserLoginInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnTradeUserLoginInfoTopic").ToLocalChecked());

        CShfeFtdcRtnTradeUserLoginInfoField* pRtnTradeUserLoginInfo = (CShfeFtdcRtnTradeUserLoginInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnTradeUserLoginInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnTradeUserLoginInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeUserLoginInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnTradeUserLoginInfo->ObjectID).ToLocalChecked();
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeUserLoginInfo->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRtnTradeUserLoginInfo->UserID).ToLocalChecked();
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeUserLoginInfo->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnTradeUserLoginInfo->ParticipantID).ToLocalChecked();
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> ProtocolInfo = Nan::New<v8::String> ("ProtocolInfo").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeUserLoginInfo->ProtocolInfo, utf8string);
                v8::Local<v8::String> ProtocolInfoValue = Nan::New<v8::String> (pRtnTradeUserLoginInfo->ProtocolInfo).ToLocalChecked();
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ProtocolInfo), Local<v8::Value>(ProtocolInfoValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeUserLoginInfo->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRtnTradeUserLoginInfo->IPAddress).ToLocalChecked();
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRtnTradeUserLoginInfo->FrontID);
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                v8::Local<v8::String> UserType = Nan::New<v8::String> ("UserType").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeUserLoginInfo->UserType, utf8string);
                v8::Local<v8::String> UserTypeValue = Nan::New<v8::String> (pRtnTradeUserLoginInfo->UserType).ToLocalChecked();
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (UserType), Local<v8::Value>(UserTypeValue));

                v8::Local<v8::String> AccessType = Nan::New<v8::String> ("AccessType").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeUserLoginInfo->AccessType, utf8string);
                v8::Local<v8::String> AccessTypeValue = Nan::New<v8::String> (pRtnTradeUserLoginInfo->AccessType).ToLocalChecked();
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (AccessType), Local<v8::Value>(AccessTypeValue));

                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeUserLoginInfo->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnTradeUserLoginInfo->ActionDate).ToLocalChecked();
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeUserLoginInfo->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnTradeUserLoginInfo->ActionTime).ToLocalChecked();
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> ActionFlag = Nan::New<v8::String> ("ActionFlag").ToLocalChecked();
                v8::Local<v8::Integer> ActionFlagValue = Nan::New<v8::Integer> (pRtnTradeUserLoginInfo->ActionFlag);
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionFlag), Local<v8::Value>(ActionFlagValue));

                v8::Local<v8::String> DataCenter = Nan::New<v8::String> ("DataCenter").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeUserLoginInfo->DataCenter, utf8string);
                v8::Local<v8::String> DataCenterValue = Nan::New<v8::String> (pRtnTradeUserLoginInfo->DataCenter).ToLocalChecked();
                pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (DataCenter), Local<v8::Value>(DataCenterValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnTradeUserLoginInfo) { 
                params[0] = Local<v8::Value>(pRtnTradeUserLoginInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnTradeUserLoginInfo) { 
            delete[] pRtnTradeUserLoginInfo;
            pRtnTradeUserLoginInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnTradeUserLoginInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPartTradeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryPartTradeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryPartTradeTopic_trans_callbackNumb: ", g_RspQryPartTradeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryPartTradeTopic_mutex);

    int dataNumb = g_RspQryPartTradeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryPartTradeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryPartTradeTopic_trans_dataNumb: ", g_RspQryPartTradeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryPartTradeTopic_queue.empty()) {
        receivedData.push (g_RspQryPartTradeTopic_queue.front());
        g_RspQryPartTradeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryPartTradeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryPartTradeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPartTradeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryPartTradeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPartTradeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryPartTradeTopic").ToLocalChecked());

        CShfeFtdcRspQryPartTradeField* pRspQryPartTrade = (CShfeFtdcRspQryPartTradeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryPartTradeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryPartTrade) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartTrade->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRspQryPartTrade->ActionDate).ToLocalChecked();
                pRspQryPartTradeJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartTrade->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRspQryPartTrade->ActionTime).ToLocalChecked();
                pRspQryPartTradeJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartTrade->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryPartTrade->InstrumentID).ToLocalChecked();
                pRspQryPartTradeJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPartTrade->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryPartTrade->ParticipantID).ToLocalChecked();
                pRspQryPartTradeJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> TotalPositiveOrder = Nan::New<v8::String> ("TotalPositiveOrder").ToLocalChecked();
                v8::Local<v8::Integer> TotalPositiveOrderValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalPositiveOrder);
                pRspQryPartTradeJS->Set(Local<v8::Value> (TotalPositiveOrder), Local<v8::Value>(TotalPositiveOrderValue));

                v8::Local<v8::String> TotalNegativeOrder = Nan::New<v8::String> ("TotalNegativeOrder").ToLocalChecked();
                v8::Local<v8::Integer> TotalNegativeOrderValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalNegativeOrder);
                pRspQryPartTradeJS->Set(Local<v8::Value> (TotalNegativeOrder), Local<v8::Value>(TotalNegativeOrderValue));

                v8::Local<v8::String> TotalPositiveTrade = Nan::New<v8::String> ("TotalPositiveTrade").ToLocalChecked();
                v8::Local<v8::Integer> TotalPositiveTradeValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalPositiveTrade);
                pRspQryPartTradeJS->Set(Local<v8::Value> (TotalPositiveTrade), Local<v8::Value>(TotalPositiveTradeValue));

                v8::Local<v8::String> TotalNegativeTrade = Nan::New<v8::String> ("TotalNegativeTrade").ToLocalChecked();
                v8::Local<v8::Integer> TotalNegativeTradeValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalNegativeTrade);
                pRspQryPartTradeJS->Set(Local<v8::Value> (TotalNegativeTrade), Local<v8::Value>(TotalNegativeTradeValue));

                v8::Local<v8::String> TotalPositivePosi = Nan::New<v8::String> ("TotalPositivePosi").ToLocalChecked();
                v8::Local<v8::Integer> TotalPositivePosiValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalPositivePosi);
                pRspQryPartTradeJS->Set(Local<v8::Value> (TotalPositivePosi), Local<v8::Value>(TotalPositivePosiValue));

                v8::Local<v8::String> TotalNegativePosi = Nan::New<v8::String> ("TotalNegativePosi").ToLocalChecked();
                v8::Local<v8::Integer> TotalNegativePosiValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalNegativePosi);
                pRspQryPartTradeJS->Set(Local<v8::Value> (TotalNegativePosi), Local<v8::Value>(TotalNegativePosiValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryPartTrade->OperationType);
                pRspQryPartTradeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryPartTrade) { 
                params[0] = Local<v8::Value>(pRspQryPartTradeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryPartTrade) { 
            delete[] pRspQryPartTrade;
            pRspQryPartTrade = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryPartTradeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradepeakTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTradepeakTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTradepeakTopic_trans_callbackNumb: ", g_RspQryTradepeakTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTradepeakTopic_mutex);

    int dataNumb = g_RspQryTradepeakTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTradepeakTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTradepeakTopic_trans_dataNumb: ", g_RspQryTradepeakTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTradepeakTopic_queue.empty()) {
        receivedData.push (g_RspQryTradepeakTopic_queue.front());
        g_RspQryTradepeakTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTradepeakTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTradepeakTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradepeakTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTradepeakTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradepeakTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTradepeakTopic").ToLocalChecked());

        CShfeFtdcRspQryTradepeakField* pRspQryTradepeak = (CShfeFtdcRspQryTradepeakField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTradepeakJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTradepeak) { 
                string utf8string;
                v8::Local<v8::String> TradepeakFlag = Nan::New<v8::String> ("TradepeakFlag").ToLocalChecked();
                v8::Local<v8::Integer> TradepeakFlagValue = Nan::New<v8::Integer> (pRspQryTradepeak->TradepeakFlag);
                pRspQryTradepeakJS->Set(Local<v8::Value> (TradepeakFlag), Local<v8::Value>(TradepeakFlagValue));

                v8::Local<v8::String> PeakTime = Nan::New<v8::String> ("PeakTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradepeak->PeakTime, utf8string);
                v8::Local<v8::String> PeakTimeValue = Nan::New<v8::String> (pRspQryTradepeak->PeakTime).ToLocalChecked();
                pRspQryTradepeakJS->Set(Local<v8::Value> (PeakTime), Local<v8::Value>(PeakTimeValue));

                v8::Local<v8::String> InsertOrder = Nan::New<v8::String> ("InsertOrder").ToLocalChecked();
                v8::Local<v8::Integer> InsertOrderValue = Nan::New<v8::Integer> (pRspQryTradepeak->InsertOrder);
                pRspQryTradepeakJS->Set(Local<v8::Value> (InsertOrder), Local<v8::Value>(InsertOrderValue));

                v8::Local<v8::String> ActionOrder = Nan::New<v8::String> ("ActionOrder").ToLocalChecked();
                v8::Local<v8::Integer> ActionOrderValue = Nan::New<v8::Integer> (pRspQryTradepeak->ActionOrder);
                pRspQryTradepeakJS->Set(Local<v8::Value> (ActionOrder), Local<v8::Value>(ActionOrderValue));

                v8::Local<v8::String> InvalidOrder = Nan::New<v8::String> ("InvalidOrder").ToLocalChecked();
                v8::Local<v8::Integer> InvalidOrderValue = Nan::New<v8::Integer> (pRspQryTradepeak->InvalidOrder);
                pRspQryTradepeakJS->Set(Local<v8::Value> (InvalidOrder), Local<v8::Value>(InvalidOrderValue));

                v8::Local<v8::String> TotalBusiness = Nan::New<v8::String> ("TotalBusiness").ToLocalChecked();
                v8::Local<v8::Integer> TotalBusinessValue = Nan::New<v8::Integer> (pRspQryTradepeak->TotalBusiness);
                pRspQryTradepeakJS->Set(Local<v8::Value> (TotalBusiness), Local<v8::Value>(TotalBusinessValue));

                v8::Local<v8::String> TradeCount = Nan::New<v8::String> ("TradeCount").ToLocalChecked();
                v8::Local<v8::Integer> TradeCountValue = Nan::New<v8::Integer> (pRspQryTradepeak->TradeCount);
                pRspQryTradepeakJS->Set(Local<v8::Value> (TradeCount), Local<v8::Value>(TradeCountValue));

                v8::Local<v8::String> TotalCount = Nan::New<v8::String> ("TotalCount").ToLocalChecked();
                v8::Local<v8::Integer> TotalCountValue = Nan::New<v8::Integer> (pRspQryTradepeak->TotalCount);
                pRspQryTradepeakJS->Set(Local<v8::Value> (TotalCount), Local<v8::Value>(TotalCountValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTradepeak) { 
                params[0] = Local<v8::Value>(pRspQryTradepeakJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTradepeak) { 
            delete[] pRspQryTradepeak;
            pRspQryTradepeak = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTradepeakTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnUpdateSysConfigTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnUpdateSysConfigTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnUpdateSysConfigTopic_trans_callbackNumb: ", g_RtnUpdateSysConfigTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnUpdateSysConfigTopic_mutex);

    int dataNumb = g_RtnUpdateSysConfigTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnUpdateSysConfigTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnUpdateSysConfigTopic_trans_dataNumb: ", g_RtnUpdateSysConfigTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnUpdateSysConfigTopic_queue.empty()) {
        receivedData.push (g_RtnUpdateSysConfigTopic_queue.front());
        g_RtnUpdateSysConfigTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnUpdateSysConfigTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnUpdateSysConfigTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnUpdateSysConfigTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnUpdateSysConfigTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnUpdateSysConfigTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnUpdateSysConfigTopic").ToLocalChecked());

        CShfeFtdcRtnUpdateSysConfigField* pRtnUpdateSysConfig = (CShfeFtdcRtnUpdateSysConfigField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnUpdateSysConfigJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnUpdateSysConfig) { 
                string utf8string;
                v8::Local<v8::String> UpdateType = Nan::New<v8::String> ("UpdateType").ToLocalChecked();
                Gb2312ToUtf8(pRtnUpdateSysConfig->UpdateType, utf8string);
                v8::Local<v8::String> UpdateTypeValue = Nan::New<v8::String> (pRtnUpdateSysConfig->UpdateType).ToLocalChecked();
                pRtnUpdateSysConfigJS->Set(Local<v8::Value> (UpdateType), Local<v8::Value>(UpdateTypeValue));

                v8::Local<v8::String> OldValue = Nan::New<v8::String> ("OldValue").ToLocalChecked();
                Gb2312ToUtf8(pRtnUpdateSysConfig->OldValue, utf8string);
                v8::Local<v8::String> OldValueValue = Nan::New<v8::String> (pRtnUpdateSysConfig->OldValue).ToLocalChecked();
                pRtnUpdateSysConfigJS->Set(Local<v8::Value> (OldValue), Local<v8::Value>(OldValueValue));

                v8::Local<v8::String> NewValue = Nan::New<v8::String> ("NewValue").ToLocalChecked();
                Gb2312ToUtf8(pRtnUpdateSysConfig->NewValue, utf8string);
                v8::Local<v8::String> NewValueValue = Nan::New<v8::String> (pRtnUpdateSysConfig->NewValue).ToLocalChecked();
                pRtnUpdateSysConfigJS->Set(Local<v8::Value> (NewValue), Local<v8::Value>(NewValueValue));

                v8::Local<v8::String> Standby = Nan::New<v8::String> ("Standby").ToLocalChecked();
                Gb2312ToUtf8(pRtnUpdateSysConfig->Standby, utf8string);
                v8::Local<v8::String> StandbyValue = Nan::New<v8::String> (pRtnUpdateSysConfig->Standby).ToLocalChecked();
                pRtnUpdateSysConfigJS->Set(Local<v8::Value> (Standby), Local<v8::Value>(StandbyValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnUpdateSysConfig) { 
                params[0] = Local<v8::Value>(pRtnUpdateSysConfigJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnUpdateSysConfig) { 
            delete[] pRtnUpdateSysConfig;
            pRtnUpdateSysConfig = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnUpdateSysConfigTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSysUser (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnSysUser: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnSysUser_trans_callbackNumb: ", g_RtnSysUser_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnSysUser_mutex);

    int dataNumb = g_RtnSysUser_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnSysUser_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnSysUser_trans_dataNumb: ", g_RtnSysUser_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnSysUser_queue.empty()) {
        receivedData.push (g_RtnSysUser_queue.front());
        g_RtnSysUser_queue.pop();
    }
    uv_mutex_unlock (&g_RtnSysUser_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnSysUser paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSysUser: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnSysUserSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSysUser: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnSysUser").ToLocalChecked());

        CShfeFtdcRtnSysUserField* pRtnSysUser = (CShfeFtdcRtnSysUserField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnSysUserJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnSysUser) { 
                string utf8string;
                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysUser->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRtnSysUser->UserID).ToLocalChecked();
                pRtnSysUserJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysUser->UserName, utf8string);
                v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (pRtnSysUser->UserName).ToLocalChecked();
                pRtnSysUserJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                v8::Local<v8::String> UserInfo = Nan::New<v8::String> ("UserInfo").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysUser->UserInfo, utf8string);
                v8::Local<v8::String> UserInfoValue = Nan::New<v8::String> (pRtnSysUser->UserInfo).ToLocalChecked();
                pRtnSysUserJS->Set(Local<v8::Value> (UserInfo), Local<v8::Value>(UserInfoValue));

                v8::Local<v8::String> Password = Nan::New<v8::String> ("Password").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysUser->Password, utf8string);
                v8::Local<v8::String> PasswordValue = Nan::New<v8::String> (pRtnSysUser->Password).ToLocalChecked();
                pRtnSysUserJS->Set(Local<v8::Value> (Password), Local<v8::Value>(PasswordValue));

                v8::Local<v8::String> Privilege = Nan::New<v8::String> ("Privilege").ToLocalChecked();
                v8::Local<v8::Integer> PrivilegeValue = Nan::New<v8::Integer> (pRtnSysUser->Privilege);
                pRtnSysUserJS->Set(Local<v8::Value> (Privilege), Local<v8::Value>(PrivilegeValue));

                v8::Local<v8::String> EMail = Nan::New<v8::String> ("EMail").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysUser->EMail, utf8string);
                v8::Local<v8::String> EMailValue = Nan::New<v8::String> (pRtnSysUser->EMail).ToLocalChecked();
                pRtnSysUserJS->Set(Local<v8::Value> (EMail), Local<v8::Value>(EMailValue));

                v8::Local<v8::String> EMailFlag = Nan::New<v8::String> ("EMailFlag").ToLocalChecked();
                v8::Local<v8::Integer> EMailFlagValue = Nan::New<v8::Integer> (pRtnSysUser->EMailFlag);
                pRtnSysUserJS->Set(Local<v8::Value> (EMailFlag), Local<v8::Value>(EMailFlagValue));

                v8::Local<v8::String> HomePhone = Nan::New<v8::String> ("HomePhone").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysUser->HomePhone, utf8string);
                v8::Local<v8::String> HomePhoneValue = Nan::New<v8::String> (pRtnSysUser->HomePhone).ToLocalChecked();
                pRtnSysUserJS->Set(Local<v8::Value> (HomePhone), Local<v8::Value>(HomePhoneValue));

                v8::Local<v8::String> HomePhoneFlag = Nan::New<v8::String> ("HomePhoneFlag").ToLocalChecked();
                v8::Local<v8::Integer> HomePhoneFlagValue = Nan::New<v8::Integer> (pRtnSysUser->HomePhoneFlag);
                pRtnSysUserJS->Set(Local<v8::Value> (HomePhoneFlag), Local<v8::Value>(HomePhoneFlagValue));

                v8::Local<v8::String> MobilePhone = Nan::New<v8::String> ("MobilePhone").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysUser->MobilePhone, utf8string);
                v8::Local<v8::String> MobilePhoneValue = Nan::New<v8::String> (pRtnSysUser->MobilePhone).ToLocalChecked();
                pRtnSysUserJS->Set(Local<v8::Value> (MobilePhone), Local<v8::Value>(MobilePhoneValue));

                v8::Local<v8::String> MobilePhoneFlag = Nan::New<v8::String> ("MobilePhoneFlag").ToLocalChecked();
                v8::Local<v8::Integer> MobilePhoneFlagValue = Nan::New<v8::Integer> (pRtnSysUser->MobilePhoneFlag);
                pRtnSysUserJS->Set(Local<v8::Value> (MobilePhoneFlag), Local<v8::Value>(MobilePhoneFlagValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnSysUser) { 
                params[0] = Local<v8::Value>(pRtnSysUserJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnSysUser) { 
            delete[] pRtnSysUser;
            pRtnSysUser = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnSysUser: END! ******\n", g_RunningResult_File);
}

void OnRtnPriceLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnPriceLimitChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnPriceLimitChgTopic_trans_callbackNumb: ", g_RtnPriceLimitChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnPriceLimitChgTopic_mutex);

    int dataNumb = g_RtnPriceLimitChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnPriceLimitChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnPriceLimitChgTopic_trans_dataNumb: ", g_RtnPriceLimitChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnPriceLimitChgTopic_queue.empty()) {
        receivedData.push (g_RtnPriceLimitChgTopic_queue.front());
        g_RtnPriceLimitChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnPriceLimitChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnPriceLimitChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPriceLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnPriceLimitChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPriceLimitChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnPriceLimitChgTopic").ToLocalChecked());

        CShfeFtdcRtnPriceLimitChgField* pRtnPriceLimitChg = (CShfeFtdcRtnPriceLimitChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnPriceLimitChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnPriceLimitChg) { 
                string utf8string;
                v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnPriceLimitChg->ActionDate, utf8string);
                v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (pRtnPriceLimitChg->ActionDate).ToLocalChecked();
                pRtnPriceLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnPriceLimitChg->ActionTime, utf8string);
                v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (pRtnPriceLimitChg->ActionTime).ToLocalChecked();
                pRtnPriceLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnPriceLimitChg->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnPriceLimitChg->InstrumentID).ToLocalChecked();
                pRtnPriceLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnPriceLimitChg->ValueMode);
                pRtnPriceLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                v8::Local<v8::String> RoundingMode = Nan::New<v8::String> ("RoundingMode").ToLocalChecked();
                v8::Local<v8::Integer> RoundingModeValue = Nan::New<v8::Integer> (pRtnPriceLimitChg->RoundingMode);
                pRtnPriceLimitChgJS->Set(Local<v8::Value> (RoundingMode), Local<v8::Value>(RoundingModeValue));

                v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRtnPriceLimitChg->UpperLimitPrice);
                pRtnPriceLimitChgJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRtnPriceLimitChg->LowerLimitPrice);
                pRtnPriceLimitChgJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnPriceLimitChg->OperationType);
                pRtnPriceLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnPriceLimitChg) { 
                params[0] = Local<v8::Value>(pRtnPriceLimitChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnPriceLimitChg) { 
            delete[] pRtnPriceLimitChg;
            pRtnPriceLimitChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnPriceLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHistoryCpuInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryHistoryCpuInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryHistoryCpuInfoTopic_trans_callbackNumb: ", g_RspQryHistoryCpuInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryHistoryCpuInfoTopic_mutex);

    int dataNumb = g_RspQryHistoryCpuInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryHistoryCpuInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryHistoryCpuInfoTopic_trans_dataNumb: ", g_RspQryHistoryCpuInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryHistoryCpuInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryHistoryCpuInfoTopic_queue.front());
        g_RspQryHistoryCpuInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryHistoryCpuInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryHistoryCpuInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHistoryCpuInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryHistoryCpuInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHistoryCpuInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryHistoryCpuInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryHistoryCpuInfoField* pRspQryHistoryCpuInfo = (CShfeFtdcRspQryHistoryCpuInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryHistoryCpuInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryHistoryCpuInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryCpuInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryHistoryCpuInfo->HostName).ToLocalChecked();
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryCpuInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryHistoryCpuInfo->MonDate).ToLocalChecked();
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryCpuInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryHistoryCpuInfo->MonTime).ToLocalChecked();
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryCpuInfo->CPU, utf8string);
                v8::Local<v8::String> CPUValue = Nan::New<v8::String> (pRspQryHistoryCpuInfo->CPU).ToLocalChecked();
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                v8::Local<v8::String> LOAD = Nan::New<v8::String> ("LOAD").ToLocalChecked();
                v8::Local<v8::Number> LOADValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->LOAD);
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (LOAD), Local<v8::Value>(LOADValue));

                v8::Local<v8::String> USER = Nan::New<v8::String> ("USER").ToLocalChecked();
                v8::Local<v8::Number> USERValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->USER);
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (USER), Local<v8::Value>(USERValue));

                v8::Local<v8::String> NICE = Nan::New<v8::String> ("NICE").ToLocalChecked();
                v8::Local<v8::Number> NICEValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->NICE);
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (NICE), Local<v8::Value>(NICEValue));

                v8::Local<v8::String> SYS = Nan::New<v8::String> ("SYS").ToLocalChecked();
                v8::Local<v8::Number> SYSValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->SYS);
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (SYS), Local<v8::Value>(SYSValue));

                v8::Local<v8::String> IDLE = Nan::New<v8::String> ("IDLE").ToLocalChecked();
                v8::Local<v8::Number> IDLEValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->IDLE);
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (IDLE), Local<v8::Value>(IDLEValue));

                v8::Local<v8::String> BLOCK = Nan::New<v8::String> ("BLOCK").ToLocalChecked();
                v8::Local<v8::Number> BLOCKValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->BLOCK);
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (BLOCK), Local<v8::Value>(BLOCKValue));

                v8::Local<v8::String> SWAIT = Nan::New<v8::String> ("SWAIT").ToLocalChecked();
                v8::Local<v8::Number> SWAITValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->SWAIT);
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (SWAIT), Local<v8::Value>(SWAITValue));

                v8::Local<v8::String> INTR = Nan::New<v8::String> ("INTR").ToLocalChecked();
                v8::Local<v8::Number> INTRValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->INTR);
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (INTR), Local<v8::Value>(INTRValue));

                v8::Local<v8::String> SSYS = Nan::New<v8::String> ("SSYS").ToLocalChecked();
                v8::Local<v8::Number> SSYSValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->SSYS);
                pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (SSYS), Local<v8::Value>(SSYSValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryHistoryCpuInfo) { 
                params[0] = Local<v8::Value>(pRspQryHistoryCpuInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryHistoryCpuInfo) { 
            delete[] pRspQryHistoryCpuInfo;
            pRspQryHistoryCpuInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryHistoryCpuInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHistoryMemInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryHistoryMemInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryHistoryMemInfoTopic_trans_callbackNumb: ", g_RspQryHistoryMemInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryHistoryMemInfoTopic_mutex);

    int dataNumb = g_RspQryHistoryMemInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryHistoryMemInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryHistoryMemInfoTopic_trans_dataNumb: ", g_RspQryHistoryMemInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryHistoryMemInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryHistoryMemInfoTopic_queue.front());
        g_RspQryHistoryMemInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryHistoryMemInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryHistoryMemInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHistoryMemInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryHistoryMemInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHistoryMemInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryHistoryMemInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryHistoryMemInfoField* pRspQryHistoryMemInfo = (CShfeFtdcRspQryHistoryMemInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryHistoryMemInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryHistoryMemInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryMemInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryHistoryMemInfo->HostName).ToLocalChecked();
                pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryMemInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryHistoryMemInfo->MonDate).ToLocalChecked();
                pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryMemInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryHistoryMemInfo->MonTime).ToLocalChecked();
                pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> TOTALREAL = Nan::New<v8::String> ("TOTALREAL").ToLocalChecked();
                v8::Local<v8::Integer> TOTALREALValue = Nan::New<v8::Integer> (pRspQryHistoryMemInfo->TOTALREAL);
                pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (TOTALREAL), Local<v8::Value>(TOTALREALValue));

                v8::Local<v8::String> ACTIVEREAL = Nan::New<v8::String> ("ACTIVEREAL").ToLocalChecked();
                v8::Local<v8::Integer> ACTIVEREALValue = Nan::New<v8::Integer> (pRspQryHistoryMemInfo->ACTIVEREAL);
                pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (ACTIVEREAL), Local<v8::Value>(ACTIVEREALValue));

                v8::Local<v8::String> TOTALVIRTUAL = Nan::New<v8::String> ("TOTALVIRTUAL").ToLocalChecked();
                v8::Local<v8::Integer> TOTALVIRTUALValue = Nan::New<v8::Integer> (pRspQryHistoryMemInfo->TOTALVIRTUAL);
                pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (TOTALVIRTUAL), Local<v8::Value>(TOTALVIRTUALValue));

                v8::Local<v8::String> ACTIVEVIRTUAL = Nan::New<v8::String> ("ACTIVEVIRTUAL").ToLocalChecked();
                v8::Local<v8::Integer> ACTIVEVIRTUALValue = Nan::New<v8::Integer> (pRspQryHistoryMemInfo->ACTIVEVIRTUAL);
                pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (ACTIVEVIRTUAL), Local<v8::Value>(ACTIVEVIRTUALValue));

                v8::Local<v8::String> FREE = Nan::New<v8::String> ("FREE").ToLocalChecked();
                v8::Local<v8::Integer> FREEValue = Nan::New<v8::Integer> (pRspQryHistoryMemInfo->FREE);
                pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (FREE), Local<v8::Value>(FREEValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryHistoryMemInfo) { 
                params[0] = Local<v8::Value>(pRspQryHistoryMemInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryHistoryMemInfo) { 
            delete[] pRspQryHistoryMemInfo;
            pRspQryHistoryMemInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryHistoryMemInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHistoryNetworkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryHistoryNetworkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryHistoryNetworkInfoTopic_trans_callbackNumb: ", g_RspQryHistoryNetworkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryHistoryNetworkInfoTopic_mutex);

    int dataNumb = g_RspQryHistoryNetworkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryHistoryNetworkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryHistoryNetworkInfoTopic_trans_dataNumb: ", g_RspQryHistoryNetworkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryHistoryNetworkInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryHistoryNetworkInfoTopic_queue.front());
        g_RspQryHistoryNetworkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryHistoryNetworkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryHistoryNetworkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHistoryNetworkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryHistoryNetworkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHistoryNetworkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryHistoryNetworkInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryHistoryNetworkInfoField* pRspQryHistoryNetworkInfo = (CShfeFtdcRspQryHistoryNetworkInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryHistoryNetworkInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryHistoryNetworkInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryNetworkInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryHistoryNetworkInfo->HostName).ToLocalChecked();
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryNetworkInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryHistoryNetworkInfo->MonDate).ToLocalChecked();
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryNetworkInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryHistoryNetworkInfo->MonTime).ToLocalChecked();
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> LANNAME = Nan::New<v8::String> ("LANNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryNetworkInfo->LANNAME, utf8string);
                v8::Local<v8::String> LANNAMEValue = Nan::New<v8::String> (pRspQryHistoryNetworkInfo->LANNAME).ToLocalChecked();
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (LANNAME), Local<v8::Value>(LANNAMEValue));

                v8::Local<v8::String> LANSTATUS = Nan::New<v8::String> ("LANSTATUS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryNetworkInfo->LANSTATUS, utf8string);
                v8::Local<v8::String> LANSTATUSValue = Nan::New<v8::String> (pRspQryHistoryNetworkInfo->LANSTATUS).ToLocalChecked();
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (LANSTATUS), Local<v8::Value>(LANSTATUSValue));

                v8::Local<v8::String> IPADDRESS = Nan::New<v8::String> ("IPADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryNetworkInfo->IPADDRESS, utf8string);
                v8::Local<v8::String> IPADDRESSValue = Nan::New<v8::String> (pRspQryHistoryNetworkInfo->IPADDRESS).ToLocalChecked();
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (IPADDRESS), Local<v8::Value>(IPADDRESSValue));

                v8::Local<v8::String> RECVBYTES = Nan::New<v8::String> ("RECVBYTES").ToLocalChecked();
                v8::Local<v8::Number> RECVBYTESValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->RECVBYTES);
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (RECVBYTES), Local<v8::Value>(RECVBYTESValue));

                v8::Local<v8::String> RECVPACKETS = Nan::New<v8::String> ("RECVPACKETS").ToLocalChecked();
                v8::Local<v8::Number> RECVPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->RECVPACKETS);
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (RECVPACKETS), Local<v8::Value>(RECVPACKETSValue));

                v8::Local<v8::String> RECVERRORPACKETS = Nan::New<v8::String> ("RECVERRORPACKETS").ToLocalChecked();
                v8::Local<v8::Number> RECVERRORPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->RECVERRORPACKETS);
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (RECVERRORPACKETS), Local<v8::Value>(RECVERRORPACKETSValue));

                v8::Local<v8::String> RECVDROPPACKETS = Nan::New<v8::String> ("RECVDROPPACKETS").ToLocalChecked();
                v8::Local<v8::Number> RECVDROPPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->RECVDROPPACKETS);
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (RECVDROPPACKETS), Local<v8::Value>(RECVDROPPACKETSValue));

                v8::Local<v8::String> SENDBYTES = Nan::New<v8::String> ("SENDBYTES").ToLocalChecked();
                v8::Local<v8::Number> SENDBYTESValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->SENDBYTES);
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (SENDBYTES), Local<v8::Value>(SENDBYTESValue));

                v8::Local<v8::String> SENDPACKETS = Nan::New<v8::String> ("SENDPACKETS").ToLocalChecked();
                v8::Local<v8::Number> SENDPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->SENDPACKETS);
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (SENDPACKETS), Local<v8::Value>(SENDPACKETSValue));

                v8::Local<v8::String> SENDERRORPACKETS = Nan::New<v8::String> ("SENDERRORPACKETS").ToLocalChecked();
                v8::Local<v8::Number> SENDERRORPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->SENDERRORPACKETS);
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (SENDERRORPACKETS), Local<v8::Value>(SENDERRORPACKETSValue));

                v8::Local<v8::String> SENDDROPPACKETS = Nan::New<v8::String> ("SENDDROPPACKETS").ToLocalChecked();
                v8::Local<v8::Number> SENDDROPPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->SENDDROPPACKETS);
                pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (SENDDROPPACKETS), Local<v8::Value>(SENDDROPPACKETSValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryHistoryNetworkInfo) { 
                params[0] = Local<v8::Value>(pRspQryHistoryNetworkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryHistoryNetworkInfo) { 
            delete[] pRspQryHistoryNetworkInfo;
            pRspQryHistoryNetworkInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryHistoryNetworkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMonitorOnlineUser (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryMonitorOnlineUser: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryMonitorOnlineUser_trans_callbackNumb: ", g_RspQryMonitorOnlineUser_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryMonitorOnlineUser_mutex);

    int dataNumb = g_RspQryMonitorOnlineUser_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryMonitorOnlineUser_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryMonitorOnlineUser_trans_dataNumb: ", g_RspQryMonitorOnlineUser_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryMonitorOnlineUser_queue.empty()) {
        receivedData.push (g_RspQryMonitorOnlineUser_queue.front());
        g_RspQryMonitorOnlineUser_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryMonitorOnlineUser_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryMonitorOnlineUser paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMonitorOnlineUser: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryMonitorOnlineUserSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMonitorOnlineUser: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryMonitorOnlineUser").ToLocalChecked());

        CShfeFtdcRspQryMonitorOnlineUserField* pRspQryMonitorOnlineUser = (CShfeFtdcRspQryMonitorOnlineUserField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryMonitorOnlineUserJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryMonitorOnlineUser) { 
                string utf8string;
                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMonitorOnlineUser->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQryMonitorOnlineUser->UserID).ToLocalChecked();
                pRspQryMonitorOnlineUserJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMonitorOnlineUser->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRspQryMonitorOnlineUser->IPAddress).ToLocalChecked();
                pRspQryMonitorOnlineUserJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryMonitorOnlineUser) { 
                params[0] = Local<v8::Value>(pRspQryMonitorOnlineUserJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryMonitorOnlineUser) { 
            delete[] pRspQryMonitorOnlineUser;
            pRspQryMonitorOnlineUser = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryMonitorOnlineUser: END! ******\n", g_RunningResult_File);
}

void OnRspQryFrontStat (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryFrontStat: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryFrontStat_trans_callbackNumb: ", g_RspQryFrontStat_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryFrontStat_mutex);

    int dataNumb = g_RspQryFrontStat_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryFrontStat_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryFrontStat_trans_dataNumb: ", g_RspQryFrontStat_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryFrontStat_queue.empty()) {
        receivedData.push (g_RspQryFrontStat_queue.front());
        g_RspQryFrontStat_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryFrontStat_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryFrontStat paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFrontStat: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryFrontStatSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFrontStat: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryFrontStat").ToLocalChecked());

        CShfeFtdcRspQryFrontStatField* pRspQryFrontStat = (CShfeFtdcRspQryFrontStatField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryFrontStatJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryFrontStat) { 
                string utf8string;
                v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRspQryFrontStat->FrontID);
                pRspQryFrontStatJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                v8::Local<v8::String> PositiveOrder = Nan::New<v8::String> ("PositiveOrder").ToLocalChecked();
                v8::Local<v8::Integer> PositiveOrderValue = Nan::New<v8::Integer> (pRspQryFrontStat->PositiveOrder);
                pRspQryFrontStatJS->Set(Local<v8::Value> (PositiveOrder), Local<v8::Value>(PositiveOrderValue));

                v8::Local<v8::String> NegativeOrder = Nan::New<v8::String> ("NegativeOrder").ToLocalChecked();
                v8::Local<v8::Integer> NegativeOrderValue = Nan::New<v8::Integer> (pRspQryFrontStat->NegativeOrder);
                pRspQryFrontStatJS->Set(Local<v8::Value> (NegativeOrder), Local<v8::Value>(NegativeOrderValue));

                v8::Local<v8::String> TotalPositiveOrder = Nan::New<v8::String> ("TotalPositiveOrder").ToLocalChecked();
                v8::Local<v8::Integer> TotalPositiveOrderValue = Nan::New<v8::Integer> (pRspQryFrontStat->TotalPositiveOrder);
                pRspQryFrontStatJS->Set(Local<v8::Value> (TotalPositiveOrder), Local<v8::Value>(TotalPositiveOrderValue));

                v8::Local<v8::String> TotalNegativeOrder = Nan::New<v8::String> ("TotalNegativeOrder").ToLocalChecked();
                v8::Local<v8::Integer> TotalNegativeOrderValue = Nan::New<v8::Integer> (pRspQryFrontStat->TotalNegativeOrder);
                pRspQryFrontStatJS->Set(Local<v8::Value> (TotalNegativeOrder), Local<v8::Value>(TotalNegativeOrderValue));

                v8::Local<v8::String> OrderAction = Nan::New<v8::String> ("OrderAction").ToLocalChecked();
                v8::Local<v8::Integer> OrderActionValue = Nan::New<v8::Integer> (pRspQryFrontStat->OrderAction);
                pRspQryFrontStatJS->Set(Local<v8::Value> (OrderAction), Local<v8::Value>(OrderActionValue));

                v8::Local<v8::String> TotalOrderAction = Nan::New<v8::String> ("TotalOrderAction").ToLocalChecked();
                v8::Local<v8::Integer> TotalOrderActionValue = Nan::New<v8::Integer> (pRspQryFrontStat->TotalOrderAction);
                pRspQryFrontStatJS->Set(Local<v8::Value> (TotalOrderAction), Local<v8::Value>(TotalOrderActionValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryFrontStat) { 
                params[0] = Local<v8::Value>(pRspQryFrontStatJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryFrontStat) { 
            delete[] pRspQryFrontStat;
            pRspQryFrontStat = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryFrontStat: END! ******\n", g_RunningResult_File);
}

void OnRtnSysTimeSyncTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnSysTimeSyncTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnSysTimeSyncTopic_trans_callbackNumb: ", g_RtnSysTimeSyncTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnSysTimeSyncTopic_mutex);

    int dataNumb = g_RtnSysTimeSyncTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnSysTimeSyncTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnSysTimeSyncTopic_trans_dataNumb: ", g_RtnSysTimeSyncTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnSysTimeSyncTopic_queue.empty()) {
        receivedData.push (g_RtnSysTimeSyncTopic_queue.front());
        g_RtnSysTimeSyncTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnSysTimeSyncTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnSysTimeSyncTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSysTimeSyncTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnSysTimeSyncTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSysTimeSyncTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnSysTimeSyncTopic").ToLocalChecked());

        CShfeFtdcRtnSysTimeSyncField* pRtnSysTimeSync = (CShfeFtdcRtnSysTimeSyncField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnSysTimeSyncJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnSysTimeSync) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysTimeSync->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnSysTimeSync->MonDate).ToLocalChecked();
                pRtnSysTimeSyncJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysTimeSync->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnSysTimeSync->MonTime).ToLocalChecked();
                pRtnSysTimeSyncJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnSysTimeSync) { 
                params[0] = Local<v8::Value>(pRtnSysTimeSyncJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnSysTimeSync) { 
            delete[] pRtnSysTimeSync;
            pRtnSysTimeSync = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnSysTimeSyncTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnDataCenterChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnDataCenterChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnDataCenterChgTopic_trans_callbackNumb: ", g_RtnDataCenterChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnDataCenterChgTopic_mutex);

    int dataNumb = g_RtnDataCenterChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnDataCenterChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnDataCenterChgTopic_trans_dataNumb: ", g_RtnDataCenterChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnDataCenterChgTopic_queue.empty()) {
        receivedData.push (g_RtnDataCenterChgTopic_queue.front());
        g_RtnDataCenterChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnDataCenterChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnDataCenterChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnDataCenterChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnDataCenterChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnDataCenterChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnDataCenterChgTopic").ToLocalChecked());

        CShfeFtdcRtnDataCenterChgField* pRtnDataCenterChg = (CShfeFtdcRtnDataCenterChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnDataCenterChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnDataCenterChg) { 
                string utf8string;
                v8::Local<v8::String> DataCenterID = Nan::New<v8::String> ("DataCenterID").ToLocalChecked();
                Gb2312ToUtf8(pRtnDataCenterChg->DataCenterID, utf8string);
                v8::Local<v8::String> DataCenterIDValue = Nan::New<v8::String> (pRtnDataCenterChg->DataCenterID).ToLocalChecked();
                pRtnDataCenterChgJS->Set(Local<v8::Value> (DataCenterID), Local<v8::Value>(DataCenterIDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnDataCenterChg) { 
                params[0] = Local<v8::Value>(pRtnDataCenterChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnDataCenterChg) { 
            delete[] pRtnDataCenterChg;
            pRtnDataCenterChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnDataCenterChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHistoryTradePeakTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryHistoryTradePeakTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryHistoryTradePeakTopic_trans_callbackNumb: ", g_RspQryHistoryTradePeakTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryHistoryTradePeakTopic_mutex);

    int dataNumb = g_RspQryHistoryTradePeakTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryHistoryTradePeakTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryHistoryTradePeakTopic_trans_dataNumb: ", g_RspQryHistoryTradePeakTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryHistoryTradePeakTopic_queue.empty()) {
        receivedData.push (g_RspQryHistoryTradePeakTopic_queue.front());
        g_RspQryHistoryTradePeakTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryHistoryTradePeakTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryHistoryTradePeakTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHistoryTradePeakTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryHistoryTradePeakTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryHistoryTradePeakTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryHistoryTradePeakTopic").ToLocalChecked());

        CShfeFtdcRspQryHistoryTradePeakField* pRspQryHistoryTradePeak = (CShfeFtdcRspQryHistoryTradePeakField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryHistoryTradePeakJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryHistoryTradePeak) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryTradePeak->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryHistoryTradePeak->ObjectID).ToLocalChecked();
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryTradePeak->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryHistoryTradePeak->MonDate).ToLocalChecked();
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryTradePeak->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryHistoryTradePeak->MonTime).ToLocalChecked();
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryTradePeak->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRspQryHistoryTradePeak->AttrType).ToLocalChecked();
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> AttrValue = Nan::New<v8::String> ("AttrValue").ToLocalChecked();
                v8::Local<v8::Number> AttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->AttrValue);
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (AttrValue), Local<v8::Value>(AttrValueValue));

                v8::Local<v8::String> RltAttrType = Nan::New<v8::String> ("RltAttrType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryTradePeak->RltAttrType, utf8string);
                v8::Local<v8::String> RltAttrTypeValue = Nan::New<v8::String> (pRspQryHistoryTradePeak->RltAttrType).ToLocalChecked();
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (RltAttrType), Local<v8::Value>(RltAttrTypeValue));

                v8::Local<v8::String> RltAttrValue = Nan::New<v8::String> ("RltAttrValue").ToLocalChecked();
                v8::Local<v8::Number> RltAttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->RltAttrValue);
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (RltAttrValue), Local<v8::Value>(RltAttrValueValue));

                v8::Local<v8::String> MaxMonDate = Nan::New<v8::String> ("MaxMonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryTradePeak->MaxMonDate, utf8string);
                v8::Local<v8::String> MaxMonDateValue = Nan::New<v8::String> (pRspQryHistoryTradePeak->MaxMonDate).ToLocalChecked();
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MaxMonDate), Local<v8::Value>(MaxMonDateValue));

                v8::Local<v8::String> MaxMonTime = Nan::New<v8::String> ("MaxMonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryTradePeak->MaxMonTime, utf8string);
                v8::Local<v8::String> MaxMonTimeValue = Nan::New<v8::String> (pRspQryHistoryTradePeak->MaxMonTime).ToLocalChecked();
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MaxMonTime), Local<v8::Value>(MaxMonTimeValue));

                v8::Local<v8::String> MaxAttrValue = Nan::New<v8::String> ("MaxAttrValue").ToLocalChecked();
                v8::Local<v8::Number> MaxAttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->MaxAttrValue);
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MaxAttrValue), Local<v8::Value>(MaxAttrValueValue));

                v8::Local<v8::String> MaxRltAttrValue = Nan::New<v8::String> ("MaxRltAttrValue").ToLocalChecked();
                v8::Local<v8::Number> MaxRltAttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->MaxRltAttrValue);
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MaxRltAttrValue), Local<v8::Value>(MaxRltAttrValueValue));

                v8::Local<v8::String> OldMonDate = Nan::New<v8::String> ("OldMonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryTradePeak->OldMonDate, utf8string);
                v8::Local<v8::String> OldMonDateValue = Nan::New<v8::String> (pRspQryHistoryTradePeak->OldMonDate).ToLocalChecked();
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (OldMonDate), Local<v8::Value>(OldMonDateValue));

                v8::Local<v8::String> OldMonTime = Nan::New<v8::String> ("OldMonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryHistoryTradePeak->OldMonTime, utf8string);
                v8::Local<v8::String> OldMonTimeValue = Nan::New<v8::String> (pRspQryHistoryTradePeak->OldMonTime).ToLocalChecked();
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (OldMonTime), Local<v8::Value>(OldMonTimeValue));

                v8::Local<v8::String> OldAttrValue = Nan::New<v8::String> ("OldAttrValue").ToLocalChecked();
                v8::Local<v8::Number> OldAttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->OldAttrValue);
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (OldAttrValue), Local<v8::Value>(OldAttrValueValue));

                v8::Local<v8::String> OldRltAttrValue = Nan::New<v8::String> ("OldRltAttrValue").ToLocalChecked();
                v8::Local<v8::Number> OldRltAttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->OldRltAttrValue);
                pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (OldRltAttrValue), Local<v8::Value>(OldRltAttrValueValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryHistoryTradePeak) { 
                params[0] = Local<v8::Value>(pRspQryHistoryTradePeakJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryHistoryTradePeak) { 
            delete[] pRspQryHistoryTradePeak;
            pRspQryHistoryTradePeak = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryHistoryTradePeakTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnHistoryTradePeakTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnHistoryTradePeakTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnHistoryTradePeakTopic_trans_callbackNumb: ", g_RtnHistoryTradePeakTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnHistoryTradePeakTopic_mutex);

    int dataNumb = g_RtnHistoryTradePeakTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnHistoryTradePeakTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnHistoryTradePeakTopic_trans_dataNumb: ", g_RtnHistoryTradePeakTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnHistoryTradePeakTopic_queue.empty()) {
        receivedData.push (g_RtnHistoryTradePeakTopic_queue.front());
        g_RtnHistoryTradePeakTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnHistoryTradePeakTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnHistoryTradePeakTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnHistoryTradePeakTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnHistoryTradePeakTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnHistoryTradePeakTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnHistoryTradePeakTopic").ToLocalChecked());

        CShfeFtdcRtnHistoryTradePeakField* pRtnHistoryTradePeak = (CShfeFtdcRtnHistoryTradePeakField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnHistoryTradePeakJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnHistoryTradePeak) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryTradePeak->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnHistoryTradePeak->ObjectID).ToLocalChecked();
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryTradePeak->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnHistoryTradePeak->MonDate).ToLocalChecked();
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryTradePeak->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnHistoryTradePeak->MonTime).ToLocalChecked();
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryTradePeak->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRtnHistoryTradePeak->AttrType).ToLocalChecked();
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> AttrValue = Nan::New<v8::String> ("AttrValue").ToLocalChecked();
                v8::Local<v8::Number> AttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->AttrValue);
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (AttrValue), Local<v8::Value>(AttrValueValue));

                v8::Local<v8::String> RltAttrType = Nan::New<v8::String> ("RltAttrType").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryTradePeak->RltAttrType, utf8string);
                v8::Local<v8::String> RltAttrTypeValue = Nan::New<v8::String> (pRtnHistoryTradePeak->RltAttrType).ToLocalChecked();
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (RltAttrType), Local<v8::Value>(RltAttrTypeValue));

                v8::Local<v8::String> RltAttrValue = Nan::New<v8::String> ("RltAttrValue").ToLocalChecked();
                v8::Local<v8::Number> RltAttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->RltAttrValue);
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (RltAttrValue), Local<v8::Value>(RltAttrValueValue));

                v8::Local<v8::String> MaxMonDate = Nan::New<v8::String> ("MaxMonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryTradePeak->MaxMonDate, utf8string);
                v8::Local<v8::String> MaxMonDateValue = Nan::New<v8::String> (pRtnHistoryTradePeak->MaxMonDate).ToLocalChecked();
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MaxMonDate), Local<v8::Value>(MaxMonDateValue));

                v8::Local<v8::String> MaxMonTime = Nan::New<v8::String> ("MaxMonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryTradePeak->MaxMonTime, utf8string);
                v8::Local<v8::String> MaxMonTimeValue = Nan::New<v8::String> (pRtnHistoryTradePeak->MaxMonTime).ToLocalChecked();
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MaxMonTime), Local<v8::Value>(MaxMonTimeValue));

                v8::Local<v8::String> MaxAttrValue = Nan::New<v8::String> ("MaxAttrValue").ToLocalChecked();
                v8::Local<v8::Number> MaxAttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->MaxAttrValue);
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MaxAttrValue), Local<v8::Value>(MaxAttrValueValue));

                v8::Local<v8::String> MaxRltAttrValue = Nan::New<v8::String> ("MaxRltAttrValue").ToLocalChecked();
                v8::Local<v8::Number> MaxRltAttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->MaxRltAttrValue);
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MaxRltAttrValue), Local<v8::Value>(MaxRltAttrValueValue));

                v8::Local<v8::String> OldMonDate = Nan::New<v8::String> ("OldMonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryTradePeak->OldMonDate, utf8string);
                v8::Local<v8::String> OldMonDateValue = Nan::New<v8::String> (pRtnHistoryTradePeak->OldMonDate).ToLocalChecked();
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (OldMonDate), Local<v8::Value>(OldMonDateValue));

                v8::Local<v8::String> OldMonTime = Nan::New<v8::String> ("OldMonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnHistoryTradePeak->OldMonTime, utf8string);
                v8::Local<v8::String> OldMonTimeValue = Nan::New<v8::String> (pRtnHistoryTradePeak->OldMonTime).ToLocalChecked();
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (OldMonTime), Local<v8::Value>(OldMonTimeValue));

                v8::Local<v8::String> OldAttrValue = Nan::New<v8::String> ("OldAttrValue").ToLocalChecked();
                v8::Local<v8::Number> OldAttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->OldAttrValue);
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (OldAttrValue), Local<v8::Value>(OldAttrValueValue));

                v8::Local<v8::String> OldRltAttrValue = Nan::New<v8::String> ("OldRltAttrValue").ToLocalChecked();
                v8::Local<v8::Number> OldRltAttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->OldRltAttrValue);
                pRtnHistoryTradePeakJS->Set(Local<v8::Value> (OldRltAttrValue), Local<v8::Value>(OldRltAttrValueValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnHistoryTradePeak) { 
                params[0] = Local<v8::Value>(pRtnHistoryTradePeakJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnHistoryTradePeak) { 
            delete[] pRtnHistoryTradePeak;
            pRtnHistoryTradePeak = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnHistoryTradePeakTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySyslogEventTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySyslogEventTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySyslogEventTopic_trans_callbackNumb: ", g_RspQrySyslogEventTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySyslogEventTopic_mutex);

    int dataNumb = g_RspQrySyslogEventTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySyslogEventTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySyslogEventTopic_trans_dataNumb: ", g_RspQrySyslogEventTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySyslogEventTopic_queue.empty()) {
        receivedData.push (g_RspQrySyslogEventTopic_queue.front());
        g_RspQrySyslogEventTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySyslogEventTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySyslogEventTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySyslogEventTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySyslogEventTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySyslogEventTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySyslogEventTopic").ToLocalChecked());

        CShfeFtdcRspQrySyslogEventField* pRspQrySyslogEvent = (CShfeFtdcRspQrySyslogEventField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySyslogEventJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySyslogEvent) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQrySyslogEvent->MonDate).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQrySyslogEvent->MonTime).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> OccurDate = Nan::New<v8::String> ("OccurDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->OccurDate, utf8string);
                v8::Local<v8::String> OccurDateValue = Nan::New<v8::String> (pRspQrySyslogEvent->OccurDate).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (OccurDate), Local<v8::Value>(OccurDateValue));

                v8::Local<v8::String> OccurTime = Nan::New<v8::String> ("OccurTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->OccurTime, utf8string);
                v8::Local<v8::String> OccurTimeValue = Nan::New<v8::String> (pRspQrySyslogEvent->OccurTime).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (OccurTime), Local<v8::Value>(OccurTimeValue));

                v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRspQrySyslogEvent->EvendID);
                pRspQrySyslogEventJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQrySyslogEvent->ObjectID).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRspQrySyslogEvent->IPAddress).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> EventName = Nan::New<v8::String> ("EventName").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->EventName, utf8string);
                v8::Local<v8::String> EventNameValue = Nan::New<v8::String> (pRspQrySyslogEvent->EventName).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (EventName), Local<v8::Value>(EventNameValue));

                v8::Local<v8::String> EventNum = Nan::New<v8::String> ("EventNum").ToLocalChecked();
                v8::Local<v8::Integer> EventNumValue = Nan::New<v8::Integer> (pRspQrySyslogEvent->EventNum);
                pRspQrySyslogEventJS->Set(Local<v8::Value> (EventNum), Local<v8::Value>(EventNumValue));

                v8::Local<v8::String> EventType = Nan::New<v8::String> ("EventType").ToLocalChecked();
                v8::Local<v8::Integer> EventTypeValue = Nan::New<v8::Integer> (pRspQrySyslogEvent->EventType);
                pRspQrySyslogEventJS->Set(Local<v8::Value> (EventType), Local<v8::Value>(EventTypeValue));

                v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->EventDes, utf8string);
                v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (pRspQrySyslogEvent->EventDes).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

                v8::Local<v8::String> ProcessFlag = Nan::New<v8::String> ("ProcessFlag").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->ProcessFlag, utf8string);
                v8::Local<v8::String> ProcessFlagValue = Nan::New<v8::String> (pRspQrySyslogEvent->ProcessFlag).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (ProcessFlag), Local<v8::Value>(ProcessFlagValue));

                v8::Local<v8::String> WarningLevel = Nan::New<v8::String> ("WarningLevel").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->WarningLevel, utf8string);
                v8::Local<v8::String> WarningLevelValue = Nan::New<v8::String> (pRspQrySyslogEvent->WarningLevel).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (WarningLevel), Local<v8::Value>(WarningLevelValue));

                v8::Local<v8::String> EventDealDes = Nan::New<v8::String> ("EventDealDes").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->EventDealDes, utf8string);
                v8::Local<v8::String> EventDealDesValue = Nan::New<v8::String> (pRspQrySyslogEvent->EventDealDes).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (EventDealDes), Local<v8::Value>(EventDealDesValue));

                v8::Local<v8::String> FullEventName = Nan::New<v8::String> ("FullEventName").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySyslogEvent->FullEventName, utf8string);
                v8::Local<v8::String> FullEventNameValue = Nan::New<v8::String> (pRspQrySyslogEvent->FullEventName).ToLocalChecked();
                pRspQrySyslogEventJS->Set(Local<v8::Value> (FullEventName), Local<v8::Value>(FullEventNameValue));

                v8::Local<v8::String> EventCount = Nan::New<v8::String> ("EventCount").ToLocalChecked();
                v8::Local<v8::Integer> EventCountValue = Nan::New<v8::Integer> (pRspQrySyslogEvent->EventCount);
                pRspQrySyslogEventJS->Set(Local<v8::Value> (EventCount), Local<v8::Value>(EventCountValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySyslogEvent) { 
                params[0] = Local<v8::Value>(pRspQrySyslogEventJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySyslogEvent) { 
            delete[] pRspQrySyslogEvent;
            pRspQrySyslogEvent = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySyslogEventTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSyslogEventTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnSyslogEventTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnSyslogEventTopic_trans_callbackNumb: ", g_RtnSyslogEventTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnSyslogEventTopic_mutex);

    int dataNumb = g_RtnSyslogEventTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnSyslogEventTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnSyslogEventTopic_trans_dataNumb: ", g_RtnSyslogEventTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnSyslogEventTopic_queue.empty()) {
        receivedData.push (g_RtnSyslogEventTopic_queue.front());
        g_RtnSyslogEventTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnSyslogEventTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnSyslogEventTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSyslogEventTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnSyslogEventTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSyslogEventTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnSyslogEventTopic").ToLocalChecked());

        CShfeFtdcRtnSyslogEventField* pRtnSyslogEvent = (CShfeFtdcRtnSyslogEventField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnSyslogEventJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnSyslogEvent) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnSyslogEvent->MonDate).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnSyslogEvent->MonTime).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> OccurDate = Nan::New<v8::String> ("OccurDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->OccurDate, utf8string);
                v8::Local<v8::String> OccurDateValue = Nan::New<v8::String> (pRtnSyslogEvent->OccurDate).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (OccurDate), Local<v8::Value>(OccurDateValue));

                v8::Local<v8::String> OccurTime = Nan::New<v8::String> ("OccurTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->OccurTime, utf8string);
                v8::Local<v8::String> OccurTimeValue = Nan::New<v8::String> (pRtnSyslogEvent->OccurTime).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (OccurTime), Local<v8::Value>(OccurTimeValue));

                v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRtnSyslogEvent->EvendID);
                pRtnSyslogEventJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnSyslogEvent->ObjectID).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRtnSyslogEvent->IPAddress).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> EventName = Nan::New<v8::String> ("EventName").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->EventName, utf8string);
                v8::Local<v8::String> EventNameValue = Nan::New<v8::String> (pRtnSyslogEvent->EventName).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (EventName), Local<v8::Value>(EventNameValue));

                v8::Local<v8::String> EventNum = Nan::New<v8::String> ("EventNum").ToLocalChecked();
                v8::Local<v8::Integer> EventNumValue = Nan::New<v8::Integer> (pRtnSyslogEvent->EventNum);
                pRtnSyslogEventJS->Set(Local<v8::Value> (EventNum), Local<v8::Value>(EventNumValue));

                v8::Local<v8::String> EventType = Nan::New<v8::String> ("EventType").ToLocalChecked();
                v8::Local<v8::Integer> EventTypeValue = Nan::New<v8::Integer> (pRtnSyslogEvent->EventType);
                pRtnSyslogEventJS->Set(Local<v8::Value> (EventType), Local<v8::Value>(EventTypeValue));

                v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->EventDes, utf8string);
                v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (pRtnSyslogEvent->EventDes).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

                v8::Local<v8::String> ProcessFlag = Nan::New<v8::String> ("ProcessFlag").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->ProcessFlag, utf8string);
                v8::Local<v8::String> ProcessFlagValue = Nan::New<v8::String> (pRtnSyslogEvent->ProcessFlag).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (ProcessFlag), Local<v8::Value>(ProcessFlagValue));

                v8::Local<v8::String> WarningLevel = Nan::New<v8::String> ("WarningLevel").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->WarningLevel, utf8string);
                v8::Local<v8::String> WarningLevelValue = Nan::New<v8::String> (pRtnSyslogEvent->WarningLevel).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (WarningLevel), Local<v8::Value>(WarningLevelValue));

                v8::Local<v8::String> EventDealDes = Nan::New<v8::String> ("EventDealDes").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->EventDealDes, utf8string);
                v8::Local<v8::String> EventDealDesValue = Nan::New<v8::String> (pRtnSyslogEvent->EventDealDes).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (EventDealDes), Local<v8::Value>(EventDealDesValue));

                v8::Local<v8::String> FullEventName = Nan::New<v8::String> ("FullEventName").ToLocalChecked();
                Gb2312ToUtf8(pRtnSyslogEvent->FullEventName, utf8string);
                v8::Local<v8::String> FullEventNameValue = Nan::New<v8::String> (pRtnSyslogEvent->FullEventName).ToLocalChecked();
                pRtnSyslogEventJS->Set(Local<v8::Value> (FullEventName), Local<v8::Value>(FullEventNameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnSyslogEvent) { 
                params[0] = Local<v8::Value>(pRtnSyslogEventJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnSyslogEvent) { 
            delete[] pRtnSyslogEvent;
            pRtnSyslogEvent = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnSyslogEventTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeDayChangeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTradeDayChangeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTradeDayChangeTopic_trans_callbackNumb: ", g_RspQryTradeDayChangeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTradeDayChangeTopic_mutex);

    int dataNumb = g_RspQryTradeDayChangeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTradeDayChangeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTradeDayChangeTopic_trans_dataNumb: ", g_RspQryTradeDayChangeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTradeDayChangeTopic_queue.empty()) {
        receivedData.push (g_RspQryTradeDayChangeTopic_queue.front());
        g_RspQryTradeDayChangeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTradeDayChangeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTradeDayChangeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeDayChangeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTradeDayChangeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeDayChangeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTradeDayChangeTopic").ToLocalChecked());

        CShfeFtdcRspQryTradeDayChangeField* pRspQryTradeDayChange = (CShfeFtdcRspQryTradeDayChangeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTradeDayChangeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTradeDayChange) { 
                string utf8string;
                v8::Local<v8::String> ChangeType = Nan::New<v8::String> ("ChangeType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeDayChange->ChangeType, utf8string);
                v8::Local<v8::String> ChangeTypeValue = Nan::New<v8::String> (pRspQryTradeDayChange->ChangeType).ToLocalChecked();
                pRspQryTradeDayChangeJS->Set(Local<v8::Value> (ChangeType), Local<v8::Value>(ChangeTypeValue));

                v8::Local<v8::String> OldDate = Nan::New<v8::String> ("OldDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeDayChange->OldDate, utf8string);
                v8::Local<v8::String> OldDateValue = Nan::New<v8::String> (pRspQryTradeDayChange->OldDate).ToLocalChecked();
                pRspQryTradeDayChangeJS->Set(Local<v8::Value> (OldDate), Local<v8::Value>(OldDateValue));

                v8::Local<v8::String> NewDate = Nan::New<v8::String> ("NewDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeDayChange->NewDate, utf8string);
                v8::Local<v8::String> NewDateValue = Nan::New<v8::String> (pRspQryTradeDayChange->NewDate).ToLocalChecked();
                pRspQryTradeDayChangeJS->Set(Local<v8::Value> (NewDate), Local<v8::Value>(NewDateValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTradeDayChange) { 
                params[0] = Local<v8::Value>(pRspQryTradeDayChangeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTradeDayChange) { 
            delete[] pRspQryTradeDayChange;
            pRspQryTradeDayChange = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTradeDayChangeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryWebAppInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryWebAppInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryWebAppInfoTopic_trans_callbackNumb: ", g_RspQryWebAppInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryWebAppInfoTopic_mutex);

    int dataNumb = g_RspQryWebAppInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryWebAppInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryWebAppInfoTopic_trans_dataNumb: ", g_RspQryWebAppInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryWebAppInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryWebAppInfoTopic_queue.front());
        g_RspQryWebAppInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryWebAppInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryWebAppInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryWebAppInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryWebAppInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryWebAppInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryWebAppInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryWebAppInfoField* pRspQryWebAppInfo = (CShfeFtdcRspQryWebAppInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryWebAppInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryWebAppInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryWebAppInfo->ObjectID).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryWebAppInfo->MonDate).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryWebAppInfo->MonTime).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> AppName = Nan::New<v8::String> ("AppName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->AppName, utf8string);
                v8::Local<v8::String> AppNameValue = Nan::New<v8::String> (pRspQryWebAppInfo->AppName).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (AppName), Local<v8::Value>(AppNameValue));

                v8::Local<v8::String> Status = Nan::New<v8::String> ("Status").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->Status, utf8string);
                v8::Local<v8::String> StatusValue = Nan::New<v8::String> (pRspQryWebAppInfo->Status).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (Status), Local<v8::Value>(StatusValue));

                v8::Local<v8::String> Desc = Nan::New<v8::String> ("Desc").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->Desc, utf8string);
                v8::Local<v8::String> DescValue = Nan::New<v8::String> (pRspQryWebAppInfo->Desc).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (Desc), Local<v8::Value>(DescValue));

                v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->StartTime, utf8string);
                v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (pRspQryWebAppInfo->StartTime).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                v8::Local<v8::String> ServletNum = Nan::New<v8::String> ("ServletNum").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->ServletNum, utf8string);
                v8::Local<v8::String> ServletNumValue = Nan::New<v8::String> (pRspQryWebAppInfo->ServletNum).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (ServletNum), Local<v8::Value>(ServletNumValue));

                v8::Local<v8::String> ProcessTime = Nan::New<v8::String> ("ProcessTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->ProcessTime, utf8string);
                v8::Local<v8::String> ProcessTimeValue = Nan::New<v8::String> (pRspQryWebAppInfo->ProcessTime).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (ProcessTime), Local<v8::Value>(ProcessTimeValue));

                v8::Local<v8::String> RequestNum = Nan::New<v8::String> ("RequestNum").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->RequestNum, utf8string);
                v8::Local<v8::String> RequestNumValue = Nan::New<v8::String> (pRspQryWebAppInfo->RequestNum).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (RequestNum), Local<v8::Value>(RequestNumValue));

                v8::Local<v8::String> ErrorNum = Nan::New<v8::String> ("ErrorNum").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->ErrorNum, utf8string);
                v8::Local<v8::String> ErrorNumValue = Nan::New<v8::String> (pRspQryWebAppInfo->ErrorNum).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (ErrorNum), Local<v8::Value>(ErrorNumValue));

                v8::Local<v8::String> SessionSize = Nan::New<v8::String> ("SessionSize").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->SessionSize, utf8string);
                v8::Local<v8::String> SessionSizeValue = Nan::New<v8::String> (pRspQryWebAppInfo->SessionSize).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (SessionSize), Local<v8::Value>(SessionSizeValue));

                v8::Local<v8::String> TimeOut = Nan::New<v8::String> ("TimeOut").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->TimeOut, utf8string);
                v8::Local<v8::String> TimeOutValue = Nan::New<v8::String> (pRspQryWebAppInfo->TimeOut).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (TimeOut), Local<v8::Value>(TimeOutValue));

                v8::Local<v8::String> JDBCUsage = Nan::New<v8::String> ("JDBCUsage").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->JDBCUsage, utf8string);
                v8::Local<v8::String> JDBCUsageValue = Nan::New<v8::String> (pRspQryWebAppInfo->JDBCUsage).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (JDBCUsage), Local<v8::Value>(JDBCUsageValue));

                v8::Local<v8::String> JSPNum = Nan::New<v8::String> ("JSPNum").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWebAppInfo->JSPNum, utf8string);
                v8::Local<v8::String> JSPNumValue = Nan::New<v8::String> (pRspQryWebAppInfo->JSPNum).ToLocalChecked();
                pRspQryWebAppInfoJS->Set(Local<v8::Value> (JSPNum), Local<v8::Value>(JSPNumValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryWebAppInfo) { 
                params[0] = Local<v8::Value>(pRspQryWebAppInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryWebAppInfo) { 
            delete[] pRspQryWebAppInfo;
            pRspQryWebAppInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryWebAppInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnWebAppInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnWebAppInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnWebAppInfoTopic_trans_callbackNumb: ", g_RtnWebAppInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnWebAppInfoTopic_mutex);

    int dataNumb = g_RtnWebAppInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnWebAppInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnWebAppInfoTopic_trans_dataNumb: ", g_RtnWebAppInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnWebAppInfoTopic_queue.empty()) {
        receivedData.push (g_RtnWebAppInfoTopic_queue.front());
        g_RtnWebAppInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnWebAppInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnWebAppInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnWebAppInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnWebAppInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnWebAppInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnWebAppInfoTopic").ToLocalChecked());

        CShfeFtdcRtnWebAppInfoField* pRtnWebAppInfo = (CShfeFtdcRtnWebAppInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnWebAppInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnWebAppInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnWebAppInfo->ObjectID).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnWebAppInfo->MonDate).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnWebAppInfo->MonTime).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> AppName = Nan::New<v8::String> ("AppName").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->AppName, utf8string);
                v8::Local<v8::String> AppNameValue = Nan::New<v8::String> (pRtnWebAppInfo->AppName).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (AppName), Local<v8::Value>(AppNameValue));

                v8::Local<v8::String> Status = Nan::New<v8::String> ("Status").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->Status, utf8string);
                v8::Local<v8::String> StatusValue = Nan::New<v8::String> (pRtnWebAppInfo->Status).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (Status), Local<v8::Value>(StatusValue));

                v8::Local<v8::String> Desc = Nan::New<v8::String> ("Desc").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->Desc, utf8string);
                v8::Local<v8::String> DescValue = Nan::New<v8::String> (pRtnWebAppInfo->Desc).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (Desc), Local<v8::Value>(DescValue));

                v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->StartTime, utf8string);
                v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (pRtnWebAppInfo->StartTime).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                v8::Local<v8::String> ServletNum = Nan::New<v8::String> ("ServletNum").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->ServletNum, utf8string);
                v8::Local<v8::String> ServletNumValue = Nan::New<v8::String> (pRtnWebAppInfo->ServletNum).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (ServletNum), Local<v8::Value>(ServletNumValue));

                v8::Local<v8::String> ProcessTime = Nan::New<v8::String> ("ProcessTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->ProcessTime, utf8string);
                v8::Local<v8::String> ProcessTimeValue = Nan::New<v8::String> (pRtnWebAppInfo->ProcessTime).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (ProcessTime), Local<v8::Value>(ProcessTimeValue));

                v8::Local<v8::String> RequestNum = Nan::New<v8::String> ("RequestNum").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->RequestNum, utf8string);
                v8::Local<v8::String> RequestNumValue = Nan::New<v8::String> (pRtnWebAppInfo->RequestNum).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (RequestNum), Local<v8::Value>(RequestNumValue));

                v8::Local<v8::String> ErrorNum = Nan::New<v8::String> ("ErrorNum").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->ErrorNum, utf8string);
                v8::Local<v8::String> ErrorNumValue = Nan::New<v8::String> (pRtnWebAppInfo->ErrorNum).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (ErrorNum), Local<v8::Value>(ErrorNumValue));

                v8::Local<v8::String> SessionSize = Nan::New<v8::String> ("SessionSize").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->SessionSize, utf8string);
                v8::Local<v8::String> SessionSizeValue = Nan::New<v8::String> (pRtnWebAppInfo->SessionSize).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (SessionSize), Local<v8::Value>(SessionSizeValue));

                v8::Local<v8::String> TimeOut = Nan::New<v8::String> ("TimeOut").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->TimeOut, utf8string);
                v8::Local<v8::String> TimeOutValue = Nan::New<v8::String> (pRtnWebAppInfo->TimeOut).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (TimeOut), Local<v8::Value>(TimeOutValue));

                v8::Local<v8::String> JDBCUsage = Nan::New<v8::String> ("JDBCUsage").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->JDBCUsage, utf8string);
                v8::Local<v8::String> JDBCUsageValue = Nan::New<v8::String> (pRtnWebAppInfo->JDBCUsage).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (JDBCUsage), Local<v8::Value>(JDBCUsageValue));

                v8::Local<v8::String> JSPNum = Nan::New<v8::String> ("JSPNum").ToLocalChecked();
                Gb2312ToUtf8(pRtnWebAppInfo->JSPNum, utf8string);
                v8::Local<v8::String> JSPNumValue = Nan::New<v8::String> (pRtnWebAppInfo->JSPNum).ToLocalChecked();
                pRtnWebAppInfoJS->Set(Local<v8::Value> (JSPNum), Local<v8::Value>(JSPNumValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnWebAppInfo) { 
                params[0] = Local<v8::Value>(pRtnWebAppInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnWebAppInfo) { 
            delete[] pRtnWebAppInfo;
            pRtnWebAppInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnWebAppInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryServletInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryServletInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryServletInfoTopic_trans_callbackNumb: ", g_RspQryServletInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryServletInfoTopic_mutex);

    int dataNumb = g_RspQryServletInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryServletInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryServletInfoTopic_trans_dataNumb: ", g_RspQryServletInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryServletInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryServletInfoTopic_queue.front());
        g_RspQryServletInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryServletInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryServletInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryServletInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryServletInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryServletInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryServletInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryServletInfoField* pRspQryServletInfo = (CShfeFtdcRspQryServletInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryServletInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryServletInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryServletInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryServletInfo->ObjectID).ToLocalChecked();
                pRspQryServletInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryServletInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryServletInfo->MonDate).ToLocalChecked();
                pRspQryServletInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryServletInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryServletInfo->MonTime).ToLocalChecked();
                pRspQryServletInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRspQryServletInfo->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRspQryServletInfo->Name).ToLocalChecked();
                pRspQryServletInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> LoadTime = Nan::New<v8::String> ("LoadTime").ToLocalChecked();
                v8::Local<v8::Integer> LoadTimeValue = Nan::New<v8::Integer> (pRspQryServletInfo->LoadTime);
                pRspQryServletInfoJS->Set(Local<v8::Value> (LoadTime), Local<v8::Value>(LoadTimeValue));

                v8::Local<v8::String> RequestNum = Nan::New<v8::String> ("RequestNum").ToLocalChecked();
                v8::Local<v8::Number> RequestNumValue = Nan::New<v8::Number> (pRspQryServletInfo->RequestNum);
                pRspQryServletInfoJS->Set(Local<v8::Value> (RequestNum), Local<v8::Value>(RequestNumValue));

                v8::Local<v8::String> RequestErrNum = Nan::New<v8::String> ("RequestErrNum").ToLocalChecked();
                v8::Local<v8::Number> RequestErrNumValue = Nan::New<v8::Number> (pRspQryServletInfo->RequestErrNum);
                pRspQryServletInfoJS->Set(Local<v8::Value> (RequestErrNum), Local<v8::Value>(RequestErrNumValue));

                v8::Local<v8::String> ProcessTime = Nan::New<v8::String> ("ProcessTime").ToLocalChecked();
                v8::Local<v8::Number> ProcessTimeValue = Nan::New<v8::Number> (pRspQryServletInfo->ProcessTime);
                pRspQryServletInfoJS->Set(Local<v8::Value> (ProcessTime), Local<v8::Value>(ProcessTimeValue));

                v8::Local<v8::String> MixTime = Nan::New<v8::String> ("MixTime").ToLocalChecked();
                v8::Local<v8::Integer> MixTimeValue = Nan::New<v8::Integer> (pRspQryServletInfo->MixTime);
                pRspQryServletInfoJS->Set(Local<v8::Value> (MixTime), Local<v8::Value>(MixTimeValue));

                v8::Local<v8::String> MaxTime = Nan::New<v8::String> ("MaxTime").ToLocalChecked();
                v8::Local<v8::Integer> MaxTimeValue = Nan::New<v8::Integer> (pRspQryServletInfo->MaxTime);
                pRspQryServletInfoJS->Set(Local<v8::Value> (MaxTime), Local<v8::Value>(MaxTimeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryServletInfo) { 
                params[0] = Local<v8::Value>(pRspQryServletInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryServletInfo) { 
            delete[] pRspQryServletInfo;
            pRspQryServletInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryServletInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnServletInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnServletInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnServletInfoTopic_trans_callbackNumb: ", g_RtnServletInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnServletInfoTopic_mutex);

    int dataNumb = g_RtnServletInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnServletInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnServletInfoTopic_trans_dataNumb: ", g_RtnServletInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnServletInfoTopic_queue.empty()) {
        receivedData.push (g_RtnServletInfoTopic_queue.front());
        g_RtnServletInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnServletInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnServletInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnServletInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnServletInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnServletInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnServletInfoTopic").ToLocalChecked());

        CShfeFtdcRtnServletInfoField* pRtnServletInfo = (CShfeFtdcRtnServletInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnServletInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnServletInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnServletInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnServletInfo->ObjectID).ToLocalChecked();
                pRtnServletInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnServletInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnServletInfo->MonDate).ToLocalChecked();
                pRtnServletInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnServletInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnServletInfo->MonTime).ToLocalChecked();
                pRtnServletInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRtnServletInfo->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRtnServletInfo->Name).ToLocalChecked();
                pRtnServletInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> LoadTime = Nan::New<v8::String> ("LoadTime").ToLocalChecked();
                v8::Local<v8::Integer> LoadTimeValue = Nan::New<v8::Integer> (pRtnServletInfo->LoadTime);
                pRtnServletInfoJS->Set(Local<v8::Value> (LoadTime), Local<v8::Value>(LoadTimeValue));

                v8::Local<v8::String> RequestNum = Nan::New<v8::String> ("RequestNum").ToLocalChecked();
                v8::Local<v8::Number> RequestNumValue = Nan::New<v8::Number> (pRtnServletInfo->RequestNum);
                pRtnServletInfoJS->Set(Local<v8::Value> (RequestNum), Local<v8::Value>(RequestNumValue));

                v8::Local<v8::String> RequestErrNum = Nan::New<v8::String> ("RequestErrNum").ToLocalChecked();
                v8::Local<v8::Number> RequestErrNumValue = Nan::New<v8::Number> (pRtnServletInfo->RequestErrNum);
                pRtnServletInfoJS->Set(Local<v8::Value> (RequestErrNum), Local<v8::Value>(RequestErrNumValue));

                v8::Local<v8::String> ProcessTime = Nan::New<v8::String> ("ProcessTime").ToLocalChecked();
                v8::Local<v8::Number> ProcessTimeValue = Nan::New<v8::Number> (pRtnServletInfo->ProcessTime);
                pRtnServletInfoJS->Set(Local<v8::Value> (ProcessTime), Local<v8::Value>(ProcessTimeValue));

                v8::Local<v8::String> MixTime = Nan::New<v8::String> ("MixTime").ToLocalChecked();
                v8::Local<v8::Integer> MixTimeValue = Nan::New<v8::Integer> (pRtnServletInfo->MixTime);
                pRtnServletInfoJS->Set(Local<v8::Value> (MixTime), Local<v8::Value>(MixTimeValue));

                v8::Local<v8::String> MaxTime = Nan::New<v8::String> ("MaxTime").ToLocalChecked();
                v8::Local<v8::Integer> MaxTimeValue = Nan::New<v8::Integer> (pRtnServletInfo->MaxTime);
                pRtnServletInfoJS->Set(Local<v8::Value> (MaxTime), Local<v8::Value>(MaxTimeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnServletInfo) { 
                params[0] = Local<v8::Value>(pRtnServletInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnServletInfo) { 
            delete[] pRtnServletInfo;
            pRtnServletInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnServletInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFileInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryFileInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryFileInfoTopic_trans_callbackNumb: ", g_RspQryFileInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryFileInfoTopic_mutex);

    int dataNumb = g_RspQryFileInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryFileInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryFileInfoTopic_trans_dataNumb: ", g_RspQryFileInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryFileInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryFileInfoTopic_queue.front());
        g_RspQryFileInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryFileInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryFileInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFileInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryFileInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFileInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryFileInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryFileInfoField* pRspQryFileInfo = (CShfeFtdcRspQryFileInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryFileInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryFileInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryFileInfo->ObjectID).ToLocalChecked();
                pRspQryFileInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryFileInfo->MonDate).ToLocalChecked();
                pRspQryFileInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryFileInfo->MonTime).ToLocalChecked();
                pRspQryFileInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> PathName = Nan::New<v8::String> ("PathName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileInfo->PathName, utf8string);
                v8::Local<v8::String> PathNameValue = Nan::New<v8::String> (pRspQryFileInfo->PathName).ToLocalChecked();
                pRspQryFileInfoJS->Set(Local<v8::Value> (PathName), Local<v8::Value>(PathNameValue));

                v8::Local<v8::String> FileSize = Nan::New<v8::String> ("FileSize").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileInfo->FileSize, utf8string);
                v8::Local<v8::String> FileSizeValue = Nan::New<v8::String> (pRspQryFileInfo->FileSize).ToLocalChecked();
                pRspQryFileInfoJS->Set(Local<v8::Value> (FileSize), Local<v8::Value>(FileSizeValue));

                v8::Local<v8::String> LastModDate = Nan::New<v8::String> ("LastModDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileInfo->LastModDate, utf8string);
                v8::Local<v8::String> LastModDateValue = Nan::New<v8::String> (pRspQryFileInfo->LastModDate).ToLocalChecked();
                pRspQryFileInfoJS->Set(Local<v8::Value> (LastModDate), Local<v8::Value>(LastModDateValue));

                v8::Local<v8::String> FileType = Nan::New<v8::String> ("FileType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileInfo->FileType, utf8string);
                v8::Local<v8::String> FileTypeValue = Nan::New<v8::String> (pRspQryFileInfo->FileType).ToLocalChecked();
                pRspQryFileInfoJS->Set(Local<v8::Value> (FileType), Local<v8::Value>(FileTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryFileInfo) { 
                params[0] = Local<v8::Value>(pRspQryFileInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryFileInfo) { 
            delete[] pRspQryFileInfo;
            pRspQryFileInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryFileInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFileInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnFileInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnFileInfoTopic_trans_callbackNumb: ", g_RtnFileInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnFileInfoTopic_mutex);

    int dataNumb = g_RtnFileInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnFileInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnFileInfoTopic_trans_dataNumb: ", g_RtnFileInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnFileInfoTopic_queue.empty()) {
        receivedData.push (g_RtnFileInfoTopic_queue.front());
        g_RtnFileInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnFileInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnFileInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFileInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnFileInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFileInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnFileInfoTopic").ToLocalChecked());

        CShfeFtdcRtnFileInfoField* pRtnFileInfo = (CShfeFtdcRtnFileInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnFileInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnFileInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnFileInfo->ObjectID).ToLocalChecked();
                pRtnFileInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnFileInfo->MonDate).ToLocalChecked();
                pRtnFileInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnFileInfo->MonTime).ToLocalChecked();
                pRtnFileInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> PathName = Nan::New<v8::String> ("PathName").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileInfo->PathName, utf8string);
                v8::Local<v8::String> PathNameValue = Nan::New<v8::String> (pRtnFileInfo->PathName).ToLocalChecked();
                pRtnFileInfoJS->Set(Local<v8::Value> (PathName), Local<v8::Value>(PathNameValue));

                v8::Local<v8::String> FileSize = Nan::New<v8::String> ("FileSize").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileInfo->FileSize, utf8string);
                v8::Local<v8::String> FileSizeValue = Nan::New<v8::String> (pRtnFileInfo->FileSize).ToLocalChecked();
                pRtnFileInfoJS->Set(Local<v8::Value> (FileSize), Local<v8::Value>(FileSizeValue));

                v8::Local<v8::String> LastModDate = Nan::New<v8::String> ("LastModDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileInfo->LastModDate, utf8string);
                v8::Local<v8::String> LastModDateValue = Nan::New<v8::String> (pRtnFileInfo->LastModDate).ToLocalChecked();
                pRtnFileInfoJS->Set(Local<v8::Value> (LastModDate), Local<v8::Value>(LastModDateValue));

                v8::Local<v8::String> FileType = Nan::New<v8::String> ("FileType").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileInfo->FileType, utf8string);
                v8::Local<v8::String> FileTypeValue = Nan::New<v8::String> (pRtnFileInfo->FileType).ToLocalChecked();
                pRtnFileInfoJS->Set(Local<v8::Value> (FileType), Local<v8::Value>(FileTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnFileInfo) { 
                params[0] = Local<v8::Value>(pRtnFileInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnFileInfo) { 
            delete[] pRtnFileInfo;
            pRtnFileInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnFileInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySessionInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySessionInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySessionInfoTopic_trans_callbackNumb: ", g_RspQrySessionInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySessionInfoTopic_mutex);

    int dataNumb = g_RspQrySessionInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySessionInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySessionInfoTopic_trans_dataNumb: ", g_RspQrySessionInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySessionInfoTopic_queue.empty()) {
        receivedData.push (g_RspQrySessionInfoTopic_queue.front());
        g_RspQrySessionInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySessionInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySessionInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySessionInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySessionInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySessionInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySessionInfoTopic").ToLocalChecked());

        CShfeFtdcRspQrySessionInfoField* pRspQrySessionInfo = (CShfeFtdcRspQrySessionInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySessionInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySessionInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySessionInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQrySessionInfo->ObjectID).ToLocalChecked();
                pRspQrySessionInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySessionInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQrySessionInfo->MonDate).ToLocalChecked();
                pRspQrySessionInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySessionInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQrySessionInfo->MonTime).ToLocalChecked();
                pRspQrySessionInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> SessionID = Nan::New<v8::String> ("SessionID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySessionInfo->SessionID, utf8string);
                v8::Local<v8::String> SessionIDValue = Nan::New<v8::String> (pRspQrySessionInfo->SessionID).ToLocalChecked();
                pRspQrySessionInfoJS->Set(Local<v8::Value> (SessionID), Local<v8::Value>(SessionIDValue));

                v8::Local<v8::String> SessionName = Nan::New<v8::String> ("SessionName").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySessionInfo->SessionName, utf8string);
                v8::Local<v8::String> SessionNameValue = Nan::New<v8::String> (pRspQrySessionInfo->SessionName).ToLocalChecked();
                pRspQrySessionInfoJS->Set(Local<v8::Value> (SessionName), Local<v8::Value>(SessionNameValue));

                v8::Local<v8::String> RemoteIP = Nan::New<v8::String> ("RemoteIP").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySessionInfo->RemoteIP, utf8string);
                v8::Local<v8::String> RemoteIPValue = Nan::New<v8::String> (pRspQrySessionInfo->RemoteIP).ToLocalChecked();
                pRspQrySessionInfoJS->Set(Local<v8::Value> (RemoteIP), Local<v8::Value>(RemoteIPValue));

                v8::Local<v8::String> BeginTime = Nan::New<v8::String> ("BeginTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySessionInfo->BeginTime, utf8string);
                v8::Local<v8::String> BeginTimeValue = Nan::New<v8::String> (pRspQrySessionInfo->BeginTime).ToLocalChecked();
                pRspQrySessionInfoJS->Set(Local<v8::Value> (BeginTime), Local<v8::Value>(BeginTimeValue));

                v8::Local<v8::String> LatestTime = Nan::New<v8::String> ("LatestTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySessionInfo->LatestTime, utf8string);
                v8::Local<v8::String> LatestTimeValue = Nan::New<v8::String> (pRspQrySessionInfo->LatestTime).ToLocalChecked();
                pRspQrySessionInfoJS->Set(Local<v8::Value> (LatestTime), Local<v8::Value>(LatestTimeValue));

                v8::Local<v8::String> MaxIdleTime = Nan::New<v8::String> ("MaxIdleTime").ToLocalChecked();
                v8::Local<v8::Integer> MaxIdleTimeValue = Nan::New<v8::Integer> (pRspQrySessionInfo->MaxIdleTime);
                pRspQrySessionInfoJS->Set(Local<v8::Value> (MaxIdleTime), Local<v8::Value>(MaxIdleTimeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySessionInfo) { 
                params[0] = Local<v8::Value>(pRspQrySessionInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySessionInfo) { 
            delete[] pRspQrySessionInfo;
            pRspQrySessionInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySessionInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSessionInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnSessionInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnSessionInfoTopic_trans_callbackNumb: ", g_RtnSessionInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnSessionInfoTopic_mutex);

    int dataNumb = g_RtnSessionInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnSessionInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnSessionInfoTopic_trans_dataNumb: ", g_RtnSessionInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnSessionInfoTopic_queue.empty()) {
        receivedData.push (g_RtnSessionInfoTopic_queue.front());
        g_RtnSessionInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnSessionInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnSessionInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSessionInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnSessionInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSessionInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnSessionInfoTopic").ToLocalChecked());

        CShfeFtdcRtnSessionInfoField* pRtnSessionInfo = (CShfeFtdcRtnSessionInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnSessionInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnSessionInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSessionInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnSessionInfo->ObjectID).ToLocalChecked();
                pRtnSessionInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnSessionInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnSessionInfo->MonDate).ToLocalChecked();
                pRtnSessionInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnSessionInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnSessionInfo->MonTime).ToLocalChecked();
                pRtnSessionInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> SessionID = Nan::New<v8::String> ("SessionID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSessionInfo->SessionID, utf8string);
                v8::Local<v8::String> SessionIDValue = Nan::New<v8::String> (pRtnSessionInfo->SessionID).ToLocalChecked();
                pRtnSessionInfoJS->Set(Local<v8::Value> (SessionID), Local<v8::Value>(SessionIDValue));

                v8::Local<v8::String> SessionName = Nan::New<v8::String> ("SessionName").ToLocalChecked();
                Gb2312ToUtf8(pRtnSessionInfo->SessionName, utf8string);
                v8::Local<v8::String> SessionNameValue = Nan::New<v8::String> (pRtnSessionInfo->SessionName).ToLocalChecked();
                pRtnSessionInfoJS->Set(Local<v8::Value> (SessionName), Local<v8::Value>(SessionNameValue));

                v8::Local<v8::String> RemoteIP = Nan::New<v8::String> ("RemoteIP").ToLocalChecked();
                Gb2312ToUtf8(pRtnSessionInfo->RemoteIP, utf8string);
                v8::Local<v8::String> RemoteIPValue = Nan::New<v8::String> (pRtnSessionInfo->RemoteIP).ToLocalChecked();
                pRtnSessionInfoJS->Set(Local<v8::Value> (RemoteIP), Local<v8::Value>(RemoteIPValue));

                v8::Local<v8::String> BeginTime = Nan::New<v8::String> ("BeginTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnSessionInfo->BeginTime, utf8string);
                v8::Local<v8::String> BeginTimeValue = Nan::New<v8::String> (pRtnSessionInfo->BeginTime).ToLocalChecked();
                pRtnSessionInfoJS->Set(Local<v8::Value> (BeginTime), Local<v8::Value>(BeginTimeValue));

                v8::Local<v8::String> LatestTime = Nan::New<v8::String> ("LatestTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnSessionInfo->LatestTime, utf8string);
                v8::Local<v8::String> LatestTimeValue = Nan::New<v8::String> (pRtnSessionInfo->LatestTime).ToLocalChecked();
                pRtnSessionInfoJS->Set(Local<v8::Value> (LatestTime), Local<v8::Value>(LatestTimeValue));

                v8::Local<v8::String> MaxIdleTime = Nan::New<v8::String> ("MaxIdleTime").ToLocalChecked();
                v8::Local<v8::Integer> MaxIdleTimeValue = Nan::New<v8::Integer> (pRtnSessionInfo->MaxIdleTime);
                pRtnSessionInfoJS->Set(Local<v8::Value> (MaxIdleTime), Local<v8::Value>(MaxIdleTimeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnSessionInfo) { 
                params[0] = Local<v8::Value>(pRtnSessionInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnSessionInfo) { 
            delete[] pRtnSessionInfo;
            pRtnSessionInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnSessionInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryJDBCInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryJDBCInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryJDBCInfoTopic_trans_callbackNumb: ", g_RspQryJDBCInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryJDBCInfoTopic_mutex);

    int dataNumb = g_RspQryJDBCInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryJDBCInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryJDBCInfoTopic_trans_dataNumb: ", g_RspQryJDBCInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryJDBCInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryJDBCInfoTopic_queue.front());
        g_RspQryJDBCInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryJDBCInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryJDBCInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryJDBCInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryJDBCInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryJDBCInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryJDBCInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryJDBCInfoField* pRspQryJDBCInfo = (CShfeFtdcRspQryJDBCInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryJDBCInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryJDBCInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryJDBCInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryJDBCInfo->ObjectID).ToLocalChecked();
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryJDBCInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryJDBCInfo->MonDate).ToLocalChecked();
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryJDBCInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryJDBCInfo->MonTime).ToLocalChecked();
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> AppName = Nan::New<v8::String> ("AppName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryJDBCInfo->AppName, utf8string);
                v8::Local<v8::String> AppNameValue = Nan::New<v8::String> (pRspQryJDBCInfo->AppName).ToLocalChecked();
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (AppName), Local<v8::Value>(AppNameValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRspQryJDBCInfo->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRspQryJDBCInfo->Name).ToLocalChecked();
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> Usage = Nan::New<v8::String> ("Usage").ToLocalChecked();
                v8::Local<v8::Number> UsageValue = Nan::New<v8::Number> (pRspQryJDBCInfo->Usage);
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (Usage), Local<v8::Value>(UsageValue));

                v8::Local<v8::String> ConnNumMax = Nan::New<v8::String> ("ConnNumMax").ToLocalChecked();
                v8::Local<v8::Integer> ConnNumMaxValue = Nan::New<v8::Integer> (pRspQryJDBCInfo->ConnNumMax);
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (ConnNumMax), Local<v8::Value>(ConnNumMaxValue));

                v8::Local<v8::String> ConnNumFree = Nan::New<v8::String> ("ConnNumFree").ToLocalChecked();
                v8::Local<v8::Integer> ConnNumFreeValue = Nan::New<v8::Integer> (pRspQryJDBCInfo->ConnNumFree);
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (ConnNumFree), Local<v8::Value>(ConnNumFreeValue));

                v8::Local<v8::String> ConnNumUnRU = Nan::New<v8::String> ("ConnNumUnRU").ToLocalChecked();
                v8::Local<v8::Integer> ConnNumUnRUValue = Nan::New<v8::Integer> (pRspQryJDBCInfo->ConnNumUnRU);
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (ConnNumUnRU), Local<v8::Value>(ConnNumUnRUValue));

                v8::Local<v8::String> ConnNumRU = Nan::New<v8::String> ("ConnNumRU").ToLocalChecked();
                v8::Local<v8::Integer> ConnNumRUValue = Nan::New<v8::Integer> (pRspQryJDBCInfo->ConnNumRU);
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (ConnNumRU), Local<v8::Value>(ConnNumRUValue));

                v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryJDBCInfo->UserName, utf8string);
                v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (pRspQryJDBCInfo->UserName).ToLocalChecked();
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                v8::Local<v8::String> Type = Nan::New<v8::String> ("Type").ToLocalChecked();
                Gb2312ToUtf8(pRspQryJDBCInfo->Type, utf8string);
                v8::Local<v8::String> TypeValue = Nan::New<v8::String> (pRspQryJDBCInfo->Type).ToLocalChecked();
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (Type), Local<v8::Value>(TypeValue));

                v8::Local<v8::String> URL = Nan::New<v8::String> ("URL").ToLocalChecked();
                Gb2312ToUtf8(pRspQryJDBCInfo->URL, utf8string);
                v8::Local<v8::String> URLValue = Nan::New<v8::String> (pRspQryJDBCInfo->URL).ToLocalChecked();
                pRspQryJDBCInfoJS->Set(Local<v8::Value> (URL), Local<v8::Value>(URLValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryJDBCInfo) { 
                params[0] = Local<v8::Value>(pRspQryJDBCInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryJDBCInfo) { 
            delete[] pRspQryJDBCInfo;
            pRspQryJDBCInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryJDBCInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnJDBCInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnJDBCInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnJDBCInfoTopic_trans_callbackNumb: ", g_RtnJDBCInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnJDBCInfoTopic_mutex);

    int dataNumb = g_RtnJDBCInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnJDBCInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnJDBCInfoTopic_trans_dataNumb: ", g_RtnJDBCInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnJDBCInfoTopic_queue.empty()) {
        receivedData.push (g_RtnJDBCInfoTopic_queue.front());
        g_RtnJDBCInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnJDBCInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnJDBCInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnJDBCInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnJDBCInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnJDBCInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnJDBCInfoTopic").ToLocalChecked());

        CShfeFtdcRtnJDBCInfoField* pRtnJDBCInfo = (CShfeFtdcRtnJDBCInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnJDBCInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnJDBCInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnJDBCInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnJDBCInfo->ObjectID).ToLocalChecked();
                pRtnJDBCInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnJDBCInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnJDBCInfo->MonDate).ToLocalChecked();
                pRtnJDBCInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnJDBCInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnJDBCInfo->MonTime).ToLocalChecked();
                pRtnJDBCInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> AppName = Nan::New<v8::String> ("AppName").ToLocalChecked();
                Gb2312ToUtf8(pRtnJDBCInfo->AppName, utf8string);
                v8::Local<v8::String> AppNameValue = Nan::New<v8::String> (pRtnJDBCInfo->AppName).ToLocalChecked();
                pRtnJDBCInfoJS->Set(Local<v8::Value> (AppName), Local<v8::Value>(AppNameValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRtnJDBCInfo->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRtnJDBCInfo->Name).ToLocalChecked();
                pRtnJDBCInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> Usage = Nan::New<v8::String> ("Usage").ToLocalChecked();
                v8::Local<v8::Number> UsageValue = Nan::New<v8::Number> (pRtnJDBCInfo->Usage);
                pRtnJDBCInfoJS->Set(Local<v8::Value> (Usage), Local<v8::Value>(UsageValue));

                v8::Local<v8::String> ConnNumMax = Nan::New<v8::String> ("ConnNumMax").ToLocalChecked();
                v8::Local<v8::Integer> ConnNumMaxValue = Nan::New<v8::Integer> (pRtnJDBCInfo->ConnNumMax);
                pRtnJDBCInfoJS->Set(Local<v8::Value> (ConnNumMax), Local<v8::Value>(ConnNumMaxValue));

                v8::Local<v8::String> ConnNumFree = Nan::New<v8::String> ("ConnNumFree").ToLocalChecked();
                v8::Local<v8::Integer> ConnNumFreeValue = Nan::New<v8::Integer> (pRtnJDBCInfo->ConnNumFree);
                pRtnJDBCInfoJS->Set(Local<v8::Value> (ConnNumFree), Local<v8::Value>(ConnNumFreeValue));

                v8::Local<v8::String> ConnNumUnRU = Nan::New<v8::String> ("ConnNumUnRU").ToLocalChecked();
                v8::Local<v8::Integer> ConnNumUnRUValue = Nan::New<v8::Integer> (pRtnJDBCInfo->ConnNumUnRU);
                pRtnJDBCInfoJS->Set(Local<v8::Value> (ConnNumUnRU), Local<v8::Value>(ConnNumUnRUValue));

                v8::Local<v8::String> ConnNumRU = Nan::New<v8::String> ("ConnNumRU").ToLocalChecked();
                v8::Local<v8::Integer> ConnNumRUValue = Nan::New<v8::Integer> (pRtnJDBCInfo->ConnNumRU);
                pRtnJDBCInfoJS->Set(Local<v8::Value> (ConnNumRU), Local<v8::Value>(ConnNumRUValue));

                v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                Gb2312ToUtf8(pRtnJDBCInfo->UserName, utf8string);
                v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (pRtnJDBCInfo->UserName).ToLocalChecked();
                pRtnJDBCInfoJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                v8::Local<v8::String> Type = Nan::New<v8::String> ("Type").ToLocalChecked();
                Gb2312ToUtf8(pRtnJDBCInfo->Type, utf8string);
                v8::Local<v8::String> TypeValue = Nan::New<v8::String> (pRtnJDBCInfo->Type).ToLocalChecked();
                pRtnJDBCInfoJS->Set(Local<v8::Value> (Type), Local<v8::Value>(TypeValue));

                v8::Local<v8::String> URL = Nan::New<v8::String> ("URL").ToLocalChecked();
                Gb2312ToUtf8(pRtnJDBCInfo->URL, utf8string);
                v8::Local<v8::String> URLValue = Nan::New<v8::String> (pRtnJDBCInfo->URL).ToLocalChecked();
                pRtnJDBCInfoJS->Set(Local<v8::Value> (URL), Local<v8::Value>(URLValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnJDBCInfo) { 
                params[0] = Local<v8::Value>(pRtnJDBCInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnJDBCInfo) { 
            delete[] pRtnJDBCInfo;
            pRtnJDBCInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnJDBCInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryThreadInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryThreadInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryThreadInfoTopic_trans_callbackNumb: ", g_RspQryThreadInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryThreadInfoTopic_mutex);

    int dataNumb = g_RspQryThreadInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryThreadInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryThreadInfoTopic_trans_dataNumb: ", g_RspQryThreadInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryThreadInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryThreadInfoTopic_queue.front());
        g_RspQryThreadInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryThreadInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryThreadInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryThreadInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryThreadInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryThreadInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryThreadInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryThreadInfoField* pRspQryThreadInfo = (CShfeFtdcRspQryThreadInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryThreadInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryThreadInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryThreadInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryThreadInfo->ObjectID).ToLocalChecked();
                pRspQryThreadInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryThreadInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryThreadInfo->MonDate).ToLocalChecked();
                pRspQryThreadInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryThreadInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryThreadInfo->MonTime).ToLocalChecked();
                pRspQryThreadInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRspQryThreadInfo->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRspQryThreadInfo->Name).ToLocalChecked();
                pRspQryThreadInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> ThreadNum = Nan::New<v8::String> ("ThreadNum").ToLocalChecked();
                v8::Local<v8::Integer> ThreadNumValue = Nan::New<v8::Integer> (pRspQryThreadInfo->ThreadNum);
                pRspQryThreadInfoJS->Set(Local<v8::Value> (ThreadNum), Local<v8::Value>(ThreadNumValue));

                v8::Local<v8::String> ThreadStatus = Nan::New<v8::String> ("ThreadStatus").ToLocalChecked();
                Gb2312ToUtf8(pRspQryThreadInfo->ThreadStatus, utf8string);
                v8::Local<v8::String> ThreadStatusValue = Nan::New<v8::String> (pRspQryThreadInfo->ThreadStatus).ToLocalChecked();
                pRspQryThreadInfoJS->Set(Local<v8::Value> (ThreadStatus), Local<v8::Value>(ThreadStatusValue));

                v8::Local<v8::String> InNative = Nan::New<v8::String> ("InNative").ToLocalChecked();
                v8::Local<v8::Integer> InNativeValue = Nan::New<v8::Integer> (pRspQryThreadInfo->InNative);
                pRspQryThreadInfoJS->Set(Local<v8::Value> (InNative), Local<v8::Value>(InNativeValue));

                v8::Local<v8::String> Suspended = Nan::New<v8::String> ("Suspended").ToLocalChecked();
                Gb2312ToUtf8(pRspQryThreadInfo->Suspended, utf8string);
                v8::Local<v8::String> SuspendedValue = Nan::New<v8::String> (pRspQryThreadInfo->Suspended).ToLocalChecked();
                pRspQryThreadInfoJS->Set(Local<v8::Value> (Suspended), Local<v8::Value>(SuspendedValue));

                v8::Local<v8::String> BlockCount = Nan::New<v8::String> ("BlockCount").ToLocalChecked();
                Gb2312ToUtf8(pRspQryThreadInfo->BlockCount, utf8string);
                v8::Local<v8::String> BlockCountValue = Nan::New<v8::String> (pRspQryThreadInfo->BlockCount).ToLocalChecked();
                pRspQryThreadInfoJS->Set(Local<v8::Value> (BlockCount), Local<v8::Value>(BlockCountValue));

                v8::Local<v8::String> WaitCount = Nan::New<v8::String> ("WaitCount").ToLocalChecked();
                v8::Local<v8::Integer> WaitCountValue = Nan::New<v8::Integer> (pRspQryThreadInfo->WaitCount);
                pRspQryThreadInfoJS->Set(Local<v8::Value> (WaitCount), Local<v8::Value>(WaitCountValue));

                v8::Local<v8::String> CpuTime = Nan::New<v8::String> ("CpuTime").ToLocalChecked();
                v8::Local<v8::Number> CpuTimeValue = Nan::New<v8::Number> (pRspQryThreadInfo->CpuTime);
                pRspQryThreadInfoJS->Set(Local<v8::Value> (CpuTime), Local<v8::Value>(CpuTimeValue));

                v8::Local<v8::String> UserTime = Nan::New<v8::String> ("UserTime").ToLocalChecked();
                v8::Local<v8::Number> UserTimeValue = Nan::New<v8::Number> (pRspQryThreadInfo->UserTime);
                pRspQryThreadInfoJS->Set(Local<v8::Value> (UserTime), Local<v8::Value>(UserTimeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryThreadInfo) { 
                params[0] = Local<v8::Value>(pRspQryThreadInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryThreadInfo) { 
            delete[] pRspQryThreadInfo;
            pRspQryThreadInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryThreadInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnThreadInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnThreadInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnThreadInfoTopic_trans_callbackNumb: ", g_RtnThreadInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnThreadInfoTopic_mutex);

    int dataNumb = g_RtnThreadInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnThreadInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnThreadInfoTopic_trans_dataNumb: ", g_RtnThreadInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnThreadInfoTopic_queue.empty()) {
        receivedData.push (g_RtnThreadInfoTopic_queue.front());
        g_RtnThreadInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnThreadInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnThreadInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnThreadInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnThreadInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnThreadInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnThreadInfoTopic").ToLocalChecked());

        CShfeFtdcRtnThreadInfoField* pRtnThreadInfo = (CShfeFtdcRtnThreadInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnThreadInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnThreadInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnThreadInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnThreadInfo->ObjectID).ToLocalChecked();
                pRtnThreadInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnThreadInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnThreadInfo->MonDate).ToLocalChecked();
                pRtnThreadInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnThreadInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnThreadInfo->MonTime).ToLocalChecked();
                pRtnThreadInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRtnThreadInfo->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRtnThreadInfo->Name).ToLocalChecked();
                pRtnThreadInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> ThreadNum = Nan::New<v8::String> ("ThreadNum").ToLocalChecked();
                v8::Local<v8::Integer> ThreadNumValue = Nan::New<v8::Integer> (pRtnThreadInfo->ThreadNum);
                pRtnThreadInfoJS->Set(Local<v8::Value> (ThreadNum), Local<v8::Value>(ThreadNumValue));

                v8::Local<v8::String> ThreadStatus = Nan::New<v8::String> ("ThreadStatus").ToLocalChecked();
                Gb2312ToUtf8(pRtnThreadInfo->ThreadStatus, utf8string);
                v8::Local<v8::String> ThreadStatusValue = Nan::New<v8::String> (pRtnThreadInfo->ThreadStatus).ToLocalChecked();
                pRtnThreadInfoJS->Set(Local<v8::Value> (ThreadStatus), Local<v8::Value>(ThreadStatusValue));

                v8::Local<v8::String> InNative = Nan::New<v8::String> ("InNative").ToLocalChecked();
                v8::Local<v8::Integer> InNativeValue = Nan::New<v8::Integer> (pRtnThreadInfo->InNative);
                pRtnThreadInfoJS->Set(Local<v8::Value> (InNative), Local<v8::Value>(InNativeValue));

                v8::Local<v8::String> Suspended = Nan::New<v8::String> ("Suspended").ToLocalChecked();
                Gb2312ToUtf8(pRtnThreadInfo->Suspended, utf8string);
                v8::Local<v8::String> SuspendedValue = Nan::New<v8::String> (pRtnThreadInfo->Suspended).ToLocalChecked();
                pRtnThreadInfoJS->Set(Local<v8::Value> (Suspended), Local<v8::Value>(SuspendedValue));

                v8::Local<v8::String> BlockCount = Nan::New<v8::String> ("BlockCount").ToLocalChecked();
                Gb2312ToUtf8(pRtnThreadInfo->BlockCount, utf8string);
                v8::Local<v8::String> BlockCountValue = Nan::New<v8::String> (pRtnThreadInfo->BlockCount).ToLocalChecked();
                pRtnThreadInfoJS->Set(Local<v8::Value> (BlockCount), Local<v8::Value>(BlockCountValue));

                v8::Local<v8::String> WaitCount = Nan::New<v8::String> ("WaitCount").ToLocalChecked();
                v8::Local<v8::Integer> WaitCountValue = Nan::New<v8::Integer> (pRtnThreadInfo->WaitCount);
                pRtnThreadInfoJS->Set(Local<v8::Value> (WaitCount), Local<v8::Value>(WaitCountValue));

                v8::Local<v8::String> CpuTime = Nan::New<v8::String> ("CpuTime").ToLocalChecked();
                v8::Local<v8::Number> CpuTimeValue = Nan::New<v8::Number> (pRtnThreadInfo->CpuTime);
                pRtnThreadInfoJS->Set(Local<v8::Value> (CpuTime), Local<v8::Value>(CpuTimeValue));

                v8::Local<v8::String> UserTime = Nan::New<v8::String> ("UserTime").ToLocalChecked();
                v8::Local<v8::Number> UserTimeValue = Nan::New<v8::Number> (pRtnThreadInfo->UserTime);
                pRtnThreadInfoJS->Set(Local<v8::Value> (UserTime), Local<v8::Value>(UserTimeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnThreadInfo) { 
                params[0] = Local<v8::Value>(pRtnThreadInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnThreadInfo) { 
            delete[] pRtnThreadInfo;
            pRtnThreadInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnThreadInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryVMInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryVMInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryVMInfoTopic_trans_callbackNumb: ", g_RspQryVMInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryVMInfoTopic_mutex);

    int dataNumb = g_RspQryVMInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryVMInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryVMInfoTopic_trans_dataNumb: ", g_RspQryVMInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryVMInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryVMInfoTopic_queue.front());
        g_RspQryVMInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryVMInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryVMInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryVMInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryVMInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryVMInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryVMInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryVMInfoField* pRspQryVMInfo = (CShfeFtdcRspQryVMInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryVMInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryVMInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryVMInfo->ObjectID).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryVMInfo->MonDate).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryVMInfo->MonTime).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRspQryVMInfo->Name).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> VmName = Nan::New<v8::String> ("VmName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->VmName, utf8string);
                v8::Local<v8::String> VmNameValue = Nan::New<v8::String> (pRspQryVMInfo->VmName).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (VmName), Local<v8::Value>(VmNameValue));

                v8::Local<v8::String> VmVendor = Nan::New<v8::String> ("VmVendor").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->VmVendor, utf8string);
                v8::Local<v8::String> VmVendorValue = Nan::New<v8::String> (pRspQryVMInfo->VmVendor).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (VmVendor), Local<v8::Value>(VmVendorValue));

                v8::Local<v8::String> VmVersion = Nan::New<v8::String> ("VmVersion").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->VmVersion, utf8string);
                v8::Local<v8::String> VmVersionValue = Nan::New<v8::String> (pRspQryVMInfo->VmVersion).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (VmVersion), Local<v8::Value>(VmVersionValue));

                v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->StartTime, utf8string);
                v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (pRspQryVMInfo->StartTime).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                v8::Local<v8::String> BootClassPath = Nan::New<v8::String> ("BootClassPath").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->BootClassPath, utf8string);
                v8::Local<v8::String> BootClassPathValue = Nan::New<v8::String> (pRspQryVMInfo->BootClassPath).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (BootClassPath), Local<v8::Value>(BootClassPathValue));

                v8::Local<v8::String> ClassPath = Nan::New<v8::String> ("ClassPath").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->ClassPath, utf8string);
                v8::Local<v8::String> ClassPathValue = Nan::New<v8::String> (pRspQryVMInfo->ClassPath).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (ClassPath), Local<v8::Value>(ClassPathValue));

                v8::Local<v8::String> LibraryPath = Nan::New<v8::String> ("LibraryPath").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->LibraryPath, utf8string);
                v8::Local<v8::String> LibraryPathValue = Nan::New<v8::String> (pRspQryVMInfo->LibraryPath).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (LibraryPath), Local<v8::Value>(LibraryPathValue));

                v8::Local<v8::String> Arguments = Nan::New<v8::String> ("Arguments").ToLocalChecked();
                Gb2312ToUtf8(pRspQryVMInfo->Arguments, utf8string);
                v8::Local<v8::String> ArgumentsValue = Nan::New<v8::String> (pRspQryVMInfo->Arguments).ToLocalChecked();
                pRspQryVMInfoJS->Set(Local<v8::Value> (Arguments), Local<v8::Value>(ArgumentsValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryVMInfo) { 
                params[0] = Local<v8::Value>(pRspQryVMInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryVMInfo) { 
            delete[] pRspQryVMInfo;
            pRspQryVMInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryVMInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnVMInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnVMInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnVMInfoTopic_trans_callbackNumb: ", g_RtnVMInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnVMInfoTopic_mutex);

    int dataNumb = g_RtnVMInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnVMInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnVMInfoTopic_trans_dataNumb: ", g_RtnVMInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnVMInfoTopic_queue.empty()) {
        receivedData.push (g_RtnVMInfoTopic_queue.front());
        g_RtnVMInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnVMInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnVMInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnVMInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnVMInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnVMInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnVMInfoTopic").ToLocalChecked());

        CShfeFtdcRtnVMInfoField* pRtnVMInfo = (CShfeFtdcRtnVMInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnVMInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnVMInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnVMInfo->ObjectID).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnVMInfo->MonDate).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnVMInfo->MonTime).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRtnVMInfo->Name).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> VmName = Nan::New<v8::String> ("VmName").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->VmName, utf8string);
                v8::Local<v8::String> VmNameValue = Nan::New<v8::String> (pRtnVMInfo->VmName).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (VmName), Local<v8::Value>(VmNameValue));

                v8::Local<v8::String> VmVendor = Nan::New<v8::String> ("VmVendor").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->VmVendor, utf8string);
                v8::Local<v8::String> VmVendorValue = Nan::New<v8::String> (pRtnVMInfo->VmVendor).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (VmVendor), Local<v8::Value>(VmVendorValue));

                v8::Local<v8::String> VmVersion = Nan::New<v8::String> ("VmVersion").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->VmVersion, utf8string);
                v8::Local<v8::String> VmVersionValue = Nan::New<v8::String> (pRtnVMInfo->VmVersion).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (VmVersion), Local<v8::Value>(VmVersionValue));

                v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->StartTime, utf8string);
                v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (pRtnVMInfo->StartTime).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                v8::Local<v8::String> BootClassPath = Nan::New<v8::String> ("BootClassPath").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->BootClassPath, utf8string);
                v8::Local<v8::String> BootClassPathValue = Nan::New<v8::String> (pRtnVMInfo->BootClassPath).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (BootClassPath), Local<v8::Value>(BootClassPathValue));

                v8::Local<v8::String> ClassPath = Nan::New<v8::String> ("ClassPath").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->ClassPath, utf8string);
                v8::Local<v8::String> ClassPathValue = Nan::New<v8::String> (pRtnVMInfo->ClassPath).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (ClassPath), Local<v8::Value>(ClassPathValue));

                v8::Local<v8::String> LibraryPath = Nan::New<v8::String> ("LibraryPath").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->LibraryPath, utf8string);
                v8::Local<v8::String> LibraryPathValue = Nan::New<v8::String> (pRtnVMInfo->LibraryPath).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (LibraryPath), Local<v8::Value>(LibraryPathValue));

                v8::Local<v8::String> Arguments = Nan::New<v8::String> ("Arguments").ToLocalChecked();
                Gb2312ToUtf8(pRtnVMInfo->Arguments, utf8string);
                v8::Local<v8::String> ArgumentsValue = Nan::New<v8::String> (pRtnVMInfo->Arguments).ToLocalChecked();
                pRtnVMInfoJS->Set(Local<v8::Value> (Arguments), Local<v8::Value>(ArgumentsValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnVMInfo) { 
                params[0] = Local<v8::Value>(pRtnVMInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnVMInfo) { 
            delete[] pRtnVMInfo;
            pRtnVMInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnVMInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPropertyInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryPropertyInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryPropertyInfoTopic_trans_callbackNumb: ", g_RspQryPropertyInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryPropertyInfoTopic_mutex);

    int dataNumb = g_RspQryPropertyInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryPropertyInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryPropertyInfoTopic_trans_dataNumb: ", g_RspQryPropertyInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryPropertyInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryPropertyInfoTopic_queue.front());
        g_RspQryPropertyInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryPropertyInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryPropertyInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPropertyInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryPropertyInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPropertyInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryPropertyInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryPropertyInfoField* pRspQryPropertyInfo = (CShfeFtdcRspQryPropertyInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryPropertyInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryPropertyInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPropertyInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryPropertyInfo->ObjectID).ToLocalChecked();
                pRspQryPropertyInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPropertyInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryPropertyInfo->MonDate).ToLocalChecked();
                pRspQryPropertyInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPropertyInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryPropertyInfo->MonTime).ToLocalChecked();
                pRspQryPropertyInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Property = Nan::New<v8::String> ("Property").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPropertyInfo->Property, utf8string);
                v8::Local<v8::String> PropertyValue = Nan::New<v8::String> (pRspQryPropertyInfo->Property).ToLocalChecked();
                pRspQryPropertyInfoJS->Set(Local<v8::Value> (Property), Local<v8::Value>(PropertyValue));

                v8::Local<v8::String> ClipFlag = Nan::New<v8::String> ("ClipFlag").ToLocalChecked();
                v8::Local<v8::Integer> ClipFlagValue = Nan::New<v8::Integer> (pRspQryPropertyInfo->ClipFlag);
                pRspQryPropertyInfoJS->Set(Local<v8::Value> (ClipFlag), Local<v8::Value>(ClipFlagValue));

                v8::Local<v8::String> Value = Nan::New<v8::String> ("Value").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPropertyInfo->Value, utf8string);
                v8::Local<v8::String> ValueValue = Nan::New<v8::String> (pRspQryPropertyInfo->Value).ToLocalChecked();
                pRspQryPropertyInfoJS->Set(Local<v8::Value> (Value), Local<v8::Value>(ValueValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryPropertyInfo) { 
                params[0] = Local<v8::Value>(pRspQryPropertyInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryPropertyInfo) { 
            delete[] pRspQryPropertyInfo;
            pRspQryPropertyInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryPropertyInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPropertyInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnPropertyInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnPropertyInfoTopic_trans_callbackNumb: ", g_RtnPropertyInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnPropertyInfoTopic_mutex);

    int dataNumb = g_RtnPropertyInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnPropertyInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnPropertyInfoTopic_trans_dataNumb: ", g_RtnPropertyInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnPropertyInfoTopic_queue.empty()) {
        receivedData.push (g_RtnPropertyInfoTopic_queue.front());
        g_RtnPropertyInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnPropertyInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnPropertyInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPropertyInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnPropertyInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPropertyInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnPropertyInfoTopic").ToLocalChecked());

        CShfeFtdcRtnPropertyInfoField* pRtnPropertyInfo = (CShfeFtdcRtnPropertyInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnPropertyInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnPropertyInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnPropertyInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnPropertyInfo->ObjectID).ToLocalChecked();
                pRtnPropertyInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnPropertyInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnPropertyInfo->MonDate).ToLocalChecked();
                pRtnPropertyInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnPropertyInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnPropertyInfo->MonTime).ToLocalChecked();
                pRtnPropertyInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Property = Nan::New<v8::String> ("Property").ToLocalChecked();
                Gb2312ToUtf8(pRtnPropertyInfo->Property, utf8string);
                v8::Local<v8::String> PropertyValue = Nan::New<v8::String> (pRtnPropertyInfo->Property).ToLocalChecked();
                pRtnPropertyInfoJS->Set(Local<v8::Value> (Property), Local<v8::Value>(PropertyValue));

                v8::Local<v8::String> ClipFlag = Nan::New<v8::String> ("ClipFlag").ToLocalChecked();
                v8::Local<v8::Integer> ClipFlagValue = Nan::New<v8::Integer> (pRtnPropertyInfo->ClipFlag);
                pRtnPropertyInfoJS->Set(Local<v8::Value> (ClipFlag), Local<v8::Value>(ClipFlagValue));

                v8::Local<v8::String> Value = Nan::New<v8::String> ("Value").ToLocalChecked();
                Gb2312ToUtf8(pRtnPropertyInfo->Value, utf8string);
                v8::Local<v8::String> ValueValue = Nan::New<v8::String> (pRtnPropertyInfo->Value).ToLocalChecked();
                pRtnPropertyInfoJS->Set(Local<v8::Value> (Value), Local<v8::Value>(ValueValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnPropertyInfo) { 
                params[0] = Local<v8::Value>(pRtnPropertyInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnPropertyInfo) { 
            delete[] pRtnPropertyInfo;
            pRtnPropertyInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnPropertyInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMemPoolInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryMemPoolInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryMemPoolInfoTopic_trans_callbackNumb: ", g_RspQryMemPoolInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryMemPoolInfoTopic_mutex);

    int dataNumb = g_RspQryMemPoolInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryMemPoolInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryMemPoolInfoTopic_trans_dataNumb: ", g_RspQryMemPoolInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryMemPoolInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryMemPoolInfoTopic_queue.front());
        g_RspQryMemPoolInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryMemPoolInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryMemPoolInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMemPoolInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryMemPoolInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMemPoolInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryMemPoolInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryMemPoolInfoField* pRspQryMemPoolInfo = (CShfeFtdcRspQryMemPoolInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryMemPoolInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryMemPoolInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemPoolInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryMemPoolInfo->ObjectID).ToLocalChecked();
                pRspQryMemPoolInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemPoolInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryMemPoolInfo->MonDate).ToLocalChecked();
                pRspQryMemPoolInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemPoolInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryMemPoolInfo->MonTime).ToLocalChecked();
                pRspQryMemPoolInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> PoolName = Nan::New<v8::String> ("PoolName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemPoolInfo->PoolName, utf8string);
                v8::Local<v8::String> PoolNameValue = Nan::New<v8::String> (pRspQryMemPoolInfo->PoolName).ToLocalChecked();
                pRspQryMemPoolInfoJS->Set(Local<v8::Value> (PoolName), Local<v8::Value>(PoolNameValue));

                v8::Local<v8::String> Usage = Nan::New<v8::String> ("Usage").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemPoolInfo->Usage, utf8string);
                v8::Local<v8::String> UsageValue = Nan::New<v8::String> (pRspQryMemPoolInfo->Usage).ToLocalChecked();
                pRspQryMemPoolInfoJS->Set(Local<v8::Value> (Usage), Local<v8::Value>(UsageValue));

                v8::Local<v8::String> committedbytes = Nan::New<v8::String> ("committedbytes").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemPoolInfo->committedbytes, utf8string);
                v8::Local<v8::String> committedbytesValue = Nan::New<v8::String> (pRspQryMemPoolInfo->committedbytes).ToLocalChecked();
                pRspQryMemPoolInfoJS->Set(Local<v8::Value> (committedbytes), Local<v8::Value>(committedbytesValue));

                v8::Local<v8::String> initbytes = Nan::New<v8::String> ("initbytes").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemPoolInfo->initbytes, utf8string);
                v8::Local<v8::String> initbytesValue = Nan::New<v8::String> (pRspQryMemPoolInfo->initbytes).ToLocalChecked();
                pRspQryMemPoolInfoJS->Set(Local<v8::Value> (initbytes), Local<v8::Value>(initbytesValue));

                v8::Local<v8::String> maxbytes = Nan::New<v8::String> ("maxbytes").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemPoolInfo->maxbytes, utf8string);
                v8::Local<v8::String> maxbytesValue = Nan::New<v8::String> (pRspQryMemPoolInfo->maxbytes).ToLocalChecked();
                pRspQryMemPoolInfoJS->Set(Local<v8::Value> (maxbytes), Local<v8::Value>(maxbytesValue));

                v8::Local<v8::String> usedbytes = Nan::New<v8::String> ("usedbytes").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemPoolInfo->usedbytes, utf8string);
                v8::Local<v8::String> usedbytesValue = Nan::New<v8::String> (pRspQryMemPoolInfo->usedbytes).ToLocalChecked();
                pRspQryMemPoolInfoJS->Set(Local<v8::Value> (usedbytes), Local<v8::Value>(usedbytesValue));

                v8::Local<v8::String> Type = Nan::New<v8::String> ("Type").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemPoolInfo->Type, utf8string);
                v8::Local<v8::String> TypeValue = Nan::New<v8::String> (pRspQryMemPoolInfo->Type).ToLocalChecked();
                pRspQryMemPoolInfoJS->Set(Local<v8::Value> (Type), Local<v8::Value>(TypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryMemPoolInfo) { 
                params[0] = Local<v8::Value>(pRspQryMemPoolInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryMemPoolInfo) { 
            delete[] pRspQryMemPoolInfo;
            pRspQryMemPoolInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryMemPoolInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMemPoolInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnMemPoolInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnMemPoolInfoTopic_trans_callbackNumb: ", g_RtnMemPoolInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnMemPoolInfoTopic_mutex);

    int dataNumb = g_RtnMemPoolInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnMemPoolInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnMemPoolInfoTopic_trans_dataNumb: ", g_RtnMemPoolInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnMemPoolInfoTopic_queue.empty()) {
        receivedData.push (g_RtnMemPoolInfoTopic_queue.front());
        g_RtnMemPoolInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnMemPoolInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnMemPoolInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMemPoolInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnMemPoolInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMemPoolInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnMemPoolInfoTopic").ToLocalChecked());

        CShfeFtdcRtnMemPoolInfoField* pRtnMemPoolInfo = (CShfeFtdcRtnMemPoolInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnMemPoolInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnMemPoolInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemPoolInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnMemPoolInfo->ObjectID).ToLocalChecked();
                pRtnMemPoolInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemPoolInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnMemPoolInfo->MonDate).ToLocalChecked();
                pRtnMemPoolInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemPoolInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnMemPoolInfo->MonTime).ToLocalChecked();
                pRtnMemPoolInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> PoolName = Nan::New<v8::String> ("PoolName").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemPoolInfo->PoolName, utf8string);
                v8::Local<v8::String> PoolNameValue = Nan::New<v8::String> (pRtnMemPoolInfo->PoolName).ToLocalChecked();
                pRtnMemPoolInfoJS->Set(Local<v8::Value> (PoolName), Local<v8::Value>(PoolNameValue));

                v8::Local<v8::String> Usage = Nan::New<v8::String> ("Usage").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemPoolInfo->Usage, utf8string);
                v8::Local<v8::String> UsageValue = Nan::New<v8::String> (pRtnMemPoolInfo->Usage).ToLocalChecked();
                pRtnMemPoolInfoJS->Set(Local<v8::Value> (Usage), Local<v8::Value>(UsageValue));

                v8::Local<v8::String> committedbytes = Nan::New<v8::String> ("committedbytes").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemPoolInfo->committedbytes, utf8string);
                v8::Local<v8::String> committedbytesValue = Nan::New<v8::String> (pRtnMemPoolInfo->committedbytes).ToLocalChecked();
                pRtnMemPoolInfoJS->Set(Local<v8::Value> (committedbytes), Local<v8::Value>(committedbytesValue));

                v8::Local<v8::String> initbytes = Nan::New<v8::String> ("initbytes").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemPoolInfo->initbytes, utf8string);
                v8::Local<v8::String> initbytesValue = Nan::New<v8::String> (pRtnMemPoolInfo->initbytes).ToLocalChecked();
                pRtnMemPoolInfoJS->Set(Local<v8::Value> (initbytes), Local<v8::Value>(initbytesValue));

                v8::Local<v8::String> maxbytes = Nan::New<v8::String> ("maxbytes").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemPoolInfo->maxbytes, utf8string);
                v8::Local<v8::String> maxbytesValue = Nan::New<v8::String> (pRtnMemPoolInfo->maxbytes).ToLocalChecked();
                pRtnMemPoolInfoJS->Set(Local<v8::Value> (maxbytes), Local<v8::Value>(maxbytesValue));

                v8::Local<v8::String> usedbytes = Nan::New<v8::String> ("usedbytes").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemPoolInfo->usedbytes, utf8string);
                v8::Local<v8::String> usedbytesValue = Nan::New<v8::String> (pRtnMemPoolInfo->usedbytes).ToLocalChecked();
                pRtnMemPoolInfoJS->Set(Local<v8::Value> (usedbytes), Local<v8::Value>(usedbytesValue));

                v8::Local<v8::String> Type = Nan::New<v8::String> ("Type").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemPoolInfo->Type, utf8string);
                v8::Local<v8::String> TypeValue = Nan::New<v8::String> (pRtnMemPoolInfo->Type).ToLocalChecked();
                pRtnMemPoolInfoJS->Set(Local<v8::Value> (Type), Local<v8::Value>(TypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnMemPoolInfo) { 
                params[0] = Local<v8::Value>(pRtnMemPoolInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnMemPoolInfo) { 
            delete[] pRtnMemPoolInfo;
            pRtnMemPoolInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnMemPoolInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFileContentInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryFileContentInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryFileContentInfoTopic_trans_callbackNumb: ", g_RspQryFileContentInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryFileContentInfoTopic_mutex);

    int dataNumb = g_RspQryFileContentInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryFileContentInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryFileContentInfoTopic_trans_dataNumb: ", g_RspQryFileContentInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryFileContentInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryFileContentInfoTopic_queue.front());
        g_RspQryFileContentInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryFileContentInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryFileContentInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFileContentInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryFileContentInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFileContentInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryFileContentInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryFileContentInfoField* pRspQryFileContentInfo = (CShfeFtdcRspQryFileContentInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryFileContentInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryFileContentInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileContentInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryFileContentInfo->ObjectID).ToLocalChecked();
                pRspQryFileContentInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileContentInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryFileContentInfo->MonDate).ToLocalChecked();
                pRspQryFileContentInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileContentInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryFileContentInfo->MonTime).ToLocalChecked();
                pRspQryFileContentInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> FileName = Nan::New<v8::String> ("FileName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileContentInfo->FileName, utf8string);
                v8::Local<v8::String> FileNameValue = Nan::New<v8::String> (pRspQryFileContentInfo->FileName).ToLocalChecked();
                pRspQryFileContentInfoJS->Set(Local<v8::Value> (FileName), Local<v8::Value>(FileNameValue));

                v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileContentInfo->FileContent, utf8string);
                v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (pRspQryFileContentInfo->FileContent).ToLocalChecked();
                pRspQryFileContentInfoJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryFileContentInfo) { 
                params[0] = Local<v8::Value>(pRspQryFileContentInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryFileContentInfo) { 
            delete[] pRspQryFileContentInfo;
            pRspQryFileContentInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryFileContentInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFileContentInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnFileContentInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnFileContentInfoTopic_trans_callbackNumb: ", g_RtnFileContentInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnFileContentInfoTopic_mutex);

    int dataNumb = g_RtnFileContentInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnFileContentInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnFileContentInfoTopic_trans_dataNumb: ", g_RtnFileContentInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnFileContentInfoTopic_queue.empty()) {
        receivedData.push (g_RtnFileContentInfoTopic_queue.front());
        g_RtnFileContentInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnFileContentInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnFileContentInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFileContentInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnFileContentInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFileContentInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnFileContentInfoTopic").ToLocalChecked());

        CShfeFtdcRtnFileContentInfoField* pRtnFileContentInfo = (CShfeFtdcRtnFileContentInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnFileContentInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnFileContentInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileContentInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnFileContentInfo->ObjectID).ToLocalChecked();
                pRtnFileContentInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileContentInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnFileContentInfo->MonDate).ToLocalChecked();
                pRtnFileContentInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileContentInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnFileContentInfo->MonTime).ToLocalChecked();
                pRtnFileContentInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> FileName = Nan::New<v8::String> ("FileName").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileContentInfo->FileName, utf8string);
                v8::Local<v8::String> FileNameValue = Nan::New<v8::String> (pRtnFileContentInfo->FileName).ToLocalChecked();
                pRtnFileContentInfoJS->Set(Local<v8::Value> (FileName), Local<v8::Value>(FileNameValue));

                v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileContentInfo->FileContent, utf8string);
                v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (pRtnFileContentInfo->FileContent).ToLocalChecked();
                pRtnFileContentInfoJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnFileContentInfo) { 
                params[0] = Local<v8::Value>(pRtnFileContentInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnFileContentInfo) { 
            delete[] pRtnFileContentInfo;
            pRtnFileContentInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnFileContentInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryConnectionInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryConnectionInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryConnectionInfoTopic_trans_callbackNumb: ", g_RspQryConnectionInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryConnectionInfoTopic_mutex);

    int dataNumb = g_RspQryConnectionInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryConnectionInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryConnectionInfoTopic_trans_dataNumb: ", g_RspQryConnectionInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryConnectionInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryConnectionInfoTopic_queue.front());
        g_RspQryConnectionInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryConnectionInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryConnectionInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryConnectionInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryConnectionInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryConnectionInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryConnectionInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryConnectionInfoField* pRspQryConnectionInfo = (CShfeFtdcRspQryConnectionInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryConnectionInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryConnectionInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectionInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryConnectionInfo->ObjectID).ToLocalChecked();
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectionInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryConnectionInfo->MonDate).ToLocalChecked();
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectionInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryConnectionInfo->MonTime).ToLocalChecked();
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ServiceName = Nan::New<v8::String> ("ServiceName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectionInfo->ServiceName, utf8string);
                v8::Local<v8::String> ServiceNameValue = Nan::New<v8::String> (pRspQryConnectionInfo->ServiceName).ToLocalChecked();
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (ServiceName), Local<v8::Value>(ServiceNameValue));

                v8::Local<v8::String> Stage = Nan::New<v8::String> ("Stage").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectionInfo->Stage, utf8string);
                v8::Local<v8::String> StageValue = Nan::New<v8::String> (pRspQryConnectionInfo->Stage).ToLocalChecked();
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (Stage), Local<v8::Value>(StageValue));

                v8::Local<v8::String> RequestCount = Nan::New<v8::String> ("RequestCount").ToLocalChecked();
                v8::Local<v8::Number> RequestCountValue = Nan::New<v8::Number> (pRspQryConnectionInfo->RequestCount);
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (RequestCount), Local<v8::Value>(RequestCountValue));

                v8::Local<v8::String> ErrorCount = Nan::New<v8::String> ("ErrorCount").ToLocalChecked();
                v8::Local<v8::Number> ErrorCountValue = Nan::New<v8::Number> (pRspQryConnectionInfo->ErrorCount);
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (ErrorCount), Local<v8::Value>(ErrorCountValue));

                v8::Local<v8::String> ProcTime = Nan::New<v8::String> ("ProcTime").ToLocalChecked();
                v8::Local<v8::Number> ProcTimeValue = Nan::New<v8::Number> (pRspQryConnectionInfo->ProcTime);
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (ProcTime), Local<v8::Value>(ProcTimeValue));

                v8::Local<v8::String> BytesReceived = Nan::New<v8::String> ("BytesReceived").ToLocalChecked();
                v8::Local<v8::Number> BytesReceivedValue = Nan::New<v8::Number> (pRspQryConnectionInfo->BytesReceived);
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (BytesReceived), Local<v8::Value>(BytesReceivedValue));

                v8::Local<v8::String> BytesSent = Nan::New<v8::String> ("BytesSent").ToLocalChecked();
                v8::Local<v8::Number> BytesSentValue = Nan::New<v8::Number> (pRspQryConnectionInfo->BytesSent);
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (BytesSent), Local<v8::Value>(BytesSentValue));

                v8::Local<v8::String> RemoteIP = Nan::New<v8::String> ("RemoteIP").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectionInfo->RemoteIP, utf8string);
                v8::Local<v8::String> RemoteIPValue = Nan::New<v8::String> (pRspQryConnectionInfo->RemoteIP).ToLocalChecked();
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (RemoteIP), Local<v8::Value>(RemoteIPValue));

                v8::Local<v8::String> MaxAccessURI = Nan::New<v8::String> ("MaxAccessURI").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectionInfo->MaxAccessURI, utf8string);
                v8::Local<v8::String> MaxAccessURIValue = Nan::New<v8::String> (pRspQryConnectionInfo->MaxAccessURI).ToLocalChecked();
                pRspQryConnectionInfoJS->Set(Local<v8::Value> (MaxAccessURI), Local<v8::Value>(MaxAccessURIValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryConnectionInfo) { 
                params[0] = Local<v8::Value>(pRspQryConnectionInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryConnectionInfo) { 
            delete[] pRspQryConnectionInfo;
            pRspQryConnectionInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryConnectionInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnConnectionInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnConnectionInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnConnectionInfoTopic_trans_callbackNumb: ", g_RtnConnectionInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnConnectionInfoTopic_mutex);

    int dataNumb = g_RtnConnectionInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnConnectionInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnConnectionInfoTopic_trans_dataNumb: ", g_RtnConnectionInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnConnectionInfoTopic_queue.empty()) {
        receivedData.push (g_RtnConnectionInfoTopic_queue.front());
        g_RtnConnectionInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnConnectionInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnConnectionInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnConnectionInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnConnectionInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnConnectionInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnConnectionInfoTopic").ToLocalChecked());

        CShfeFtdcRtnConnectionInfoField* pRtnConnectionInfo = (CShfeFtdcRtnConnectionInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnConnectionInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnConnectionInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectionInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnConnectionInfo->ObjectID).ToLocalChecked();
                pRtnConnectionInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectionInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnConnectionInfo->MonDate).ToLocalChecked();
                pRtnConnectionInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectionInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnConnectionInfo->MonTime).ToLocalChecked();
                pRtnConnectionInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ServiceName = Nan::New<v8::String> ("ServiceName").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectionInfo->ServiceName, utf8string);
                v8::Local<v8::String> ServiceNameValue = Nan::New<v8::String> (pRtnConnectionInfo->ServiceName).ToLocalChecked();
                pRtnConnectionInfoJS->Set(Local<v8::Value> (ServiceName), Local<v8::Value>(ServiceNameValue));

                v8::Local<v8::String> Stage = Nan::New<v8::String> ("Stage").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectionInfo->Stage, utf8string);
                v8::Local<v8::String> StageValue = Nan::New<v8::String> (pRtnConnectionInfo->Stage).ToLocalChecked();
                pRtnConnectionInfoJS->Set(Local<v8::Value> (Stage), Local<v8::Value>(StageValue));

                v8::Local<v8::String> RequestCount = Nan::New<v8::String> ("RequestCount").ToLocalChecked();
                v8::Local<v8::Number> RequestCountValue = Nan::New<v8::Number> (pRtnConnectionInfo->RequestCount);
                pRtnConnectionInfoJS->Set(Local<v8::Value> (RequestCount), Local<v8::Value>(RequestCountValue));

                v8::Local<v8::String> ErrorCount = Nan::New<v8::String> ("ErrorCount").ToLocalChecked();
                v8::Local<v8::Number> ErrorCountValue = Nan::New<v8::Number> (pRtnConnectionInfo->ErrorCount);
                pRtnConnectionInfoJS->Set(Local<v8::Value> (ErrorCount), Local<v8::Value>(ErrorCountValue));

                v8::Local<v8::String> ProcTime = Nan::New<v8::String> ("ProcTime").ToLocalChecked();
                v8::Local<v8::Number> ProcTimeValue = Nan::New<v8::Number> (pRtnConnectionInfo->ProcTime);
                pRtnConnectionInfoJS->Set(Local<v8::Value> (ProcTime), Local<v8::Value>(ProcTimeValue));

                v8::Local<v8::String> BytesReceived = Nan::New<v8::String> ("BytesReceived").ToLocalChecked();
                v8::Local<v8::Number> BytesReceivedValue = Nan::New<v8::Number> (pRtnConnectionInfo->BytesReceived);
                pRtnConnectionInfoJS->Set(Local<v8::Value> (BytesReceived), Local<v8::Value>(BytesReceivedValue));

                v8::Local<v8::String> BytesSent = Nan::New<v8::String> ("BytesSent").ToLocalChecked();
                v8::Local<v8::Number> BytesSentValue = Nan::New<v8::Number> (pRtnConnectionInfo->BytesSent);
                pRtnConnectionInfoJS->Set(Local<v8::Value> (BytesSent), Local<v8::Value>(BytesSentValue));

                v8::Local<v8::String> RemoteIP = Nan::New<v8::String> ("RemoteIP").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectionInfo->RemoteIP, utf8string);
                v8::Local<v8::String> RemoteIPValue = Nan::New<v8::String> (pRtnConnectionInfo->RemoteIP).ToLocalChecked();
                pRtnConnectionInfoJS->Set(Local<v8::Value> (RemoteIP), Local<v8::Value>(RemoteIPValue));

                v8::Local<v8::String> MaxAccessURI = Nan::New<v8::String> ("MaxAccessURI").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectionInfo->MaxAccessURI, utf8string);
                v8::Local<v8::String> MaxAccessURIValue = Nan::New<v8::String> (pRtnConnectionInfo->MaxAccessURI).ToLocalChecked();
                pRtnConnectionInfoJS->Set(Local<v8::Value> (MaxAccessURI), Local<v8::Value>(MaxAccessURIValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnConnectionInfo) { 
                params[0] = Local<v8::Value>(pRtnConnectionInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnConnectionInfo) { 
            delete[] pRtnConnectionInfo;
            pRtnConnectionInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnConnectionInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryConnectorInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryConnectorInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryConnectorInfoTopic_trans_callbackNumb: ", g_RspQryConnectorInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryConnectorInfoTopic_mutex);

    int dataNumb = g_RspQryConnectorInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryConnectorInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryConnectorInfoTopic_trans_dataNumb: ", g_RspQryConnectorInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryConnectorInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryConnectorInfoTopic_queue.front());
        g_RspQryConnectorInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryConnectorInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryConnectorInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryConnectorInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryConnectorInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryConnectorInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryConnectorInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryConnectorInfoField* pRspQryConnectorInfo = (CShfeFtdcRspQryConnectorInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryConnectorInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryConnectorInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryConnectorInfo->ObjectID).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryConnectorInfo->MonDate).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryConnectorInfo->MonTime).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRspQryConnectorInfo->Name).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> ThreadsCount = Nan::New<v8::String> ("ThreadsCount").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->ThreadsCount, utf8string);
                v8::Local<v8::String> ThreadsCountValue = Nan::New<v8::String> (pRspQryConnectorInfo->ThreadsCount).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (ThreadsCount), Local<v8::Value>(ThreadsCountValue));

                v8::Local<v8::String> BusyThreadsCount = Nan::New<v8::String> ("BusyThreadsCount").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->BusyThreadsCount, utf8string);
                v8::Local<v8::String> BusyThreadsCountValue = Nan::New<v8::String> (pRspQryConnectorInfo->BusyThreadsCount).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (BusyThreadsCount), Local<v8::Value>(BusyThreadsCountValue));

                v8::Local<v8::String> MaxThreads = Nan::New<v8::String> ("MaxThreads").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->MaxThreads, utf8string);
                v8::Local<v8::String> MaxThreadsValue = Nan::New<v8::String> (pRspQryConnectorInfo->MaxThreads).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (MaxThreads), Local<v8::Value>(MaxThreadsValue));

                v8::Local<v8::String> MaxSpareThreads = Nan::New<v8::String> ("MaxSpareThreads").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->MaxSpareThreads, utf8string);
                v8::Local<v8::String> MaxSpareThreadsValue = Nan::New<v8::String> (pRspQryConnectorInfo->MaxSpareThreads).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (MaxSpareThreads), Local<v8::Value>(MaxSpareThreadsValue));

                v8::Local<v8::String> MinSpareThreads = Nan::New<v8::String> ("MinSpareThreads").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->MinSpareThreads, utf8string);
                v8::Local<v8::String> MinSpareThreadsValue = Nan::New<v8::String> (pRspQryConnectorInfo->MinSpareThreads).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (MinSpareThreads), Local<v8::Value>(MinSpareThreadsValue));

                v8::Local<v8::String> MaxTime = Nan::New<v8::String> ("MaxTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->MaxTime, utf8string);
                v8::Local<v8::String> MaxTimeValue = Nan::New<v8::String> (pRspQryConnectorInfo->MaxTime).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (MaxTime), Local<v8::Value>(MaxTimeValue));

                v8::Local<v8::String> MaxProcTime = Nan::New<v8::String> ("MaxProcTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->MaxProcTime, utf8string);
                v8::Local<v8::String> MaxProcTimeValue = Nan::New<v8::String> (pRspQryConnectorInfo->MaxProcTime).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (MaxProcTime), Local<v8::Value>(MaxProcTimeValue));

                v8::Local<v8::String> RequestCount = Nan::New<v8::String> ("RequestCount").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->RequestCount, utf8string);
                v8::Local<v8::String> RequestCountValue = Nan::New<v8::String> (pRspQryConnectorInfo->RequestCount).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (RequestCount), Local<v8::Value>(RequestCountValue));

                v8::Local<v8::String> ErrorCount = Nan::New<v8::String> ("ErrorCount").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->ErrorCount, utf8string);
                v8::Local<v8::String> ErrorCountValue = Nan::New<v8::String> (pRspQryConnectorInfo->ErrorCount).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (ErrorCount), Local<v8::Value>(ErrorCountValue));

                v8::Local<v8::String> BytesReceived = Nan::New<v8::String> ("BytesReceived").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->BytesReceived, utf8string);
                v8::Local<v8::String> BytesReceivedValue = Nan::New<v8::String> (pRspQryConnectorInfo->BytesReceived).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (BytesReceived), Local<v8::Value>(BytesReceivedValue));

                v8::Local<v8::String> BytesSent = Nan::New<v8::String> ("BytesSent").ToLocalChecked();
                Gb2312ToUtf8(pRspQryConnectorInfo->BytesSent, utf8string);
                v8::Local<v8::String> BytesSentValue = Nan::New<v8::String> (pRspQryConnectorInfo->BytesSent).ToLocalChecked();
                pRspQryConnectorInfoJS->Set(Local<v8::Value> (BytesSent), Local<v8::Value>(BytesSentValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryConnectorInfo) { 
                params[0] = Local<v8::Value>(pRspQryConnectorInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryConnectorInfo) { 
            delete[] pRspQryConnectorInfo;
            pRspQryConnectorInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryConnectorInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnConnectorInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnConnectorInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnConnectorInfoTopic_trans_callbackNumb: ", g_RtnConnectorInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnConnectorInfoTopic_mutex);

    int dataNumb = g_RtnConnectorInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnConnectorInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnConnectorInfoTopic_trans_dataNumb: ", g_RtnConnectorInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnConnectorInfoTopic_queue.empty()) {
        receivedData.push (g_RtnConnectorInfoTopic_queue.front());
        g_RtnConnectorInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnConnectorInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnConnectorInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnConnectorInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnConnectorInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnConnectorInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnConnectorInfoTopic").ToLocalChecked());

        CShfeFtdcRtnConnectorInfoField* pRtnConnectorInfo = (CShfeFtdcRtnConnectorInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnConnectorInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnConnectorInfo) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnConnectorInfo->ObjectID).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnConnectorInfo->MonDate).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnConnectorInfo->MonTime).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRtnConnectorInfo->Name).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> ThreadsCount = Nan::New<v8::String> ("ThreadsCount").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->ThreadsCount, utf8string);
                v8::Local<v8::String> ThreadsCountValue = Nan::New<v8::String> (pRtnConnectorInfo->ThreadsCount).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (ThreadsCount), Local<v8::Value>(ThreadsCountValue));

                v8::Local<v8::String> BusyThreadsCount = Nan::New<v8::String> ("BusyThreadsCount").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->BusyThreadsCount, utf8string);
                v8::Local<v8::String> BusyThreadsCountValue = Nan::New<v8::String> (pRtnConnectorInfo->BusyThreadsCount).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (BusyThreadsCount), Local<v8::Value>(BusyThreadsCountValue));

                v8::Local<v8::String> MaxThreads = Nan::New<v8::String> ("MaxThreads").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->MaxThreads, utf8string);
                v8::Local<v8::String> MaxThreadsValue = Nan::New<v8::String> (pRtnConnectorInfo->MaxThreads).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (MaxThreads), Local<v8::Value>(MaxThreadsValue));

                v8::Local<v8::String> MaxSpareThreads = Nan::New<v8::String> ("MaxSpareThreads").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->MaxSpareThreads, utf8string);
                v8::Local<v8::String> MaxSpareThreadsValue = Nan::New<v8::String> (pRtnConnectorInfo->MaxSpareThreads).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (MaxSpareThreads), Local<v8::Value>(MaxSpareThreadsValue));

                v8::Local<v8::String> MinSpareThreads = Nan::New<v8::String> ("MinSpareThreads").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->MinSpareThreads, utf8string);
                v8::Local<v8::String> MinSpareThreadsValue = Nan::New<v8::String> (pRtnConnectorInfo->MinSpareThreads).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (MinSpareThreads), Local<v8::Value>(MinSpareThreadsValue));

                v8::Local<v8::String> MaxTime = Nan::New<v8::String> ("MaxTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->MaxTime, utf8string);
                v8::Local<v8::String> MaxTimeValue = Nan::New<v8::String> (pRtnConnectorInfo->MaxTime).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (MaxTime), Local<v8::Value>(MaxTimeValue));

                v8::Local<v8::String> MaxProcTime = Nan::New<v8::String> ("MaxProcTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->MaxProcTime, utf8string);
                v8::Local<v8::String> MaxProcTimeValue = Nan::New<v8::String> (pRtnConnectorInfo->MaxProcTime).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (MaxProcTime), Local<v8::Value>(MaxProcTimeValue));

                v8::Local<v8::String> RequestCount = Nan::New<v8::String> ("RequestCount").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->RequestCount, utf8string);
                v8::Local<v8::String> RequestCountValue = Nan::New<v8::String> (pRtnConnectorInfo->RequestCount).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (RequestCount), Local<v8::Value>(RequestCountValue));

                v8::Local<v8::String> ErrorCount = Nan::New<v8::String> ("ErrorCount").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->ErrorCount, utf8string);
                v8::Local<v8::String> ErrorCountValue = Nan::New<v8::String> (pRtnConnectorInfo->ErrorCount).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (ErrorCount), Local<v8::Value>(ErrorCountValue));

                v8::Local<v8::String> BytesReceived = Nan::New<v8::String> ("BytesReceived").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->BytesReceived, utf8string);
                v8::Local<v8::String> BytesReceivedValue = Nan::New<v8::String> (pRtnConnectorInfo->BytesReceived).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (BytesReceived), Local<v8::Value>(BytesReceivedValue));

                v8::Local<v8::String> BytesSent = Nan::New<v8::String> ("BytesSent").ToLocalChecked();
                Gb2312ToUtf8(pRtnConnectorInfo->BytesSent, utf8string);
                v8::Local<v8::String> BytesSentValue = Nan::New<v8::String> (pRtnConnectorInfo->BytesSent).ToLocalChecked();
                pRtnConnectorInfoJS->Set(Local<v8::Value> (BytesSent), Local<v8::Value>(BytesSentValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnConnectorInfo) { 
                params[0] = Local<v8::Value>(pRtnConnectorInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnConnectorInfo) { 
            delete[] pRtnConnectorInfo;
            pRtnConnectorInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnConnectorInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryDBQueryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryDBQueryTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryDBQueryTopic_trans_callbackNumb: ", g_RspQryDBQueryTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryDBQueryTopic_mutex);

    int dataNumb = g_RspQryDBQueryTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryDBQueryTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryDBQueryTopic_trans_dataNumb: ", g_RspQryDBQueryTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryDBQueryTopic_queue.empty()) {
        receivedData.push (g_RspQryDBQueryTopic_queue.front());
        g_RspQryDBQueryTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryDBQueryTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryDBQueryTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryDBQueryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryDBQueryTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryDBQueryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryDBQueryTopic").ToLocalChecked());

        CShfeFtdcRspQryDBQueryField* pRspQryDBQuery = (CShfeFtdcRspQryDBQueryField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryDBQueryJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryDBQuery) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDBQuery->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryDBQuery->ObjectID).ToLocalChecked();
                pRspQryDBQueryJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDBQuery->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRspQryDBQuery->AttrType).ToLocalChecked();
                pRspQryDBQueryJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDBQuery->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryDBQuery->MonDate).ToLocalChecked();
                pRspQryDBQueryJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDBQuery->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryDBQuery->MonTime).ToLocalChecked();
                pRspQryDBQueryJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> DBQueryResult = Nan::New<v8::String> ("DBQueryResult").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDBQuery->DBQueryResult, utf8string);
                v8::Local<v8::String> DBQueryResultValue = Nan::New<v8::String> (pRspQryDBQuery->DBQueryResult).ToLocalChecked();
                pRspQryDBQueryJS->Set(Local<v8::Value> (DBQueryResult), Local<v8::Value>(DBQueryResultValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryDBQuery) { 
                params[0] = Local<v8::Value>(pRspQryDBQueryJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryDBQuery) { 
            delete[] pRspQryDBQuery;
            pRspQryDBQuery = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryDBQueryTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnDBQueryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnDBQueryTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnDBQueryTopic_trans_callbackNumb: ", g_RtnDBQueryTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnDBQueryTopic_mutex);

    int dataNumb = g_RtnDBQueryTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnDBQueryTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnDBQueryTopic_trans_dataNumb: ", g_RtnDBQueryTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnDBQueryTopic_queue.empty()) {
        receivedData.push (g_RtnDBQueryTopic_queue.front());
        g_RtnDBQueryTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnDBQueryTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnDBQueryTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnDBQueryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnDBQueryTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnDBQueryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnDBQueryTopic").ToLocalChecked());

        CShfeFtdcRtnDBQueryField* pRtnDBQuery = (CShfeFtdcRtnDBQueryField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnDBQueryJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnDBQuery) { 
                string utf8string;
                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnDBQuery->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnDBQuery->ObjectID).ToLocalChecked();
                pRtnDBQueryJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRtnDBQuery->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRtnDBQuery->AttrType).ToLocalChecked();
                pRtnDBQueryJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnDBQuery->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnDBQuery->MonDate).ToLocalChecked();
                pRtnDBQueryJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnDBQuery->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnDBQuery->MonTime).ToLocalChecked();
                pRtnDBQueryJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> DBQueryResult = Nan::New<v8::String> ("DBQueryResult").ToLocalChecked();
                Gb2312ToUtf8(pRtnDBQuery->DBQueryResult, utf8string);
                v8::Local<v8::String> DBQueryResultValue = Nan::New<v8::String> (pRtnDBQuery->DBQueryResult).ToLocalChecked();
                pRtnDBQueryJS->Set(Local<v8::Value> (DBQueryResult), Local<v8::Value>(DBQueryResultValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnDBQuery) { 
                params[0] = Local<v8::Value>(pRtnDBQueryJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnDBQuery) { 
            delete[] pRtnDBQuery;
            pRtnDBQuery = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnDBQueryTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryGeneralFieldTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryGeneralFieldTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryGeneralFieldTopic_trans_callbackNumb: ", g_RspQryGeneralFieldTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryGeneralFieldTopic_mutex);

    int dataNumb = g_RspQryGeneralFieldTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryGeneralFieldTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryGeneralFieldTopic_trans_dataNumb: ", g_RspQryGeneralFieldTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryGeneralFieldTopic_queue.empty()) {
        receivedData.push (g_RspQryGeneralFieldTopic_queue.front());
        g_RspQryGeneralFieldTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryGeneralFieldTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryGeneralFieldTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryGeneralFieldTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryGeneralFieldTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryGeneralFieldTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryGeneralFieldTopic").ToLocalChecked());

        CShfeFtdcSysGeneralFieldField* pSysGeneralField = (CShfeFtdcSysGeneralFieldField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pSysGeneralFieldJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pSysGeneralField) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pSysGeneralField->MonDate).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pSysGeneralField->MonTime).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pSysGeneralField->ObjectID).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> SubObjectID = Nan::New<v8::String> ("SubObjectID").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->SubObjectID, utf8string);
                v8::Local<v8::String> SubObjectIDValue = Nan::New<v8::String> (pSysGeneralField->SubObjectID).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (SubObjectID), Local<v8::Value>(SubObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pSysGeneralField->AttrType).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> Content = Nan::New<v8::String> ("Content").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->Content, utf8string);
                v8::Local<v8::String> ContentValue = Nan::New<v8::String> (pSysGeneralField->Content).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (Content), Local<v8::Value>(ContentValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pSysGeneralField) { 
                params[0] = Local<v8::Value>(pSysGeneralFieldJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pSysGeneralField) { 
            delete[] pSysGeneralField;
            pSysGeneralField = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryGeneralFieldTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnGeneralFieldTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnGeneralFieldTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnGeneralFieldTopic_trans_callbackNumb: ", g_RtnGeneralFieldTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnGeneralFieldTopic_mutex);

    int dataNumb = g_RtnGeneralFieldTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnGeneralFieldTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnGeneralFieldTopic_trans_dataNumb: ", g_RtnGeneralFieldTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnGeneralFieldTopic_queue.empty()) {
        receivedData.push (g_RtnGeneralFieldTopic_queue.front());
        g_RtnGeneralFieldTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnGeneralFieldTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnGeneralFieldTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnGeneralFieldTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnGeneralFieldTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnGeneralFieldTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnGeneralFieldTopic").ToLocalChecked());

        CShfeFtdcSysGeneralFieldField* pSysGeneralField = (CShfeFtdcSysGeneralFieldField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pSysGeneralFieldJS = Nan::New<v8::Object>();
            
            if (NULL != pSysGeneralField) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pSysGeneralField->MonDate).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pSysGeneralField->MonTime).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pSysGeneralField->ObjectID).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> SubObjectID = Nan::New<v8::String> ("SubObjectID").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->SubObjectID, utf8string);
                v8::Local<v8::String> SubObjectIDValue = Nan::New<v8::String> (pSysGeneralField->SubObjectID).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (SubObjectID), Local<v8::Value>(SubObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pSysGeneralField->AttrType).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> Content = Nan::New<v8::String> ("Content").ToLocalChecked();
                Gb2312ToUtf8(pSysGeneralField->Content, utf8string);
                v8::Local<v8::String> ContentValue = Nan::New<v8::String> (pSysGeneralField->Content).ToLocalChecked();
                pSysGeneralFieldJS->Set(Local<v8::Value> (Content), Local<v8::Value>(ContentValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pSysGeneralField) { 
                params[0] = Local<v8::Value>(pSysGeneralFieldJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pSysGeneralField) { 
            delete[] pSysGeneralField;
            pSysGeneralField = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnGeneralFieldTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryGetFileTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryGetFileTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryGetFileTopic_trans_callbackNumb: ", g_RspQryGetFileTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryGetFileTopic_mutex);

    int dataNumb = g_RspQryGetFileTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryGetFileTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryGetFileTopic_trans_dataNumb: ", g_RspQryGetFileTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryGetFileTopic_queue.empty()) {
        receivedData.push (g_RspQryGetFileTopic_queue.front());
        g_RspQryGetFileTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryGetFileTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryGetFileTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryGetFileTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryGetFileTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryGetFileTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryGetFileTopic").ToLocalChecked());

        CShfeFtdcRspQryGetFileField* pRspQryGetFile = (CShfeFtdcRspQryGetFileField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryGetFileJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryGetFile) { 
                string utf8string;
                v8::Local<v8::String> FileName = Nan::New<v8::String> ("FileName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryGetFile->FileName, utf8string);
                v8::Local<v8::String> FileNameValue = Nan::New<v8::String> (pRspQryGetFile->FileName).ToLocalChecked();
                pRspQryGetFileJS->Set(Local<v8::Value> (FileName), Local<v8::Value>(FileNameValue));

                v8::Local<v8::String> Version = Nan::New<v8::String> ("Version").ToLocalChecked();
                Gb2312ToUtf8(pRspQryGetFile->Version, utf8string);
                v8::Local<v8::String> VersionValue = Nan::New<v8::String> (pRspQryGetFile->Version).ToLocalChecked();
                pRspQryGetFileJS->Set(Local<v8::Value> (Version), Local<v8::Value>(VersionValue));

                v8::Local<v8::String> Offset = Nan::New<v8::String> ("Offset").ToLocalChecked();
                v8::Local<v8::Integer> OffsetValue = Nan::New<v8::Integer> (pRspQryGetFile->Offset);
                pRspQryGetFileJS->Set(Local<v8::Value> (Offset), Local<v8::Value>(OffsetValue));

                v8::Local<v8::String> Length = Nan::New<v8::String> ("Length").ToLocalChecked();
                v8::Local<v8::Integer> LengthValue = Nan::New<v8::Integer> (pRspQryGetFile->Length);
                pRspQryGetFileJS->Set(Local<v8::Value> (Length), Local<v8::Value>(LengthValue));

                v8::Local<v8::String> Comment = Nan::New<v8::String> ("Comment").ToLocalChecked();
                Gb2312ToUtf8(pRspQryGetFile->Comment, utf8string);
                v8::Local<v8::String> CommentValue = Nan::New<v8::String> (pRspQryGetFile->Comment).ToLocalChecked();
                pRspQryGetFileJS->Set(Local<v8::Value> (Comment), Local<v8::Value>(CommentValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryGetFile) { 
                params[0] = Local<v8::Value>(pRspQryGetFileJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryGetFile) { 
            delete[] pRspQryGetFile;
            pRspQryGetFile = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryGetFileTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryWarningQueryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryWarningQueryTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryWarningQueryTopic_trans_callbackNumb: ", g_RspQryWarningQueryTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryWarningQueryTopic_mutex);

    int dataNumb = g_RspQryWarningQueryTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryWarningQueryTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryWarningQueryTopic_trans_dataNumb: ", g_RspQryWarningQueryTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryWarningQueryTopic_queue.empty()) {
        receivedData.push (g_RspQryWarningQueryTopic_queue.front());
        g_RspQryWarningQueryTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryWarningQueryTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryWarningQueryTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryWarningQueryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryWarningQueryTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryWarningQueryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryWarningQueryTopic").ToLocalChecked());

        CShfeFtdcRspQryWarningQueryField* pRspQryWarningQuery = (CShfeFtdcRspQryWarningQueryField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryWarningQueryJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryWarningQuery) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningQuery->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryWarningQuery->MonDate).ToLocalChecked();
                pRspQryWarningQueryJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningQuery->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryWarningQuery->MonTime).ToLocalChecked();
                pRspQryWarningQueryJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRspQryWarningQuery->EvendID);
                pRspQryWarningQueryJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                v8::Local<v8::String> DBQueryResult = Nan::New<v8::String> ("DBQueryResult").ToLocalChecked();
                Gb2312ToUtf8(pRspQryWarningQuery->DBQueryResult, utf8string);
                v8::Local<v8::String> DBQueryResultValue = Nan::New<v8::String> (pRspQryWarningQuery->DBQueryResult).ToLocalChecked();
                pRspQryWarningQueryJS->Set(Local<v8::Value> (DBQueryResult), Local<v8::Value>(DBQueryResultValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryWarningQuery) { 
                params[0] = Local<v8::Value>(pRspQryWarningQueryJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryWarningQuery) { 
            delete[] pRspQryWarningQuery;
            pRspQryWarningQuery = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryWarningQueryTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnWarningQueryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnWarningQueryTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnWarningQueryTopic_trans_callbackNumb: ", g_RtnWarningQueryTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnWarningQueryTopic_mutex);

    int dataNumb = g_RtnWarningQueryTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnWarningQueryTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnWarningQueryTopic_trans_dataNumb: ", g_RtnWarningQueryTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnWarningQueryTopic_queue.empty()) {
        receivedData.push (g_RtnWarningQueryTopic_queue.front());
        g_RtnWarningQueryTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnWarningQueryTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnWarningQueryTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnWarningQueryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnWarningQueryTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnWarningQueryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnWarningQueryTopic").ToLocalChecked());

        CShfeFtdcRtnWarningQueryField* pRtnWarningQuery = (CShfeFtdcRtnWarningQueryField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnWarningQueryJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnWarningQuery) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningQuery->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnWarningQuery->MonDate).ToLocalChecked();
                pRtnWarningQueryJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningQuery->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnWarningQuery->MonTime).ToLocalChecked();
                pRtnWarningQueryJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRtnWarningQuery->EvendID);
                pRtnWarningQueryJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                v8::Local<v8::String> DBQueryResult = Nan::New<v8::String> ("DBQueryResult").ToLocalChecked();
                Gb2312ToUtf8(pRtnWarningQuery->DBQueryResult, utf8string);
                v8::Local<v8::String> DBQueryResultValue = Nan::New<v8::String> (pRtnWarningQuery->DBQueryResult).ToLocalChecked();
                pRtnWarningQueryJS->Set(Local<v8::Value> (DBQueryResult), Local<v8::Value>(DBQueryResultValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnWarningQuery) { 
                params[0] = Local<v8::Value>(pRtnWarningQueryJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnWarningQuery) { 
            delete[] pRtnWarningQuery;
            pRtnWarningQuery = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnWarningQueryTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnHostConfig (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnHostConfig: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnHostConfig_trans_callbackNumb: ", g_RtnHostConfig_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnHostConfig_mutex);

    int dataNumb = g_RtnHostConfig_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnHostConfig_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnHostConfig_trans_dataNumb: ", g_RtnHostConfig_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnHostConfig_queue.empty()) {
        receivedData.push (g_RtnHostConfig_queue.front());
        g_RtnHostConfig_queue.pop();
    }
    uv_mutex_unlock (&g_RtnHostConfig_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnHostConfig paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnHostConfig: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnHostConfigSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnHostConfig: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnHostConfig").ToLocalChecked());

        CShfeFtdcRtnHostConfigField* pRtnHostConfig = (CShfeFtdcRtnHostConfigField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnHostConfigJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnHostConfig) { 
                string utf8string;
                v8::Local<v8::String> CfgType = Nan::New<v8::String> ("CfgType").ToLocalChecked();
                Gb2312ToUtf8(pRtnHostConfig->CfgType, utf8string);
                v8::Local<v8::String> CfgTypeValue = Nan::New<v8::String> (pRtnHostConfig->CfgType).ToLocalChecked();
                pRtnHostConfigJS->Set(Local<v8::Value> (CfgType), Local<v8::Value>(CfgTypeValue));

                v8::Local<v8::String> CfgDataCenter = Nan::New<v8::String> ("CfgDataCenter").ToLocalChecked();
                Gb2312ToUtf8(pRtnHostConfig->CfgDataCenter, utf8string);
                v8::Local<v8::String> CfgDataCenterValue = Nan::New<v8::String> (pRtnHostConfig->CfgDataCenter).ToLocalChecked();
                pRtnHostConfigJS->Set(Local<v8::Value> (CfgDataCenter), Local<v8::Value>(CfgDataCenterValue));

                v8::Local<v8::String> CfgName = Nan::New<v8::String> ("CfgName").ToLocalChecked();
                Gb2312ToUtf8(pRtnHostConfig->CfgName, utf8string);
                v8::Local<v8::String> CfgNameValue = Nan::New<v8::String> (pRtnHostConfig->CfgName).ToLocalChecked();
                pRtnHostConfigJS->Set(Local<v8::Value> (CfgName), Local<v8::Value>(CfgNameValue));

                v8::Local<v8::String> CfgLocation = Nan::New<v8::String> ("CfgLocation").ToLocalChecked();
                Gb2312ToUtf8(pRtnHostConfig->CfgLocation, utf8string);
                v8::Local<v8::String> CfgLocationValue = Nan::New<v8::String> (pRtnHostConfig->CfgLocation).ToLocalChecked();
                pRtnHostConfigJS->Set(Local<v8::Value> (CfgLocation), Local<v8::Value>(CfgLocationValue));

                v8::Local<v8::String> CfgHostName = Nan::New<v8::String> ("CfgHostName").ToLocalChecked();
                Gb2312ToUtf8(pRtnHostConfig->CfgHostName, utf8string);
                v8::Local<v8::String> CfgHostNameValue = Nan::New<v8::String> (pRtnHostConfig->CfgHostName).ToLocalChecked();
                pRtnHostConfigJS->Set(Local<v8::Value> (CfgHostName), Local<v8::Value>(CfgHostNameValue));

                v8::Local<v8::String> CfgAttend = Nan::New<v8::String> ("CfgAttend").ToLocalChecked();
                Gb2312ToUtf8(pRtnHostConfig->CfgAttend, utf8string);
                v8::Local<v8::String> CfgAttendValue = Nan::New<v8::String> (pRtnHostConfig->CfgAttend).ToLocalChecked();
                pRtnHostConfigJS->Set(Local<v8::Value> (CfgAttend), Local<v8::Value>(CfgAttendValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnHostConfig) { 
                params[0] = Local<v8::Value>(pRtnHostConfigJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnHostConfig) { 
            delete[] pRtnHostConfig;
            pRtnHostConfig = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnHostConfig: END! ******\n", g_RunningResult_File);
}

void OnRspQryGeneralOperateTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryGeneralOperateTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryGeneralOperateTopic_trans_callbackNumb: ", g_RspQryGeneralOperateTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryGeneralOperateTopic_mutex);

    int dataNumb = g_RspQryGeneralOperateTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryGeneralOperateTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryGeneralOperateTopic_trans_dataNumb: ", g_RspQryGeneralOperateTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryGeneralOperateTopic_queue.empty()) {
        receivedData.push (g_RspQryGeneralOperateTopic_queue.front());
        g_RspQryGeneralOperateTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryGeneralOperateTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryGeneralOperateTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryGeneralOperateTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryGeneralOperateTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryGeneralOperateTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryGeneralOperateTopic").ToLocalChecked());

        CShfeFtdcRspQryGeneralOperateField* pRspQryGeneralOperate = (CShfeFtdcRspQryGeneralOperateField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryGeneralOperateJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryGeneralOperate) { 
                string utf8string;
                v8::Local<v8::String> GeneralOperateType = Nan::New<v8::String> ("GeneralOperateType").ToLocalChecked();
                v8::Local<v8::Integer> GeneralOperateTypeValue = Nan::New<v8::Integer> (pRspQryGeneralOperate->GeneralOperateType);
                pRspQryGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateType), Local<v8::Value>(GeneralOperateTypeValue));

                v8::Local<v8::String> GeneralOperateTable = Nan::New<v8::String> ("GeneralOperateTable").ToLocalChecked();
                Gb2312ToUtf8(pRspQryGeneralOperate->GeneralOperateTable, utf8string);
                v8::Local<v8::String> GeneralOperateTableValue = Nan::New<v8::String> (pRspQryGeneralOperate->GeneralOperateTable).ToLocalChecked();
                pRspQryGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateTable), Local<v8::Value>(GeneralOperateTableValue));

                v8::Local<v8::String> GeneralOperateOption = Nan::New<v8::String> ("GeneralOperateOption").ToLocalChecked();
                Gb2312ToUtf8(pRspQryGeneralOperate->GeneralOperateOption, utf8string);
                v8::Local<v8::String> GeneralOperateOptionValue = Nan::New<v8::String> (pRspQryGeneralOperate->GeneralOperateOption).ToLocalChecked();
                pRspQryGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateOption), Local<v8::Value>(GeneralOperateOptionValue));

                v8::Local<v8::String> GeneralOperateSet = Nan::New<v8::String> ("GeneralOperateSet").ToLocalChecked();
                Gb2312ToUtf8(pRspQryGeneralOperate->GeneralOperateSet, utf8string);
                v8::Local<v8::String> GeneralOperateSetValue = Nan::New<v8::String> (pRspQryGeneralOperate->GeneralOperateSet).ToLocalChecked();
                pRspQryGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateSet), Local<v8::Value>(GeneralOperateSetValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryGeneralOperate) { 
                params[0] = Local<v8::Value>(pRspQryGeneralOperateJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryGeneralOperate) { 
            delete[] pRspQryGeneralOperate;
            pRspQryGeneralOperate = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryGeneralOperateTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnGeneralOperateTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnGeneralOperateTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnGeneralOperateTopic_trans_callbackNumb: ", g_RtnGeneralOperateTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnGeneralOperateTopic_mutex);

    int dataNumb = g_RtnGeneralOperateTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnGeneralOperateTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnGeneralOperateTopic_trans_dataNumb: ", g_RtnGeneralOperateTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnGeneralOperateTopic_queue.empty()) {
        receivedData.push (g_RtnGeneralOperateTopic_queue.front());
        g_RtnGeneralOperateTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnGeneralOperateTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnGeneralOperateTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnGeneralOperateTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnGeneralOperateTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnGeneralOperateTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnGeneralOperateTopic").ToLocalChecked());

        CShfeFtdcRtnGeneralOperateField* pRtnGeneralOperate = (CShfeFtdcRtnGeneralOperateField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnGeneralOperateJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnGeneralOperate) { 
                string utf8string;
                v8::Local<v8::String> GeneralOperateType = Nan::New<v8::String> ("GeneralOperateType").ToLocalChecked();
                v8::Local<v8::Integer> GeneralOperateTypeValue = Nan::New<v8::Integer> (pRtnGeneralOperate->GeneralOperateType);
                pRtnGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateType), Local<v8::Value>(GeneralOperateTypeValue));

                v8::Local<v8::String> GeneralOperateTable = Nan::New<v8::String> ("GeneralOperateTable").ToLocalChecked();
                Gb2312ToUtf8(pRtnGeneralOperate->GeneralOperateTable, utf8string);
                v8::Local<v8::String> GeneralOperateTableValue = Nan::New<v8::String> (pRtnGeneralOperate->GeneralOperateTable).ToLocalChecked();
                pRtnGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateTable), Local<v8::Value>(GeneralOperateTableValue));

                v8::Local<v8::String> GeneralOperateOption = Nan::New<v8::String> ("GeneralOperateOption").ToLocalChecked();
                Gb2312ToUtf8(pRtnGeneralOperate->GeneralOperateOption, utf8string);
                v8::Local<v8::String> GeneralOperateOptionValue = Nan::New<v8::String> (pRtnGeneralOperate->GeneralOperateOption).ToLocalChecked();
                pRtnGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateOption), Local<v8::Value>(GeneralOperateOptionValue));

                v8::Local<v8::String> GeneralOperateSet = Nan::New<v8::String> ("GeneralOperateSet").ToLocalChecked();
                Gb2312ToUtf8(pRtnGeneralOperate->GeneralOperateSet, utf8string);
                v8::Local<v8::String> GeneralOperateSetValue = Nan::New<v8::String> (pRtnGeneralOperate->GeneralOperateSet).ToLocalChecked();
                pRtnGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateSet), Local<v8::Value>(GeneralOperateSetValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnGeneralOperate) { 
                params[0] = Local<v8::Value>(pRtnGeneralOperateJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnGeneralOperate) { 
            delete[] pRtnGeneralOperate;
            pRtnGeneralOperate = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnGeneralOperateTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceLinkedTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetDeviceLinkedTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetDeviceLinkedTopic_trans_callbackNumb: ", g_RspQryNetDeviceLinkedTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetDeviceLinkedTopic_mutex);

    int dataNumb = g_RspQryNetDeviceLinkedTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetDeviceLinkedTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetDeviceLinkedTopic_trans_dataNumb: ", g_RspQryNetDeviceLinkedTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetDeviceLinkedTopic_queue.empty()) {
        receivedData.push (g_RspQryNetDeviceLinkedTopic_queue.front());
        g_RspQryNetDeviceLinkedTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetDeviceLinkedTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetDeviceLinkedTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceLinkedTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetDeviceLinkedTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceLinkedTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetDeviceLinkedTopic").ToLocalChecked());

        CShfeFtdcRspQryNetDeviceLinkedField* pRspQryNetDeviceLinked = (CShfeFtdcRspQryNetDeviceLinkedField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetDeviceLinkedJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetDeviceLinked) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->OperationType);
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->ID);
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> NetDeviceID = Nan::New<v8::String> ("NetDeviceID").ToLocalChecked();
                v8::Local<v8::Integer> NetDeviceIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->NetDeviceID);
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (NetDeviceID), Local<v8::Value>(NetDeviceIDValue));

                v8::Local<v8::String> NetPortID = Nan::New<v8::String> ("NetPortID").ToLocalChecked();
                v8::Local<v8::Integer> NetPortIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->NetPortID);
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (NetPortID), Local<v8::Value>(NetPortIDValue));

                v8::Local<v8::String> NetObjectID = Nan::New<v8::String> ("NetObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceLinked->NetObjectID, utf8string);
                v8::Local<v8::String> NetObjectIDValue = Nan::New<v8::String> (pRspQryNetDeviceLinked->NetObjectID).ToLocalChecked();
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (NetObjectID), Local<v8::Value>(NetObjectIDValue));

                v8::Local<v8::String> NetPortType = Nan::New<v8::String> ("NetPortType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceLinked->NetPortType, utf8string);
                v8::Local<v8::String> NetPortTypeValue = Nan::New<v8::String> (pRspQryNetDeviceLinked->NetPortType).ToLocalChecked();
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (NetPortType), Local<v8::Value>(NetPortTypeValue));

                v8::Local<v8::String> LinkNetDeviceID = Nan::New<v8::String> ("LinkNetDeviceID").ToLocalChecked();
                v8::Local<v8::Integer> LinkNetDeviceIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->LinkNetDeviceID);
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetDeviceID), Local<v8::Value>(LinkNetDeviceIDValue));

                v8::Local<v8::String> LinkNetPortID = Nan::New<v8::String> ("LinkNetPortID").ToLocalChecked();
                v8::Local<v8::Integer> LinkNetPortIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->LinkNetPortID);
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetPortID), Local<v8::Value>(LinkNetPortIDValue));

                v8::Local<v8::String> LinkNetObjectID = Nan::New<v8::String> ("LinkNetObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceLinked->LinkNetObjectID, utf8string);
                v8::Local<v8::String> LinkNetObjectIDValue = Nan::New<v8::String> (pRspQryNetDeviceLinked->LinkNetObjectID).ToLocalChecked();
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetObjectID), Local<v8::Value>(LinkNetObjectIDValue));

                v8::Local<v8::String> LinkNetPortType = Nan::New<v8::String> ("LinkNetPortType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceLinked->LinkNetPortType, utf8string);
                v8::Local<v8::String> LinkNetPortTypeValue = Nan::New<v8::String> (pRspQryNetDeviceLinked->LinkNetPortType).ToLocalChecked();
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetPortType), Local<v8::Value>(LinkNetPortTypeValue));

                v8::Local<v8::String> LinkSource = Nan::New<v8::String> ("LinkSource").ToLocalChecked();
                v8::Local<v8::Integer> LinkSourceValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->LinkSource);
                pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (LinkSource), Local<v8::Value>(LinkSourceValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetDeviceLinked) { 
                params[0] = Local<v8::Value>(pRspQryNetDeviceLinkedJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetDeviceLinked) { 
            delete[] pRspQryNetDeviceLinked;
            pRspQryNetDeviceLinked = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetDeviceLinkedTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDeviceLinkedTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetDeviceLinkedTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetDeviceLinkedTopic_trans_callbackNumb: ", g_RtnNetDeviceLinkedTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetDeviceLinkedTopic_mutex);

    int dataNumb = g_RtnNetDeviceLinkedTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetDeviceLinkedTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetDeviceLinkedTopic_trans_dataNumb: ", g_RtnNetDeviceLinkedTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetDeviceLinkedTopic_queue.empty()) {
        receivedData.push (g_RtnNetDeviceLinkedTopic_queue.front());
        g_RtnNetDeviceLinkedTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetDeviceLinkedTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetDeviceLinkedTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDeviceLinkedTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetDeviceLinkedTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDeviceLinkedTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetDeviceLinkedTopic").ToLocalChecked());

        CShfeFtdcRtnNetDeviceLinkedField* pRtnNetDeviceLinked = (CShfeFtdcRtnNetDeviceLinkedField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetDeviceLinkedJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetDeviceLinked) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->OperationType);
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->ID);
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> NetDeviceID = Nan::New<v8::String> ("NetDeviceID").ToLocalChecked();
                v8::Local<v8::Integer> NetDeviceIDValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->NetDeviceID);
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (NetDeviceID), Local<v8::Value>(NetDeviceIDValue));

                v8::Local<v8::String> NetPortID = Nan::New<v8::String> ("NetPortID").ToLocalChecked();
                v8::Local<v8::Integer> NetPortIDValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->NetPortID);
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (NetPortID), Local<v8::Value>(NetPortIDValue));

                v8::Local<v8::String> NetObjectID = Nan::New<v8::String> ("NetObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDeviceLinked->NetObjectID, utf8string);
                v8::Local<v8::String> NetObjectIDValue = Nan::New<v8::String> (pRtnNetDeviceLinked->NetObjectID).ToLocalChecked();
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (NetObjectID), Local<v8::Value>(NetObjectIDValue));

                v8::Local<v8::String> NetPortType = Nan::New<v8::String> ("NetPortType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDeviceLinked->NetPortType, utf8string);
                v8::Local<v8::String> NetPortTypeValue = Nan::New<v8::String> (pRtnNetDeviceLinked->NetPortType).ToLocalChecked();
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (NetPortType), Local<v8::Value>(NetPortTypeValue));

                v8::Local<v8::String> LinkNetDeviceID = Nan::New<v8::String> ("LinkNetDeviceID").ToLocalChecked();
                v8::Local<v8::Integer> LinkNetDeviceIDValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->LinkNetDeviceID);
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetDeviceID), Local<v8::Value>(LinkNetDeviceIDValue));

                v8::Local<v8::String> LinkNetPortID = Nan::New<v8::String> ("LinkNetPortID").ToLocalChecked();
                v8::Local<v8::Integer> LinkNetPortIDValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->LinkNetPortID);
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetPortID), Local<v8::Value>(LinkNetPortIDValue));

                v8::Local<v8::String> LinkNetObjectID = Nan::New<v8::String> ("LinkNetObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDeviceLinked->LinkNetObjectID, utf8string);
                v8::Local<v8::String> LinkNetObjectIDValue = Nan::New<v8::String> (pRtnNetDeviceLinked->LinkNetObjectID).ToLocalChecked();
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetObjectID), Local<v8::Value>(LinkNetObjectIDValue));

                v8::Local<v8::String> LinkNetPortType = Nan::New<v8::String> ("LinkNetPortType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDeviceLinked->LinkNetPortType, utf8string);
                v8::Local<v8::String> LinkNetPortTypeValue = Nan::New<v8::String> (pRtnNetDeviceLinked->LinkNetPortType).ToLocalChecked();
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetPortType), Local<v8::Value>(LinkNetPortTypeValue));

                v8::Local<v8::String> LinkSource = Nan::New<v8::String> ("LinkSource").ToLocalChecked();
                v8::Local<v8::Integer> LinkSourceValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->LinkSource);
                pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (LinkSource), Local<v8::Value>(LinkSourceValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetDeviceLinked) { 
                params[0] = Local<v8::Value>(pRtnNetDeviceLinkedJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetDeviceLinked) { 
            delete[] pRtnNetDeviceLinked;
            pRtnNetDeviceLinked = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetDeviceLinkedTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeUserLoginStatTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTradeUserLoginStatTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTradeUserLoginStatTopic_trans_callbackNumb: ", g_RspQryTradeUserLoginStatTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTradeUserLoginStatTopic_mutex);

    int dataNumb = g_RspQryTradeUserLoginStatTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTradeUserLoginStatTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTradeUserLoginStatTopic_trans_dataNumb: ", g_RspQryTradeUserLoginStatTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTradeUserLoginStatTopic_queue.empty()) {
        receivedData.push (g_RspQryTradeUserLoginStatTopic_queue.front());
        g_RspQryTradeUserLoginStatTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTradeUserLoginStatTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTradeUserLoginStatTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeUserLoginStatTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTradeUserLoginStatTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeUserLoginStatTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTradeUserLoginStatTopic").ToLocalChecked());

        CShfeFtdcRspQryTradeUserLoginStatField* pRspQryTradeUserLoginStat = (CShfeFtdcRspQryTradeUserLoginStatField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTradeUserLoginStatJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTradeUserLoginStat) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginStat->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryTradeUserLoginStat->MonDate).ToLocalChecked();
                pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginStat->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryTradeUserLoginStat->MonTime).ToLocalChecked();
                pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginStat->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryTradeUserLoginStat->ObjectID).ToLocalChecked();
                pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginStat->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRspQryTradeUserLoginStat->IPAddress).ToLocalChecked();
                pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginStat->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryTradeUserLoginStat->ParticipantID).ToLocalChecked();
                pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginStat->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQryTradeUserLoginStat->UserID).ToLocalChecked();
                pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> FrontId = Nan::New<v8::String> ("FrontId").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeUserLoginStat->FrontId, utf8string);
                v8::Local<v8::String> FrontIdValue = Nan::New<v8::String> (pRspQryTradeUserLoginStat->FrontId).ToLocalChecked();
                pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (FrontId), Local<v8::Value>(FrontIdValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTradeUserLoginStat) { 
                params[0] = Local<v8::Value>(pRspQryTradeUserLoginStatJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTradeUserLoginStat) { 
            delete[] pRspQryTradeUserLoginStat;
            pRspQryTradeUserLoginStat = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTradeUserLoginStatTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeFrontOrderRttStatTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTradeFrontOrderRttStatTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTradeFrontOrderRttStatTopic_trans_callbackNumb: ", g_RspQryTradeFrontOrderRttStatTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTradeFrontOrderRttStatTopic_mutex);

    int dataNumb = g_RspQryTradeFrontOrderRttStatTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTradeFrontOrderRttStatTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTradeFrontOrderRttStatTopic_trans_dataNumb: ", g_RspQryTradeFrontOrderRttStatTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTradeFrontOrderRttStatTopic_queue.empty()) {
        receivedData.push (g_RspQryTradeFrontOrderRttStatTopic_queue.front());
        g_RspQryTradeFrontOrderRttStatTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTradeFrontOrderRttStatTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTradeFrontOrderRttStatTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeFrontOrderRttStatTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTradeFrontOrderRttStatTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeFrontOrderRttStatTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTradeFrontOrderRttStatTopic").ToLocalChecked());

        CShfeFtdcRspQryTradeFrontOrderRttStatField* pRspQryTradeFrontOrderRttStat = (CShfeFtdcRspQryTradeFrontOrderRttStatField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTradeFrontOrderRttStatJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTradeFrontOrderRttStat) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeFrontOrderRttStat->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryTradeFrontOrderRttStat->MonDate).ToLocalChecked();
                pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeFrontOrderRttStat->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryTradeFrontOrderRttStat->MonTime).ToLocalChecked();
                pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeFrontOrderRttStat->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryTradeFrontOrderRttStat->ObjectID).ToLocalChecked();
                pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> OrderCount = Nan::New<v8::String> ("OrderCount").ToLocalChecked();
                v8::Local<v8::Number> OrderCountValue = Nan::New<v8::Number> (pRspQryTradeFrontOrderRttStat->OrderCount);
                pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderCount), Local<v8::Value>(OrderCountValue));

                v8::Local<v8::String> OrderRttSum = Nan::New<v8::String> ("OrderRttSum").ToLocalChecked();
                v8::Local<v8::Number> OrderRttSumValue = Nan::New<v8::Number> (pRspQryTradeFrontOrderRttStat->OrderRttSum);
                pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttSum), Local<v8::Value>(OrderRttSumValue));

                v8::Local<v8::String> OrderMaxRtt = Nan::New<v8::String> ("OrderMaxRtt").ToLocalChecked();
                v8::Local<v8::Integer> OrderMaxRttValue = Nan::New<v8::Integer> (pRspQryTradeFrontOrderRttStat->OrderMaxRtt);
                pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderMaxRtt), Local<v8::Value>(OrderMaxRttValue));

                v8::Local<v8::String> OrderMinRtt = Nan::New<v8::String> ("OrderMinRtt").ToLocalChecked();
                v8::Local<v8::Integer> OrderMinRttValue = Nan::New<v8::Integer> (pRspQryTradeFrontOrderRttStat->OrderMinRtt);
                pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderMinRtt), Local<v8::Value>(OrderMinRttValue));

                v8::Local<v8::String> OrderRttSqu = Nan::New<v8::String> ("OrderRttSqu").ToLocalChecked();
                v8::Local<v8::Integer> OrderRttSquValue = Nan::New<v8::Integer> (pRspQryTradeFrontOrderRttStat->OrderRttSqu);
                pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttSqu), Local<v8::Value>(OrderRttSquValue));

                v8::Local<v8::String> OrderRttCutDistrib = Nan::New<v8::String> ("OrderRttCutDistrib").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeFrontOrderRttStat->OrderRttCutDistrib, utf8string);
                v8::Local<v8::String> OrderRttCutDistribValue = Nan::New<v8::String> (pRspQryTradeFrontOrderRttStat->OrderRttCutDistrib).ToLocalChecked();
                pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttCutDistrib), Local<v8::Value>(OrderRttCutDistribValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTradeFrontOrderRttStat) { 
                params[0] = Local<v8::Value>(pRspQryTradeFrontOrderRttStatJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTradeFrontOrderRttStat) { 
            delete[] pRspQryTradeFrontOrderRttStat;
            pRspQryTradeFrontOrderRttStat = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTradeFrontOrderRttStatTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTradeFrontOrderRttStatTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnTradeFrontOrderRttStatTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnTradeFrontOrderRttStatTopic_trans_callbackNumb: ", g_RtnTradeFrontOrderRttStatTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnTradeFrontOrderRttStatTopic_mutex);

    int dataNumb = g_RtnTradeFrontOrderRttStatTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnTradeFrontOrderRttStatTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnTradeFrontOrderRttStatTopic_trans_dataNumb: ", g_RtnTradeFrontOrderRttStatTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnTradeFrontOrderRttStatTopic_queue.empty()) {
        receivedData.push (g_RtnTradeFrontOrderRttStatTopic_queue.front());
        g_RtnTradeFrontOrderRttStatTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnTradeFrontOrderRttStatTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnTradeFrontOrderRttStatTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTradeFrontOrderRttStatTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnTradeFrontOrderRttStatTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTradeFrontOrderRttStatTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnTradeFrontOrderRttStatTopic").ToLocalChecked());

        CShfeFtdcRtnTradeFrontOrderRttStatField* pRtnTradeFrontOrderRttStat = (CShfeFtdcRtnTradeFrontOrderRttStatField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnTradeFrontOrderRttStatJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnTradeFrontOrderRttStat) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeFrontOrderRttStat->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnTradeFrontOrderRttStat->MonDate).ToLocalChecked();
                pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeFrontOrderRttStat->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnTradeFrontOrderRttStat->MonTime).ToLocalChecked();
                pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeFrontOrderRttStat->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnTradeFrontOrderRttStat->ObjectID).ToLocalChecked();
                pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> OrderCount = Nan::New<v8::String> ("OrderCount").ToLocalChecked();
                v8::Local<v8::Number> OrderCountValue = Nan::New<v8::Number> (pRtnTradeFrontOrderRttStat->OrderCount);
                pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderCount), Local<v8::Value>(OrderCountValue));

                v8::Local<v8::String> OrderRttSum = Nan::New<v8::String> ("OrderRttSum").ToLocalChecked();
                v8::Local<v8::Number> OrderRttSumValue = Nan::New<v8::Number> (pRtnTradeFrontOrderRttStat->OrderRttSum);
                pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttSum), Local<v8::Value>(OrderRttSumValue));

                v8::Local<v8::String> OrderMaxRtt = Nan::New<v8::String> ("OrderMaxRtt").ToLocalChecked();
                v8::Local<v8::Integer> OrderMaxRttValue = Nan::New<v8::Integer> (pRtnTradeFrontOrderRttStat->OrderMaxRtt);
                pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderMaxRtt), Local<v8::Value>(OrderMaxRttValue));

                v8::Local<v8::String> OrderMinRtt = Nan::New<v8::String> ("OrderMinRtt").ToLocalChecked();
                v8::Local<v8::Integer> OrderMinRttValue = Nan::New<v8::Integer> (pRtnTradeFrontOrderRttStat->OrderMinRtt);
                pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderMinRtt), Local<v8::Value>(OrderMinRttValue));

                v8::Local<v8::String> OrderRttSqu = Nan::New<v8::String> ("OrderRttSqu").ToLocalChecked();
                v8::Local<v8::Integer> OrderRttSquValue = Nan::New<v8::Integer> (pRtnTradeFrontOrderRttStat->OrderRttSqu);
                pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttSqu), Local<v8::Value>(OrderRttSquValue));

                v8::Local<v8::String> OrderRttCutDistrib = Nan::New<v8::String> ("OrderRttCutDistrib").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeFrontOrderRttStat->OrderRttCutDistrib, utf8string);
                v8::Local<v8::String> OrderRttCutDistribValue = Nan::New<v8::String> (pRtnTradeFrontOrderRttStat->OrderRttCutDistrib).ToLocalChecked();
                pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttCutDistrib), Local<v8::Value>(OrderRttCutDistribValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnTradeFrontOrderRttStat) { 
                params[0] = Local<v8::Value>(pRtnTradeFrontOrderRttStatJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnTradeFrontOrderRttStat) { 
            delete[] pRtnTradeFrontOrderRttStat;
            pRtnTradeFrontOrderRttStat = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnTradeFrontOrderRttStatTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryParticTradeOrderStatesTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryParticTradeOrderStatesTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryParticTradeOrderStatesTopic_trans_callbackNumb: ", g_RspQryParticTradeOrderStatesTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryParticTradeOrderStatesTopic_mutex);

    int dataNumb = g_RspQryParticTradeOrderStatesTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryParticTradeOrderStatesTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryParticTradeOrderStatesTopic_trans_dataNumb: ", g_RspQryParticTradeOrderStatesTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryParticTradeOrderStatesTopic_queue.empty()) {
        receivedData.push (g_RspQryParticTradeOrderStatesTopic_queue.front());
        g_RspQryParticTradeOrderStatesTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryParticTradeOrderStatesTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryParticTradeOrderStatesTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryParticTradeOrderStatesTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryParticTradeOrderStatesTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryParticTradeOrderStatesTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryParticTradeOrderStatesTopic").ToLocalChecked());

        CShfeFtdcRspQryParticTradeOrderStatesField* pRspQryParticTradeOrderStates = (CShfeFtdcRspQryParticTradeOrderStatesField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryParticTradeOrderStatesJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryParticTradeOrderStates) { 
                string utf8string;
                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticTradeOrderStates->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRspQryParticTradeOrderStates->ParticipantID).ToLocalChecked();
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticTradeOrderStates->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRspQryParticTradeOrderStates->UserID).ToLocalChecked();
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticTradeOrderStates->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryParticTradeOrderStates->MonDate).ToLocalChecked();
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryParticTradeOrderStates->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryParticTradeOrderStates->MonTime).ToLocalChecked();
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> StaticWidth = Nan::New<v8::String> ("StaticWidth").ToLocalChecked();
                v8::Local<v8::Integer> StaticWidthValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->StaticWidth);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (StaticWidth), Local<v8::Value>(StaticWidthValue));

                v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->FrontID);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                v8::Local<v8::String> OrderCount = Nan::New<v8::String> ("OrderCount").ToLocalChecked();
                v8::Local<v8::Integer> OrderCountValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->OrderCount);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (OrderCount), Local<v8::Value>(OrderCountValue));

                v8::Local<v8::String> CancleCount = Nan::New<v8::String> ("CancleCount").ToLocalChecked();
                v8::Local<v8::Integer> CancleCountValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->CancleCount);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (CancleCount), Local<v8::Value>(CancleCountValue));

                v8::Local<v8::String> QueryCount = Nan::New<v8::String> ("QueryCount").ToLocalChecked();
                v8::Local<v8::Integer> QueryCountValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->QueryCount);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (QueryCount), Local<v8::Value>(QueryCountValue));

                v8::Local<v8::String> TradeCount = Nan::New<v8::String> ("TradeCount").ToLocalChecked();
                v8::Local<v8::Integer> TradeCountValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->TradeCount);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeCount), Local<v8::Value>(TradeCountValue));

                v8::Local<v8::String> TradeMoney = Nan::New<v8::String> ("TradeMoney").ToLocalChecked();
                v8::Local<v8::Integer> TradeMoneyValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->TradeMoney);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeMoney), Local<v8::Value>(TradeMoneyValue));

                v8::Local<v8::String> OrderCntMax = Nan::New<v8::String> ("OrderCntMax").ToLocalChecked();
                v8::Local<v8::Integer> OrderCntMaxValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->OrderCntMax);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (OrderCntMax), Local<v8::Value>(OrderCntMaxValue));

                v8::Local<v8::String> CancleCntMax = Nan::New<v8::String> ("CancleCntMax").ToLocalChecked();
                v8::Local<v8::Integer> CancleCntMaxValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->CancleCntMax);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (CancleCntMax), Local<v8::Value>(CancleCntMaxValue));

                v8::Local<v8::String> QueryCntMax = Nan::New<v8::String> ("QueryCntMax").ToLocalChecked();
                v8::Local<v8::Integer> QueryCntMaxValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->QueryCntMax);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (QueryCntMax), Local<v8::Value>(QueryCntMaxValue));

                v8::Local<v8::String> TradeCntMax = Nan::New<v8::String> ("TradeCntMax").ToLocalChecked();
                v8::Local<v8::Integer> TradeCntMaxValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->TradeCntMax);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeCntMax), Local<v8::Value>(TradeCntMaxValue));

                v8::Local<v8::String> TradeMoneyMax = Nan::New<v8::String> ("TradeMoneyMax").ToLocalChecked();
                v8::Local<v8::Integer> TradeMoneyMaxValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->TradeMoneyMax);
                pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeMoneyMax), Local<v8::Value>(TradeMoneyMaxValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryParticTradeOrderStates) { 
                params[0] = Local<v8::Value>(pRspQryParticTradeOrderStatesJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryParticTradeOrderStates) { 
            delete[] pRspQryParticTradeOrderStates;
            pRspQryParticTradeOrderStates = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryParticTradeOrderStatesTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnParticTradeOrderStatesTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnParticTradeOrderStatesTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnParticTradeOrderStatesTopic_trans_callbackNumb: ", g_RtnParticTradeOrderStatesTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnParticTradeOrderStatesTopic_mutex);

    int dataNumb = g_RtnParticTradeOrderStatesTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnParticTradeOrderStatesTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnParticTradeOrderStatesTopic_trans_dataNumb: ", g_RtnParticTradeOrderStatesTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnParticTradeOrderStatesTopic_queue.empty()) {
        receivedData.push (g_RtnParticTradeOrderStatesTopic_queue.front());
        g_RtnParticTradeOrderStatesTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnParticTradeOrderStatesTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnParticTradeOrderStatesTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnParticTradeOrderStatesTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnParticTradeOrderStatesTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnParticTradeOrderStatesTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnParticTradeOrderStatesTopic").ToLocalChecked());

        CShfeFtdcRtnParticTradeOrderStatesField* pRtnParticTradeOrderStates = (CShfeFtdcRtnParticTradeOrderStatesField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnParticTradeOrderStatesJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnParticTradeOrderStates) { 
                string utf8string;
                v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticTradeOrderStates->ParticipantID, utf8string);
                v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (pRtnParticTradeOrderStates->ParticipantID).ToLocalChecked();
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticTradeOrderStates->UserID, utf8string);
                v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (pRtnParticTradeOrderStates->UserID).ToLocalChecked();
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticTradeOrderStates->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnParticTradeOrderStates->MonDate).ToLocalChecked();
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnParticTradeOrderStates->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnParticTradeOrderStates->MonTime).ToLocalChecked();
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> StaticWidth = Nan::New<v8::String> ("StaticWidth").ToLocalChecked();
                v8::Local<v8::Integer> StaticWidthValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->StaticWidth);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (StaticWidth), Local<v8::Value>(StaticWidthValue));

                v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->FrontID);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                v8::Local<v8::String> OrderCount = Nan::New<v8::String> ("OrderCount").ToLocalChecked();
                v8::Local<v8::Integer> OrderCountValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->OrderCount);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (OrderCount), Local<v8::Value>(OrderCountValue));

                v8::Local<v8::String> CancleCount = Nan::New<v8::String> ("CancleCount").ToLocalChecked();
                v8::Local<v8::Integer> CancleCountValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->CancleCount);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (CancleCount), Local<v8::Value>(CancleCountValue));

                v8::Local<v8::String> QueryCount = Nan::New<v8::String> ("QueryCount").ToLocalChecked();
                v8::Local<v8::Integer> QueryCountValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->QueryCount);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (QueryCount), Local<v8::Value>(QueryCountValue));

                v8::Local<v8::String> TradeCount = Nan::New<v8::String> ("TradeCount").ToLocalChecked();
                v8::Local<v8::Integer> TradeCountValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->TradeCount);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeCount), Local<v8::Value>(TradeCountValue));

                v8::Local<v8::String> TradeMoney = Nan::New<v8::String> ("TradeMoney").ToLocalChecked();
                v8::Local<v8::Integer> TradeMoneyValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->TradeMoney);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeMoney), Local<v8::Value>(TradeMoneyValue));

                v8::Local<v8::String> OrderCntMax = Nan::New<v8::String> ("OrderCntMax").ToLocalChecked();
                v8::Local<v8::Integer> OrderCntMaxValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->OrderCntMax);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (OrderCntMax), Local<v8::Value>(OrderCntMaxValue));

                v8::Local<v8::String> CancleCntMax = Nan::New<v8::String> ("CancleCntMax").ToLocalChecked();
                v8::Local<v8::Integer> CancleCntMaxValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->CancleCntMax);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (CancleCntMax), Local<v8::Value>(CancleCntMaxValue));

                v8::Local<v8::String> QueryCntMax = Nan::New<v8::String> ("QueryCntMax").ToLocalChecked();
                v8::Local<v8::Integer> QueryCntMaxValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->QueryCntMax);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (QueryCntMax), Local<v8::Value>(QueryCntMaxValue));

                v8::Local<v8::String> TradeCntMax = Nan::New<v8::String> ("TradeCntMax").ToLocalChecked();
                v8::Local<v8::Integer> TradeCntMaxValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->TradeCntMax);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeCntMax), Local<v8::Value>(TradeCntMaxValue));

                v8::Local<v8::String> TradeMoneyMax = Nan::New<v8::String> ("TradeMoneyMax").ToLocalChecked();
                v8::Local<v8::Integer> TradeMoneyMaxValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->TradeMoneyMax);
                pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeMoneyMax), Local<v8::Value>(TradeMoneyMaxValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnParticTradeOrderStates) { 
                params[0] = Local<v8::Value>(pRtnParticTradeOrderStatesJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnParticTradeOrderStates) { 
            delete[] pRtnParticTradeOrderStates;
            pRtnParticTradeOrderStates = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnParticTradeOrderStatesTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryRouterInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryRouterInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryRouterInfoTopic_trans_callbackNumb: ", g_RspQryRouterInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryRouterInfoTopic_mutex);

    int dataNumb = g_RspQryRouterInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryRouterInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryRouterInfoTopic_trans_dataNumb: ", g_RspQryRouterInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryRouterInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryRouterInfoTopic_queue.front());
        g_RspQryRouterInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryRouterInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryRouterInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryRouterInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryRouterInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryRouterInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryRouterInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryRouterInfoField* pRspQryRouterInfo = (CShfeFtdcRspQryRouterInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryRouterInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryRouterInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryRouterInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryRouterInfo->HostName).ToLocalChecked();
                pRspQryRouterInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryRouterInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryRouterInfo->MonDate).ToLocalChecked();
                pRspQryRouterInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryRouterInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryRouterInfo->MonTime).ToLocalChecked();
                pRspQryRouterInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Dev = Nan::New<v8::String> ("Dev").ToLocalChecked();
                Gb2312ToUtf8(pRspQryRouterInfo->Dev, utf8string);
                v8::Local<v8::String> DevValue = Nan::New<v8::String> (pRspQryRouterInfo->Dev).ToLocalChecked();
                pRspQryRouterInfoJS->Set(Local<v8::Value> (Dev), Local<v8::Value>(DevValue));

                v8::Local<v8::String> Destination = Nan::New<v8::String> ("Destination").ToLocalChecked();
                Gb2312ToUtf8(pRspQryRouterInfo->Destination, utf8string);
                v8::Local<v8::String> DestinationValue = Nan::New<v8::String> (pRspQryRouterInfo->Destination).ToLocalChecked();
                pRspQryRouterInfoJS->Set(Local<v8::Value> (Destination), Local<v8::Value>(DestinationValue));

                v8::Local<v8::String> Gateway = Nan::New<v8::String> ("Gateway").ToLocalChecked();
                Gb2312ToUtf8(pRspQryRouterInfo->Gateway, utf8string);
                v8::Local<v8::String> GatewayValue = Nan::New<v8::String> (pRspQryRouterInfo->Gateway).ToLocalChecked();
                pRspQryRouterInfoJS->Set(Local<v8::Value> (Gateway), Local<v8::Value>(GatewayValue));

                v8::Local<v8::String> Mask = Nan::New<v8::String> ("Mask").ToLocalChecked();
                Gb2312ToUtf8(pRspQryRouterInfo->Mask, utf8string);
                v8::Local<v8::String> MaskValue = Nan::New<v8::String> (pRspQryRouterInfo->Mask).ToLocalChecked();
                pRspQryRouterInfoJS->Set(Local<v8::Value> (Mask), Local<v8::Value>(MaskValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                Gb2312ToUtf8(pRspQryRouterInfo->Flag, utf8string);
                v8::Local<v8::String> FlagValue = Nan::New<v8::String> (pRspQryRouterInfo->Flag).ToLocalChecked();
                pRspQryRouterInfoJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                v8::Local<v8::String> RefCnt = Nan::New<v8::String> ("RefCnt").ToLocalChecked();
                v8::Local<v8::Integer> RefCntValue = Nan::New<v8::Integer> (pRspQryRouterInfo->RefCnt);
                pRspQryRouterInfoJS->Set(Local<v8::Value> (RefCnt), Local<v8::Value>(RefCntValue));

                v8::Local<v8::String> Use = Nan::New<v8::String> ("Use").ToLocalChecked();
                v8::Local<v8::Integer> UseValue = Nan::New<v8::Integer> (pRspQryRouterInfo->Use);
                pRspQryRouterInfoJS->Set(Local<v8::Value> (Use), Local<v8::Value>(UseValue));

                v8::Local<v8::String> Metric = Nan::New<v8::String> ("Metric").ToLocalChecked();
                v8::Local<v8::Integer> MetricValue = Nan::New<v8::Integer> (pRspQryRouterInfo->Metric);
                pRspQryRouterInfoJS->Set(Local<v8::Value> (Metric), Local<v8::Value>(MetricValue));

                v8::Local<v8::String> Mtu = Nan::New<v8::String> ("Mtu").ToLocalChecked();
                v8::Local<v8::Integer> MtuValue = Nan::New<v8::Integer> (pRspQryRouterInfo->Mtu);
                pRspQryRouterInfoJS->Set(Local<v8::Value> (Mtu), Local<v8::Value>(MtuValue));

                v8::Local<v8::String> Win = Nan::New<v8::String> ("Win").ToLocalChecked();
                v8::Local<v8::Integer> WinValue = Nan::New<v8::Integer> (pRspQryRouterInfo->Win);
                pRspQryRouterInfoJS->Set(Local<v8::Value> (Win), Local<v8::Value>(WinValue));

                v8::Local<v8::String> Rtt = Nan::New<v8::String> ("Rtt").ToLocalChecked();
                v8::Local<v8::Integer> RttValue = Nan::New<v8::Integer> (pRspQryRouterInfo->Rtt);
                pRspQryRouterInfoJS->Set(Local<v8::Value> (Rtt), Local<v8::Value>(RttValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryRouterInfo) { 
                params[0] = Local<v8::Value>(pRspQryRouterInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryRouterInfo) { 
            delete[] pRspQryRouterInfo;
            pRspQryRouterInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryRouterInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnRouterInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnRouterInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnRouterInfoTopic_trans_callbackNumb: ", g_RtnRouterInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnRouterInfoTopic_mutex);

    int dataNumb = g_RtnRouterInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnRouterInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnRouterInfoTopic_trans_dataNumb: ", g_RtnRouterInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnRouterInfoTopic_queue.empty()) {
        receivedData.push (g_RtnRouterInfoTopic_queue.front());
        g_RtnRouterInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnRouterInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnRouterInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnRouterInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnRouterInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnRouterInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnRouterInfoTopic").ToLocalChecked());

        CShfeFtdcRtnRouterInfoField* pRtnRouterInfo = (CShfeFtdcRtnRouterInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnRouterInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnRouterInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRtnRouterInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRtnRouterInfo->HostName).ToLocalChecked();
                pRtnRouterInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnRouterInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnRouterInfo->MonDate).ToLocalChecked();
                pRtnRouterInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnRouterInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnRouterInfo->MonTime).ToLocalChecked();
                pRtnRouterInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Dev = Nan::New<v8::String> ("Dev").ToLocalChecked();
                Gb2312ToUtf8(pRtnRouterInfo->Dev, utf8string);
                v8::Local<v8::String> DevValue = Nan::New<v8::String> (pRtnRouterInfo->Dev).ToLocalChecked();
                pRtnRouterInfoJS->Set(Local<v8::Value> (Dev), Local<v8::Value>(DevValue));

                v8::Local<v8::String> Destination = Nan::New<v8::String> ("Destination").ToLocalChecked();
                Gb2312ToUtf8(pRtnRouterInfo->Destination, utf8string);
                v8::Local<v8::String> DestinationValue = Nan::New<v8::String> (pRtnRouterInfo->Destination).ToLocalChecked();
                pRtnRouterInfoJS->Set(Local<v8::Value> (Destination), Local<v8::Value>(DestinationValue));

                v8::Local<v8::String> Gateway = Nan::New<v8::String> ("Gateway").ToLocalChecked();
                Gb2312ToUtf8(pRtnRouterInfo->Gateway, utf8string);
                v8::Local<v8::String> GatewayValue = Nan::New<v8::String> (pRtnRouterInfo->Gateway).ToLocalChecked();
                pRtnRouterInfoJS->Set(Local<v8::Value> (Gateway), Local<v8::Value>(GatewayValue));

                v8::Local<v8::String> Mask = Nan::New<v8::String> ("Mask").ToLocalChecked();
                Gb2312ToUtf8(pRtnRouterInfo->Mask, utf8string);
                v8::Local<v8::String> MaskValue = Nan::New<v8::String> (pRtnRouterInfo->Mask).ToLocalChecked();
                pRtnRouterInfoJS->Set(Local<v8::Value> (Mask), Local<v8::Value>(MaskValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                Gb2312ToUtf8(pRtnRouterInfo->Flag, utf8string);
                v8::Local<v8::String> FlagValue = Nan::New<v8::String> (pRtnRouterInfo->Flag).ToLocalChecked();
                pRtnRouterInfoJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                v8::Local<v8::String> RefCnt = Nan::New<v8::String> ("RefCnt").ToLocalChecked();
                v8::Local<v8::Integer> RefCntValue = Nan::New<v8::Integer> (pRtnRouterInfo->RefCnt);
                pRtnRouterInfoJS->Set(Local<v8::Value> (RefCnt), Local<v8::Value>(RefCntValue));

                v8::Local<v8::String> Use = Nan::New<v8::String> ("Use").ToLocalChecked();
                v8::Local<v8::Integer> UseValue = Nan::New<v8::Integer> (pRtnRouterInfo->Use);
                pRtnRouterInfoJS->Set(Local<v8::Value> (Use), Local<v8::Value>(UseValue));

                v8::Local<v8::String> Metric = Nan::New<v8::String> ("Metric").ToLocalChecked();
                v8::Local<v8::Integer> MetricValue = Nan::New<v8::Integer> (pRtnRouterInfo->Metric);
                pRtnRouterInfoJS->Set(Local<v8::Value> (Metric), Local<v8::Value>(MetricValue));

                v8::Local<v8::String> Mtu = Nan::New<v8::String> ("Mtu").ToLocalChecked();
                v8::Local<v8::Integer> MtuValue = Nan::New<v8::Integer> (pRtnRouterInfo->Mtu);
                pRtnRouterInfoJS->Set(Local<v8::Value> (Mtu), Local<v8::Value>(MtuValue));

                v8::Local<v8::String> Win = Nan::New<v8::String> ("Win").ToLocalChecked();
                v8::Local<v8::Integer> WinValue = Nan::New<v8::Integer> (pRtnRouterInfo->Win);
                pRtnRouterInfoJS->Set(Local<v8::Value> (Win), Local<v8::Value>(WinValue));

                v8::Local<v8::String> Rtt = Nan::New<v8::String> ("Rtt").ToLocalChecked();
                v8::Local<v8::Integer> RttValue = Nan::New<v8::Integer> (pRtnRouterInfo->Rtt);
                pRtnRouterInfoJS->Set(Local<v8::Value> (Rtt), Local<v8::Value>(RttValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnRouterInfo) { 
                params[0] = Local<v8::Value>(pRtnRouterInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnRouterInfo) { 
            delete[] pRtnRouterInfo;
            pRtnRouterInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnRouterInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryDiskIOTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryDiskIOTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryDiskIOTopic_trans_callbackNumb: ", g_RspQryDiskIOTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryDiskIOTopic_mutex);

    int dataNumb = g_RspQryDiskIOTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryDiskIOTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryDiskIOTopic_trans_dataNumb: ", g_RspQryDiskIOTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryDiskIOTopic_queue.empty()) {
        receivedData.push (g_RspQryDiskIOTopic_queue.front());
        g_RspQryDiskIOTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryDiskIOTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryDiskIOTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryDiskIOTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryDiskIOTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryDiskIOTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryDiskIOTopic").ToLocalChecked());

        CShfeFtdcRspQryDiskIOField* pRspQryDiskIO = (CShfeFtdcRspQryDiskIOField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryDiskIOJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryDiskIO) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDiskIO->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryDiskIO->HostName).ToLocalChecked();
                pRspQryDiskIOJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDiskIO->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryDiskIO->MonDate).ToLocalChecked();
                pRspQryDiskIOJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDiskIO->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryDiskIO->MonTime).ToLocalChecked();
                pRspQryDiskIOJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> PartName = Nan::New<v8::String> ("PartName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryDiskIO->PartName, utf8string);
                v8::Local<v8::String> PartNameValue = Nan::New<v8::String> (pRspQryDiskIO->PartName).ToLocalChecked();
                pRspQryDiskIOJS->Set(Local<v8::Value> (PartName), Local<v8::Value>(PartNameValue));

                v8::Local<v8::String> ReadMerges = Nan::New<v8::String> ("ReadMerges").ToLocalChecked();
                v8::Local<v8::Number> ReadMergesValue = Nan::New<v8::Number> (pRspQryDiskIO->ReadMerges);
                pRspQryDiskIOJS->Set(Local<v8::Value> (ReadMerges), Local<v8::Value>(ReadMergesValue));

                v8::Local<v8::String> WriteMerges = Nan::New<v8::String> ("WriteMerges").ToLocalChecked();
                v8::Local<v8::Number> WriteMergesValue = Nan::New<v8::Number> (pRspQryDiskIO->WriteMerges);
                pRspQryDiskIOJS->Set(Local<v8::Value> (WriteMerges), Local<v8::Value>(WriteMergesValue));

                v8::Local<v8::String> ReadIOs = Nan::New<v8::String> ("ReadIOs").ToLocalChecked();
                v8::Local<v8::Number> ReadIOsValue = Nan::New<v8::Number> (pRspQryDiskIO->ReadIOs);
                pRspQryDiskIOJS->Set(Local<v8::Value> (ReadIOs), Local<v8::Value>(ReadIOsValue));

                v8::Local<v8::String> WriteIOs = Nan::New<v8::String> ("WriteIOs").ToLocalChecked();
                v8::Local<v8::Number> WriteIOsValue = Nan::New<v8::Number> (pRspQryDiskIO->WriteIOs);
                pRspQryDiskIOJS->Set(Local<v8::Value> (WriteIOs), Local<v8::Value>(WriteIOsValue));

                v8::Local<v8::String> ReadKBs = Nan::New<v8::String> ("ReadKBs").ToLocalChecked();
                v8::Local<v8::Number> ReadKBsValue = Nan::New<v8::Number> (pRspQryDiskIO->ReadKBs);
                pRspQryDiskIOJS->Set(Local<v8::Value> (ReadKBs), Local<v8::Value>(ReadKBsValue));

                v8::Local<v8::String> WriteKBs = Nan::New<v8::String> ("WriteKBs").ToLocalChecked();
                v8::Local<v8::Number> WriteKBsValue = Nan::New<v8::Number> (pRspQryDiskIO->WriteKBs);
                pRspQryDiskIOJS->Set(Local<v8::Value> (WriteKBs), Local<v8::Value>(WriteKBsValue));

                v8::Local<v8::String> SizeVal = Nan::New<v8::String> ("SizeVal").ToLocalChecked();
                v8::Local<v8::Number> SizeValValue = Nan::New<v8::Number> (pRspQryDiskIO->SizeVal);
                pRspQryDiskIOJS->Set(Local<v8::Value> (SizeVal), Local<v8::Value>(SizeValValue));

                v8::Local<v8::String> QueueVal = Nan::New<v8::String> ("QueueVal").ToLocalChecked();
                v8::Local<v8::Number> QueueValValue = Nan::New<v8::Number> (pRspQryDiskIO->QueueVal);
                pRspQryDiskIOJS->Set(Local<v8::Value> (QueueVal), Local<v8::Value>(QueueValValue));

                v8::Local<v8::String> Svc_t = Nan::New<v8::String> ("Svc_t").ToLocalChecked();
                v8::Local<v8::Number> Svc_tValue = Nan::New<v8::Number> (pRspQryDiskIO->Svc_t);
                pRspQryDiskIOJS->Set(Local<v8::Value> (Svc_t), Local<v8::Value>(Svc_tValue));

                v8::Local<v8::String> Busy = Nan::New<v8::String> ("Busy").ToLocalChecked();
                v8::Local<v8::Number> BusyValue = Nan::New<v8::Number> (pRspQryDiskIO->Busy);
                pRspQryDiskIOJS->Set(Local<v8::Value> (Busy), Local<v8::Value>(BusyValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryDiskIO) { 
                params[0] = Local<v8::Value>(pRspQryDiskIOJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryDiskIO) { 
            delete[] pRspQryDiskIO;
            pRspQryDiskIO = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryDiskIOTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnDiskIOTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnDiskIOTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnDiskIOTopic_trans_callbackNumb: ", g_RtnDiskIOTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnDiskIOTopic_mutex);

    int dataNumb = g_RtnDiskIOTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnDiskIOTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnDiskIOTopic_trans_dataNumb: ", g_RtnDiskIOTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnDiskIOTopic_queue.empty()) {
        receivedData.push (g_RtnDiskIOTopic_queue.front());
        g_RtnDiskIOTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnDiskIOTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnDiskIOTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnDiskIOTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnDiskIOTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnDiskIOTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnDiskIOTopic").ToLocalChecked());

        CShfeFtdcRtnDiskIOField* pRtnDiskIO = (CShfeFtdcRtnDiskIOField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnDiskIOJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnDiskIO) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRtnDiskIO->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRtnDiskIO->HostName).ToLocalChecked();
                pRtnDiskIOJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnDiskIO->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnDiskIO->MonDate).ToLocalChecked();
                pRtnDiskIOJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnDiskIO->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnDiskIO->MonTime).ToLocalChecked();
                pRtnDiskIOJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> PartName = Nan::New<v8::String> ("PartName").ToLocalChecked();
                Gb2312ToUtf8(pRtnDiskIO->PartName, utf8string);
                v8::Local<v8::String> PartNameValue = Nan::New<v8::String> (pRtnDiskIO->PartName).ToLocalChecked();
                pRtnDiskIOJS->Set(Local<v8::Value> (PartName), Local<v8::Value>(PartNameValue));

                v8::Local<v8::String> ReadMerges = Nan::New<v8::String> ("ReadMerges").ToLocalChecked();
                v8::Local<v8::Number> ReadMergesValue = Nan::New<v8::Number> (pRtnDiskIO->ReadMerges);
                pRtnDiskIOJS->Set(Local<v8::Value> (ReadMerges), Local<v8::Value>(ReadMergesValue));

                v8::Local<v8::String> WriteMerges = Nan::New<v8::String> ("WriteMerges").ToLocalChecked();
                v8::Local<v8::Number> WriteMergesValue = Nan::New<v8::Number> (pRtnDiskIO->WriteMerges);
                pRtnDiskIOJS->Set(Local<v8::Value> (WriteMerges), Local<v8::Value>(WriteMergesValue));

                v8::Local<v8::String> ReadIOs = Nan::New<v8::String> ("ReadIOs").ToLocalChecked();
                v8::Local<v8::Number> ReadIOsValue = Nan::New<v8::Number> (pRtnDiskIO->ReadIOs);
                pRtnDiskIOJS->Set(Local<v8::Value> (ReadIOs), Local<v8::Value>(ReadIOsValue));

                v8::Local<v8::String> WriteIOs = Nan::New<v8::String> ("WriteIOs").ToLocalChecked();
                v8::Local<v8::Number> WriteIOsValue = Nan::New<v8::Number> (pRtnDiskIO->WriteIOs);
                pRtnDiskIOJS->Set(Local<v8::Value> (WriteIOs), Local<v8::Value>(WriteIOsValue));

                v8::Local<v8::String> ReadKBs = Nan::New<v8::String> ("ReadKBs").ToLocalChecked();
                v8::Local<v8::Number> ReadKBsValue = Nan::New<v8::Number> (pRtnDiskIO->ReadKBs);
                pRtnDiskIOJS->Set(Local<v8::Value> (ReadKBs), Local<v8::Value>(ReadKBsValue));

                v8::Local<v8::String> WriteKBs = Nan::New<v8::String> ("WriteKBs").ToLocalChecked();
                v8::Local<v8::Number> WriteKBsValue = Nan::New<v8::Number> (pRtnDiskIO->WriteKBs);
                pRtnDiskIOJS->Set(Local<v8::Value> (WriteKBs), Local<v8::Value>(WriteKBsValue));

                v8::Local<v8::String> SizeVal = Nan::New<v8::String> ("SizeVal").ToLocalChecked();
                v8::Local<v8::Number> SizeValValue = Nan::New<v8::Number> (pRtnDiskIO->SizeVal);
                pRtnDiskIOJS->Set(Local<v8::Value> (SizeVal), Local<v8::Value>(SizeValValue));

                v8::Local<v8::String> QueueVal = Nan::New<v8::String> ("QueueVal").ToLocalChecked();
                v8::Local<v8::Number> QueueValValue = Nan::New<v8::Number> (pRtnDiskIO->QueueVal);
                pRtnDiskIOJS->Set(Local<v8::Value> (QueueVal), Local<v8::Value>(QueueValValue));

                v8::Local<v8::String> Svc_t = Nan::New<v8::String> ("Svc_t").ToLocalChecked();
                v8::Local<v8::Number> Svc_tValue = Nan::New<v8::Number> (pRtnDiskIO->Svc_t);
                pRtnDiskIOJS->Set(Local<v8::Value> (Svc_t), Local<v8::Value>(Svc_tValue));

                v8::Local<v8::String> Busy = Nan::New<v8::String> ("Busy").ToLocalChecked();
                v8::Local<v8::Number> BusyValue = Nan::New<v8::Number> (pRtnDiskIO->Busy);
                pRtnDiskIOJS->Set(Local<v8::Value> (Busy), Local<v8::Value>(BusyValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnDiskIO) { 
                params[0] = Local<v8::Value>(pRtnDiskIOJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnDiskIO) { 
            delete[] pRtnDiskIO;
            pRtnDiskIO = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnDiskIOTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryStatInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryStatInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryStatInfoTopic_trans_callbackNumb: ", g_RspQryStatInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryStatInfoTopic_mutex);

    int dataNumb = g_RspQryStatInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryStatInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryStatInfoTopic_trans_dataNumb: ", g_RspQryStatInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryStatInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryStatInfoTopic_queue.front());
        g_RspQryStatInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryStatInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryStatInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryStatInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryStatInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryStatInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryStatInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryStatInfoField* pRspQryStatInfo = (CShfeFtdcRspQryStatInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryStatInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryStatInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryStatInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRspQryStatInfo->HostName).ToLocalChecked();
                pRspQryStatInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryStatInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryStatInfo->MonDate).ToLocalChecked();
                pRspQryStatInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryStatInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryStatInfo->MonTime).ToLocalChecked();
                pRspQryStatInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ProcRun = Nan::New<v8::String> ("ProcRun").ToLocalChecked();
                v8::Local<v8::Integer> ProcRunValue = Nan::New<v8::Integer> (pRspQryStatInfo->ProcRun);
                pRspQryStatInfoJS->Set(Local<v8::Value> (ProcRun), Local<v8::Value>(ProcRunValue));

                v8::Local<v8::String> ProcBlk = Nan::New<v8::String> ("ProcBlk").ToLocalChecked();
                v8::Local<v8::Integer> ProcBlkValue = Nan::New<v8::Integer> (pRspQryStatInfo->ProcBlk);
                pRspQryStatInfoJS->Set(Local<v8::Value> (ProcBlk), Local<v8::Value>(ProcBlkValue));

                v8::Local<v8::String> SwapIn = Nan::New<v8::String> ("SwapIn").ToLocalChecked();
                v8::Local<v8::Integer> SwapInValue = Nan::New<v8::Integer> (pRspQryStatInfo->SwapIn);
                pRspQryStatInfoJS->Set(Local<v8::Value> (SwapIn), Local<v8::Value>(SwapInValue));

                v8::Local<v8::String> SwapOut = Nan::New<v8::String> ("SwapOut").ToLocalChecked();
                v8::Local<v8::Integer> SwapOutValue = Nan::New<v8::Integer> (pRspQryStatInfo->SwapOut);
                pRspQryStatInfoJS->Set(Local<v8::Value> (SwapOut), Local<v8::Value>(SwapOutValue));

                v8::Local<v8::String> BlockIn = Nan::New<v8::String> ("BlockIn").ToLocalChecked();
                v8::Local<v8::Integer> BlockInValue = Nan::New<v8::Integer> (pRspQryStatInfo->BlockIn);
                pRspQryStatInfoJS->Set(Local<v8::Value> (BlockIn), Local<v8::Value>(BlockInValue));

                v8::Local<v8::String> BlockOut = Nan::New<v8::String> ("BlockOut").ToLocalChecked();
                v8::Local<v8::Integer> BlockOutValue = Nan::New<v8::Integer> (pRspQryStatInfo->BlockOut);
                pRspQryStatInfoJS->Set(Local<v8::Value> (BlockOut), Local<v8::Value>(BlockOutValue));

                v8::Local<v8::String> Inter = Nan::New<v8::String> ("Inter").ToLocalChecked();
                v8::Local<v8::Integer> InterValue = Nan::New<v8::Integer> (pRspQryStatInfo->Inter);
                pRspQryStatInfoJS->Set(Local<v8::Value> (Inter), Local<v8::Value>(InterValue));

                v8::Local<v8::String> Context = Nan::New<v8::String> ("Context").ToLocalChecked();
                v8::Local<v8::Integer> ContextValue = Nan::New<v8::Integer> (pRspQryStatInfo->Context);
                pRspQryStatInfoJS->Set(Local<v8::Value> (Context), Local<v8::Value>(ContextValue));

                v8::Local<v8::String> CPUUser = Nan::New<v8::String> ("CPUUser").ToLocalChecked();
                v8::Local<v8::Number> CPUUserValue = Nan::New<v8::Number> (pRspQryStatInfo->CPUUser);
                pRspQryStatInfoJS->Set(Local<v8::Value> (CPUUser), Local<v8::Value>(CPUUserValue));

                v8::Local<v8::String> CPUSys = Nan::New<v8::String> ("CPUSys").ToLocalChecked();
                v8::Local<v8::Number> CPUSysValue = Nan::New<v8::Number> (pRspQryStatInfo->CPUSys);
                pRspQryStatInfoJS->Set(Local<v8::Value> (CPUSys), Local<v8::Value>(CPUSysValue));

                v8::Local<v8::String> CPUIdle = Nan::New<v8::String> ("CPUIdle").ToLocalChecked();
                v8::Local<v8::Number> CPUIdleValue = Nan::New<v8::Number> (pRspQryStatInfo->CPUIdle);
                pRspQryStatInfoJS->Set(Local<v8::Value> (CPUIdle), Local<v8::Value>(CPUIdleValue));

                v8::Local<v8::String> CPUIOWait = Nan::New<v8::String> ("CPUIOWait").ToLocalChecked();
                v8::Local<v8::Number> CPUIOWaitValue = Nan::New<v8::Number> (pRspQryStatInfo->CPUIOWait);
                pRspQryStatInfoJS->Set(Local<v8::Value> (CPUIOWait), Local<v8::Value>(CPUIOWaitValue));

                v8::Local<v8::String> CPUSteal = Nan::New<v8::String> ("CPUSteal").ToLocalChecked();
                v8::Local<v8::Number> CPUStealValue = Nan::New<v8::Number> (pRspQryStatInfo->CPUSteal);
                pRspQryStatInfoJS->Set(Local<v8::Value> (CPUSteal), Local<v8::Value>(CPUStealValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryStatInfo) { 
                params[0] = Local<v8::Value>(pRspQryStatInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryStatInfo) { 
            delete[] pRspQryStatInfo;
            pRspQryStatInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryStatInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnStatInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnStatInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnStatInfoTopic_trans_callbackNumb: ", g_RtnStatInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnStatInfoTopic_mutex);

    int dataNumb = g_RtnStatInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnStatInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnStatInfoTopic_trans_dataNumb: ", g_RtnStatInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnStatInfoTopic_queue.empty()) {
        receivedData.push (g_RtnStatInfoTopic_queue.front());
        g_RtnStatInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnStatInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnStatInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnStatInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnStatInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnStatInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnStatInfoTopic").ToLocalChecked());

        CShfeFtdcRtnStatInfoField* pRtnStatInfo = (CShfeFtdcRtnStatInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnStatInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnStatInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRtnStatInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRtnStatInfo->HostName).ToLocalChecked();
                pRtnStatInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnStatInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnStatInfo->MonDate).ToLocalChecked();
                pRtnStatInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnStatInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnStatInfo->MonTime).ToLocalChecked();
                pRtnStatInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> ProcRun = Nan::New<v8::String> ("ProcRun").ToLocalChecked();
                v8::Local<v8::Integer> ProcRunValue = Nan::New<v8::Integer> (pRtnStatInfo->ProcRun);
                pRtnStatInfoJS->Set(Local<v8::Value> (ProcRun), Local<v8::Value>(ProcRunValue));

                v8::Local<v8::String> ProcBlk = Nan::New<v8::String> ("ProcBlk").ToLocalChecked();
                v8::Local<v8::Integer> ProcBlkValue = Nan::New<v8::Integer> (pRtnStatInfo->ProcBlk);
                pRtnStatInfoJS->Set(Local<v8::Value> (ProcBlk), Local<v8::Value>(ProcBlkValue));

                v8::Local<v8::String> SwapIn = Nan::New<v8::String> ("SwapIn").ToLocalChecked();
                v8::Local<v8::Integer> SwapInValue = Nan::New<v8::Integer> (pRtnStatInfo->SwapIn);
                pRtnStatInfoJS->Set(Local<v8::Value> (SwapIn), Local<v8::Value>(SwapInValue));

                v8::Local<v8::String> SwapOut = Nan::New<v8::String> ("SwapOut").ToLocalChecked();
                v8::Local<v8::Integer> SwapOutValue = Nan::New<v8::Integer> (pRtnStatInfo->SwapOut);
                pRtnStatInfoJS->Set(Local<v8::Value> (SwapOut), Local<v8::Value>(SwapOutValue));

                v8::Local<v8::String> BlockIn = Nan::New<v8::String> ("BlockIn").ToLocalChecked();
                v8::Local<v8::Integer> BlockInValue = Nan::New<v8::Integer> (pRtnStatInfo->BlockIn);
                pRtnStatInfoJS->Set(Local<v8::Value> (BlockIn), Local<v8::Value>(BlockInValue));

                v8::Local<v8::String> BlockOut = Nan::New<v8::String> ("BlockOut").ToLocalChecked();
                v8::Local<v8::Integer> BlockOutValue = Nan::New<v8::Integer> (pRtnStatInfo->BlockOut);
                pRtnStatInfoJS->Set(Local<v8::Value> (BlockOut), Local<v8::Value>(BlockOutValue));

                v8::Local<v8::String> Inter = Nan::New<v8::String> ("Inter").ToLocalChecked();
                v8::Local<v8::Integer> InterValue = Nan::New<v8::Integer> (pRtnStatInfo->Inter);
                pRtnStatInfoJS->Set(Local<v8::Value> (Inter), Local<v8::Value>(InterValue));

                v8::Local<v8::String> Context = Nan::New<v8::String> ("Context").ToLocalChecked();
                v8::Local<v8::Integer> ContextValue = Nan::New<v8::Integer> (pRtnStatInfo->Context);
                pRtnStatInfoJS->Set(Local<v8::Value> (Context), Local<v8::Value>(ContextValue));

                v8::Local<v8::String> CPUUser = Nan::New<v8::String> ("CPUUser").ToLocalChecked();
                v8::Local<v8::Number> CPUUserValue = Nan::New<v8::Number> (pRtnStatInfo->CPUUser);
                pRtnStatInfoJS->Set(Local<v8::Value> (CPUUser), Local<v8::Value>(CPUUserValue));

                v8::Local<v8::String> CPUSys = Nan::New<v8::String> ("CPUSys").ToLocalChecked();
                v8::Local<v8::Number> CPUSysValue = Nan::New<v8::Number> (pRtnStatInfo->CPUSys);
                pRtnStatInfoJS->Set(Local<v8::Value> (CPUSys), Local<v8::Value>(CPUSysValue));

                v8::Local<v8::String> CPUIdle = Nan::New<v8::String> ("CPUIdle").ToLocalChecked();
                v8::Local<v8::Number> CPUIdleValue = Nan::New<v8::Number> (pRtnStatInfo->CPUIdle);
                pRtnStatInfoJS->Set(Local<v8::Value> (CPUIdle), Local<v8::Value>(CPUIdleValue));

                v8::Local<v8::String> CPUIOWait = Nan::New<v8::String> ("CPUIOWait").ToLocalChecked();
                v8::Local<v8::Number> CPUIOWaitValue = Nan::New<v8::Number> (pRtnStatInfo->CPUIOWait);
                pRtnStatInfoJS->Set(Local<v8::Value> (CPUIOWait), Local<v8::Value>(CPUIOWaitValue));

                v8::Local<v8::String> CPUSteal = Nan::New<v8::String> ("CPUSteal").ToLocalChecked();
                v8::Local<v8::Number> CPUStealValue = Nan::New<v8::Number> (pRtnStatInfo->CPUSteal);
                pRtnStatInfoJS->Set(Local<v8::Value> (CPUSteal), Local<v8::Value>(CPUStealValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnStatInfo) { 
                params[0] = Local<v8::Value>(pRtnStatInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnStatInfo) { 
            delete[] pRtnStatInfo;
            pRtnStatInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnStatInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeOrderRttCutLineTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryTradeOrderRttCutLineTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryTradeOrderRttCutLineTopic_trans_callbackNumb: ", g_RspQryTradeOrderRttCutLineTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryTradeOrderRttCutLineTopic_mutex);

    int dataNumb = g_RspQryTradeOrderRttCutLineTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryTradeOrderRttCutLineTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryTradeOrderRttCutLineTopic_trans_dataNumb: ", g_RspQryTradeOrderRttCutLineTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryTradeOrderRttCutLineTopic_queue.empty()) {
        receivedData.push (g_RspQryTradeOrderRttCutLineTopic_queue.front());
        g_RspQryTradeOrderRttCutLineTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryTradeOrderRttCutLineTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryTradeOrderRttCutLineTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeOrderRttCutLineTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryTradeOrderRttCutLineTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryTradeOrderRttCutLineTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryTradeOrderRttCutLineTopic").ToLocalChecked());

        CShfeFtdcRspQryTradeOrderRttCutLineField* pRspQryTradeOrderRttCutLine = (CShfeFtdcRspQryTradeOrderRttCutLineField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryTradeOrderRttCutLineJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryTradeOrderRttCutLine) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeOrderRttCutLine->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryTradeOrderRttCutLine->MonDate).ToLocalChecked();
                pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeOrderRttCutLine->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryTradeOrderRttCutLine->MonTime).ToLocalChecked();
                pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeOrderRttCutLine->UserName, utf8string);
                v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (pRspQryTradeOrderRttCutLine->UserName).ToLocalChecked();
                pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                v8::Local<v8::String> OrderRttCutLine = Nan::New<v8::String> ("OrderRttCutLine").ToLocalChecked();
                Gb2312ToUtf8(pRspQryTradeOrderRttCutLine->OrderRttCutLine, utf8string);
                v8::Local<v8::String> OrderRttCutLineValue = Nan::New<v8::String> (pRspQryTradeOrderRttCutLine->OrderRttCutLine).ToLocalChecked();
                pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value> (OrderRttCutLine), Local<v8::Value>(OrderRttCutLineValue));

                v8::Local<v8::String> OrderRttWidth = Nan::New<v8::String> ("OrderRttWidth").ToLocalChecked();
                v8::Local<v8::Integer> OrderRttWidthValue = Nan::New<v8::Integer> (pRspQryTradeOrderRttCutLine->OrderRttWidth);
                pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value> (OrderRttWidth), Local<v8::Value>(OrderRttWidthValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryTradeOrderRttCutLine) { 
                params[0] = Local<v8::Value>(pRspQryTradeOrderRttCutLineJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryTradeOrderRttCutLine) { 
            delete[] pRspQryTradeOrderRttCutLine;
            pRspQryTradeOrderRttCutLine = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryTradeOrderRttCutLineTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTradeOrderRttCutLineTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnTradeOrderRttCutLineTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnTradeOrderRttCutLineTopic_trans_callbackNumb: ", g_RtnTradeOrderRttCutLineTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnTradeOrderRttCutLineTopic_mutex);

    int dataNumb = g_RtnTradeOrderRttCutLineTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnTradeOrderRttCutLineTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnTradeOrderRttCutLineTopic_trans_dataNumb: ", g_RtnTradeOrderRttCutLineTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnTradeOrderRttCutLineTopic_queue.empty()) {
        receivedData.push (g_RtnTradeOrderRttCutLineTopic_queue.front());
        g_RtnTradeOrderRttCutLineTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnTradeOrderRttCutLineTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnTradeOrderRttCutLineTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTradeOrderRttCutLineTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnTradeOrderRttCutLineTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnTradeOrderRttCutLineTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnTradeOrderRttCutLineTopic").ToLocalChecked());

        CShfeFtdcRtnTradeOrderRttCutLineField* pRtnTradeOrderRttCutLine = (CShfeFtdcRtnTradeOrderRttCutLineField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnTradeOrderRttCutLineJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnTradeOrderRttCutLine) { 
                string utf8string;
                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeOrderRttCutLine->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnTradeOrderRttCutLine->MonDate).ToLocalChecked();
                pRtnTradeOrderRttCutLineJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> OrderRttCutLine = Nan::New<v8::String> ("OrderRttCutLine").ToLocalChecked();
                Gb2312ToUtf8(pRtnTradeOrderRttCutLine->OrderRttCutLine, utf8string);
                v8::Local<v8::String> OrderRttCutLineValue = Nan::New<v8::String> (pRtnTradeOrderRttCutLine->OrderRttCutLine).ToLocalChecked();
                pRtnTradeOrderRttCutLineJS->Set(Local<v8::Value> (OrderRttCutLine), Local<v8::Value>(OrderRttCutLineValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnTradeOrderRttCutLine) { 
                params[0] = Local<v8::Value>(pRtnTradeOrderRttCutLineJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnTradeOrderRttCutLine) { 
            delete[] pRtnTradeOrderRttCutLine;
            pRtnTradeOrderRttCutLine = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnTradeOrderRttCutLineTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryClientInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryClientInfoTopic_trans_callbackNumb: ", g_RspQryClientInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryClientInfoTopic_mutex);

    int dataNumb = g_RspQryClientInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryClientInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryClientInfoTopic_trans_dataNumb: ", g_RspQryClientInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryClientInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryClientInfoTopic_queue.front());
        g_RspQryClientInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryClientInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryClientInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryClientInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryClientInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryClientInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryClientInfoField* pRspQryClientInfo = (CShfeFtdcRspQryClientInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryClientInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryClientInfo) { 
                string utf8string;
                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientInfo->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRspQryClientInfo->ClientID).ToLocalChecked();
                pRspQryClientInfoJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientInfo->ClientName, utf8string);
                v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (pRspQryClientInfo->ClientName).ToLocalChecked();
                pRspQryClientInfoJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientInfo->IdentifiedCardType, utf8string);
                v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (pRspQryClientInfo->IdentifiedCardType).ToLocalChecked();
                pRspQryClientInfoJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryClientInfo->IdentifiedCardNo, utf8string);
                v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (pRspQryClientInfo->IdentifiedCardNo).ToLocalChecked();
                pRspQryClientInfoJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryClientInfo->TradingRole);
                pRspQryClientInfoJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRspQryClientInfo->ClientType);
                pRspQryClientInfoJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryClientInfo->IsActive);
                pRspQryClientInfoJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryClientInfo->OperationType);
                pRspQryClientInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryClientInfo) { 
                params[0] = Local<v8::Value>(pRspQryClientInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryClientInfo) { 
            delete[] pRspQryClientInfo;
            pRspQryClientInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryClientInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnClientInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnClientInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnClientInfoTopic_trans_callbackNumb: ", g_RtnClientInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnClientInfoTopic_mutex);

    int dataNumb = g_RtnClientInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnClientInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnClientInfoTopic_trans_dataNumb: ", g_RtnClientInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnClientInfoTopic_queue.empty()) {
        receivedData.push (g_RtnClientInfoTopic_queue.front());
        g_RtnClientInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnClientInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnClientInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnClientInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnClientInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnClientInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnClientInfoTopic").ToLocalChecked());

        CShfeFtdcRtnClientInfoField* pRtnClientInfo = (CShfeFtdcRtnClientInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnClientInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnClientInfo) { 
                string utf8string;
                v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientInfo->ClientID, utf8string);
                v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (pRtnClientInfo->ClientID).ToLocalChecked();
                pRtnClientInfoJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientInfo->ClientName, utf8string);
                v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (pRtnClientInfo->ClientName).ToLocalChecked();
                pRtnClientInfoJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientInfo->IdentifiedCardType, utf8string);
                v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (pRtnClientInfo->IdentifiedCardType).ToLocalChecked();
                pRtnClientInfoJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                Gb2312ToUtf8(pRtnClientInfo->IdentifiedCardNo, utf8string);
                v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (pRtnClientInfo->IdentifiedCardNo).ToLocalChecked();
                pRtnClientInfoJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnClientInfo->TradingRole);
                pRtnClientInfoJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRtnClientInfo->ClientType);
                pRtnClientInfoJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnClientInfo->IsActive);
                pRtnClientInfoJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnClientInfo->OperationType);
                pRtnClientInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnClientInfo) { 
                params[0] = Local<v8::Value>(pRtnClientInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnClientInfo) { 
            delete[] pRtnClientInfo;
            pRtnClientInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnClientInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryEventDescriptionTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryEventDescriptionTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryEventDescriptionTopic_trans_callbackNumb: ", g_RspQryEventDescriptionTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryEventDescriptionTopic_mutex);

    int dataNumb = g_RspQryEventDescriptionTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryEventDescriptionTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryEventDescriptionTopic_trans_dataNumb: ", g_RspQryEventDescriptionTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryEventDescriptionTopic_queue.empty()) {
        receivedData.push (g_RspQryEventDescriptionTopic_queue.front());
        g_RspQryEventDescriptionTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryEventDescriptionTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryEventDescriptionTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryEventDescriptionTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryEventDescriptionTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryEventDescriptionTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryEventDescriptionTopic").ToLocalChecked());

        CShfeFtdcRspQryEventDescriptionField* pRspQryEventDescription = (CShfeFtdcRspQryEventDescriptionField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryEventDescriptionJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryEventDescription) { 
                string utf8string;
                v8::Local<v8::String> EventDesID = Nan::New<v8::String> ("EventDesID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryEventDescription->EventDesID, utf8string);
                v8::Local<v8::String> EventDesIDValue = Nan::New<v8::String> (pRspQryEventDescription->EventDesID).ToLocalChecked();
                pRspQryEventDescriptionJS->Set(Local<v8::Value> (EventDesID), Local<v8::Value>(EventDesIDValue));

                v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryEventDescription->UserName, utf8string);
                v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (pRspQryEventDescription->UserName).ToLocalChecked();
                pRspQryEventDescriptionJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryEventDescription->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryEventDescription->MonDate).ToLocalChecked();
                pRspQryEventDescriptionJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryEventDescription->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryEventDescription->MonTime).ToLocalChecked();
                pRspQryEventDescriptionJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                Gb2312ToUtf8(pRspQryEventDescription->EventDes, utf8string);
                v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (pRspQryEventDescription->EventDes).ToLocalChecked();
                pRspQryEventDescriptionJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryEventDescription) { 
                params[0] = Local<v8::Value>(pRspQryEventDescriptionJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryEventDescription) { 
            delete[] pRspQryEventDescription;
            pRspQryEventDescription = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryEventDescriptionTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnEventDescriptionTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnEventDescriptionTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnEventDescriptionTopic_trans_callbackNumb: ", g_RtnEventDescriptionTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnEventDescriptionTopic_mutex);

    int dataNumb = g_RtnEventDescriptionTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnEventDescriptionTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnEventDescriptionTopic_trans_dataNumb: ", g_RtnEventDescriptionTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnEventDescriptionTopic_queue.empty()) {
        receivedData.push (g_RtnEventDescriptionTopic_queue.front());
        g_RtnEventDescriptionTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnEventDescriptionTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnEventDescriptionTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnEventDescriptionTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnEventDescriptionTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnEventDescriptionTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnEventDescriptionTopic").ToLocalChecked());

        CShfeFtdcRtnEventDescriptionField* pRtnEventDescription = (CShfeFtdcRtnEventDescriptionField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnEventDescriptionJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnEventDescription) { 
                string utf8string;
                v8::Local<v8::String> EventDesID = Nan::New<v8::String> ("EventDesID").ToLocalChecked();
                Gb2312ToUtf8(pRtnEventDescription->EventDesID, utf8string);
                v8::Local<v8::String> EventDesIDValue = Nan::New<v8::String> (pRtnEventDescription->EventDesID).ToLocalChecked();
                pRtnEventDescriptionJS->Set(Local<v8::Value> (EventDesID), Local<v8::Value>(EventDesIDValue));

                v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                Gb2312ToUtf8(pRtnEventDescription->UserName, utf8string);
                v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (pRtnEventDescription->UserName).ToLocalChecked();
                pRtnEventDescriptionJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnEventDescription->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnEventDescription->MonDate).ToLocalChecked();
                pRtnEventDescriptionJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnEventDescription->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnEventDescription->MonTime).ToLocalChecked();
                pRtnEventDescriptionJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                Gb2312ToUtf8(pRtnEventDescription->EventDes, utf8string);
                v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (pRtnEventDescription->EventDes).ToLocalChecked();
                pRtnEventDescriptionJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnEventDescription) { 
                params[0] = Local<v8::Value>(pRtnEventDescriptionJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnEventDescription) { 
            delete[] pRtnEventDescription;
            pRtnEventDescription = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnEventDescriptionTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFrontUniqueIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryFrontUniqueIDTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryFrontUniqueIDTopic_trans_callbackNumb: ", g_RspQryFrontUniqueIDTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryFrontUniqueIDTopic_mutex);

    int dataNumb = g_RspQryFrontUniqueIDTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryFrontUniqueIDTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryFrontUniqueIDTopic_trans_dataNumb: ", g_RspQryFrontUniqueIDTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryFrontUniqueIDTopic_queue.empty()) {
        receivedData.push (g_RspQryFrontUniqueIDTopic_queue.front());
        g_RspQryFrontUniqueIDTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryFrontUniqueIDTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryFrontUniqueIDTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFrontUniqueIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryFrontUniqueIDTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFrontUniqueIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryFrontUniqueIDTopic").ToLocalChecked());

        CShfeFtdcRspQryFrontUniqueIDField* pRspQryFrontUniqueID = (CShfeFtdcRspQryFrontUniqueIDField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryFrontUniqueIDJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryFrontUniqueID) { 
                string utf8string;
                v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRspQryFrontUniqueID->FrontID);
                pRspQryFrontUniqueIDJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                v8::Local<v8::String> FrontName = Nan::New<v8::String> ("FrontName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFrontUniqueID->FrontName, utf8string);
                v8::Local<v8::String> FrontNameValue = Nan::New<v8::String> (pRspQryFrontUniqueID->FrontName).ToLocalChecked();
                pRspQryFrontUniqueIDJS->Set(Local<v8::Value> (FrontName), Local<v8::Value>(FrontNameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryFrontUniqueID) { 
                params[0] = Local<v8::Value>(pRspQryFrontUniqueIDJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryFrontUniqueID) { 
            delete[] pRspQryFrontUniqueID;
            pRspQryFrontUniqueID = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryFrontUniqueIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFrontUniqueIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnFrontUniqueIDTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnFrontUniqueIDTopic_trans_callbackNumb: ", g_RtnFrontUniqueIDTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnFrontUniqueIDTopic_mutex);

    int dataNumb = g_RtnFrontUniqueIDTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnFrontUniqueIDTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnFrontUniqueIDTopic_trans_dataNumb: ", g_RtnFrontUniqueIDTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnFrontUniqueIDTopic_queue.empty()) {
        receivedData.push (g_RtnFrontUniqueIDTopic_queue.front());
        g_RtnFrontUniqueIDTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnFrontUniqueIDTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnFrontUniqueIDTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFrontUniqueIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnFrontUniqueIDTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFrontUniqueIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnFrontUniqueIDTopic").ToLocalChecked());

        CShfeFtdcRtnFrontUniqueIDField* pRtnFrontUniqueID = (CShfeFtdcRtnFrontUniqueIDField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnFrontUniqueIDJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnFrontUniqueID) { 
                string utf8string;
                v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRtnFrontUniqueID->FrontID);
                pRtnFrontUniqueIDJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                v8::Local<v8::String> FrontName = Nan::New<v8::String> ("FrontName").ToLocalChecked();
                Gb2312ToUtf8(pRtnFrontUniqueID->FrontName, utf8string);
                v8::Local<v8::String> FrontNameValue = Nan::New<v8::String> (pRtnFrontUniqueID->FrontName).ToLocalChecked();
                pRtnFrontUniqueIDJS->Set(Local<v8::Value> (FrontName), Local<v8::Value>(FrontNameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnFrontUniqueID) { 
                params[0] = Local<v8::Value>(pRtnFrontUniqueIDJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnFrontUniqueID) { 
            delete[] pRtnFrontUniqueID;
            pRtnFrontUniqueID = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnFrontUniqueIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPartyLinkAddrChangeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetPartyLinkAddrChangeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetPartyLinkAddrChangeTopic_trans_callbackNumb: ", g_RspQryNetPartyLinkAddrChangeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetPartyLinkAddrChangeTopic_mutex);

    int dataNumb = g_RspQryNetPartyLinkAddrChangeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetPartyLinkAddrChangeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetPartyLinkAddrChangeTopic_trans_dataNumb: ", g_RspQryNetPartyLinkAddrChangeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetPartyLinkAddrChangeTopic_queue.empty()) {
        receivedData.push (g_RspQryNetPartyLinkAddrChangeTopic_queue.front());
        g_RspQryNetPartyLinkAddrChangeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetPartyLinkAddrChangeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetPartyLinkAddrChangeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPartyLinkAddrChangeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetPartyLinkAddrChangeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPartyLinkAddrChangeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetPartyLinkAddrChangeTopic").ToLocalChecked());

        CShfeFtdcRspQryNetPartyLinkAddrChangeField* pRspQryNetPartyLinkAddrChange = (CShfeFtdcRspQryNetPartyLinkAddrChangeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetPartyLinkAddrChangeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetPartyLinkAddrChange) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkAddrChange->OperationType);
                pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkAddrChange->ID);
                pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> RelationID = Nan::New<v8::String> ("RelationID").ToLocalChecked();
                v8::Local<v8::Integer> RelationIDValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkAddrChange->RelationID);
                pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (RelationID), Local<v8::Value>(RelationIDValue));

                v8::Local<v8::String> OLDADDRESS = Nan::New<v8::String> ("OLDADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkAddrChange->OLDADDRESS, utf8string);
                v8::Local<v8::String> OLDADDRESSValue = Nan::New<v8::String> (pRspQryNetPartyLinkAddrChange->OLDADDRESS).ToLocalChecked();
                pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OLDADDRESS), Local<v8::Value>(OLDADDRESSValue));

                v8::Local<v8::String> NEWADDRESS = Nan::New<v8::String> ("NEWADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkAddrChange->NEWADDRESS, utf8string);
                v8::Local<v8::String> NEWADDRESSValue = Nan::New<v8::String> (pRspQryNetPartyLinkAddrChange->NEWADDRESS).ToLocalChecked();
                pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (NEWADDRESS), Local<v8::Value>(NEWADDRESSValue));

                v8::Local<v8::String> OPERATOR = Nan::New<v8::String> ("OPERATOR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkAddrChange->OPERATOR, utf8string);
                v8::Local<v8::String> OPERATORValue = Nan::New<v8::String> (pRspQryNetPartyLinkAddrChange->OPERATOR).ToLocalChecked();
                pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OPERATOR), Local<v8::Value>(OPERATORValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkAddrChange->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryNetPartyLinkAddrChange->MonDate).ToLocalChecked();
                pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkAddrChange->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryNetPartyLinkAddrChange->MonTime).ToLocalChecked();
                pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetPartyLinkAddrChange) { 
                params[0] = Local<v8::Value>(pRspQryNetPartyLinkAddrChangeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetPartyLinkAddrChange) { 
            delete[] pRspQryNetPartyLinkAddrChange;
            pRspQryNetPartyLinkAddrChange = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetPartyLinkAddrChangeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPartyLinkAddrChangeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetPartyLinkAddrChangeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetPartyLinkAddrChangeTopic_trans_callbackNumb: ", g_RtnNetPartyLinkAddrChangeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetPartyLinkAddrChangeTopic_mutex);

    int dataNumb = g_RtnNetPartyLinkAddrChangeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetPartyLinkAddrChangeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetPartyLinkAddrChangeTopic_trans_dataNumb: ", g_RtnNetPartyLinkAddrChangeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetPartyLinkAddrChangeTopic_queue.empty()) {
        receivedData.push (g_RtnNetPartyLinkAddrChangeTopic_queue.front());
        g_RtnNetPartyLinkAddrChangeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetPartyLinkAddrChangeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetPartyLinkAddrChangeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPartyLinkAddrChangeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetPartyLinkAddrChangeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPartyLinkAddrChangeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetPartyLinkAddrChangeTopic").ToLocalChecked());

        CShfeFtdcRtnNetPartyLinkAddrChangeField* pRtnNetPartyLinkAddrChange = (CShfeFtdcRtnNetPartyLinkAddrChangeField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetPartyLinkAddrChangeJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetPartyLinkAddrChange) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPartyLinkAddrChange->OperationType);
                pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPartyLinkAddrChange->ID);
                pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> RelationID = Nan::New<v8::String> ("RelationID").ToLocalChecked();
                v8::Local<v8::Integer> RelationIDValue = Nan::New<v8::Integer> (pRtnNetPartyLinkAddrChange->RelationID);
                pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (RelationID), Local<v8::Value>(RelationIDValue));

                v8::Local<v8::String> OLDADDRESS = Nan::New<v8::String> ("OLDADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkAddrChange->OLDADDRESS, utf8string);
                v8::Local<v8::String> OLDADDRESSValue = Nan::New<v8::String> (pRtnNetPartyLinkAddrChange->OLDADDRESS).ToLocalChecked();
                pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OLDADDRESS), Local<v8::Value>(OLDADDRESSValue));

                v8::Local<v8::String> NEWADDRESS = Nan::New<v8::String> ("NEWADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkAddrChange->NEWADDRESS, utf8string);
                v8::Local<v8::String> NEWADDRESSValue = Nan::New<v8::String> (pRtnNetPartyLinkAddrChange->NEWADDRESS).ToLocalChecked();
                pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (NEWADDRESS), Local<v8::Value>(NEWADDRESSValue));

                v8::Local<v8::String> OPERATOR = Nan::New<v8::String> ("OPERATOR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkAddrChange->OPERATOR, utf8string);
                v8::Local<v8::String> OPERATORValue = Nan::New<v8::String> (pRtnNetPartyLinkAddrChange->OPERATOR).ToLocalChecked();
                pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OPERATOR), Local<v8::Value>(OPERATORValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkAddrChange->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnNetPartyLinkAddrChange->MonDate).ToLocalChecked();
                pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkAddrChange->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnNetPartyLinkAddrChange->MonTime).ToLocalChecked();
                pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetPartyLinkAddrChange) { 
                params[0] = Local<v8::Value>(pRtnNetPartyLinkAddrChangeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetPartyLinkAddrChange) { 
            delete[] pRtnNetPartyLinkAddrChange;
            pRtnNetPartyLinkAddrChange = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetPartyLinkAddrChangeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDelPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetDelPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetDelPartyLinkInfoTopic_trans_callbackNumb: ", g_RspQryNetDelPartyLinkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetDelPartyLinkInfoTopic_mutex);

    int dataNumb = g_RspQryNetDelPartyLinkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetDelPartyLinkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetDelPartyLinkInfoTopic_trans_dataNumb: ", g_RspQryNetDelPartyLinkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetDelPartyLinkInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetDelPartyLinkInfoTopic_queue.front());
        g_RspQryNetDelPartyLinkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetDelPartyLinkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetDelPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDelPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetDelPartyLinkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDelPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetDelPartyLinkInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetDelPartyLinkInfoField* pRspQryNetDelPartyLinkInfo = (CShfeFtdcRspQryNetDelPartyLinkInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetDelPartyLinkInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetDelPartyLinkInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDelPartyLinkInfo->OperationType);
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDelPartyLinkInfo->ID);
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->MEMBER_NO, utf8string);
                v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->MEMBER_NO).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->MEMBER_NAME, utf8string);
                v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->REMOTE_ADDR, utf8string);
                v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->LOCAL_ADDR, utf8string);
                v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->ADDRESS, utf8string);
                v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->ADDRESS).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->LINE_STATUS, utf8string);
                v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->LINE_STATUS).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->CONTACT, utf8string);
                v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->CONTACT).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->TELEPHONE, utf8string);
                v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->TELEPHONE).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->MOBILEPHONE, utf8string);
                v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->EMAIL, utf8string);
                v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->EMAIL).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->FAX, utf8string);
                v8::Local<v8::String> FAXValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->FAX).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->PROVINCE, utf8string);
                v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->PROVINCE).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->DDN_NO).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IN_MODE, utf8string);
                v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->IN_MODE).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IP_WAN, utf8string);
                v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->IP_WAN).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IP_LAN, utf8string);
                v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->IP_LAN).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->IPADDR).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->Interface, utf8string);
                v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->Interface).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->INTERFACE_DATE, utf8string);
                v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->SOFTWARE, utf8string);
                v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->SOFTWARE).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->FEE_TYPE, utf8string);
                v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->FEE_TYPE).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->SERVICEPROVIDER, utf8string);
                v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IF_ZIYING, utf8string);
                v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->IF_ZIYING).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IF_TUOGUAN, utf8string);
                v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->HASOTHER, utf8string);
                v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->HASOTHER).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->SEAT_NO, utf8string);
                v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->SEAT_NO).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->PRO, utf8string);
                v8::Local<v8::String> PROValue = Nan::New<v8::String> (pRspQryNetDelPartyLinkInfo->PRO).ToLocalChecked();
                pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetDelPartyLinkInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetDelPartyLinkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetDelPartyLinkInfo) { 
            delete[] pRspQryNetDelPartyLinkInfo;
            pRspQryNetDelPartyLinkInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetDelPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDelPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetDelPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetDelPartyLinkInfoTopic_trans_callbackNumb: ", g_RtnNetDelPartyLinkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetDelPartyLinkInfoTopic_mutex);

    int dataNumb = g_RtnNetDelPartyLinkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetDelPartyLinkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetDelPartyLinkInfoTopic_trans_dataNumb: ", g_RtnNetDelPartyLinkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetDelPartyLinkInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetDelPartyLinkInfoTopic_queue.front());
        g_RtnNetDelPartyLinkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetDelPartyLinkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetDelPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDelPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetDelPartyLinkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDelPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetDelPartyLinkInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetDelPartyLinkInfoField* pRtnNetDelPartyLinkInfo = (CShfeFtdcRtnNetDelPartyLinkInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetDelPartyLinkInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetDelPartyLinkInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDelPartyLinkInfo->OperationType);
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDelPartyLinkInfo->ID);
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->MEMBER_NO, utf8string);
                v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->MEMBER_NO).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->MEMBER_NAME, utf8string);
                v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->REMOTE_ADDR, utf8string);
                v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->LOCAL_ADDR, utf8string);
                v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->ADDRESS, utf8string);
                v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->ADDRESS).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->LINE_STATUS, utf8string);
                v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->LINE_STATUS).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->CONTACT, utf8string);
                v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->CONTACT).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->TELEPHONE, utf8string);
                v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->TELEPHONE).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->MOBILEPHONE, utf8string);
                v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->EMAIL, utf8string);
                v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->EMAIL).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->FAX, utf8string);
                v8::Local<v8::String> FAXValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->FAX).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->PROVINCE, utf8string);
                v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->PROVINCE).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->DDN_NO).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IN_MODE, utf8string);
                v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->IN_MODE).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IP_WAN, utf8string);
                v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->IP_WAN).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IP_LAN, utf8string);
                v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->IP_LAN).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->IPADDR).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->Interface, utf8string);
                v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->Interface).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->INTERFACE_DATE, utf8string);
                v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->SOFTWARE, utf8string);
                v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->SOFTWARE).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->FEE_TYPE, utf8string);
                v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->FEE_TYPE).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->SERVICEPROVIDER, utf8string);
                v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IF_ZIYING, utf8string);
                v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->IF_ZIYING).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IF_TUOGUAN, utf8string);
                v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->HASOTHER, utf8string);
                v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->HASOTHER).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->SEAT_NO, utf8string);
                v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->SEAT_NO).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->PRO, utf8string);
                v8::Local<v8::String> PROValue = Nan::New<v8::String> (pRtnNetDelPartyLinkInfo->PRO).ToLocalChecked();
                pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetDelPartyLinkInfo) { 
                params[0] = Local<v8::Value>(pRtnNetDelPartyLinkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetDelPartyLinkInfo) { 
            delete[] pRtnNetDelPartyLinkInfo;
            pRtnNetDelPartyLinkInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetDelPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPerformanceTopTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryPerformanceTopTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryPerformanceTopTopic_trans_callbackNumb: ", g_RspQryPerformanceTopTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryPerformanceTopTopic_mutex);

    int dataNumb = g_RspQryPerformanceTopTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryPerformanceTopTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryPerformanceTopTopic_trans_dataNumb: ", g_RspQryPerformanceTopTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryPerformanceTopTopic_queue.empty()) {
        receivedData.push (g_RspQryPerformanceTopTopic_queue.front());
        g_RspQryPerformanceTopTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryPerformanceTopTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryPerformanceTopTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPerformanceTopTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryPerformanceTopTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryPerformanceTopTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryPerformanceTopTopic").ToLocalChecked());

        CShfeFtdcRspQryPerformanceTopField* pRspQryPerformanceTop = (CShfeFtdcRspQryPerformanceTopField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryPerformanceTopJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryPerformanceTop) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->OperationType);
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPerformanceTop->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRspQryPerformanceTop->AttrType).ToLocalChecked();
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> NetArea = Nan::New<v8::String> ("NetArea").ToLocalChecked();
                v8::Local<v8::Integer> NetAreaValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->NetArea);
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (NetArea), Local<v8::Value>(NetAreaValue));

                v8::Local<v8::String> NetSubArea = Nan::New<v8::String> ("NetSubArea").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPerformanceTop->NetSubArea, utf8string);
                v8::Local<v8::String> NetSubAreaValue = Nan::New<v8::String> (pRspQryPerformanceTop->NetSubArea).ToLocalChecked();
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (NetSubArea), Local<v8::Value>(NetSubAreaValue));

                v8::Local<v8::String> KeyWord = Nan::New<v8::String> ("KeyWord").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPerformanceTop->KeyWord, utf8string);
                v8::Local<v8::String> KeyWordValue = Nan::New<v8::String> (pRspQryPerformanceTop->KeyWord).ToLocalChecked();
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (KeyWord), Local<v8::Value>(KeyWordValue));

                v8::Local<v8::String> SortValue = Nan::New<v8::String> ("SortValue").ToLocalChecked();
                v8::Local<v8::Integer> SortValueValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->SortValue);
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (SortValue), Local<v8::Value>(SortValueValue));

                v8::Local<v8::String> SortType = Nan::New<v8::String> ("SortType").ToLocalChecked();
                v8::Local<v8::Integer> SortTypeValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->SortType);
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (SortType), Local<v8::Value>(SortTypeValue));

                v8::Local<v8::String> DuringTimeType = Nan::New<v8::String> ("DuringTimeType").ToLocalChecked();
                v8::Local<v8::Integer> DuringTimeTypeValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->DuringTimeType);
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (DuringTimeType), Local<v8::Value>(DuringTimeTypeValue));

                v8::Local<v8::String> DuringTimeValue = Nan::New<v8::String> ("DuringTimeValue").ToLocalChecked();
                v8::Local<v8::Integer> DuringTimeValueValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->DuringTimeValue);
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (DuringTimeValue), Local<v8::Value>(DuringTimeValueValue));

                v8::Local<v8::String> TopN = Nan::New<v8::String> ("TopN").ToLocalChecked();
                v8::Local<v8::Integer> TopNValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->TopN);
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (TopN), Local<v8::Value>(TopNValue));

                v8::Local<v8::String> TopResult = Nan::New<v8::String> ("TopResult").ToLocalChecked();
                Gb2312ToUtf8(pRspQryPerformanceTop->TopResult, utf8string);
                v8::Local<v8::String> TopResultValue = Nan::New<v8::String> (pRspQryPerformanceTop->TopResult).ToLocalChecked();
                pRspQryPerformanceTopJS->Set(Local<v8::Value> (TopResult), Local<v8::Value>(TopResultValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryPerformanceTop) { 
                params[0] = Local<v8::Value>(pRspQryPerformanceTopJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryPerformanceTop) { 
            delete[] pRspQryPerformanceTop;
            pRspQryPerformanceTop = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryPerformanceTopTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPerformanceTopTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnPerformanceTopTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnPerformanceTopTopic_trans_callbackNumb: ", g_RtnPerformanceTopTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnPerformanceTopTopic_mutex);

    int dataNumb = g_RtnPerformanceTopTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnPerformanceTopTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnPerformanceTopTopic_trans_dataNumb: ", g_RtnPerformanceTopTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnPerformanceTopTopic_queue.empty()) {
        receivedData.push (g_RtnPerformanceTopTopic_queue.front());
        g_RtnPerformanceTopTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnPerformanceTopTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnPerformanceTopTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPerformanceTopTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnPerformanceTopTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnPerformanceTopTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnPerformanceTopTopic").ToLocalChecked());

        CShfeFtdcRtnPerformanceTopField* pRtnPerformanceTop = (CShfeFtdcRtnPerformanceTopField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnPerformanceTopJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnPerformanceTop) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnPerformanceTop->OperationType);
                pRtnPerformanceTopJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRtnPerformanceTop->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRtnPerformanceTop->AttrType).ToLocalChecked();
                pRtnPerformanceTopJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> NetArea = Nan::New<v8::String> ("NetArea").ToLocalChecked();
                v8::Local<v8::Integer> NetAreaValue = Nan::New<v8::Integer> (pRtnPerformanceTop->NetArea);
                pRtnPerformanceTopJS->Set(Local<v8::Value> (NetArea), Local<v8::Value>(NetAreaValue));

                v8::Local<v8::String> NetSubArea = Nan::New<v8::String> ("NetSubArea").ToLocalChecked();
                Gb2312ToUtf8(pRtnPerformanceTop->NetSubArea, utf8string);
                v8::Local<v8::String> NetSubAreaValue = Nan::New<v8::String> (pRtnPerformanceTop->NetSubArea).ToLocalChecked();
                pRtnPerformanceTopJS->Set(Local<v8::Value> (NetSubArea), Local<v8::Value>(NetSubAreaValue));

                v8::Local<v8::String> KeyWord = Nan::New<v8::String> ("KeyWord").ToLocalChecked();
                Gb2312ToUtf8(pRtnPerformanceTop->KeyWord, utf8string);
                v8::Local<v8::String> KeyWordValue = Nan::New<v8::String> (pRtnPerformanceTop->KeyWord).ToLocalChecked();
                pRtnPerformanceTopJS->Set(Local<v8::Value> (KeyWord), Local<v8::Value>(KeyWordValue));

                v8::Local<v8::String> SortValue = Nan::New<v8::String> ("SortValue").ToLocalChecked();
                v8::Local<v8::Integer> SortValueValue = Nan::New<v8::Integer> (pRtnPerformanceTop->SortValue);
                pRtnPerformanceTopJS->Set(Local<v8::Value> (SortValue), Local<v8::Value>(SortValueValue));

                v8::Local<v8::String> SortType = Nan::New<v8::String> ("SortType").ToLocalChecked();
                v8::Local<v8::Integer> SortTypeValue = Nan::New<v8::Integer> (pRtnPerformanceTop->SortType);
                pRtnPerformanceTopJS->Set(Local<v8::Value> (SortType), Local<v8::Value>(SortTypeValue));

                v8::Local<v8::String> DuringTimeType = Nan::New<v8::String> ("DuringTimeType").ToLocalChecked();
                v8::Local<v8::Integer> DuringTimeTypeValue = Nan::New<v8::Integer> (pRtnPerformanceTop->DuringTimeType);
                pRtnPerformanceTopJS->Set(Local<v8::Value> (DuringTimeType), Local<v8::Value>(DuringTimeTypeValue));

                v8::Local<v8::String> DuringTimeValue = Nan::New<v8::String> ("DuringTimeValue").ToLocalChecked();
                v8::Local<v8::Integer> DuringTimeValueValue = Nan::New<v8::Integer> (pRtnPerformanceTop->DuringTimeValue);
                pRtnPerformanceTopJS->Set(Local<v8::Value> (DuringTimeValue), Local<v8::Value>(DuringTimeValueValue));

                v8::Local<v8::String> TopN = Nan::New<v8::String> ("TopN").ToLocalChecked();
                v8::Local<v8::Integer> TopNValue = Nan::New<v8::Integer> (pRtnPerformanceTop->TopN);
                pRtnPerformanceTopJS->Set(Local<v8::Value> (TopN), Local<v8::Value>(TopNValue));

                v8::Local<v8::String> TopResult = Nan::New<v8::String> ("TopResult").ToLocalChecked();
                Gb2312ToUtf8(pRtnPerformanceTop->TopResult, utf8string);
                v8::Local<v8::String> TopResultValue = Nan::New<v8::String> (pRtnPerformanceTop->TopResult).ToLocalChecked();
                pRtnPerformanceTopJS->Set(Local<v8::Value> (TopResult), Local<v8::Value>(TopResultValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnPerformanceTop) { 
                params[0] = Local<v8::Value>(pRtnPerformanceTopJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnPerformanceTop) { 
            delete[] pRtnPerformanceTop;
            pRtnPerformanceTop = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnPerformanceTopTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryInstrumentStatusTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryInstrumentStatusTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryInstrumentStatusTopic_trans_callbackNumb: ", g_RspQryInstrumentStatusTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryInstrumentStatusTopic_mutex);

    int dataNumb = g_RspQryInstrumentStatusTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryInstrumentStatusTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryInstrumentStatusTopic_trans_dataNumb: ", g_RspQryInstrumentStatusTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryInstrumentStatusTopic_queue.empty()) {
        receivedData.push (g_RspQryInstrumentStatusTopic_queue.front());
        g_RspQryInstrumentStatusTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryInstrumentStatusTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryInstrumentStatusTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryInstrumentStatusTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryInstrumentStatusTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryInstrumentStatusTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryInstrumentStatusTopic").ToLocalChecked());

        CShfeFtdcRspQryInstrumentStatusField* pRspQryInstrumentStatus = (CShfeFtdcRspQryInstrumentStatusField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryInstrumentStatusJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryInstrumentStatus) { 
                string utf8string;
                v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstrumentStatus->SettlementGroupID, utf8string);
                v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (pRspQryInstrumentStatus->SettlementGroupID).ToLocalChecked();
                pRspQryInstrumentStatusJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstrumentStatus->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryInstrumentStatus->InstrumentID).ToLocalChecked();
                pRspQryInstrumentStatusJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> InstrumentStatus = Nan::New<v8::String> ("InstrumentStatus").ToLocalChecked();
                v8::Local<v8::Integer> InstrumentStatusValue = Nan::New<v8::Integer> (pRspQryInstrumentStatus->InstrumentStatus);
                pRspQryInstrumentStatusJS->Set(Local<v8::Value> (InstrumentStatus), Local<v8::Value>(InstrumentStatusValue));

                v8::Local<v8::String> TradingSegmentSN = Nan::New<v8::String> ("TradingSegmentSN").ToLocalChecked();
                v8::Local<v8::Integer> TradingSegmentSNValue = Nan::New<v8::Integer> (pRspQryInstrumentStatus->TradingSegmentSN);
                pRspQryInstrumentStatusJS->Set(Local<v8::Value> (TradingSegmentSN), Local<v8::Value>(TradingSegmentSNValue));

                v8::Local<v8::String> EnterTime = Nan::New<v8::String> ("EnterTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstrumentStatus->EnterTime, utf8string);
                v8::Local<v8::String> EnterTimeValue = Nan::New<v8::String> (pRspQryInstrumentStatus->EnterTime).ToLocalChecked();
                pRspQryInstrumentStatusJS->Set(Local<v8::Value> (EnterTime), Local<v8::Value>(EnterTimeValue));

                v8::Local<v8::String> EnterReason = Nan::New<v8::String> ("EnterReason").ToLocalChecked();
                v8::Local<v8::Integer> EnterReasonValue = Nan::New<v8::Integer> (pRspQryInstrumentStatus->EnterReason);
                pRspQryInstrumentStatusJS->Set(Local<v8::Value> (EnterReason), Local<v8::Value>(EnterReasonValue));

                v8::Local<v8::String> EnterDate = Nan::New<v8::String> ("EnterDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryInstrumentStatus->EnterDate, utf8string);
                v8::Local<v8::String> EnterDateValue = Nan::New<v8::String> (pRspQryInstrumentStatus->EnterDate).ToLocalChecked();
                pRspQryInstrumentStatusJS->Set(Local<v8::Value> (EnterDate), Local<v8::Value>(EnterDateValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryInstrumentStatus) { 
                params[0] = Local<v8::Value>(pRspQryInstrumentStatusJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryInstrumentStatus) { 
            delete[] pRspQryInstrumentStatus;
            pRspQryInstrumentStatus = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryInstrumentStatusTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnInstrumentStatusTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnInstrumentStatusTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnInstrumentStatusTopic_trans_callbackNumb: ", g_RtnInstrumentStatusTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnInstrumentStatusTopic_mutex);

    int dataNumb = g_RtnInstrumentStatusTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnInstrumentStatusTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnInstrumentStatusTopic_trans_dataNumb: ", g_RtnInstrumentStatusTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnInstrumentStatusTopic_queue.empty()) {
        receivedData.push (g_RtnInstrumentStatusTopic_queue.front());
        g_RtnInstrumentStatusTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnInstrumentStatusTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnInstrumentStatusTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnInstrumentStatusTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnInstrumentStatusTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnInstrumentStatusTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnInstrumentStatusTopic").ToLocalChecked());

        CShfeFtdcRtnInstrumentStatusField* pRtnInstrumentStatus = (CShfeFtdcRtnInstrumentStatusField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnInstrumentStatusJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnInstrumentStatus) { 
                string utf8string;
                v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstrumentStatus->SettlementGroupID, utf8string);
                v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (pRtnInstrumentStatus->SettlementGroupID).ToLocalChecked();
                pRtnInstrumentStatusJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstrumentStatus->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnInstrumentStatus->InstrumentID).ToLocalChecked();
                pRtnInstrumentStatusJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> InstrumentStatus = Nan::New<v8::String> ("InstrumentStatus").ToLocalChecked();
                v8::Local<v8::Integer> InstrumentStatusValue = Nan::New<v8::Integer> (pRtnInstrumentStatus->InstrumentStatus);
                pRtnInstrumentStatusJS->Set(Local<v8::Value> (InstrumentStatus), Local<v8::Value>(InstrumentStatusValue));

                v8::Local<v8::String> TradingSegmentSN = Nan::New<v8::String> ("TradingSegmentSN").ToLocalChecked();
                v8::Local<v8::Integer> TradingSegmentSNValue = Nan::New<v8::Integer> (pRtnInstrumentStatus->TradingSegmentSN);
                pRtnInstrumentStatusJS->Set(Local<v8::Value> (TradingSegmentSN), Local<v8::Value>(TradingSegmentSNValue));

                v8::Local<v8::String> EnterTime = Nan::New<v8::String> ("EnterTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstrumentStatus->EnterTime, utf8string);
                v8::Local<v8::String> EnterTimeValue = Nan::New<v8::String> (pRtnInstrumentStatus->EnterTime).ToLocalChecked();
                pRtnInstrumentStatusJS->Set(Local<v8::Value> (EnterTime), Local<v8::Value>(EnterTimeValue));

                v8::Local<v8::String> EnterReason = Nan::New<v8::String> ("EnterReason").ToLocalChecked();
                v8::Local<v8::Integer> EnterReasonValue = Nan::New<v8::Integer> (pRtnInstrumentStatus->EnterReason);
                pRtnInstrumentStatusJS->Set(Local<v8::Value> (EnterReason), Local<v8::Value>(EnterReasonValue));

                v8::Local<v8::String> EnterDate = Nan::New<v8::String> ("EnterDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnInstrumentStatus->EnterDate, utf8string);
                v8::Local<v8::String> EnterDateValue = Nan::New<v8::String> (pRtnInstrumentStatus->EnterDate).ToLocalChecked();
                pRtnInstrumentStatusJS->Set(Local<v8::Value> (EnterDate), Local<v8::Value>(EnterDateValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnInstrumentStatus) { 
                params[0] = Local<v8::Value>(pRtnInstrumentStatusJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnInstrumentStatus) { 
            delete[] pRtnInstrumentStatus;
            pRtnInstrumentStatus = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnInstrumentStatusTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryCurrTradingSegmentAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryCurrTradingSegmentAttrTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryCurrTradingSegmentAttrTopic_trans_callbackNumb: ", g_RspQryCurrTradingSegmentAttrTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryCurrTradingSegmentAttrTopic_mutex);

    int dataNumb = g_RspQryCurrTradingSegmentAttrTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryCurrTradingSegmentAttrTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryCurrTradingSegmentAttrTopic_trans_dataNumb: ", g_RspQryCurrTradingSegmentAttrTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryCurrTradingSegmentAttrTopic_queue.empty()) {
        receivedData.push (g_RspQryCurrTradingSegmentAttrTopic_queue.front());
        g_RspQryCurrTradingSegmentAttrTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryCurrTradingSegmentAttrTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryCurrTradingSegmentAttrTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryCurrTradingSegmentAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryCurrTradingSegmentAttrTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryCurrTradingSegmentAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryCurrTradingSegmentAttrTopic").ToLocalChecked());

        CShfeFtdcRspQryCurrTradingSegmentAttrField* pRspQryCurrTradingSegmentAttr = (CShfeFtdcRspQryCurrTradingSegmentAttrField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryCurrTradingSegmentAttrJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryCurrTradingSegmentAttr) { 
                string utf8string;
                v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryCurrTradingSegmentAttr->SettlementGroupID, utf8string);
                v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (pRspQryCurrTradingSegmentAttr->SettlementGroupID).ToLocalChecked();
                pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                v8::Local<v8::String> TradingSegmentSN = Nan::New<v8::String> ("TradingSegmentSN").ToLocalChecked();
                v8::Local<v8::Integer> TradingSegmentSNValue = Nan::New<v8::Integer> (pRspQryCurrTradingSegmentAttr->TradingSegmentSN);
                pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (TradingSegmentSN), Local<v8::Value>(TradingSegmentSNValue));

                v8::Local<v8::String> TradingSegmentName = Nan::New<v8::String> ("TradingSegmentName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryCurrTradingSegmentAttr->TradingSegmentName, utf8string);
                v8::Local<v8::String> TradingSegmentNameValue = Nan::New<v8::String> (pRspQryCurrTradingSegmentAttr->TradingSegmentName).ToLocalChecked();
                pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (TradingSegmentName), Local<v8::Value>(TradingSegmentNameValue));

                v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryCurrTradingSegmentAttr->StartTime, utf8string);
                v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (pRspQryCurrTradingSegmentAttr->StartTime).ToLocalChecked();
                pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                v8::Local<v8::String> InstrumentStatus = Nan::New<v8::String> ("InstrumentStatus").ToLocalChecked();
                v8::Local<v8::Integer> InstrumentStatusValue = Nan::New<v8::Integer> (pRspQryCurrTradingSegmentAttr->InstrumentStatus);
                pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (InstrumentStatus), Local<v8::Value>(InstrumentStatusValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryCurrTradingSegmentAttr->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRspQryCurrTradingSegmentAttr->InstrumentID).ToLocalChecked();
                pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> AdvanceDays = Nan::New<v8::String> ("AdvanceDays").ToLocalChecked();
                v8::Local<v8::Integer> AdvanceDaysValue = Nan::New<v8::Integer> (pRspQryCurrTradingSegmentAttr->AdvanceDays);
                pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (AdvanceDays), Local<v8::Value>(AdvanceDaysValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryCurrTradingSegmentAttr) { 
                params[0] = Local<v8::Value>(pRspQryCurrTradingSegmentAttrJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryCurrTradingSegmentAttr) { 
            delete[] pRspQryCurrTradingSegmentAttr;
            pRspQryCurrTradingSegmentAttr = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryCurrTradingSegmentAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnCurrTradingSegmentAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnCurrTradingSegmentAttrTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnCurrTradingSegmentAttrTopic_trans_callbackNumb: ", g_RtnCurrTradingSegmentAttrTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnCurrTradingSegmentAttrTopic_mutex);

    int dataNumb = g_RtnCurrTradingSegmentAttrTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnCurrTradingSegmentAttrTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnCurrTradingSegmentAttrTopic_trans_dataNumb: ", g_RtnCurrTradingSegmentAttrTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnCurrTradingSegmentAttrTopic_queue.empty()) {
        receivedData.push (g_RtnCurrTradingSegmentAttrTopic_queue.front());
        g_RtnCurrTradingSegmentAttrTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnCurrTradingSegmentAttrTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnCurrTradingSegmentAttrTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnCurrTradingSegmentAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnCurrTradingSegmentAttrTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnCurrTradingSegmentAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnCurrTradingSegmentAttrTopic").ToLocalChecked());

        CShfeFtdcRtnCurrTradingSegmentAttrField* pRtnCurrTradingSegmentAttr = (CShfeFtdcRtnCurrTradingSegmentAttrField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnCurrTradingSegmentAttrJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnCurrTradingSegmentAttr) { 
                string utf8string;
                v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                Gb2312ToUtf8(pRtnCurrTradingSegmentAttr->SettlementGroupID, utf8string);
                v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (pRtnCurrTradingSegmentAttr->SettlementGroupID).ToLocalChecked();
                pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                v8::Local<v8::String> TradingSegmentSN = Nan::New<v8::String> ("TradingSegmentSN").ToLocalChecked();
                v8::Local<v8::Integer> TradingSegmentSNValue = Nan::New<v8::Integer> (pRtnCurrTradingSegmentAttr->TradingSegmentSN);
                pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (TradingSegmentSN), Local<v8::Value>(TradingSegmentSNValue));

                v8::Local<v8::String> TradingSegmentName = Nan::New<v8::String> ("TradingSegmentName").ToLocalChecked();
                Gb2312ToUtf8(pRtnCurrTradingSegmentAttr->TradingSegmentName, utf8string);
                v8::Local<v8::String> TradingSegmentNameValue = Nan::New<v8::String> (pRtnCurrTradingSegmentAttr->TradingSegmentName).ToLocalChecked();
                pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (TradingSegmentName), Local<v8::Value>(TradingSegmentNameValue));

                v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnCurrTradingSegmentAttr->StartTime, utf8string);
                v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (pRtnCurrTradingSegmentAttr->StartTime).ToLocalChecked();
                pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                v8::Local<v8::String> InstrumentStatus = Nan::New<v8::String> ("InstrumentStatus").ToLocalChecked();
                v8::Local<v8::Integer> InstrumentStatusValue = Nan::New<v8::Integer> (pRtnCurrTradingSegmentAttr->InstrumentStatus);
                pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (InstrumentStatus), Local<v8::Value>(InstrumentStatusValue));

                v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                Gb2312ToUtf8(pRtnCurrTradingSegmentAttr->InstrumentID, utf8string);
                v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (pRtnCurrTradingSegmentAttr->InstrumentID).ToLocalChecked();
                pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                v8::Local<v8::String> AdvanceDays = Nan::New<v8::String> ("AdvanceDays").ToLocalChecked();
                v8::Local<v8::Integer> AdvanceDaysValue = Nan::New<v8::Integer> (pRtnCurrTradingSegmentAttr->AdvanceDays);
                pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (AdvanceDays), Local<v8::Value>(AdvanceDaysValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnCurrTradingSegmentAttr) { 
                params[0] = Local<v8::Value>(pRtnCurrTradingSegmentAttrJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnCurrTradingSegmentAttr) { 
            delete[] pRtnCurrTradingSegmentAttr;
            pRtnCurrTradingSegmentAttr = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnCurrTradingSegmentAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetAreaTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetAreaTopic_trans_callbackNumb: ", g_RspQryNetAreaTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetAreaTopic_mutex);

    int dataNumb = g_RspQryNetAreaTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetAreaTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetAreaTopic_trans_dataNumb: ", g_RspQryNetAreaTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetAreaTopic_queue.empty()) {
        receivedData.push (g_RspQryNetAreaTopic_queue.front());
        g_RspQryNetAreaTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetAreaTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetAreaTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetAreaTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetAreaTopic").ToLocalChecked());

        CShfeFtdcRspQryNetAreaField* pRspQryNetArea = (CShfeFtdcRspQryNetAreaField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetAreaJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetArea) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetArea->OperationType);
                pRspQryNetAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetArea->ID);
                pRspQryNetAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetArea->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetArea->CName).ToLocalChecked();
                pRspQryNetAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetArea->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetArea->EName).ToLocalChecked();
                pRspQryNetAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetArea) { 
                params[0] = Local<v8::Value>(pRspQryNetAreaJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetArea) { 
            delete[] pRspQryNetArea;
            pRspQryNetArea = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetAreaTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetAreaTopic_trans_callbackNumb: ", g_RtnNetAreaTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetAreaTopic_mutex);

    int dataNumb = g_RtnNetAreaTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetAreaTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetAreaTopic_trans_dataNumb: ", g_RtnNetAreaTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetAreaTopic_queue.empty()) {
        receivedData.push (g_RtnNetAreaTopic_queue.front());
        g_RtnNetAreaTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetAreaTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetAreaTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetAreaTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetAreaTopic").ToLocalChecked());

        CShfeFtdcRtnNetAreaField* pRtnNetArea = (CShfeFtdcRtnNetAreaField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetAreaJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetArea) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetArea->OperationType);
                pRtnNetAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetArea->ID);
                pRtnNetAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetArea->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetArea->CName).ToLocalChecked();
                pRtnNetAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetArea->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetArea->EName).ToLocalChecked();
                pRtnNetAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetArea) { 
                params[0] = Local<v8::Value>(pRtnNetAreaJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetArea) { 
            delete[] pRtnNetArea;
            pRtnNetArea = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetSubAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetSubAreaTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetSubAreaTopic_trans_callbackNumb: ", g_RspQryNetSubAreaTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetSubAreaTopic_mutex);

    int dataNumb = g_RspQryNetSubAreaTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetSubAreaTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetSubAreaTopic_trans_dataNumb: ", g_RspQryNetSubAreaTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetSubAreaTopic_queue.empty()) {
        receivedData.push (g_RspQryNetSubAreaTopic_queue.front());
        g_RspQryNetSubAreaTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetSubAreaTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetSubAreaTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetSubAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetSubAreaTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetSubAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetSubAreaTopic").ToLocalChecked());

        CShfeFtdcRspQryNetSubAreaField* pRspQryNetSubArea = (CShfeFtdcRspQryNetSubAreaField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetSubAreaJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetSubArea) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetSubArea->OperationType);
                pRspQryNetSubAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetSubArea->ID);
                pRspQryNetSubAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SysNetAreaID = Nan::New<v8::String> ("SysNetAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetAreaIDValue = Nan::New<v8::Integer> (pRspQryNetSubArea->SysNetAreaID);
                pRspQryNetSubAreaJS->Set(Local<v8::Value> (SysNetAreaID), Local<v8::Value>(SysNetAreaIDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetSubArea->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetSubArea->CName).ToLocalChecked();
                pRspQryNetSubAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetSubArea->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetSubArea->EName).ToLocalChecked();
                pRspQryNetSubAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetSubArea) { 
                params[0] = Local<v8::Value>(pRspQryNetSubAreaJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetSubArea) { 
            delete[] pRspQryNetSubArea;
            pRspQryNetSubArea = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetSubAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetSubAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetSubAreaTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetSubAreaTopic_trans_callbackNumb: ", g_RtnNetSubAreaTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetSubAreaTopic_mutex);

    int dataNumb = g_RtnNetSubAreaTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetSubAreaTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetSubAreaTopic_trans_dataNumb: ", g_RtnNetSubAreaTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetSubAreaTopic_queue.empty()) {
        receivedData.push (g_RtnNetSubAreaTopic_queue.front());
        g_RtnNetSubAreaTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetSubAreaTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetSubAreaTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetSubAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetSubAreaTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetSubAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetSubAreaTopic").ToLocalChecked());

        CShfeFtdcRtnNetSubAreaField* pRtnNetSubArea = (CShfeFtdcRtnNetSubAreaField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetSubAreaJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetSubArea) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetSubArea->OperationType);
                pRtnNetSubAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetSubArea->ID);
                pRtnNetSubAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SysNetAreaID = Nan::New<v8::String> ("SysNetAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetAreaIDValue = Nan::New<v8::Integer> (pRtnNetSubArea->SysNetAreaID);
                pRtnNetSubAreaJS->Set(Local<v8::Value> (SysNetAreaID), Local<v8::Value>(SysNetAreaIDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetSubArea->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetSubArea->CName).ToLocalChecked();
                pRtnNetSubAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetSubArea->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetSubArea->EName).ToLocalChecked();
                pRtnNetSubAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetSubArea) { 
                params[0] = Local<v8::Value>(pRtnNetSubAreaJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetSubArea) { 
            delete[] pRtnNetSubArea;
            pRtnNetSubArea = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetSubAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetSubAreaIPTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetSubAreaIPTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetSubAreaIPTopic_trans_callbackNumb: ", g_RspQryNetSubAreaIPTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetSubAreaIPTopic_mutex);

    int dataNumb = g_RspQryNetSubAreaIPTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetSubAreaIPTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetSubAreaIPTopic_trans_dataNumb: ", g_RspQryNetSubAreaIPTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetSubAreaIPTopic_queue.empty()) {
        receivedData.push (g_RspQryNetSubAreaIPTopic_queue.front());
        g_RspQryNetSubAreaIPTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetSubAreaIPTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetSubAreaIPTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetSubAreaIPTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetSubAreaIPTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetSubAreaIPTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetSubAreaIPTopic").ToLocalChecked());

        CShfeFtdcRspQryNetSubAreaIPField* pRspQryNetSubAreaIP = (CShfeFtdcRspQryNetSubAreaIPField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetSubAreaIPJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetSubAreaIP) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetSubAreaIP->OperationType);
                pRspQryNetSubAreaIPJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetSubAreaIP->ID);
                pRspQryNetSubAreaIPJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRspQryNetSubAreaIP->SysNetSubAreaID);
                pRspQryNetSubAreaIPJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                v8::Local<v8::String> IP = Nan::New<v8::String> ("IP").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetSubAreaIP->IP, utf8string);
                v8::Local<v8::String> IPValue = Nan::New<v8::String> (pRspQryNetSubAreaIP->IP).ToLocalChecked();
                pRspQryNetSubAreaIPJS->Set(Local<v8::Value> (IP), Local<v8::Value>(IPValue));

                v8::Local<v8::String> Mask = Nan::New<v8::String> ("Mask").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetSubAreaIP->Mask, utf8string);
                v8::Local<v8::String> MaskValue = Nan::New<v8::String> (pRspQryNetSubAreaIP->Mask).ToLocalChecked();
                pRspQryNetSubAreaIPJS->Set(Local<v8::Value> (Mask), Local<v8::Value>(MaskValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetSubAreaIP) { 
                params[0] = Local<v8::Value>(pRspQryNetSubAreaIPJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetSubAreaIP) { 
            delete[] pRspQryNetSubAreaIP;
            pRspQryNetSubAreaIP = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetSubAreaIPTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetSubAreaIPTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetSubAreaIPTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetSubAreaIPTopic_trans_callbackNumb: ", g_RtnNetSubAreaIPTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetSubAreaIPTopic_mutex);

    int dataNumb = g_RtnNetSubAreaIPTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetSubAreaIPTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetSubAreaIPTopic_trans_dataNumb: ", g_RtnNetSubAreaIPTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetSubAreaIPTopic_queue.empty()) {
        receivedData.push (g_RtnNetSubAreaIPTopic_queue.front());
        g_RtnNetSubAreaIPTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetSubAreaIPTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetSubAreaIPTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetSubAreaIPTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetSubAreaIPTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetSubAreaIPTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetSubAreaIPTopic").ToLocalChecked());

        CShfeFtdcRtnNetSubAreaIPField* pRtnNetSubAreaIP = (CShfeFtdcRtnNetSubAreaIPField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetSubAreaIPJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetSubAreaIP) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetSubAreaIP->OperationType);
                pRtnNetSubAreaIPJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetSubAreaIP->ID);
                pRtnNetSubAreaIPJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRtnNetSubAreaIP->SysNetSubAreaID);
                pRtnNetSubAreaIPJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                v8::Local<v8::String> IP = Nan::New<v8::String> ("IP").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetSubAreaIP->IP, utf8string);
                v8::Local<v8::String> IPValue = Nan::New<v8::String> (pRtnNetSubAreaIP->IP).ToLocalChecked();
                pRtnNetSubAreaIPJS->Set(Local<v8::Value> (IP), Local<v8::Value>(IPValue));

                v8::Local<v8::String> Mask = Nan::New<v8::String> ("Mask").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetSubAreaIP->Mask, utf8string);
                v8::Local<v8::String> MaskValue = Nan::New<v8::String> (pRtnNetSubAreaIP->Mask).ToLocalChecked();
                pRtnNetSubAreaIPJS->Set(Local<v8::Value> (Mask), Local<v8::Value>(MaskValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetSubAreaIP) { 
                params[0] = Local<v8::Value>(pRtnNetSubAreaIPJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetSubAreaIP) { 
            delete[] pRtnNetSubAreaIP;
            pRtnNetSubAreaIP = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetSubAreaIPTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetDeviceTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetDeviceTopic_trans_callbackNumb: ", g_RspQryNetDeviceTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetDeviceTopic_mutex);

    int dataNumb = g_RspQryNetDeviceTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetDeviceTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetDeviceTopic_trans_dataNumb: ", g_RspQryNetDeviceTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetDeviceTopic_queue.empty()) {
        receivedData.push (g_RspQryNetDeviceTopic_queue.front());
        g_RspQryNetDeviceTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetDeviceTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetDeviceTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetDeviceTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetDeviceTopic").ToLocalChecked());

        CShfeFtdcRspQryNetDeviceField* pRspQryNetDevice = (CShfeFtdcRspQryNetDeviceField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetDeviceJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetDevice) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDevice->OperationType);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->ID);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryNetDevice->ObjectID).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->MonitorType_ID);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRspQryNetDevice->SysNetSubAreaID);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                v8::Local<v8::String> CATEGORY_ID = Nan::New<v8::String> ("CATEGORY_ID").ToLocalChecked();
                v8::Local<v8::Integer> CATEGORY_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->CATEGORY_ID);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (CATEGORY_ID), Local<v8::Value>(CATEGORY_IDValue));

                v8::Local<v8::String> FuctionArea = Nan::New<v8::String> ("FuctionArea").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->FuctionArea, utf8string);
                v8::Local<v8::String> FuctionAreaValue = Nan::New<v8::String> (pRspQryNetDevice->FuctionArea).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (FuctionArea), Local<v8::Value>(FuctionAreaValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRspQryNetDevice->IPADDR).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> IPDECODE = Nan::New<v8::String> ("IPDECODE").ToLocalChecked();
                v8::Local<v8::Integer> IPDECODEValue = Nan::New<v8::Integer> (pRspQryNetDevice->IPDECODE);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (IPDECODE), Local<v8::Value>(IPDECODEValue));

                v8::Local<v8::String> NAME = Nan::New<v8::String> ("NAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->NAME, utf8string);
                v8::Local<v8::String> NAMEValue = Nan::New<v8::String> (pRspQryNetDevice->NAME).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (NAME), Local<v8::Value>(NAMEValue));

                v8::Local<v8::String> PORTNUMBER = Nan::New<v8::String> ("PORTNUMBER").ToLocalChecked();
                v8::Local<v8::Integer> PORTNUMBERValue = Nan::New<v8::Integer> (pRspQryNetDevice->PORTNUMBER);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (PORTNUMBER), Local<v8::Value>(PORTNUMBERValue));

                v8::Local<v8::String> CONFIGFILE = Nan::New<v8::String> ("CONFIGFILE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->CONFIGFILE, utf8string);
                v8::Local<v8::String> CONFIGFILEValue = Nan::New<v8::String> (pRspQryNetDevice->CONFIGFILE).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (CONFIGFILE), Local<v8::Value>(CONFIGFILEValue));

                v8::Local<v8::String> RCOMMUNITY = Nan::New<v8::String> ("RCOMMUNITY").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->RCOMMUNITY, utf8string);
                v8::Local<v8::String> RCOMMUNITYValue = Nan::New<v8::String> (pRspQryNetDevice->RCOMMUNITY).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (RCOMMUNITY), Local<v8::Value>(RCOMMUNITYValue));

                v8::Local<v8::String> SNMPVERSION = Nan::New<v8::String> ("SNMPVERSION").ToLocalChecked();
                v8::Local<v8::Integer> SNMPVERSIONValue = Nan::New<v8::Integer> (pRspQryNetDevice->SNMPVERSION);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (SNMPVERSION), Local<v8::Value>(SNMPVERSIONValue));

                v8::Local<v8::String> RAMSIZE = Nan::New<v8::String> ("RAMSIZE").ToLocalChecked();
                v8::Local<v8::Integer> RAMSIZEValue = Nan::New<v8::Integer> (pRspQryNetDevice->RAMSIZE);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (RAMSIZE), Local<v8::Value>(RAMSIZEValue));

                v8::Local<v8::String> FLASHSIZE = Nan::New<v8::String> ("FLASHSIZE").ToLocalChecked();
                v8::Local<v8::Integer> FLASHSIZEValue = Nan::New<v8::Integer> (pRspQryNetDevice->FLASHSIZE);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (FLASHSIZE), Local<v8::Value>(FLASHSIZEValue));

                v8::Local<v8::String> NVRAMSIZE = Nan::New<v8::String> ("NVRAMSIZE").ToLocalChecked();
                v8::Local<v8::Integer> NVRAMSIZEValue = Nan::New<v8::Integer> (pRspQryNetDevice->NVRAMSIZE);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (NVRAMSIZE), Local<v8::Value>(NVRAMSIZEValue));

                v8::Local<v8::String> CABINET_ID = Nan::New<v8::String> ("CABINET_ID").ToLocalChecked();
                v8::Local<v8::Integer> CABINET_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->CABINET_ID);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (CABINET_ID), Local<v8::Value>(CABINET_IDValue));

                v8::Local<v8::String> ROOM_ID = Nan::New<v8::String> ("ROOM_ID").ToLocalChecked();
                v8::Local<v8::Integer> ROOM_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->ROOM_ID);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (ROOM_ID), Local<v8::Value>(ROOM_IDValue));

                v8::Local<v8::String> IOSVERSION_ID = Nan::New<v8::String> ("IOSVERSION_ID").ToLocalChecked();
                v8::Local<v8::Integer> IOSVERSION_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->IOSVERSION_ID);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (IOSVERSION_ID), Local<v8::Value>(IOSVERSION_IDValue));

                v8::Local<v8::String> DESCRIPTION = Nan::New<v8::String> ("DESCRIPTION").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->DESCRIPTION, utf8string);
                v8::Local<v8::String> DESCRIPTIONValue = Nan::New<v8::String> (pRspQryNetDevice->DESCRIPTION).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (DESCRIPTION), Local<v8::Value>(DESCRIPTIONValue));

                v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->USERNAME, utf8string);
                v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (pRspQryNetDevice->USERNAME).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                v8::Local<v8::String> PASSWD = Nan::New<v8::String> ("PASSWD").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->PASSWD, utf8string);
                v8::Local<v8::String> PASSWDValue = Nan::New<v8::String> (pRspQryNetDevice->PASSWD).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (PASSWD), Local<v8::Value>(PASSWDValue));

                v8::Local<v8::String> ENPASSWD = Nan::New<v8::String> ("ENPASSWD").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->ENPASSWD, utf8string);
                v8::Local<v8::String> ENPASSWDValue = Nan::New<v8::String> (pRspQryNetDevice->ENPASSWD).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (ENPASSWD), Local<v8::Value>(ENPASSWDValue));

                v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->MANUFACTORY_ID);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                v8::Local<v8::String> CFGSAVETYPE = Nan::New<v8::String> ("CFGSAVETYPE").ToLocalChecked();
                v8::Local<v8::Integer> CFGSAVETYPEValue = Nan::New<v8::Integer> (pRspQryNetDevice->CFGSAVETYPE);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (CFGSAVETYPE), Local<v8::Value>(CFGSAVETYPEValue));

                v8::Local<v8::String> DEVICETYPE = Nan::New<v8::String> ("DEVICETYPE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDevice->DEVICETYPE, utf8string);
                v8::Local<v8::String> DEVICETYPEValue = Nan::New<v8::String> (pRspQryNetDevice->DEVICETYPE).ToLocalChecked();
                pRspQryNetDeviceJS->Set(Local<v8::Value> (DEVICETYPE), Local<v8::Value>(DEVICETYPEValue));

                v8::Local<v8::String> SENDSMS = Nan::New<v8::String> ("SENDSMS").ToLocalChecked();
                v8::Local<v8::Integer> SENDSMSValue = Nan::New<v8::Integer> (pRspQryNetDevice->SENDSMS);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (SENDSMS), Local<v8::Value>(SENDSMSValue));

                v8::Local<v8::String> ISSNMP = Nan::New<v8::String> ("ISSNMP").ToLocalChecked();
                v8::Local<v8::Integer> ISSNMPValue = Nan::New<v8::Integer> (pRspQryNetDevice->ISSNMP);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (ISSNMP), Local<v8::Value>(ISSNMPValue));

                v8::Local<v8::String> SLOTNUM = Nan::New<v8::String> ("SLOTNUM").ToLocalChecked();
                v8::Local<v8::Integer> SLOTNUMValue = Nan::New<v8::Integer> (pRspQryNetDevice->SLOTNUM);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (SLOTNUM), Local<v8::Value>(SLOTNUMValue));

                v8::Local<v8::String> ISPING = Nan::New<v8::String> ("ISPING").ToLocalChecked();
                v8::Local<v8::Integer> ISPINGValue = Nan::New<v8::Integer> (pRspQryNetDevice->ISPING);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (ISPING), Local<v8::Value>(ISPINGValue));

                v8::Local<v8::String> IFNUM = Nan::New<v8::String> ("IFNUM").ToLocalChecked();
                v8::Local<v8::Integer> IFNUMValue = Nan::New<v8::Integer> (pRspQryNetDevice->IFNUM);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (IFNUM), Local<v8::Value>(IFNUMValue));

                v8::Local<v8::String> APPLICATION_ID = Nan::New<v8::String> ("APPLICATION_ID").ToLocalChecked();
                v8::Local<v8::Integer> APPLICATION_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->APPLICATION_ID);
                pRspQryNetDeviceJS->Set(Local<v8::Value> (APPLICATION_ID), Local<v8::Value>(APPLICATION_IDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetDevice) { 
                params[0] = Local<v8::Value>(pRspQryNetDeviceJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetDevice) { 
            delete[] pRspQryNetDevice;
            pRspQryNetDevice = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetDeviceTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDeviceTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetDeviceTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetDeviceTopic_trans_callbackNumb: ", g_RtnNetDeviceTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetDeviceTopic_mutex);

    int dataNumb = g_RtnNetDeviceTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetDeviceTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetDeviceTopic_trans_dataNumb: ", g_RtnNetDeviceTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetDeviceTopic_queue.empty()) {
        receivedData.push (g_RtnNetDeviceTopic_queue.front());
        g_RtnNetDeviceTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetDeviceTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetDeviceTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDeviceTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetDeviceTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDeviceTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetDeviceTopic").ToLocalChecked());

        CShfeFtdcRtnNetDeviceField* pRtnNetDevice = (CShfeFtdcRtnNetDeviceField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetDeviceJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetDevice) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDevice->OperationType);
                pRtnNetDeviceJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDevice->ID);
                pRtnNetDeviceJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnNetDevice->ObjectID).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->MonitorType_ID);
                pRtnNetDeviceJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRtnNetDevice->SysNetSubAreaID);
                pRtnNetDeviceJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                v8::Local<v8::String> CATEGORY_ID = Nan::New<v8::String> ("CATEGORY_ID").ToLocalChecked();
                v8::Local<v8::Integer> CATEGORY_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->CATEGORY_ID);
                pRtnNetDeviceJS->Set(Local<v8::Value> (CATEGORY_ID), Local<v8::Value>(CATEGORY_IDValue));

                v8::Local<v8::String> FuctionArea = Nan::New<v8::String> ("FuctionArea").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->FuctionArea, utf8string);
                v8::Local<v8::String> FuctionAreaValue = Nan::New<v8::String> (pRtnNetDevice->FuctionArea).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (FuctionArea), Local<v8::Value>(FuctionAreaValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRtnNetDevice->IPADDR).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> IPDECODE = Nan::New<v8::String> ("IPDECODE").ToLocalChecked();
                v8::Local<v8::Integer> IPDECODEValue = Nan::New<v8::Integer> (pRtnNetDevice->IPDECODE);
                pRtnNetDeviceJS->Set(Local<v8::Value> (IPDECODE), Local<v8::Value>(IPDECODEValue));

                v8::Local<v8::String> NAME = Nan::New<v8::String> ("NAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->NAME, utf8string);
                v8::Local<v8::String> NAMEValue = Nan::New<v8::String> (pRtnNetDevice->NAME).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (NAME), Local<v8::Value>(NAMEValue));

                v8::Local<v8::String> PORTNUMBER = Nan::New<v8::String> ("PORTNUMBER").ToLocalChecked();
                v8::Local<v8::Integer> PORTNUMBERValue = Nan::New<v8::Integer> (pRtnNetDevice->PORTNUMBER);
                pRtnNetDeviceJS->Set(Local<v8::Value> (PORTNUMBER), Local<v8::Value>(PORTNUMBERValue));

                v8::Local<v8::String> CONFIGFILE = Nan::New<v8::String> ("CONFIGFILE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->CONFIGFILE, utf8string);
                v8::Local<v8::String> CONFIGFILEValue = Nan::New<v8::String> (pRtnNetDevice->CONFIGFILE).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (CONFIGFILE), Local<v8::Value>(CONFIGFILEValue));

                v8::Local<v8::String> RCOMMUNITY = Nan::New<v8::String> ("RCOMMUNITY").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->RCOMMUNITY, utf8string);
                v8::Local<v8::String> RCOMMUNITYValue = Nan::New<v8::String> (pRtnNetDevice->RCOMMUNITY).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (RCOMMUNITY), Local<v8::Value>(RCOMMUNITYValue));

                v8::Local<v8::String> SNMPVERSION = Nan::New<v8::String> ("SNMPVERSION").ToLocalChecked();
                v8::Local<v8::Integer> SNMPVERSIONValue = Nan::New<v8::Integer> (pRtnNetDevice->SNMPVERSION);
                pRtnNetDeviceJS->Set(Local<v8::Value> (SNMPVERSION), Local<v8::Value>(SNMPVERSIONValue));

                v8::Local<v8::String> RAMSIZE = Nan::New<v8::String> ("RAMSIZE").ToLocalChecked();
                v8::Local<v8::Integer> RAMSIZEValue = Nan::New<v8::Integer> (pRtnNetDevice->RAMSIZE);
                pRtnNetDeviceJS->Set(Local<v8::Value> (RAMSIZE), Local<v8::Value>(RAMSIZEValue));

                v8::Local<v8::String> FLASHSIZE = Nan::New<v8::String> ("FLASHSIZE").ToLocalChecked();
                v8::Local<v8::Integer> FLASHSIZEValue = Nan::New<v8::Integer> (pRtnNetDevice->FLASHSIZE);
                pRtnNetDeviceJS->Set(Local<v8::Value> (FLASHSIZE), Local<v8::Value>(FLASHSIZEValue));

                v8::Local<v8::String> NVRAMSIZE = Nan::New<v8::String> ("NVRAMSIZE").ToLocalChecked();
                v8::Local<v8::Integer> NVRAMSIZEValue = Nan::New<v8::Integer> (pRtnNetDevice->NVRAMSIZE);
                pRtnNetDeviceJS->Set(Local<v8::Value> (NVRAMSIZE), Local<v8::Value>(NVRAMSIZEValue));

                v8::Local<v8::String> CABINET_ID = Nan::New<v8::String> ("CABINET_ID").ToLocalChecked();
                v8::Local<v8::Integer> CABINET_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->CABINET_ID);
                pRtnNetDeviceJS->Set(Local<v8::Value> (CABINET_ID), Local<v8::Value>(CABINET_IDValue));

                v8::Local<v8::String> ROOM_ID = Nan::New<v8::String> ("ROOM_ID").ToLocalChecked();
                v8::Local<v8::Integer> ROOM_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->ROOM_ID);
                pRtnNetDeviceJS->Set(Local<v8::Value> (ROOM_ID), Local<v8::Value>(ROOM_IDValue));

                v8::Local<v8::String> IOSVERSION_ID = Nan::New<v8::String> ("IOSVERSION_ID").ToLocalChecked();
                v8::Local<v8::Integer> IOSVERSION_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->IOSVERSION_ID);
                pRtnNetDeviceJS->Set(Local<v8::Value> (IOSVERSION_ID), Local<v8::Value>(IOSVERSION_IDValue));

                v8::Local<v8::String> DESCRIPTION = Nan::New<v8::String> ("DESCRIPTION").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->DESCRIPTION, utf8string);
                v8::Local<v8::String> DESCRIPTIONValue = Nan::New<v8::String> (pRtnNetDevice->DESCRIPTION).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (DESCRIPTION), Local<v8::Value>(DESCRIPTIONValue));

                v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->USERNAME, utf8string);
                v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (pRtnNetDevice->USERNAME).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                v8::Local<v8::String> PASSWD = Nan::New<v8::String> ("PASSWD").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->PASSWD, utf8string);
                v8::Local<v8::String> PASSWDValue = Nan::New<v8::String> (pRtnNetDevice->PASSWD).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (PASSWD), Local<v8::Value>(PASSWDValue));

                v8::Local<v8::String> ENPASSWD = Nan::New<v8::String> ("ENPASSWD").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->ENPASSWD, utf8string);
                v8::Local<v8::String> ENPASSWDValue = Nan::New<v8::String> (pRtnNetDevice->ENPASSWD).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (ENPASSWD), Local<v8::Value>(ENPASSWDValue));

                v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->MANUFACTORY_ID);
                pRtnNetDeviceJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                v8::Local<v8::String> CFGSAVETYPE = Nan::New<v8::String> ("CFGSAVETYPE").ToLocalChecked();
                v8::Local<v8::Integer> CFGSAVETYPEValue = Nan::New<v8::Integer> (pRtnNetDevice->CFGSAVETYPE);
                pRtnNetDeviceJS->Set(Local<v8::Value> (CFGSAVETYPE), Local<v8::Value>(CFGSAVETYPEValue));

                v8::Local<v8::String> DEVICETYPE = Nan::New<v8::String> ("DEVICETYPE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDevice->DEVICETYPE, utf8string);
                v8::Local<v8::String> DEVICETYPEValue = Nan::New<v8::String> (pRtnNetDevice->DEVICETYPE).ToLocalChecked();
                pRtnNetDeviceJS->Set(Local<v8::Value> (DEVICETYPE), Local<v8::Value>(DEVICETYPEValue));

                v8::Local<v8::String> SENDSMS = Nan::New<v8::String> ("SENDSMS").ToLocalChecked();
                v8::Local<v8::Integer> SENDSMSValue = Nan::New<v8::Integer> (pRtnNetDevice->SENDSMS);
                pRtnNetDeviceJS->Set(Local<v8::Value> (SENDSMS), Local<v8::Value>(SENDSMSValue));

                v8::Local<v8::String> ISSNMP = Nan::New<v8::String> ("ISSNMP").ToLocalChecked();
                v8::Local<v8::Integer> ISSNMPValue = Nan::New<v8::Integer> (pRtnNetDevice->ISSNMP);
                pRtnNetDeviceJS->Set(Local<v8::Value> (ISSNMP), Local<v8::Value>(ISSNMPValue));

                v8::Local<v8::String> SLOTNUM = Nan::New<v8::String> ("SLOTNUM").ToLocalChecked();
                v8::Local<v8::Integer> SLOTNUMValue = Nan::New<v8::Integer> (pRtnNetDevice->SLOTNUM);
                pRtnNetDeviceJS->Set(Local<v8::Value> (SLOTNUM), Local<v8::Value>(SLOTNUMValue));

                v8::Local<v8::String> ISPING = Nan::New<v8::String> ("ISPING").ToLocalChecked();
                v8::Local<v8::Integer> ISPINGValue = Nan::New<v8::Integer> (pRtnNetDevice->ISPING);
                pRtnNetDeviceJS->Set(Local<v8::Value> (ISPING), Local<v8::Value>(ISPINGValue));

                v8::Local<v8::String> IFNUM = Nan::New<v8::String> ("IFNUM").ToLocalChecked();
                v8::Local<v8::Integer> IFNUMValue = Nan::New<v8::Integer> (pRtnNetDevice->IFNUM);
                pRtnNetDeviceJS->Set(Local<v8::Value> (IFNUM), Local<v8::Value>(IFNUMValue));

                v8::Local<v8::String> APPLICATION_ID = Nan::New<v8::String> ("APPLICATION_ID").ToLocalChecked();
                v8::Local<v8::Integer> APPLICATION_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->APPLICATION_ID);
                pRtnNetDeviceJS->Set(Local<v8::Value> (APPLICATION_ID), Local<v8::Value>(APPLICATION_IDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetDevice) { 
                params[0] = Local<v8::Value>(pRtnNetDeviceJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetDevice) { 
            delete[] pRtnNetDevice;
            pRtnNetDevice = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetDeviceTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceDetectTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetDeviceDetectTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetDeviceDetectTopic_trans_callbackNumb: ", g_RspQryNetDeviceDetectTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetDeviceDetectTopic_mutex);

    int dataNumb = g_RspQryNetDeviceDetectTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetDeviceDetectTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetDeviceDetectTopic_trans_dataNumb: ", g_RspQryNetDeviceDetectTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetDeviceDetectTopic_queue.empty()) {
        receivedData.push (g_RspQryNetDeviceDetectTopic_queue.front());
        g_RspQryNetDeviceDetectTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetDeviceDetectTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetDeviceDetectTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceDetectTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetDeviceDetectTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceDetectTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetDeviceDetectTopic").ToLocalChecked());

        CShfeFtdcRspQryNetDeviceDetectField* pRspQryNetDeviceDetect = (CShfeFtdcRspQryNetDeviceDetectField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetDeviceDetectJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetDeviceDetect) { 
                string utf8string;
                v8::Local<v8::String> SysNetAreaID = Nan::New<v8::String> ("SysNetAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetAreaIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceDetect->SysNetAreaID);
                pRspQryNetDeviceDetectJS->Set(Local<v8::Value> (SysNetAreaID), Local<v8::Value>(SysNetAreaIDValue));

                v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceDetect->SysNetSubAreaID);
                pRspQryNetDeviceDetectJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                v8::Local<v8::String> IP = Nan::New<v8::String> ("IP").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceDetect->IP, utf8string);
                v8::Local<v8::String> IPValue = Nan::New<v8::String> (pRspQryNetDeviceDetect->IP).ToLocalChecked();
                pRspQryNetDeviceDetectJS->Set(Local<v8::Value> (IP), Local<v8::Value>(IPValue));

                v8::Local<v8::String> Mask = Nan::New<v8::String> ("Mask").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceDetect->Mask, utf8string);
                v8::Local<v8::String> MaskValue = Nan::New<v8::String> (pRspQryNetDeviceDetect->Mask).ToLocalChecked();
                pRspQryNetDeviceDetectJS->Set(Local<v8::Value> (Mask), Local<v8::Value>(MaskValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetDeviceDetect) { 
                params[0] = Local<v8::Value>(pRspQryNetDeviceDetectJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetDeviceDetect) { 
            delete[] pRspQryNetDeviceDetect;
            pRspQryNetDeviceDetect = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetDeviceDetectTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetBuildingTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetBuildingTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetBuildingTopic_trans_callbackNumb: ", g_RspQryNetBuildingTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetBuildingTopic_mutex);

    int dataNumb = g_RspQryNetBuildingTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetBuildingTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetBuildingTopic_trans_dataNumb: ", g_RspQryNetBuildingTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetBuildingTopic_queue.empty()) {
        receivedData.push (g_RspQryNetBuildingTopic_queue.front());
        g_RspQryNetBuildingTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetBuildingTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetBuildingTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetBuildingTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetBuildingTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetBuildingTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetBuildingTopic").ToLocalChecked());

        CShfeFtdcRspQryNetBuildingField* pRspQryNetBuilding = (CShfeFtdcRspQryNetBuildingField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetBuildingJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetBuilding) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetBuilding->OperationType);
                pRspQryNetBuildingJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetBuilding->ID);
                pRspQryNetBuildingJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBuilding->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetBuilding->CName).ToLocalChecked();
                pRspQryNetBuildingJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBuilding->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetBuilding->EName).ToLocalChecked();
                pRspQryNetBuildingJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetBuilding) { 
                params[0] = Local<v8::Value>(pRspQryNetBuildingJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetBuilding) { 
            delete[] pRspQryNetBuilding;
            pRspQryNetBuilding = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetBuildingTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetBuildingTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetBuildingTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetBuildingTopic_trans_callbackNumb: ", g_RtnNetBuildingTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetBuildingTopic_mutex);

    int dataNumb = g_RtnNetBuildingTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetBuildingTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetBuildingTopic_trans_dataNumb: ", g_RtnNetBuildingTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetBuildingTopic_queue.empty()) {
        receivedData.push (g_RtnNetBuildingTopic_queue.front());
        g_RtnNetBuildingTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetBuildingTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetBuildingTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetBuildingTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetBuildingTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetBuildingTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetBuildingTopic").ToLocalChecked());

        CShfeFtdcRtnNetBuildingField* pRtnNetBuilding = (CShfeFtdcRtnNetBuildingField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetBuildingJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetBuilding) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetBuilding->OperationType);
                pRtnNetBuildingJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetBuilding->ID);
                pRtnNetBuildingJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBuilding->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetBuilding->CName).ToLocalChecked();
                pRtnNetBuildingJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBuilding->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetBuilding->EName).ToLocalChecked();
                pRtnNetBuildingJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetBuilding) { 
                params[0] = Local<v8::Value>(pRtnNetBuildingJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetBuilding) { 
            delete[] pRtnNetBuilding;
            pRtnNetBuilding = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetBuildingTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetRoomTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetRoomTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetRoomTopic_trans_callbackNumb: ", g_RspQryNetRoomTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetRoomTopic_mutex);

    int dataNumb = g_RspQryNetRoomTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetRoomTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetRoomTopic_trans_dataNumb: ", g_RspQryNetRoomTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetRoomTopic_queue.empty()) {
        receivedData.push (g_RspQryNetRoomTopic_queue.front());
        g_RspQryNetRoomTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetRoomTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetRoomTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetRoomTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetRoomTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetRoomTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetRoomTopic").ToLocalChecked());

        CShfeFtdcRspQryNetRoomField* pRspQryNetRoom = (CShfeFtdcRspQryNetRoomField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetRoomJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetRoom) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetRoom->OperationType);
                pRspQryNetRoomJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetRoom->ID);
                pRspQryNetRoomJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SysNetBuildingID = Nan::New<v8::String> ("SysNetBuildingID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetBuildingIDValue = Nan::New<v8::Integer> (pRspQryNetRoom->SysNetBuildingID);
                pRspQryNetRoomJS->Set(Local<v8::Value> (SysNetBuildingID), Local<v8::Value>(SysNetBuildingIDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRoom->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetRoom->CName).ToLocalChecked();
                pRspQryNetRoomJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRoom->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetRoom->EName).ToLocalChecked();
                pRspQryNetRoomJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetRoom) { 
                params[0] = Local<v8::Value>(pRspQryNetRoomJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetRoom) { 
            delete[] pRspQryNetRoom;
            pRspQryNetRoom = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetRoomTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetRoomTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetRoomTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetRoomTopic_trans_callbackNumb: ", g_RtnNetRoomTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetRoomTopic_mutex);

    int dataNumb = g_RtnNetRoomTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetRoomTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetRoomTopic_trans_dataNumb: ", g_RtnNetRoomTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetRoomTopic_queue.empty()) {
        receivedData.push (g_RtnNetRoomTopic_queue.front());
        g_RtnNetRoomTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetRoomTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetRoomTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetRoomTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetRoomTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetRoomTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetRoomTopic").ToLocalChecked());

        CShfeFtdcRtnNetRoomField* pRtnNetRoom = (CShfeFtdcRtnNetRoomField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetRoomJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetRoom) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetRoom->OperationType);
                pRtnNetRoomJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetRoom->ID);
                pRtnNetRoomJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SysNetBuildingID = Nan::New<v8::String> ("SysNetBuildingID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetBuildingIDValue = Nan::New<v8::Integer> (pRtnNetRoom->SysNetBuildingID);
                pRtnNetRoomJS->Set(Local<v8::Value> (SysNetBuildingID), Local<v8::Value>(SysNetBuildingIDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRoom->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetRoom->CName).ToLocalChecked();
                pRtnNetRoomJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRoom->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetRoom->EName).ToLocalChecked();
                pRtnNetRoomJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetRoom) { 
                params[0] = Local<v8::Value>(pRtnNetRoomJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetRoom) { 
            delete[] pRtnNetRoom;
            pRtnNetRoom = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetRoomTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetCabinetsTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetCabinetsTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetCabinetsTopic_trans_callbackNumb: ", g_RspQryNetCabinetsTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetCabinetsTopic_mutex);

    int dataNumb = g_RspQryNetCabinetsTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetCabinetsTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetCabinetsTopic_trans_dataNumb: ", g_RspQryNetCabinetsTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetCabinetsTopic_queue.empty()) {
        receivedData.push (g_RspQryNetCabinetsTopic_queue.front());
        g_RspQryNetCabinetsTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetCabinetsTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetCabinetsTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetCabinetsTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetCabinetsTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetCabinetsTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetCabinetsTopic").ToLocalChecked());

        CShfeFtdcRspQryNetCabinetsField* pRspQryNetCabinets = (CShfeFtdcRspQryNetCabinetsField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetCabinetsJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetCabinets) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetCabinets->OperationType);
                pRspQryNetCabinetsJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetCabinets->ID);
                pRspQryNetCabinetsJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SysNetRoomID = Nan::New<v8::String> ("SysNetRoomID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetRoomIDValue = Nan::New<v8::Integer> (pRspQryNetCabinets->SysNetRoomID);
                pRspQryNetCabinetsJS->Set(Local<v8::Value> (SysNetRoomID), Local<v8::Value>(SysNetRoomIDValue));

                v8::Local<v8::String> SysNetBuildingID = Nan::New<v8::String> ("SysNetBuildingID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetBuildingIDValue = Nan::New<v8::Integer> (pRspQryNetCabinets->SysNetBuildingID);
                pRspQryNetCabinetsJS->Set(Local<v8::Value> (SysNetBuildingID), Local<v8::Value>(SysNetBuildingIDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetCabinets->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetCabinets->CName).ToLocalChecked();
                pRspQryNetCabinetsJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetCabinets->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetCabinets->EName).ToLocalChecked();
                pRspQryNetCabinetsJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> CabinetsType = Nan::New<v8::String> ("CabinetsType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetCabinets->CabinetsType, utf8string);
                v8::Local<v8::String> CabinetsTypeValue = Nan::New<v8::String> (pRspQryNetCabinets->CabinetsType).ToLocalChecked();
                pRspQryNetCabinetsJS->Set(Local<v8::Value> (CabinetsType), Local<v8::Value>(CabinetsTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetCabinets) { 
                params[0] = Local<v8::Value>(pRspQryNetCabinetsJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetCabinets) { 
            delete[] pRspQryNetCabinets;
            pRspQryNetCabinets = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetCabinetsTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetCabinetsTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetCabinetsTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetCabinetsTopic_trans_callbackNumb: ", g_RtnNetCabinetsTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetCabinetsTopic_mutex);

    int dataNumb = g_RtnNetCabinetsTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetCabinetsTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetCabinetsTopic_trans_dataNumb: ", g_RtnNetCabinetsTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetCabinetsTopic_queue.empty()) {
        receivedData.push (g_RtnNetCabinetsTopic_queue.front());
        g_RtnNetCabinetsTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetCabinetsTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetCabinetsTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetCabinetsTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetCabinetsTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetCabinetsTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetCabinetsTopic").ToLocalChecked());

        CShfeFtdcRtnNetCabinetsField* pRtnNetCabinets = (CShfeFtdcRtnNetCabinetsField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetCabinetsJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetCabinets) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetCabinets->OperationType);
                pRtnNetCabinetsJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetCabinets->ID);
                pRtnNetCabinetsJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SysNetRoomID = Nan::New<v8::String> ("SysNetRoomID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetRoomIDValue = Nan::New<v8::Integer> (pRtnNetCabinets->SysNetRoomID);
                pRtnNetCabinetsJS->Set(Local<v8::Value> (SysNetRoomID), Local<v8::Value>(SysNetRoomIDValue));

                v8::Local<v8::String> SysNetBuildingID = Nan::New<v8::String> ("SysNetBuildingID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetBuildingIDValue = Nan::New<v8::Integer> (pRtnNetCabinets->SysNetBuildingID);
                pRtnNetCabinetsJS->Set(Local<v8::Value> (SysNetBuildingID), Local<v8::Value>(SysNetBuildingIDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetCabinets->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetCabinets->CName).ToLocalChecked();
                pRtnNetCabinetsJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetCabinets->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetCabinets->EName).ToLocalChecked();
                pRtnNetCabinetsJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> CabinetsType = Nan::New<v8::String> ("CabinetsType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetCabinets->CabinetsType, utf8string);
                v8::Local<v8::String> CabinetsTypeValue = Nan::New<v8::String> (pRtnNetCabinets->CabinetsType).ToLocalChecked();
                pRtnNetCabinetsJS->Set(Local<v8::Value> (CabinetsType), Local<v8::Value>(CabinetsTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetCabinets) { 
                params[0] = Local<v8::Value>(pRtnNetCabinetsJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetCabinets) { 
            delete[] pRtnNetCabinets;
            pRtnNetCabinets = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetCabinetsTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetOIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetOIDTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetOIDTopic_trans_callbackNumb: ", g_RspQryNetOIDTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetOIDTopic_mutex);

    int dataNumb = g_RspQryNetOIDTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetOIDTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetOIDTopic_trans_dataNumb: ", g_RspQryNetOIDTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetOIDTopic_queue.empty()) {
        receivedData.push (g_RspQryNetOIDTopic_queue.front());
        g_RspQryNetOIDTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetOIDTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetOIDTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetOIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetOIDTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetOIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetOIDTopic").ToLocalChecked());

        CShfeFtdcRspQryNetOIDField* pRspQryNetOID = (CShfeFtdcRspQryNetOIDField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetOIDJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetOID) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetOID->OperationType);
                pRspQryNetOIDJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetOID->ID);
                pRspQryNetOIDJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetOID->Manufactory, utf8string);
                v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (pRspQryNetOID->Manufactory).ToLocalChecked();
                pRspQryNetOIDJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                v8::Local<v8::String> DeviceType = Nan::New<v8::String> ("DeviceType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetOID->DeviceType, utf8string);
                v8::Local<v8::String> DeviceTypeValue = Nan::New<v8::String> (pRspQryNetOID->DeviceType).ToLocalChecked();
                pRspQryNetOIDJS->Set(Local<v8::Value> (DeviceType), Local<v8::Value>(DeviceTypeValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetOID->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetOID->CName).ToLocalChecked();
                pRspQryNetOIDJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetOID->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetOID->EName).ToLocalChecked();
                pRspQryNetOIDJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> OID = Nan::New<v8::String> ("OID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetOID->OID, utf8string);
                v8::Local<v8::String> OIDValue = Nan::New<v8::String> (pRspQryNetOID->OID).ToLocalChecked();
                pRspQryNetOIDJS->Set(Local<v8::Value> (OID), Local<v8::Value>(OIDValue));

                v8::Local<v8::String> Unit = Nan::New<v8::String> ("Unit").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetOID->Unit, utf8string);
                v8::Local<v8::String> UnitValue = Nan::New<v8::String> (pRspQryNetOID->Unit).ToLocalChecked();
                pRspQryNetOIDJS->Set(Local<v8::Value> (Unit), Local<v8::Value>(UnitValue));

                v8::Local<v8::String> isTheTable = Nan::New<v8::String> ("isTheTable").ToLocalChecked();
                v8::Local<v8::Integer> isTheTableValue = Nan::New<v8::Integer> (pRspQryNetOID->isTheTable);
                pRspQryNetOIDJS->Set(Local<v8::Value> (isTheTable), Local<v8::Value>(isTheTableValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetOID) { 
                params[0] = Local<v8::Value>(pRspQryNetOIDJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetOID) { 
            delete[] pRspQryNetOID;
            pRspQryNetOID = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetOIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetOIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetOIDTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetOIDTopic_trans_callbackNumb: ", g_RtnNetOIDTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetOIDTopic_mutex);

    int dataNumb = g_RtnNetOIDTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetOIDTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetOIDTopic_trans_dataNumb: ", g_RtnNetOIDTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetOIDTopic_queue.empty()) {
        receivedData.push (g_RtnNetOIDTopic_queue.front());
        g_RtnNetOIDTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetOIDTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetOIDTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetOIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetOIDTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetOIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetOIDTopic").ToLocalChecked());

        CShfeFtdcRtnNetOIDField* pRtnNetOID = (CShfeFtdcRtnNetOIDField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetOIDJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetOID) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetOID->OperationType);
                pRtnNetOIDJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetOID->ID);
                pRtnNetOIDJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetOID->Manufactory, utf8string);
                v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (pRtnNetOID->Manufactory).ToLocalChecked();
                pRtnNetOIDJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                v8::Local<v8::String> DeviceType = Nan::New<v8::String> ("DeviceType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetOID->DeviceType, utf8string);
                v8::Local<v8::String> DeviceTypeValue = Nan::New<v8::String> (pRtnNetOID->DeviceType).ToLocalChecked();
                pRtnNetOIDJS->Set(Local<v8::Value> (DeviceType), Local<v8::Value>(DeviceTypeValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetOID->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetOID->CName).ToLocalChecked();
                pRtnNetOIDJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetOID->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetOID->EName).ToLocalChecked();
                pRtnNetOIDJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> OID = Nan::New<v8::String> ("OID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetOID->OID, utf8string);
                v8::Local<v8::String> OIDValue = Nan::New<v8::String> (pRtnNetOID->OID).ToLocalChecked();
                pRtnNetOIDJS->Set(Local<v8::Value> (OID), Local<v8::Value>(OIDValue));

                v8::Local<v8::String> Unit = Nan::New<v8::String> ("Unit").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetOID->Unit, utf8string);
                v8::Local<v8::String> UnitValue = Nan::New<v8::String> (pRtnNetOID->Unit).ToLocalChecked();
                pRtnNetOIDJS->Set(Local<v8::Value> (Unit), Local<v8::Value>(UnitValue));

                v8::Local<v8::String> isTheTable = Nan::New<v8::String> ("isTheTable").ToLocalChecked();
                v8::Local<v8::Integer> isTheTableValue = Nan::New<v8::Integer> (pRtnNetOID->isTheTable);
                pRtnNetOIDJS->Set(Local<v8::Value> (isTheTable), Local<v8::Value>(isTheTableValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetOID) { 
                params[0] = Local<v8::Value>(pRtnNetOIDJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetOID) { 
            delete[] pRtnNetOID;
            pRtnNetOID = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetOIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetTimePolicyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetTimePolicyTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetTimePolicyTopic_trans_callbackNumb: ", g_RspQryNetTimePolicyTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetTimePolicyTopic_mutex);

    int dataNumb = g_RspQryNetTimePolicyTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetTimePolicyTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetTimePolicyTopic_trans_dataNumb: ", g_RspQryNetTimePolicyTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetTimePolicyTopic_queue.empty()) {
        receivedData.push (g_RspQryNetTimePolicyTopic_queue.front());
        g_RspQryNetTimePolicyTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetTimePolicyTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetTimePolicyTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetTimePolicyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetTimePolicyTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetTimePolicyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetTimePolicyTopic").ToLocalChecked());

        CShfeFtdcRspQryNetTimePolicyField* pRspQryNetTimePolicy = (CShfeFtdcRspQryNetTimePolicyField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetTimePolicyJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetTimePolicy) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetTimePolicy->OperationType);
                pRspQryNetTimePolicyJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetTimePolicy->ID);
                pRspQryNetTimePolicyJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetTimePolicy->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetTimePolicy->CName).ToLocalChecked();
                pRspQryNetTimePolicyJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetTimePolicy->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetTimePolicy->EName).ToLocalChecked();
                pRspQryNetTimePolicyJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> PolicyType = Nan::New<v8::String> ("PolicyType").ToLocalChecked();
                v8::Local<v8::Integer> PolicyTypeValue = Nan::New<v8::Integer> (pRspQryNetTimePolicy->PolicyType);
                pRspQryNetTimePolicyJS->Set(Local<v8::Value> (PolicyType), Local<v8::Value>(PolicyTypeValue));

                v8::Local<v8::String> PolicyString = Nan::New<v8::String> ("PolicyString").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetTimePolicy->PolicyString, utf8string);
                v8::Local<v8::String> PolicyStringValue = Nan::New<v8::String> (pRspQryNetTimePolicy->PolicyString).ToLocalChecked();
                pRspQryNetTimePolicyJS->Set(Local<v8::Value> (PolicyString), Local<v8::Value>(PolicyStringValue));

                v8::Local<v8::String> TradingDay = Nan::New<v8::String> ("TradingDay").ToLocalChecked();
                v8::Local<v8::Integer> TradingDayValue = Nan::New<v8::Integer> (pRspQryNetTimePolicy->TradingDay);
                pRspQryNetTimePolicyJS->Set(Local<v8::Value> (TradingDay), Local<v8::Value>(TradingDayValue));

                v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetTimePolicy->Description, utf8string);
                v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (pRspQryNetTimePolicy->Description).ToLocalChecked();
                pRspQryNetTimePolicyJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                v8::Local<v8::String> Operation = Nan::New<v8::String> ("Operation").ToLocalChecked();
                v8::Local<v8::Integer> OperationValue = Nan::New<v8::Integer> (pRspQryNetTimePolicy->Operation);
                pRspQryNetTimePolicyJS->Set(Local<v8::Value> (Operation), Local<v8::Value>(OperationValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetTimePolicy) { 
                params[0] = Local<v8::Value>(pRspQryNetTimePolicyJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetTimePolicy) { 
            delete[] pRspQryNetTimePolicy;
            pRspQryNetTimePolicy = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetTimePolicyTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetTimePolicyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetTimePolicyTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetTimePolicyTopic_trans_callbackNumb: ", g_RtnNetTimePolicyTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetTimePolicyTopic_mutex);

    int dataNumb = g_RtnNetTimePolicyTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetTimePolicyTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetTimePolicyTopic_trans_dataNumb: ", g_RtnNetTimePolicyTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetTimePolicyTopic_queue.empty()) {
        receivedData.push (g_RtnNetTimePolicyTopic_queue.front());
        g_RtnNetTimePolicyTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetTimePolicyTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetTimePolicyTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetTimePolicyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetTimePolicyTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetTimePolicyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetTimePolicyTopic").ToLocalChecked());

        CShfeFtdcRtnNetTimePolicyField* pRtnNetTimePolicy = (CShfeFtdcRtnNetTimePolicyField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetTimePolicyJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetTimePolicy) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetTimePolicy->OperationType);
                pRtnNetTimePolicyJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetTimePolicy->ID);
                pRtnNetTimePolicyJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetTimePolicy->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetTimePolicy->CName).ToLocalChecked();
                pRtnNetTimePolicyJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetTimePolicy->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetTimePolicy->EName).ToLocalChecked();
                pRtnNetTimePolicyJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> PolicyType = Nan::New<v8::String> ("PolicyType").ToLocalChecked();
                v8::Local<v8::Integer> PolicyTypeValue = Nan::New<v8::Integer> (pRtnNetTimePolicy->PolicyType);
                pRtnNetTimePolicyJS->Set(Local<v8::Value> (PolicyType), Local<v8::Value>(PolicyTypeValue));

                v8::Local<v8::String> PolicyString = Nan::New<v8::String> ("PolicyString").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetTimePolicy->PolicyString, utf8string);
                v8::Local<v8::String> PolicyStringValue = Nan::New<v8::String> (pRtnNetTimePolicy->PolicyString).ToLocalChecked();
                pRtnNetTimePolicyJS->Set(Local<v8::Value> (PolicyString), Local<v8::Value>(PolicyStringValue));

                v8::Local<v8::String> TradingDay = Nan::New<v8::String> ("TradingDay").ToLocalChecked();
                v8::Local<v8::Integer> TradingDayValue = Nan::New<v8::Integer> (pRtnNetTimePolicy->TradingDay);
                pRtnNetTimePolicyJS->Set(Local<v8::Value> (TradingDay), Local<v8::Value>(TradingDayValue));

                v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetTimePolicy->Description, utf8string);
                v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (pRtnNetTimePolicy->Description).ToLocalChecked();
                pRtnNetTimePolicyJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                v8::Local<v8::String> Operation = Nan::New<v8::String> ("Operation").ToLocalChecked();
                v8::Local<v8::Integer> OperationValue = Nan::New<v8::Integer> (pRtnNetTimePolicy->Operation);
                pRtnNetTimePolicyJS->Set(Local<v8::Value> (Operation), Local<v8::Value>(OperationValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetTimePolicy) { 
                params[0] = Local<v8::Value>(pRtnNetTimePolicyJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetTimePolicy) { 
            delete[] pRtnNetTimePolicy;
            pRtnNetTimePolicy = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetTimePolicyTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetGatherTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetGatherTaskTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetGatherTaskTopic_trans_callbackNumb: ", g_RspQryNetGatherTaskTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetGatherTaskTopic_mutex);

    int dataNumb = g_RspQryNetGatherTaskTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetGatherTaskTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetGatherTaskTopic_trans_dataNumb: ", g_RspQryNetGatherTaskTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetGatherTaskTopic_queue.empty()) {
        receivedData.push (g_RspQryNetGatherTaskTopic_queue.front());
        g_RspQryNetGatherTaskTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetGatherTaskTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetGatherTaskTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetGatherTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetGatherTaskTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetGatherTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetGatherTaskTopic").ToLocalChecked());

        CShfeFtdcRspQryNetGatherTaskField* pRspQryNetGatherTask = (CShfeFtdcRspQryNetGatherTaskField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetGatherTaskJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetGatherTask) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetGatherTask->OperationType);
                pRspQryNetGatherTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetGatherTask->ID);
                pRspQryNetGatherTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetGatherTask->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryNetGatherTask->ObjectID).ToLocalChecked();
                pRspQryNetGatherTaskJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetGatherTask->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRspQryNetGatherTask->AttrType).ToLocalChecked();
                pRspQryNetGatherTaskJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> PolicyTypeID = Nan::New<v8::String> ("PolicyTypeID").ToLocalChecked();
                v8::Local<v8::Integer> PolicyTypeIDValue = Nan::New<v8::Integer> (pRspQryNetGatherTask->PolicyTypeID);
                pRspQryNetGatherTaskJS->Set(Local<v8::Value> (PolicyTypeID), Local<v8::Value>(PolicyTypeIDValue));

                v8::Local<v8::String> DataType = Nan::New<v8::String> ("DataType").ToLocalChecked();
                v8::Local<v8::Integer> DataTypeValue = Nan::New<v8::Integer> (pRspQryNetGatherTask->DataType);
                pRspQryNetGatherTaskJS->Set(Local<v8::Value> (DataType), Local<v8::Value>(DataTypeValue));

                v8::Local<v8::String> TypeFlag = Nan::New<v8::String> ("TypeFlag").ToLocalChecked();
                v8::Local<v8::Integer> TypeFlagValue = Nan::New<v8::Integer> (pRspQryNetGatherTask->TypeFlag);
                pRspQryNetGatherTaskJS->Set(Local<v8::Value> (TypeFlag), Local<v8::Value>(TypeFlagValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetGatherTask) { 
                params[0] = Local<v8::Value>(pRspQryNetGatherTaskJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetGatherTask) { 
            delete[] pRspQryNetGatherTask;
            pRspQryNetGatherTask = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetGatherTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetGatherTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetGatherTaskTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetGatherTaskTopic_trans_callbackNumb: ", g_RtnNetGatherTaskTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetGatherTaskTopic_mutex);

    int dataNumb = g_RtnNetGatherTaskTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetGatherTaskTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetGatherTaskTopic_trans_dataNumb: ", g_RtnNetGatherTaskTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetGatherTaskTopic_queue.empty()) {
        receivedData.push (g_RtnNetGatherTaskTopic_queue.front());
        g_RtnNetGatherTaskTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetGatherTaskTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetGatherTaskTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetGatherTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetGatherTaskTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetGatherTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetGatherTaskTopic").ToLocalChecked());

        CShfeFtdcRtnNetGatherTaskField* pRtnNetGatherTask = (CShfeFtdcRtnNetGatherTaskField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetGatherTaskJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetGatherTask) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetGatherTask->OperationType);
                pRtnNetGatherTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetGatherTask->ID);
                pRtnNetGatherTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetGatherTask->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnNetGatherTask->ObjectID).ToLocalChecked();
                pRtnNetGatherTaskJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetGatherTask->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRtnNetGatherTask->AttrType).ToLocalChecked();
                pRtnNetGatherTaskJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> PolicyTypeID = Nan::New<v8::String> ("PolicyTypeID").ToLocalChecked();
                v8::Local<v8::Integer> PolicyTypeIDValue = Nan::New<v8::Integer> (pRtnNetGatherTask->PolicyTypeID);
                pRtnNetGatherTaskJS->Set(Local<v8::Value> (PolicyTypeID), Local<v8::Value>(PolicyTypeIDValue));

                v8::Local<v8::String> DataType = Nan::New<v8::String> ("DataType").ToLocalChecked();
                v8::Local<v8::Integer> DataTypeValue = Nan::New<v8::Integer> (pRtnNetGatherTask->DataType);
                pRtnNetGatherTaskJS->Set(Local<v8::Value> (DataType), Local<v8::Value>(DataTypeValue));

                v8::Local<v8::String> TypeFlag = Nan::New<v8::String> ("TypeFlag").ToLocalChecked();
                v8::Local<v8::Integer> TypeFlagValue = Nan::New<v8::Integer> (pRtnNetGatherTask->TypeFlag);
                pRtnNetGatherTaskJS->Set(Local<v8::Value> (TypeFlag), Local<v8::Value>(TypeFlagValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetGatherTask) { 
                params[0] = Local<v8::Value>(pRtnNetGatherTaskJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetGatherTask) { 
            delete[] pRtnNetGatherTask;
            pRtnNetGatherTask = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetGatherTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetDeviceChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetDeviceChgTopic_trans_callbackNumb: ", g_RspQryNetDeviceChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetDeviceChgTopic_mutex);

    int dataNumb = g_RspQryNetDeviceChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetDeviceChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetDeviceChgTopic_trans_dataNumb: ", g_RspQryNetDeviceChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetDeviceChgTopic_queue.empty()) {
        receivedData.push (g_RspQryNetDeviceChgTopic_queue.front());
        g_RspQryNetDeviceChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetDeviceChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetDeviceChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetDeviceChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetDeviceChgTopic").ToLocalChecked());

        CShfeFtdcRspQryNetDeviceChgField* pRspQryNetDeviceChg = (CShfeFtdcRspQryNetDeviceChgField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetDeviceChgJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetDeviceChg) { 
                string utf8string;
                v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceChg->DeviceID);
                pRspQryNetDeviceChgJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceChg->SysNetSubAreaID);
                pRspQryNetDeviceChgJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                v8::Local<v8::String> OldObjectID = Nan::New<v8::String> ("OldObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceChg->OldObjectID, utf8string);
                v8::Local<v8::String> OldObjectIDValue = Nan::New<v8::String> (pRspQryNetDeviceChg->OldObjectID).ToLocalChecked();
                pRspQryNetDeviceChgJS->Set(Local<v8::Value> (OldObjectID), Local<v8::Value>(OldObjectIDValue));

                v8::Local<v8::String> NewObjectID = Nan::New<v8::String> ("NewObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceChg->NewObjectID, utf8string);
                v8::Local<v8::String> NewObjectIDValue = Nan::New<v8::String> (pRspQryNetDeviceChg->NewObjectID).ToLocalChecked();
                pRspQryNetDeviceChgJS->Set(Local<v8::Value> (NewObjectID), Local<v8::Value>(NewObjectIDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetDeviceChg) { 
                params[0] = Local<v8::Value>(pRspQryNetDeviceChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetDeviceChg) { 
            delete[] pRspQryNetDeviceChg;
            pRspQryNetDeviceChg = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetDeviceChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDeviceChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetDeviceChgTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetDeviceChgTopic_trans_callbackNumb: ", g_RtnNetDeviceChgTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetDeviceChgTopic_mutex);

    int dataNumb = g_RtnNetDeviceChgTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetDeviceChgTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetDeviceChgTopic_trans_dataNumb: ", g_RtnNetDeviceChgTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetDeviceChgTopic_queue.empty()) {
        receivedData.push (g_RtnNetDeviceChgTopic_queue.front());
        g_RtnNetDeviceChgTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetDeviceChgTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetDeviceChgTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDeviceChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetDeviceChgTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDeviceChgTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetDeviceChgTopic").ToLocalChecked());

        CShfeFtdcRtnNetDeviceChgField* pRtnNetDeviceChg = (CShfeFtdcRtnNetDeviceChgField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetDeviceChgJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetDeviceChg) { 
                string utf8string;
                v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRtnNetDeviceChg->DeviceID);
                pRtnNetDeviceChgJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRtnNetDeviceChg->SysNetSubAreaID);
                pRtnNetDeviceChgJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                v8::Local<v8::String> OldObjectID = Nan::New<v8::String> ("OldObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDeviceChg->OldObjectID, utf8string);
                v8::Local<v8::String> OldObjectIDValue = Nan::New<v8::String> (pRtnNetDeviceChg->OldObjectID).ToLocalChecked();
                pRtnNetDeviceChgJS->Set(Local<v8::Value> (OldObjectID), Local<v8::Value>(OldObjectIDValue));

                v8::Local<v8::String> NewObjectID = Nan::New<v8::String> ("NewObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDeviceChg->NewObjectID, utf8string);
                v8::Local<v8::String> NewObjectIDValue = Nan::New<v8::String> (pRtnNetDeviceChg->NewObjectID).ToLocalChecked();
                pRtnNetDeviceChgJS->Set(Local<v8::Value> (NewObjectID), Local<v8::Value>(NewObjectIDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetDeviceChg) { 
                params[0] = Local<v8::Value>(pRtnNetDeviceChgJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetDeviceChg) { 
            delete[] pRtnNetDeviceChg;
            pRtnNetDeviceChg = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetDeviceChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetDeviceTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetDeviceTypeTopic_trans_callbackNumb: ", g_RspQryNetDeviceTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetDeviceTypeTopic_mutex);

    int dataNumb = g_RspQryNetDeviceTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetDeviceTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetDeviceTypeTopic_trans_dataNumb: ", g_RspQryNetDeviceTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetDeviceTypeTopic_queue.empty()) {
        receivedData.push (g_RspQryNetDeviceTypeTopic_queue.front());
        g_RspQryNetDeviceTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetDeviceTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetDeviceTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetDeviceTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetDeviceTypeTopic").ToLocalChecked());

        CShfeFtdcRspQryNetDeviceTypeField* pRspQryNetDeviceType = (CShfeFtdcRspQryNetDeviceTypeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetDeviceTypeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetDeviceType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDeviceType->OperationType);
                pRspQryNetDeviceTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDeviceType->ID);
                pRspQryNetDeviceTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceType->Manufactory, utf8string);
                v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (pRspQryNetDeviceType->Manufactory).ToLocalChecked();
                pRspQryNetDeviceTypeJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                v8::Local<v8::String> DeviceType = Nan::New<v8::String> ("DeviceType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceType->DeviceType, utf8string);
                v8::Local<v8::String> DeviceTypeValue = Nan::New<v8::String> (pRspQryNetDeviceType->DeviceType).ToLocalChecked();
                pRspQryNetDeviceTypeJS->Set(Local<v8::Value> (DeviceType), Local<v8::Value>(DeviceTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetDeviceType) { 
                params[0] = Local<v8::Value>(pRspQryNetDeviceTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetDeviceType) { 
            delete[] pRspQryNetDeviceType;
            pRspQryNetDeviceType = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetDeviceTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDeviceTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetDeviceTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetDeviceTypeTopic_trans_callbackNumb: ", g_RtnNetDeviceTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetDeviceTypeTopic_mutex);

    int dataNumb = g_RtnNetDeviceTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetDeviceTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetDeviceTypeTopic_trans_dataNumb: ", g_RtnNetDeviceTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetDeviceTypeTopic_queue.empty()) {
        receivedData.push (g_RtnNetDeviceTypeTopic_queue.front());
        g_RtnNetDeviceTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetDeviceTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetDeviceTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDeviceTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetDeviceTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDeviceTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetDeviceTypeTopic").ToLocalChecked());

        CShfeFtdcRtnNetDeviceTypeField* pRtnNetDeviceType = (CShfeFtdcRtnNetDeviceTypeField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetDeviceTypeJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetDeviceType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDeviceType->OperationType);
                pRtnNetDeviceTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDeviceType->ID);
                pRtnNetDeviceTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDeviceType->Manufactory, utf8string);
                v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (pRtnNetDeviceType->Manufactory).ToLocalChecked();
                pRtnNetDeviceTypeJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                v8::Local<v8::String> DeviceType = Nan::New<v8::String> ("DeviceType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDeviceType->DeviceType, utf8string);
                v8::Local<v8::String> DeviceTypeValue = Nan::New<v8::String> (pRtnNetDeviceType->DeviceType).ToLocalChecked();
                pRtnNetDeviceTypeJS->Set(Local<v8::Value> (DeviceType), Local<v8::Value>(DeviceTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetDeviceType) { 
                params[0] = Local<v8::Value>(pRtnNetDeviceTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetDeviceType) { 
            delete[] pRtnNetDeviceType;
            pRtnNetDeviceType = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetDeviceTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceCategoryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetDeviceCategoryTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetDeviceCategoryTopic_trans_callbackNumb: ", g_RspQryNetDeviceCategoryTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetDeviceCategoryTopic_mutex);

    int dataNumb = g_RspQryNetDeviceCategoryTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetDeviceCategoryTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetDeviceCategoryTopic_trans_dataNumb: ", g_RspQryNetDeviceCategoryTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetDeviceCategoryTopic_queue.empty()) {
        receivedData.push (g_RspQryNetDeviceCategoryTopic_queue.front());
        g_RspQryNetDeviceCategoryTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetDeviceCategoryTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetDeviceCategoryTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceCategoryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetDeviceCategoryTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDeviceCategoryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetDeviceCategoryTopic").ToLocalChecked());

        CShfeFtdcRspQryNetDeviceCategoryField* pRspQryNetDeviceCategory = (CShfeFtdcRspQryNetDeviceCategoryField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetDeviceCategoryJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetDeviceCategory) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDeviceCategory->OperationType);
                pRspQryNetDeviceCategoryJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDeviceCategory->ID);
                pRspQryNetDeviceCategoryJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceCategory->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetDeviceCategory->CName).ToLocalChecked();
                pRspQryNetDeviceCategoryJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDeviceCategory->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetDeviceCategory->EName).ToLocalChecked();
                pRspQryNetDeviceCategoryJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetDeviceCategory) { 
                params[0] = Local<v8::Value>(pRspQryNetDeviceCategoryJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetDeviceCategory) { 
            delete[] pRspQryNetDeviceCategory;
            pRspQryNetDeviceCategory = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetDeviceCategoryTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDeviceCategoryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetDeviceCategoryTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetDeviceCategoryTopic_trans_callbackNumb: ", g_RtnNetDeviceCategoryTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetDeviceCategoryTopic_mutex);

    int dataNumb = g_RtnNetDeviceCategoryTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetDeviceCategoryTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetDeviceCategoryTopic_trans_dataNumb: ", g_RtnNetDeviceCategoryTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetDeviceCategoryTopic_queue.empty()) {
        receivedData.push (g_RtnNetDeviceCategoryTopic_queue.front());
        g_RtnNetDeviceCategoryTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetDeviceCategoryTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetDeviceCategoryTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDeviceCategoryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetDeviceCategoryTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDeviceCategoryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetDeviceCategoryTopic").ToLocalChecked());

        CShfeFtdcRtnNetDeviceCategoryField* pRtnNetDeviceCategory = (CShfeFtdcRtnNetDeviceCategoryField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetDeviceCategoryJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetDeviceCategory) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDeviceCategory->OperationType);
                pRtnNetDeviceCategoryJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDeviceCategory->ID);
                pRtnNetDeviceCategoryJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDeviceCategory->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetDeviceCategory->CName).ToLocalChecked();
                pRtnNetDeviceCategoryJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDeviceCategory->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetDeviceCategory->EName).ToLocalChecked();
                pRtnNetDeviceCategoryJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetDeviceCategory) { 
                params[0] = Local<v8::Value>(pRtnNetDeviceCategoryJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetDeviceCategory) { 
            delete[] pRtnNetDeviceCategory;
            pRtnNetDeviceCategory = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetDeviceCategoryTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetManufactoryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetManufactoryTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetManufactoryTopic_trans_callbackNumb: ", g_RspQryNetManufactoryTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetManufactoryTopic_mutex);

    int dataNumb = g_RspQryNetManufactoryTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetManufactoryTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetManufactoryTopic_trans_dataNumb: ", g_RspQryNetManufactoryTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetManufactoryTopic_queue.empty()) {
        receivedData.push (g_RspQryNetManufactoryTopic_queue.front());
        g_RspQryNetManufactoryTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetManufactoryTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetManufactoryTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetManufactoryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetManufactoryTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetManufactoryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetManufactoryTopic").ToLocalChecked());

        CShfeFtdcRspQryNetManufactoryField* pRspQryNetManufactory = (CShfeFtdcRspQryNetManufactoryField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetManufactoryJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetManufactory) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetManufactory->OperationType);
                pRspQryNetManufactoryJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetManufactory->ID);
                pRspQryNetManufactoryJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetManufactory->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetManufactory->CName).ToLocalChecked();
                pRspQryNetManufactoryJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetManufactory->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetManufactory->EName).ToLocalChecked();
                pRspQryNetManufactoryJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetManufactory) { 
                params[0] = Local<v8::Value>(pRspQryNetManufactoryJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetManufactory) { 
            delete[] pRspQryNetManufactory;
            pRspQryNetManufactory = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetManufactoryTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetManufactoryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetManufactoryTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetManufactoryTopic_trans_callbackNumb: ", g_RtnNetManufactoryTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetManufactoryTopic_mutex);

    int dataNumb = g_RtnNetManufactoryTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetManufactoryTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetManufactoryTopic_trans_dataNumb: ", g_RtnNetManufactoryTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetManufactoryTopic_queue.empty()) {
        receivedData.push (g_RtnNetManufactoryTopic_queue.front());
        g_RtnNetManufactoryTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetManufactoryTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetManufactoryTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetManufactoryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetManufactoryTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetManufactoryTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetManufactoryTopic").ToLocalChecked());

        CShfeFtdcRtnNetManufactoryField* pRtnNetManufactory = (CShfeFtdcRtnNetManufactoryField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetManufactoryJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetManufactory) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetManufactory->OperationType);
                pRtnNetManufactoryJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetManufactory->ID);
                pRtnNetManufactoryJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetManufactory->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetManufactory->CName).ToLocalChecked();
                pRtnNetManufactoryJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetManufactory->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetManufactory->EName).ToLocalChecked();
                pRtnNetManufactoryJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetManufactory) { 
                params[0] = Local<v8::Value>(pRtnNetManufactoryJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetManufactory) { 
            delete[] pRtnNetManufactory;
            pRtnNetManufactory = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetManufactoryTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetCommunityTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetCommunityTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetCommunityTopic_trans_callbackNumb: ", g_RspQryNetCommunityTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetCommunityTopic_mutex);

    int dataNumb = g_RspQryNetCommunityTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetCommunityTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetCommunityTopic_trans_dataNumb: ", g_RspQryNetCommunityTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetCommunityTopic_queue.empty()) {
        receivedData.push (g_RspQryNetCommunityTopic_queue.front());
        g_RspQryNetCommunityTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetCommunityTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetCommunityTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetCommunityTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetCommunityTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetCommunityTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetCommunityTopic").ToLocalChecked());

        CShfeFtdcRspQryNetCommunityField* pRspQryNetCommunity = (CShfeFtdcRspQryNetCommunityField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetCommunityJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetCommunity) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetCommunity->OperationType);
                pRspQryNetCommunityJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetCommunity->ID);
                pRspQryNetCommunityJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetCommunity->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRspQryNetCommunity->IPADDR).ToLocalChecked();
                pRspQryNetCommunityJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> COMMUNITY = Nan::New<v8::String> ("COMMUNITY").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetCommunity->COMMUNITY, utf8string);
                v8::Local<v8::String> COMMUNITYValue = Nan::New<v8::String> (pRspQryNetCommunity->COMMUNITY).ToLocalChecked();
                pRspQryNetCommunityJS->Set(Local<v8::Value> (COMMUNITY), Local<v8::Value>(COMMUNITYValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetCommunity) { 
                params[0] = Local<v8::Value>(pRspQryNetCommunityJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetCommunity) { 
            delete[] pRspQryNetCommunity;
            pRspQryNetCommunity = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetCommunityTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetCommunityTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetCommunityTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetCommunityTopic_trans_callbackNumb: ", g_RtnNetCommunityTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetCommunityTopic_mutex);

    int dataNumb = g_RtnNetCommunityTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetCommunityTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetCommunityTopic_trans_dataNumb: ", g_RtnNetCommunityTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetCommunityTopic_queue.empty()) {
        receivedData.push (g_RtnNetCommunityTopic_queue.front());
        g_RtnNetCommunityTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetCommunityTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetCommunityTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetCommunityTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetCommunityTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetCommunityTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetCommunityTopic").ToLocalChecked());

        CShfeFtdcRtnNetCommunityField* pRtnNetCommunity = (CShfeFtdcRtnNetCommunityField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetCommunityJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetCommunity) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetCommunity->OperationType);
                pRtnNetCommunityJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetCommunity->ID);
                pRtnNetCommunityJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetCommunity->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRtnNetCommunity->IPADDR).ToLocalChecked();
                pRtnNetCommunityJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> COMMUNITY = Nan::New<v8::String> ("COMMUNITY").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetCommunity->COMMUNITY, utf8string);
                v8::Local<v8::String> COMMUNITYValue = Nan::New<v8::String> (pRtnNetCommunity->COMMUNITY).ToLocalChecked();
                pRtnNetCommunityJS->Set(Local<v8::Value> (COMMUNITY), Local<v8::Value>(COMMUNITYValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetCommunity) { 
                params[0] = Local<v8::Value>(pRtnNetCommunityJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetCommunity) { 
            delete[] pRtnNetCommunity;
            pRtnNetCommunity = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetCommunityTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPortTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetPortTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetPortTypeTopic_trans_callbackNumb: ", g_RspQryNetPortTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetPortTypeTopic_mutex);

    int dataNumb = g_RspQryNetPortTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetPortTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetPortTypeTopic_trans_dataNumb: ", g_RspQryNetPortTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetPortTypeTopic_queue.empty()) {
        receivedData.push (g_RspQryNetPortTypeTopic_queue.front());
        g_RspQryNetPortTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetPortTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetPortTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPortTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetPortTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPortTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetPortTypeTopic").ToLocalChecked());

        CShfeFtdcRspQryNetPortTypeField* pRspQryNetPortType = (CShfeFtdcRspQryNetPortTypeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetPortTypeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetPortType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPortType->OperationType);
                pRspQryNetPortTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPortType->ID);
                pRspQryNetPortTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPortType->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetPortType->CName).ToLocalChecked();
                pRspQryNetPortTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPortType->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetPortType->EName).ToLocalChecked();
                pRspQryNetPortTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPortType->Description, utf8string);
                v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (pRspQryNetPortType->Description).ToLocalChecked();
                pRspQryNetPortTypeJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetPortType) { 
                params[0] = Local<v8::Value>(pRspQryNetPortTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetPortType) { 
            delete[] pRspQryNetPortType;
            pRspQryNetPortType = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetPortTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPortTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetPortTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetPortTypeTopic_trans_callbackNumb: ", g_RtnNetPortTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetPortTypeTopic_mutex);

    int dataNumb = g_RtnNetPortTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetPortTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetPortTypeTopic_trans_dataNumb: ", g_RtnNetPortTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetPortTypeTopic_queue.empty()) {
        receivedData.push (g_RtnNetPortTypeTopic_queue.front());
        g_RtnNetPortTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetPortTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetPortTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPortTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetPortTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPortTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetPortTypeTopic").ToLocalChecked());

        CShfeFtdcRtnNetPortTypeField* pRtnNetPortType = (CShfeFtdcRtnNetPortTypeField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetPortTypeJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetPortType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPortType->OperationType);
                pRtnNetPortTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPortType->ID);
                pRtnNetPortTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPortType->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetPortType->CName).ToLocalChecked();
                pRtnNetPortTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPortType->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetPortType->EName).ToLocalChecked();
                pRtnNetPortTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPortType->Description, utf8string);
                v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (pRtnNetPortType->Description).ToLocalChecked();
                pRtnNetPortTypeJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetPortType) { 
                params[0] = Local<v8::Value>(pRtnNetPortTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetPortType) { 
            delete[] pRtnNetPortType;
            pRtnNetPortType = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetPortTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPartAccessSpotTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetPartAccessSpotTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetPartAccessSpotTopic_trans_callbackNumb: ", g_RspQryNetPartAccessSpotTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetPartAccessSpotTopic_mutex);

    int dataNumb = g_RspQryNetPartAccessSpotTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetPartAccessSpotTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetPartAccessSpotTopic_trans_dataNumb: ", g_RspQryNetPartAccessSpotTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetPartAccessSpotTopic_queue.empty()) {
        receivedData.push (g_RspQryNetPartAccessSpotTopic_queue.front());
        g_RspQryNetPartAccessSpotTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetPartAccessSpotTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetPartAccessSpotTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPartAccessSpotTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetPartAccessSpotTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPartAccessSpotTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetPartAccessSpotTopic").ToLocalChecked());

        CShfeFtdcRspQryNetPartAccessSpotField* pRspQryNetPartAccessSpot = (CShfeFtdcRspQryNetPartAccessSpotField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetPartAccessSpotJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetPartAccessSpot) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPartAccessSpot->OperationType);
                pRspQryNetPartAccessSpotJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPartAccessSpot->ID);
                pRspQryNetPartAccessSpotJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartAccessSpot->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetPartAccessSpot->CName).ToLocalChecked();
                pRspQryNetPartAccessSpotJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartAccessSpot->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetPartAccessSpot->EName).ToLocalChecked();
                pRspQryNetPartAccessSpotJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetPartAccessSpot) { 
                params[0] = Local<v8::Value>(pRspQryNetPartAccessSpotJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetPartAccessSpot) { 
            delete[] pRspQryNetPartAccessSpot;
            pRspQryNetPartAccessSpot = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetPartAccessSpotTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPartAccessSpotTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetPartAccessSpotTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetPartAccessSpotTopic_trans_callbackNumb: ", g_RtnNetPartAccessSpotTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetPartAccessSpotTopic_mutex);

    int dataNumb = g_RtnNetPartAccessSpotTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetPartAccessSpotTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetPartAccessSpotTopic_trans_dataNumb: ", g_RtnNetPartAccessSpotTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetPartAccessSpotTopic_queue.empty()) {
        receivedData.push (g_RtnNetPartAccessSpotTopic_queue.front());
        g_RtnNetPartAccessSpotTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetPartAccessSpotTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetPartAccessSpotTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPartAccessSpotTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetPartAccessSpotTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPartAccessSpotTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetPartAccessSpotTopic").ToLocalChecked());

        CShfeFtdcRtnNetPartAccessSpotField* pRtnNetPartAccessSpot = (CShfeFtdcRtnNetPartAccessSpotField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetPartAccessSpotJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetPartAccessSpot) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPartAccessSpot->OperationType);
                pRtnNetPartAccessSpotJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPartAccessSpot->ID);
                pRtnNetPartAccessSpotJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartAccessSpot->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetPartAccessSpot->CName).ToLocalChecked();
                pRtnNetPartAccessSpotJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartAccessSpot->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetPartAccessSpot->EName).ToLocalChecked();
                pRtnNetPartAccessSpotJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetPartAccessSpot) { 
                params[0] = Local<v8::Value>(pRtnNetPartAccessSpotJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetPartAccessSpot) { 
            delete[] pRtnNetPartAccessSpot;
            pRtnNetPartAccessSpot = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetPartAccessSpotTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetInterfaceTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetInterfaceTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetInterfaceTopic_trans_callbackNumb: ", g_RspQryNetInterfaceTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetInterfaceTopic_mutex);

    int dataNumb = g_RspQryNetInterfaceTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetInterfaceTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetInterfaceTopic_trans_dataNumb: ", g_RspQryNetInterfaceTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetInterfaceTopic_queue.empty()) {
        receivedData.push (g_RspQryNetInterfaceTopic_queue.front());
        g_RspQryNetInterfaceTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetInterfaceTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetInterfaceTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetInterfaceTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetInterfaceTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetInterfaceTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetInterfaceTopic").ToLocalChecked());

        CShfeFtdcRspQryNetInterfaceField* pRspQryNetInterface = (CShfeFtdcRspQryNetInterfaceField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetInterfaceJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetInterface) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetInterface->OperationType);
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetInterface->ID);
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetInterface->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryNetInterface->ObjectID).ToLocalChecked();
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRspQryNetInterface->MonitorType_ID);
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                v8::Local<v8::String> IfType = Nan::New<v8::String> ("IfType").ToLocalChecked();
                v8::Local<v8::Integer> IfTypeValue = Nan::New<v8::Integer> (pRspQryNetInterface->IfType);
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (IfType), Local<v8::Value>(IfTypeValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetInterface->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetInterface->EName).ToLocalChecked();
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> IpAddress = Nan::New<v8::String> ("IpAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetInterface->IpAddress, utf8string);
                v8::Local<v8::String> IpAddressValue = Nan::New<v8::String> (pRspQryNetInterface->IpAddress).ToLocalChecked();
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (IpAddress), Local<v8::Value>(IpAddressValue));

                v8::Local<v8::String> IpMask = Nan::New<v8::String> ("IpMask").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetInterface->IpMask, utf8string);
                v8::Local<v8::String> IpMaskValue = Nan::New<v8::String> (pRspQryNetInterface->IpMask).ToLocalChecked();
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (IpMask), Local<v8::Value>(IpMaskValue));

                v8::Local<v8::String> IfStatus = Nan::New<v8::String> ("IfStatus").ToLocalChecked();
                v8::Local<v8::Integer> IfStatusValue = Nan::New<v8::Integer> (pRspQryNetInterface->IfStatus);
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (IfStatus), Local<v8::Value>(IfStatusValue));

                v8::Local<v8::String> MAC = Nan::New<v8::String> ("MAC").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetInterface->MAC, utf8string);
                v8::Local<v8::String> MACValue = Nan::New<v8::String> (pRspQryNetInterface->MAC).ToLocalChecked();
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (MAC), Local<v8::Value>(MACValue));

                v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRspQryNetInterface->DeviceID);
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                v8::Local<v8::String> DeviceObjectID = Nan::New<v8::String> ("DeviceObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetInterface->DeviceObjectID, utf8string);
                v8::Local<v8::String> DeviceObjectIDValue = Nan::New<v8::String> (pRspQryNetInterface->DeviceObjectID).ToLocalChecked();
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (DeviceObjectID), Local<v8::Value>(DeviceObjectIDValue));

                v8::Local<v8::String> DeviceIndex = Nan::New<v8::String> ("DeviceIndex").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetInterface->DeviceIndex, utf8string);
                v8::Local<v8::String> DeviceIndexValue = Nan::New<v8::String> (pRspQryNetInterface->DeviceIndex).ToLocalChecked();
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (DeviceIndex), Local<v8::Value>(DeviceIndexValue));

                v8::Local<v8::String> isPolling = Nan::New<v8::String> ("isPolling").ToLocalChecked();
                v8::Local<v8::Integer> isPollingValue = Nan::New<v8::Integer> (pRspQryNetInterface->isPolling);
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (isPolling), Local<v8::Value>(isPollingValue));

                v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetInterface->Description, utf8string);
                v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (pRspQryNetInterface->Description).ToLocalChecked();
                pRspQryNetInterfaceJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetInterface) { 
                params[0] = Local<v8::Value>(pRspQryNetInterfaceJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetInterface) { 
            delete[] pRspQryNetInterface;
            pRspQryNetInterface = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetInterfaceTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetInterfaceTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetInterfaceTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetInterfaceTopic_trans_callbackNumb: ", g_RtnNetInterfaceTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetInterfaceTopic_mutex);

    int dataNumb = g_RtnNetInterfaceTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetInterfaceTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetInterfaceTopic_trans_dataNumb: ", g_RtnNetInterfaceTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetInterfaceTopic_queue.empty()) {
        receivedData.push (g_RtnNetInterfaceTopic_queue.front());
        g_RtnNetInterfaceTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetInterfaceTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetInterfaceTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetInterfaceTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetInterfaceTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetInterfaceTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetInterfaceTopic").ToLocalChecked());

        CShfeFtdcRtnNetInterfaceField* pRtnNetInterface = (CShfeFtdcRtnNetInterfaceField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetInterfaceJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetInterface) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetInterface->OperationType);
                pRtnNetInterfaceJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetInterface->ID);
                pRtnNetInterfaceJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetInterface->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnNetInterface->ObjectID).ToLocalChecked();
                pRtnNetInterfaceJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRtnNetInterface->MonitorType_ID);
                pRtnNetInterfaceJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                v8::Local<v8::String> IfType = Nan::New<v8::String> ("IfType").ToLocalChecked();
                v8::Local<v8::Integer> IfTypeValue = Nan::New<v8::Integer> (pRtnNetInterface->IfType);
                pRtnNetInterfaceJS->Set(Local<v8::Value> (IfType), Local<v8::Value>(IfTypeValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetInterface->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetInterface->EName).ToLocalChecked();
                pRtnNetInterfaceJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> IpAddress = Nan::New<v8::String> ("IpAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetInterface->IpAddress, utf8string);
                v8::Local<v8::String> IpAddressValue = Nan::New<v8::String> (pRtnNetInterface->IpAddress).ToLocalChecked();
                pRtnNetInterfaceJS->Set(Local<v8::Value> (IpAddress), Local<v8::Value>(IpAddressValue));

                v8::Local<v8::String> IpMask = Nan::New<v8::String> ("IpMask").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetInterface->IpMask, utf8string);
                v8::Local<v8::String> IpMaskValue = Nan::New<v8::String> (pRtnNetInterface->IpMask).ToLocalChecked();
                pRtnNetInterfaceJS->Set(Local<v8::Value> (IpMask), Local<v8::Value>(IpMaskValue));

                v8::Local<v8::String> IfStatus = Nan::New<v8::String> ("IfStatus").ToLocalChecked();
                v8::Local<v8::Integer> IfStatusValue = Nan::New<v8::Integer> (pRtnNetInterface->IfStatus);
                pRtnNetInterfaceJS->Set(Local<v8::Value> (IfStatus), Local<v8::Value>(IfStatusValue));

                v8::Local<v8::String> MAC = Nan::New<v8::String> ("MAC").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetInterface->MAC, utf8string);
                v8::Local<v8::String> MACValue = Nan::New<v8::String> (pRtnNetInterface->MAC).ToLocalChecked();
                pRtnNetInterfaceJS->Set(Local<v8::Value> (MAC), Local<v8::Value>(MACValue));

                v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRtnNetInterface->DeviceID);
                pRtnNetInterfaceJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                v8::Local<v8::String> DeviceObjectID = Nan::New<v8::String> ("DeviceObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetInterface->DeviceObjectID, utf8string);
                v8::Local<v8::String> DeviceObjectIDValue = Nan::New<v8::String> (pRtnNetInterface->DeviceObjectID).ToLocalChecked();
                pRtnNetInterfaceJS->Set(Local<v8::Value> (DeviceObjectID), Local<v8::Value>(DeviceObjectIDValue));

                v8::Local<v8::String> DeviceIndex = Nan::New<v8::String> ("DeviceIndex").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetInterface->DeviceIndex, utf8string);
                v8::Local<v8::String> DeviceIndexValue = Nan::New<v8::String> (pRtnNetInterface->DeviceIndex).ToLocalChecked();
                pRtnNetInterfaceJS->Set(Local<v8::Value> (DeviceIndex), Local<v8::Value>(DeviceIndexValue));

                v8::Local<v8::String> isPolling = Nan::New<v8::String> ("isPolling").ToLocalChecked();
                v8::Local<v8::Integer> isPollingValue = Nan::New<v8::Integer> (pRtnNetInterface->isPolling);
                pRtnNetInterfaceJS->Set(Local<v8::Value> (isPolling), Local<v8::Value>(isPollingValue));

                v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetInterface->Description, utf8string);
                v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (pRtnNetInterface->Description).ToLocalChecked();
                pRtnNetInterfaceJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetInterface) { 
                params[0] = Local<v8::Value>(pRtnNetInterfaceJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetInterface) { 
            delete[] pRtnNetInterface;
            pRtnNetInterface = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetInterfaceTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetGeneralOIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetGeneralOIDTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetGeneralOIDTopic_trans_callbackNumb: ", g_RspQryNetGeneralOIDTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetGeneralOIDTopic_mutex);

    int dataNumb = g_RspQryNetGeneralOIDTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetGeneralOIDTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetGeneralOIDTopic_trans_dataNumb: ", g_RspQryNetGeneralOIDTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetGeneralOIDTopic_queue.empty()) {
        receivedData.push (g_RspQryNetGeneralOIDTopic_queue.front());
        g_RspQryNetGeneralOIDTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetGeneralOIDTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetGeneralOIDTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetGeneralOIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetGeneralOIDTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetGeneralOIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetGeneralOIDTopic").ToLocalChecked());

        CShfeFtdcRspQryNetGeneralOIDField* pRspQryNetGeneralOID = (CShfeFtdcRspQryNetGeneralOIDField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetGeneralOIDJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetGeneralOID) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetGeneralOID->OperationType);
                pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetGeneralOID->ID);
                pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetGeneralOID->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetGeneralOID->CName).ToLocalChecked();
                pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetGeneralOID->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetGeneralOID->EName).ToLocalChecked();
                pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> OID = Nan::New<v8::String> ("OID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetGeneralOID->OID, utf8string);
                v8::Local<v8::String> OIDValue = Nan::New<v8::String> (pRspQryNetGeneralOID->OID).ToLocalChecked();
                pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (OID), Local<v8::Value>(OIDValue));

                v8::Local<v8::String> Unit = Nan::New<v8::String> ("Unit").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetGeneralOID->Unit, utf8string);
                v8::Local<v8::String> UnitValue = Nan::New<v8::String> (pRspQryNetGeneralOID->Unit).ToLocalChecked();
                pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (Unit), Local<v8::Value>(UnitValue));

                v8::Local<v8::String> isTheTable = Nan::New<v8::String> ("isTheTable").ToLocalChecked();
                v8::Local<v8::Integer> isTheTableValue = Nan::New<v8::Integer> (pRspQryNetGeneralOID->isTheTable);
                pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (isTheTable), Local<v8::Value>(isTheTableValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetGeneralOID) { 
                params[0] = Local<v8::Value>(pRspQryNetGeneralOIDJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetGeneralOID) { 
            delete[] pRspQryNetGeneralOID;
            pRspQryNetGeneralOID = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetGeneralOIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetGeneralOIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetGeneralOIDTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetGeneralOIDTopic_trans_callbackNumb: ", g_RtnNetGeneralOIDTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetGeneralOIDTopic_mutex);

    int dataNumb = g_RtnNetGeneralOIDTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetGeneralOIDTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetGeneralOIDTopic_trans_dataNumb: ", g_RtnNetGeneralOIDTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetGeneralOIDTopic_queue.empty()) {
        receivedData.push (g_RtnNetGeneralOIDTopic_queue.front());
        g_RtnNetGeneralOIDTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetGeneralOIDTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetGeneralOIDTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetGeneralOIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetGeneralOIDTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetGeneralOIDTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetGeneralOIDTopic").ToLocalChecked());

        CShfeFtdcRtnNetGeneralOIDField* pRtnNetGeneralOID = (CShfeFtdcRtnNetGeneralOIDField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetGeneralOIDJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetGeneralOID) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetGeneralOID->OperationType);
                pRtnNetGeneralOIDJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetGeneralOID->ID);
                pRtnNetGeneralOIDJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetGeneralOID->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetGeneralOID->CName).ToLocalChecked();
                pRtnNetGeneralOIDJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetGeneralOID->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetGeneralOID->EName).ToLocalChecked();
                pRtnNetGeneralOIDJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> OID = Nan::New<v8::String> ("OID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetGeneralOID->OID, utf8string);
                v8::Local<v8::String> OIDValue = Nan::New<v8::String> (pRtnNetGeneralOID->OID).ToLocalChecked();
                pRtnNetGeneralOIDJS->Set(Local<v8::Value> (OID), Local<v8::Value>(OIDValue));

                v8::Local<v8::String> Unit = Nan::New<v8::String> ("Unit").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetGeneralOID->Unit, utf8string);
                v8::Local<v8::String> UnitValue = Nan::New<v8::String> (pRtnNetGeneralOID->Unit).ToLocalChecked();
                pRtnNetGeneralOIDJS->Set(Local<v8::Value> (Unit), Local<v8::Value>(UnitValue));

                v8::Local<v8::String> isTheTable = Nan::New<v8::String> ("isTheTable").ToLocalChecked();
                v8::Local<v8::Integer> isTheTableValue = Nan::New<v8::Integer> (pRtnNetGeneralOID->isTheTable);
                pRtnNetGeneralOIDJS->Set(Local<v8::Value> (isTheTable), Local<v8::Value>(isTheTableValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetGeneralOID) { 
                params[0] = Local<v8::Value>(pRtnNetGeneralOIDJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetGeneralOID) { 
            delete[] pRtnNetGeneralOID;
            pRtnNetGeneralOID = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetGeneralOIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorTypeTopic_trans_callbackNumb: ", g_RspQryNetMonitorTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTypeTopic_mutex);

    int dataNumb = g_RspQryNetMonitorTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorTypeTopic_trans_dataNumb: ", g_RspQryNetMonitorTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorTypeTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorTypeTopic_queue.front());
        g_RspQryNetMonitorTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorTypeTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorTypeField* pRspQryNetMonitorType = (CShfeFtdcRspQryNetMonitorTypeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorTypeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorType->OperationType);
                pRspQryNetMonitorTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorType->ID);
                pRspQryNetMonitorTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorType->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetMonitorType->CName).ToLocalChecked();
                pRspQryNetMonitorTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorType->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetMonitorType->EName).ToLocalChecked();
                pRspQryNetMonitorTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorType) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorType) { 
            delete[] pRspQryNetMonitorType;
            pRspQryNetMonitorType = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorTypeTopic_trans_callbackNumb: ", g_RtnNetMonitorTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorTypeTopic_mutex);

    int dataNumb = g_RtnNetMonitorTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorTypeTopic_trans_dataNumb: ", g_RtnNetMonitorTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorTypeTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorTypeTopic_queue.front());
        g_RtnNetMonitorTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorTypeTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorTypeField* pRtnNetMonitorType = (CShfeFtdcRtnNetMonitorTypeField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorTypeJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorType->OperationType);
                pRtnNetMonitorTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorType->ID);
                pRtnNetMonitorTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorType->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetMonitorType->CName).ToLocalChecked();
                pRtnNetMonitorTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorType->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetMonitorType->EName).ToLocalChecked();
                pRtnNetMonitorTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorType) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorType) { 
            delete[] pRtnNetMonitorType;
            pRtnNetMonitorType = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorAttrScopeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorAttrScopeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorAttrScopeTopic_trans_callbackNumb: ", g_RspQryNetMonitorAttrScopeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorAttrScopeTopic_mutex);

    int dataNumb = g_RspQryNetMonitorAttrScopeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorAttrScopeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorAttrScopeTopic_trans_dataNumb: ", g_RspQryNetMonitorAttrScopeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorAttrScopeTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorAttrScopeTopic_queue.front());
        g_RspQryNetMonitorAttrScopeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorAttrScopeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorAttrScopeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorAttrScopeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorAttrScopeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorAttrScopeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorAttrScopeTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorAttrScopeField* pRspQryNetMonitorAttrScope = (CShfeFtdcRspQryNetMonitorAttrScopeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorAttrScopeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorAttrScope) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrScope->OperationType);
                pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrScope->ID);
                pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorAttrScope->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetMonitorAttrScope->CName).ToLocalChecked();
                pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorAttrScope->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetMonitorAttrScope->EName).ToLocalChecked();
                pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorAttrScope->Comments, utf8string);
                v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (pRspQryNetMonitorAttrScope->Comments).ToLocalChecked();
                pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorAttrScope) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorAttrScopeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorAttrScope) { 
            delete[] pRspQryNetMonitorAttrScope;
            pRspQryNetMonitorAttrScope = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorAttrScopeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorAttrScopeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorAttrScopeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorAttrScopeTopic_trans_callbackNumb: ", g_RtnNetMonitorAttrScopeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorAttrScopeTopic_mutex);

    int dataNumb = g_RtnNetMonitorAttrScopeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorAttrScopeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorAttrScopeTopic_trans_dataNumb: ", g_RtnNetMonitorAttrScopeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorAttrScopeTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorAttrScopeTopic_queue.front());
        g_RtnNetMonitorAttrScopeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorAttrScopeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorAttrScopeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorAttrScopeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorAttrScopeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorAttrScopeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorAttrScopeTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorAttrScopeField* pRtnNetMonitorAttrScope = (CShfeFtdcRtnNetMonitorAttrScopeField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorAttrScopeJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorAttrScope) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrScope->OperationType);
                pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrScope->ID);
                pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorAttrScope->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetMonitorAttrScope->CName).ToLocalChecked();
                pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorAttrScope->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetMonitorAttrScope->EName).ToLocalChecked();
                pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorAttrScope->Comments, utf8string);
                v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (pRtnNetMonitorAttrScope->Comments).ToLocalChecked();
                pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorAttrScope) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorAttrScopeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorAttrScope) { 
            delete[] pRtnNetMonitorAttrScope;
            pRtnNetMonitorAttrScope = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorAttrScopeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorAttrTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorAttrTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorAttrTypeTopic_trans_callbackNumb: ", g_RspQryNetMonitorAttrTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorAttrTypeTopic_mutex);

    int dataNumb = g_RspQryNetMonitorAttrTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorAttrTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorAttrTypeTopic_trans_dataNumb: ", g_RspQryNetMonitorAttrTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorAttrTypeTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorAttrTypeTopic_queue.front());
        g_RspQryNetMonitorAttrTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorAttrTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorAttrTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorAttrTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorAttrTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorAttrTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorAttrTypeTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorAttrTypeField* pRspQryNetMonitorAttrType = (CShfeFtdcRspQryNetMonitorAttrTypeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorAttrTypeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorAttrType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrType->OperationType);
                pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrType->ID);
                pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrType->MANUFACTORY_ID);
                pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrType->MonitorType_ID);
                pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                v8::Local<v8::String> AttrType_ID = Nan::New<v8::String> ("AttrType_ID").ToLocalChecked();
                v8::Local<v8::Integer> AttrType_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrType->AttrType_ID);
                pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (AttrType_ID), Local<v8::Value>(AttrType_IDValue));

                v8::Local<v8::String> MANUFACTORY = Nan::New<v8::String> ("MANUFACTORY").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorAttrType->MANUFACTORY, utf8string);
                v8::Local<v8::String> MANUFACTORYValue = Nan::New<v8::String> (pRspQryNetMonitorAttrType->MANUFACTORY).ToLocalChecked();
                pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (MANUFACTORY), Local<v8::Value>(MANUFACTORYValue));

                v8::Local<v8::String> MonitorType = Nan::New<v8::String> ("MonitorType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorAttrType->MonitorType, utf8string);
                v8::Local<v8::String> MonitorTypeValue = Nan::New<v8::String> (pRspQryNetMonitorAttrType->MonitorType).ToLocalChecked();
                pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (MonitorType), Local<v8::Value>(MonitorTypeValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorAttrType->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRspQryNetMonitorAttrType->AttrType).ToLocalChecked();
                pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorAttrType) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorAttrTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorAttrType) { 
            delete[] pRspQryNetMonitorAttrType;
            pRspQryNetMonitorAttrType = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorAttrTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorAttrTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorAttrTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorAttrTypeTopic_trans_callbackNumb: ", g_RtnNetMonitorAttrTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorAttrTypeTopic_mutex);

    int dataNumb = g_RtnNetMonitorAttrTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorAttrTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorAttrTypeTopic_trans_dataNumb: ", g_RtnNetMonitorAttrTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorAttrTypeTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorAttrTypeTopic_queue.front());
        g_RtnNetMonitorAttrTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorAttrTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorAttrTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorAttrTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorAttrTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorAttrTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorAttrTypeTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorAttrTypeField* pRtnNetMonitorAttrType = (CShfeFtdcRtnNetMonitorAttrTypeField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorAttrTypeJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorAttrType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrType->OperationType);
                pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrType->ID);
                pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrType->MANUFACTORY_ID);
                pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrType->MonitorType_ID);
                pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                v8::Local<v8::String> AttrType_ID = Nan::New<v8::String> ("AttrType_ID").ToLocalChecked();
                v8::Local<v8::Integer> AttrType_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrType->AttrType_ID);
                pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (AttrType_ID), Local<v8::Value>(AttrType_IDValue));

                v8::Local<v8::String> MANUFACTORY = Nan::New<v8::String> ("MANUFACTORY").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorAttrType->MANUFACTORY, utf8string);
                v8::Local<v8::String> MANUFACTORYValue = Nan::New<v8::String> (pRtnNetMonitorAttrType->MANUFACTORY).ToLocalChecked();
                pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (MANUFACTORY), Local<v8::Value>(MANUFACTORYValue));

                v8::Local<v8::String> MonitorType = Nan::New<v8::String> ("MonitorType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorAttrType->MonitorType, utf8string);
                v8::Local<v8::String> MonitorTypeValue = Nan::New<v8::String> (pRtnNetMonitorAttrType->MonitorType).ToLocalChecked();
                pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (MonitorType), Local<v8::Value>(MonitorTypeValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorAttrType->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRtnNetMonitorAttrType->AttrType).ToLocalChecked();
                pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorAttrType) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorAttrTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorAttrType) { 
            delete[] pRtnNetMonitorAttrType;
            pRtnNetMonitorAttrType = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorAttrTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorObjectAttrTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorObjectAttrTopic_trans_callbackNumb: ", g_RspQryNetMonitorObjectAttrTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorObjectAttrTopic_mutex);

    int dataNumb = g_RspQryNetMonitorObjectAttrTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorObjectAttrTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorObjectAttrTopic_trans_dataNumb: ", g_RspQryNetMonitorObjectAttrTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorObjectAttrTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorObjectAttrTopic_queue.front());
        g_RspQryNetMonitorObjectAttrTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorObjectAttrTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorObjectAttrTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorObjectAttrTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorObjectAttrTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorObjectAttrField* pRspQryNetMonitorObjectAttr = (CShfeFtdcRspQryNetMonitorObjectAttrField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorObjectAttrJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorObjectAttr) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorObjectAttr->OperationType);
                pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorObjectAttr->ID);
                pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorObjectAttr->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryNetMonitorObjectAttr->ObjectID).ToLocalChecked();
                pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorObjectAttr->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRspQryNetMonitorObjectAttr->AttrType).ToLocalChecked();
                pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> PolicyTypeID = Nan::New<v8::String> ("PolicyTypeID").ToLocalChecked();
                v8::Local<v8::Integer> PolicyTypeIDValue = Nan::New<v8::Integer> (pRspQryNetMonitorObjectAttr->PolicyTypeID);
                pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value> (PolicyTypeID), Local<v8::Value>(PolicyTypeIDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorObjectAttr) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorObjectAttrJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorObjectAttr) { 
            delete[] pRspQryNetMonitorObjectAttr;
            pRspQryNetMonitorObjectAttr = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorObjectAttrTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorObjectAttrTopic_trans_callbackNumb: ", g_RtnNetMonitorObjectAttrTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorObjectAttrTopic_mutex);

    int dataNumb = g_RtnNetMonitorObjectAttrTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorObjectAttrTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorObjectAttrTopic_trans_dataNumb: ", g_RtnNetMonitorObjectAttrTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorObjectAttrTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorObjectAttrTopic_queue.front());
        g_RtnNetMonitorObjectAttrTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorObjectAttrTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorObjectAttrTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorObjectAttrTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorObjectAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorObjectAttrTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorObjectAttrField* pRtnNetMonitorObjectAttr = (CShfeFtdcRtnNetMonitorObjectAttrField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorObjectAttrJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorObjectAttr) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorObjectAttr->OperationType);
                pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorObjectAttr->ID);
                pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorObjectAttr->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnNetMonitorObjectAttr->ObjectID).ToLocalChecked();
                pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorObjectAttr->AttrType, utf8string);
                v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (pRtnNetMonitorObjectAttr->AttrType).ToLocalChecked();
                pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                v8::Local<v8::String> PolicyTypeID = Nan::New<v8::String> ("PolicyTypeID").ToLocalChecked();
                v8::Local<v8::Integer> PolicyTypeIDValue = Nan::New<v8::Integer> (pRtnNetMonitorObjectAttr->PolicyTypeID);
                pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value> (PolicyTypeID), Local<v8::Value>(PolicyTypeIDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorObjectAttr) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorObjectAttrJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorObjectAttr) { 
            delete[] pRtnNetMonitorObjectAttr;
            pRtnNetMonitorObjectAttr = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetFuncAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetFuncAreaTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetFuncAreaTopic_trans_callbackNumb: ", g_RspQryNetFuncAreaTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetFuncAreaTopic_mutex);

    int dataNumb = g_RspQryNetFuncAreaTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetFuncAreaTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetFuncAreaTopic_trans_dataNumb: ", g_RspQryNetFuncAreaTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetFuncAreaTopic_queue.empty()) {
        receivedData.push (g_RspQryNetFuncAreaTopic_queue.front());
        g_RspQryNetFuncAreaTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetFuncAreaTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetFuncAreaTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetFuncAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetFuncAreaTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetFuncAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetFuncAreaTopic").ToLocalChecked());

        CShfeFtdcRspQryNetFuncAreaField* pRspQryNetFuncArea = (CShfeFtdcRspQryNetFuncAreaField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetFuncAreaJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetFuncArea) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetFuncArea->OperationType);
                pRspQryNetFuncAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetFuncArea->ID);
                pRspQryNetFuncAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRspQryNetFuncArea->SysNetSubAreaID);
                pRspQryNetFuncAreaJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetFuncArea->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetFuncArea->CName).ToLocalChecked();
                pRspQryNetFuncAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetFuncArea->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetFuncArea->EName).ToLocalChecked();
                pRspQryNetFuncAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetFuncArea) { 
                params[0] = Local<v8::Value>(pRspQryNetFuncAreaJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetFuncArea) { 
            delete[] pRspQryNetFuncArea;
            pRspQryNetFuncArea = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetFuncAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetFuncAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetFuncAreaTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetFuncAreaTopic_trans_callbackNumb: ", g_RtnNetFuncAreaTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetFuncAreaTopic_mutex);

    int dataNumb = g_RtnNetFuncAreaTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetFuncAreaTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetFuncAreaTopic_trans_dataNumb: ", g_RtnNetFuncAreaTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetFuncAreaTopic_queue.empty()) {
        receivedData.push (g_RtnNetFuncAreaTopic_queue.front());
        g_RtnNetFuncAreaTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetFuncAreaTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetFuncAreaTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetFuncAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetFuncAreaTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetFuncAreaTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetFuncAreaTopic").ToLocalChecked());

        CShfeFtdcRtnNetFuncAreaField* pRtnNetFuncArea = (CShfeFtdcRtnNetFuncAreaField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetFuncAreaJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetFuncArea) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetFuncArea->OperationType);
                pRtnNetFuncAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetFuncArea->ID);
                pRtnNetFuncAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRtnNetFuncArea->SysNetSubAreaID);
                pRtnNetFuncAreaJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetFuncArea->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetFuncArea->CName).ToLocalChecked();
                pRtnNetFuncAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetFuncArea->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetFuncArea->EName).ToLocalChecked();
                pRtnNetFuncAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetFuncArea) { 
                params[0] = Local<v8::Value>(pRtnNetFuncAreaJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetFuncArea) { 
            delete[] pRtnNetFuncArea;
            pRtnNetFuncArea = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetFuncAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorCommandTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorCommandTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorCommandTypeTopic_trans_callbackNumb: ", g_RspQryNetMonitorCommandTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorCommandTypeTopic_mutex);

    int dataNumb = g_RspQryNetMonitorCommandTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorCommandTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorCommandTypeTopic_trans_dataNumb: ", g_RspQryNetMonitorCommandTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorCommandTypeTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorCommandTypeTopic_queue.front());
        g_RspQryNetMonitorCommandTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorCommandTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorCommandTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorCommandTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorCommandTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorCommandTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorCommandTypeTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorCommandTypeField* pRspQryNetMonitorCommandType = (CShfeFtdcRspQryNetMonitorCommandTypeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorCommandTypeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorCommandType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->OperationType);
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->ID);
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->Manufactory_ID);
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->MonitorType_ID);
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                v8::Local<v8::String> DeviceModle_ID = Nan::New<v8::String> ("DeviceModle_ID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceModle_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->DeviceModle_ID);
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (DeviceModle_ID), Local<v8::Value>(DeviceModle_IDValue));

                v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->ActionGroup_ID);
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorCommandType->Manufactory, utf8string);
                v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (pRspQryNetMonitorCommandType->Manufactory).ToLocalChecked();
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                v8::Local<v8::String> MonitorType = Nan::New<v8::String> ("MonitorType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorCommandType->MonitorType, utf8string);
                v8::Local<v8::String> MonitorTypeValue = Nan::New<v8::String> (pRspQryNetMonitorCommandType->MonitorType).ToLocalChecked();
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (MonitorType), Local<v8::Value>(MonitorTypeValue));

                v8::Local<v8::String> DeviceModle = Nan::New<v8::String> ("DeviceModle").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorCommandType->DeviceModle, utf8string);
                v8::Local<v8::String> DeviceModleValue = Nan::New<v8::String> (pRspQryNetMonitorCommandType->DeviceModle).ToLocalChecked();
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (DeviceModle), Local<v8::Value>(DeviceModleValue));

                v8::Local<v8::String> ActionGroup = Nan::New<v8::String> ("ActionGroup").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorCommandType->ActionGroup, utf8string);
                v8::Local<v8::String> ActionGroupValue = Nan::New<v8::String> (pRspQryNetMonitorCommandType->ActionGroup).ToLocalChecked();
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (ActionGroup), Local<v8::Value>(ActionGroupValue));

                v8::Local<v8::String> Command = Nan::New<v8::String> ("Command").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorCommandType->Command, utf8string);
                v8::Local<v8::String> CommandValue = Nan::New<v8::String> (pRspQryNetMonitorCommandType->Command).ToLocalChecked();
                pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (Command), Local<v8::Value>(CommandValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorCommandType) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorCommandTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorCommandType) { 
            delete[] pRspQryNetMonitorCommandType;
            pRspQryNetMonitorCommandType = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorCommandTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorCommandTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorCommandTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorCommandTypeTopic_trans_callbackNumb: ", g_RtnNetMonitorCommandTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorCommandTypeTopic_mutex);

    int dataNumb = g_RtnNetMonitorCommandTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorCommandTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorCommandTypeTopic_trans_dataNumb: ", g_RtnNetMonitorCommandTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorCommandTypeTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorCommandTypeTopic_queue.front());
        g_RtnNetMonitorCommandTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorCommandTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorCommandTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorCommandTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorCommandTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorCommandTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorCommandTypeTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorCommandTypeField* pRtnNetMonitorCommandType = (CShfeFtdcRtnNetMonitorCommandTypeField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorCommandTypeJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorCommandType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->OperationType);
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->ID);
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->Manufactory_ID);
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->MonitorType_ID);
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                v8::Local<v8::String> DeviceModle_ID = Nan::New<v8::String> ("DeviceModle_ID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceModle_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->DeviceModle_ID);
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (DeviceModle_ID), Local<v8::Value>(DeviceModle_IDValue));

                v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->ActionGroup_ID);
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorCommandType->Manufactory, utf8string);
                v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (pRtnNetMonitorCommandType->Manufactory).ToLocalChecked();
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                v8::Local<v8::String> MonitorType = Nan::New<v8::String> ("MonitorType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorCommandType->MonitorType, utf8string);
                v8::Local<v8::String> MonitorTypeValue = Nan::New<v8::String> (pRtnNetMonitorCommandType->MonitorType).ToLocalChecked();
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (MonitorType), Local<v8::Value>(MonitorTypeValue));

                v8::Local<v8::String> DeviceModle = Nan::New<v8::String> ("DeviceModle").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorCommandType->DeviceModle, utf8string);
                v8::Local<v8::String> DeviceModleValue = Nan::New<v8::String> (pRtnNetMonitorCommandType->DeviceModle).ToLocalChecked();
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (DeviceModle), Local<v8::Value>(DeviceModleValue));

                v8::Local<v8::String> ActionGroup = Nan::New<v8::String> ("ActionGroup").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorCommandType->ActionGroup, utf8string);
                v8::Local<v8::String> ActionGroupValue = Nan::New<v8::String> (pRtnNetMonitorCommandType->ActionGroup).ToLocalChecked();
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (ActionGroup), Local<v8::Value>(ActionGroupValue));

                v8::Local<v8::String> Command = Nan::New<v8::String> ("Command").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorCommandType->Command, utf8string);
                v8::Local<v8::String> CommandValue = Nan::New<v8::String> (pRtnNetMonitorCommandType->Command).ToLocalChecked();
                pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (Command), Local<v8::Value>(CommandValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorCommandType) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorCommandTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorCommandType) { 
            delete[] pRtnNetMonitorCommandType;
            pRtnNetMonitorCommandType = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorCommandTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorActionGroupTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorActionGroupTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorActionGroupTopic_trans_callbackNumb: ", g_RspQryNetMonitorActionGroupTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorActionGroupTopic_mutex);

    int dataNumb = g_RspQryNetMonitorActionGroupTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorActionGroupTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorActionGroupTopic_trans_dataNumb: ", g_RspQryNetMonitorActionGroupTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorActionGroupTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorActionGroupTopic_queue.front());
        g_RspQryNetMonitorActionGroupTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorActionGroupTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorActionGroupTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorActionGroupTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorActionGroupTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorActionGroupTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorActionGroupTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorActionGroupField* pRspQryNetMonitorActionGroup = (CShfeFtdcRspQryNetMonitorActionGroupField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorActionGroupJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorActionGroup) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionGroup->OperationType);
                pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionGroup->ID);
                pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorActionGroup->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetMonitorActionGroup->CName).ToLocalChecked();
                pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorActionGroup->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetMonitorActionGroup->EName).ToLocalChecked();
                pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> ActionType = Nan::New<v8::String> ("ActionType").ToLocalChecked();
                v8::Local<v8::Integer> ActionTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionGroup->ActionType);
                pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (ActionType), Local<v8::Value>(ActionTypeValue));

                v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorActionGroup->Comments, utf8string);
                v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (pRspQryNetMonitorActionGroup->Comments).ToLocalChecked();
                pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorActionGroup) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorActionGroupJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorActionGroup) { 
            delete[] pRspQryNetMonitorActionGroup;
            pRspQryNetMonitorActionGroup = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorActionGroupTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorActionGroupTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorActionGroupTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorActionGroupTopic_trans_callbackNumb: ", g_RtnNetMonitorActionGroupTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorActionGroupTopic_mutex);

    int dataNumb = g_RtnNetMonitorActionGroupTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorActionGroupTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorActionGroupTopic_trans_dataNumb: ", g_RtnNetMonitorActionGroupTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorActionGroupTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorActionGroupTopic_queue.front());
        g_RtnNetMonitorActionGroupTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorActionGroupTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorActionGroupTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorActionGroupTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorActionGroupTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorActionGroupTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorActionGroupTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorActionGroupField* pRtnNetMonitorActionGroup = (CShfeFtdcRtnNetMonitorActionGroupField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorActionGroupJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorActionGroup) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorActionGroup->OperationType);
                pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorActionGroup->ID);
                pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorActionGroup->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetMonitorActionGroup->CName).ToLocalChecked();
                pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorActionGroup->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetMonitorActionGroup->EName).ToLocalChecked();
                pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> ActionType = Nan::New<v8::String> ("ActionType").ToLocalChecked();
                v8::Local<v8::Integer> ActionTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorActionGroup->ActionType);
                pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (ActionType), Local<v8::Value>(ActionTypeValue));

                v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorActionGroup->Comments, utf8string);
                v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (pRtnNetMonitorActionGroup->Comments).ToLocalChecked();
                pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorActionGroup) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorActionGroupJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorActionGroup) { 
            delete[] pRtnNetMonitorActionGroup;
            pRtnNetMonitorActionGroup = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorActionGroupTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorDeviceGroupTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorDeviceGroupTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorDeviceGroupTopic_trans_callbackNumb: ", g_RspQryNetMonitorDeviceGroupTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorDeviceGroupTopic_mutex);

    int dataNumb = g_RspQryNetMonitorDeviceGroupTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorDeviceGroupTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorDeviceGroupTopic_trans_dataNumb: ", g_RspQryNetMonitorDeviceGroupTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorDeviceGroupTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorDeviceGroupTopic_queue.front());
        g_RspQryNetMonitorDeviceGroupTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorDeviceGroupTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorDeviceGroupTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorDeviceGroupTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorDeviceGroupTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorDeviceGroupTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorDeviceGroupTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorDeviceGroupField* pRspQryNetMonitorDeviceGroup = (CShfeFtdcRspQryNetMonitorDeviceGroupField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorDeviceGroupJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorDeviceGroup) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceGroup->OperationType);
                pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceGroup->ID);
                pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorDeviceGroup->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetMonitorDeviceGroup->CName).ToLocalChecked();
                pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorDeviceGroup->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetMonitorDeviceGroup->EName).ToLocalChecked();
                pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> Condition = Nan::New<v8::String> ("Condition").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorDeviceGroup->Condition, utf8string);
                v8::Local<v8::String> ConditionValue = Nan::New<v8::String> (pRspQryNetMonitorDeviceGroup->Condition).ToLocalChecked();
                pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (Condition), Local<v8::Value>(ConditionValue));

                v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorDeviceGroup->Comments, utf8string);
                v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (pRspQryNetMonitorDeviceGroup->Comments).ToLocalChecked();
                pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorDeviceGroup) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorDeviceGroupJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorDeviceGroup) { 
            delete[] pRspQryNetMonitorDeviceGroup;
            pRspQryNetMonitorDeviceGroup = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorDeviceGroupTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorDeviceGroupTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorDeviceGroupTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorDeviceGroupTopic_trans_callbackNumb: ", g_RtnNetMonitorDeviceGroupTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorDeviceGroupTopic_mutex);

    int dataNumb = g_RtnNetMonitorDeviceGroupTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorDeviceGroupTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorDeviceGroupTopic_trans_dataNumb: ", g_RtnNetMonitorDeviceGroupTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorDeviceGroupTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorDeviceGroupTopic_queue.front());
        g_RtnNetMonitorDeviceGroupTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorDeviceGroupTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorDeviceGroupTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorDeviceGroupTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorDeviceGroupTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorDeviceGroupTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorDeviceGroupTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorDeviceGroupField* pRtnNetMonitorDeviceGroup = (CShfeFtdcRtnNetMonitorDeviceGroupField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorDeviceGroupJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorDeviceGroup) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceGroup->OperationType);
                pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceGroup->ID);
                pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorDeviceGroup->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetMonitorDeviceGroup->CName).ToLocalChecked();
                pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorDeviceGroup->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetMonitorDeviceGroup->EName).ToLocalChecked();
                pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> Condition = Nan::New<v8::String> ("Condition").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorDeviceGroup->Condition, utf8string);
                v8::Local<v8::String> ConditionValue = Nan::New<v8::String> (pRtnNetMonitorDeviceGroup->Condition).ToLocalChecked();
                pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (Condition), Local<v8::Value>(ConditionValue));

                v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorDeviceGroup->Comments, utf8string);
                v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (pRtnNetMonitorDeviceGroup->Comments).ToLocalChecked();
                pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorDeviceGroup) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorDeviceGroupJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorDeviceGroup) { 
            delete[] pRtnNetMonitorDeviceGroup;
            pRtnNetMonitorDeviceGroup = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorDeviceGroupTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTaskInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorTaskInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorTaskInfoTopic_trans_callbackNumb: ", g_RspQryNetMonitorTaskInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTaskInfoTopic_mutex);

    int dataNumb = g_RspQryNetMonitorTaskInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorTaskInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorTaskInfoTopic_trans_dataNumb: ", g_RspQryNetMonitorTaskInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorTaskInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorTaskInfoTopic_queue.front());
        g_RspQryNetMonitorTaskInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorTaskInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorTaskInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTaskInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorTaskInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTaskInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorTaskInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorTaskInfoField* pRspQryNetMonitorTaskInfo = (CShfeFtdcRspQryNetMonitorTaskInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorTaskInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorTaskInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->OperationType);
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->ID);
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInfo->CName).ToLocalChecked();
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInfo->EName).ToLocalChecked();
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> DeviceGroup_ID = Nan::New<v8::String> ("DeviceGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->DeviceGroup_ID);
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (DeviceGroup_ID), Local<v8::Value>(DeviceGroup_IDValue));

                v8::Local<v8::String> ManagerGroup_ID = Nan::New<v8::String> ("ManagerGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> ManagerGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->ManagerGroup_ID);
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ManagerGroup_ID), Local<v8::Value>(ManagerGroup_IDValue));

                v8::Local<v8::String> TimePolicy_ID = Nan::New<v8::String> ("TimePolicy_ID").ToLocalChecked();
                v8::Local<v8::Integer> TimePolicy_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->TimePolicy_ID);
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (TimePolicy_ID), Local<v8::Value>(TimePolicy_IDValue));

                v8::Local<v8::String> TaskPriority_ID = Nan::New<v8::String> ("TaskPriority_ID").ToLocalChecked();
                v8::Local<v8::Integer> TaskPriority_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->TaskPriority_ID);
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskPriority_ID), Local<v8::Value>(TaskPriority_IDValue));

                v8::Local<v8::String> OutputPolicy_ID = Nan::New<v8::String> ("OutputPolicy_ID").ToLocalChecked();
                v8::Local<v8::Integer> OutputPolicy_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->OutputPolicy_ID);
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (OutputPolicy_ID), Local<v8::Value>(OutputPolicy_IDValue));

                v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->ActionGroup_ID);
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                v8::Local<v8::String> EventExprStr = Nan::New<v8::String> ("EventExprStr").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->EventExprStr, utf8string);
                v8::Local<v8::String> EventExprStrValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInfo->EventExprStr).ToLocalChecked();
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (EventExprStr), Local<v8::Value>(EventExprStrValue));

                v8::Local<v8::String> DeviceGroup = Nan::New<v8::String> ("DeviceGroup").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->DeviceGroup, utf8string);
                v8::Local<v8::String> DeviceGroupValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInfo->DeviceGroup).ToLocalChecked();
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (DeviceGroup), Local<v8::Value>(DeviceGroupValue));

                v8::Local<v8::String> ManagerGroup = Nan::New<v8::String> ("ManagerGroup").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->ManagerGroup, utf8string);
                v8::Local<v8::String> ManagerGroupValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInfo->ManagerGroup).ToLocalChecked();
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ManagerGroup), Local<v8::Value>(ManagerGroupValue));

                v8::Local<v8::String> TimePolicy = Nan::New<v8::String> ("TimePolicy").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->TimePolicy, utf8string);
                v8::Local<v8::String> TimePolicyValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInfo->TimePolicy).ToLocalChecked();
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (TimePolicy), Local<v8::Value>(TimePolicyValue));

                v8::Local<v8::String> TaskPriority = Nan::New<v8::String> ("TaskPriority").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->TaskPriority, utf8string);
                v8::Local<v8::String> TaskPriorityValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInfo->TaskPriority).ToLocalChecked();
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskPriority), Local<v8::Value>(TaskPriorityValue));

                v8::Local<v8::String> OutputPolicy = Nan::New<v8::String> ("OutputPolicy").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->OutputPolicy, utf8string);
                v8::Local<v8::String> OutputPolicyValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInfo->OutputPolicy).ToLocalChecked();
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (OutputPolicy), Local<v8::Value>(OutputPolicyValue));

                v8::Local<v8::String> ActionGroup = Nan::New<v8::String> ("ActionGroup").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->ActionGroup, utf8string);
                v8::Local<v8::String> ActionGroupValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInfo->ActionGroup).ToLocalChecked();
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ActionGroup), Local<v8::Value>(ActionGroupValue));

                v8::Local<v8::String> ValidFlag = Nan::New<v8::String> ("ValidFlag").ToLocalChecked();
                v8::Local<v8::Integer> ValidFlagValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->ValidFlag);
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ValidFlag), Local<v8::Value>(ValidFlagValue));

                v8::Local<v8::String> TaskStatus = Nan::New<v8::String> ("TaskStatus").ToLocalChecked();
                v8::Local<v8::Integer> TaskStatusValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->TaskStatus);
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskStatus), Local<v8::Value>(TaskStatusValue));

                v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->Comments, utf8string);
                v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInfo->Comments).ToLocalChecked();
                pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorTaskInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorTaskInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorTaskInfo) { 
            delete[] pRspQryNetMonitorTaskInfo;
            pRspQryNetMonitorTaskInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorTaskInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTaskInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorTaskInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorTaskInfoTopic_trans_callbackNumb: ", g_RtnNetMonitorTaskInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorTaskInfoTopic_mutex);

    int dataNumb = g_RtnNetMonitorTaskInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorTaskInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorTaskInfoTopic_trans_dataNumb: ", g_RtnNetMonitorTaskInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorTaskInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorTaskInfoTopic_queue.front());
        g_RtnNetMonitorTaskInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorTaskInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorTaskInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTaskInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorTaskInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTaskInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorTaskInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorTaskInfoField* pRtnNetMonitorTaskInfo = (CShfeFtdcRtnNetMonitorTaskInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorTaskInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorTaskInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->OperationType);
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->ID);
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInfo->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetMonitorTaskInfo->CName).ToLocalChecked();
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInfo->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetMonitorTaskInfo->EName).ToLocalChecked();
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> DeviceGroup_ID = Nan::New<v8::String> ("DeviceGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->DeviceGroup_ID);
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (DeviceGroup_ID), Local<v8::Value>(DeviceGroup_IDValue));

                v8::Local<v8::String> ManagerGroup_ID = Nan::New<v8::String> ("ManagerGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> ManagerGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->ManagerGroup_ID);
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ManagerGroup_ID), Local<v8::Value>(ManagerGroup_IDValue));

                v8::Local<v8::String> TimePolicy_ID = Nan::New<v8::String> ("TimePolicy_ID").ToLocalChecked();
                v8::Local<v8::Integer> TimePolicy_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->TimePolicy_ID);
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (TimePolicy_ID), Local<v8::Value>(TimePolicy_IDValue));

                v8::Local<v8::String> TaskPriority_ID = Nan::New<v8::String> ("TaskPriority_ID").ToLocalChecked();
                v8::Local<v8::Integer> TaskPriority_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->TaskPriority_ID);
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskPriority_ID), Local<v8::Value>(TaskPriority_IDValue));

                v8::Local<v8::String> OutputPolicy_ID = Nan::New<v8::String> ("OutputPolicy_ID").ToLocalChecked();
                v8::Local<v8::Integer> OutputPolicy_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->OutputPolicy_ID);
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (OutputPolicy_ID), Local<v8::Value>(OutputPolicy_IDValue));

                v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->ActionGroup_ID);
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                v8::Local<v8::String> EventExprStr = Nan::New<v8::String> ("EventExprStr").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInfo->EventExprStr, utf8string);
                v8::Local<v8::String> EventExprStrValue = Nan::New<v8::String> (pRtnNetMonitorTaskInfo->EventExprStr).ToLocalChecked();
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (EventExprStr), Local<v8::Value>(EventExprStrValue));

                v8::Local<v8::String> DeviceGroup = Nan::New<v8::String> ("DeviceGroup").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInfo->DeviceGroup, utf8string);
                v8::Local<v8::String> DeviceGroupValue = Nan::New<v8::String> (pRtnNetMonitorTaskInfo->DeviceGroup).ToLocalChecked();
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (DeviceGroup), Local<v8::Value>(DeviceGroupValue));

                v8::Local<v8::String> ManagerGroup = Nan::New<v8::String> ("ManagerGroup").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInfo->ManagerGroup, utf8string);
                v8::Local<v8::String> ManagerGroupValue = Nan::New<v8::String> (pRtnNetMonitorTaskInfo->ManagerGroup).ToLocalChecked();
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ManagerGroup), Local<v8::Value>(ManagerGroupValue));

                v8::Local<v8::String> TimePolicy = Nan::New<v8::String> ("TimePolicy").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInfo->TimePolicy, utf8string);
                v8::Local<v8::String> TimePolicyValue = Nan::New<v8::String> (pRtnNetMonitorTaskInfo->TimePolicy).ToLocalChecked();
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (TimePolicy), Local<v8::Value>(TimePolicyValue));

                v8::Local<v8::String> TaskPriority = Nan::New<v8::String> ("TaskPriority").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInfo->TaskPriority, utf8string);
                v8::Local<v8::String> TaskPriorityValue = Nan::New<v8::String> (pRtnNetMonitorTaskInfo->TaskPriority).ToLocalChecked();
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskPriority), Local<v8::Value>(TaskPriorityValue));

                v8::Local<v8::String> OutputPolicy = Nan::New<v8::String> ("OutputPolicy").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInfo->OutputPolicy, utf8string);
                v8::Local<v8::String> OutputPolicyValue = Nan::New<v8::String> (pRtnNetMonitorTaskInfo->OutputPolicy).ToLocalChecked();
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (OutputPolicy), Local<v8::Value>(OutputPolicyValue));

                v8::Local<v8::String> ActionGroup = Nan::New<v8::String> ("ActionGroup").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInfo->ActionGroup, utf8string);
                v8::Local<v8::String> ActionGroupValue = Nan::New<v8::String> (pRtnNetMonitorTaskInfo->ActionGroup).ToLocalChecked();
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ActionGroup), Local<v8::Value>(ActionGroupValue));

                v8::Local<v8::String> ValidFlag = Nan::New<v8::String> ("ValidFlag").ToLocalChecked();
                v8::Local<v8::Integer> ValidFlagValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->ValidFlag);
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ValidFlag), Local<v8::Value>(ValidFlagValue));

                v8::Local<v8::String> TaskStatus = Nan::New<v8::String> ("TaskStatus").ToLocalChecked();
                v8::Local<v8::Integer> TaskStatusValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->TaskStatus);
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskStatus), Local<v8::Value>(TaskStatusValue));

                v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInfo->Comments, utf8string);
                v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (pRtnNetMonitorTaskInfo->Comments).ToLocalChecked();
                pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorTaskInfo) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorTaskInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorTaskInfo) { 
            delete[] pRtnNetMonitorTaskInfo;
            pRtnNetMonitorTaskInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorTaskInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTaskResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorTaskResultTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorTaskResultTopic_trans_callbackNumb: ", g_RspQryNetMonitorTaskResultTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTaskResultTopic_mutex);

    int dataNumb = g_RspQryNetMonitorTaskResultTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorTaskResultTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorTaskResultTopic_trans_dataNumb: ", g_RspQryNetMonitorTaskResultTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorTaskResultTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorTaskResultTopic_queue.front());
        g_RspQryNetMonitorTaskResultTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorTaskResultTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorTaskResultTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTaskResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorTaskResultTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTaskResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorTaskResultTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorTaskResultField* pRspQryNetMonitorTaskResult = (CShfeFtdcRspQryNetMonitorTaskResultField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorTaskResultJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorTaskResult) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskResult->OperationType);
                pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskResult->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryNetMonitorTaskResult->ObjectID).ToLocalChecked();
                pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> Task_ID = Nan::New<v8::String> ("Task_ID").ToLocalChecked();
                v8::Local<v8::Integer> Task_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskResult->Task_ID);
                pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (Task_ID), Local<v8::Value>(Task_IDValue));

                v8::Local<v8::String> OperateTime = Nan::New<v8::String> ("OperateTime").ToLocalChecked();
                v8::Local<v8::Integer> OperateTimeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskResult->OperateTime);
                pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (OperateTime), Local<v8::Value>(OperateTimeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskResult->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryNetMonitorTaskResult->MonDate).ToLocalChecked();
                pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskResult->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryNetMonitorTaskResult->MonTime).ToLocalChecked();
                pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> InstructChain = Nan::New<v8::String> ("InstructChain").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskResult->InstructChain, utf8string);
                v8::Local<v8::String> InstructChainValue = Nan::New<v8::String> (pRspQryNetMonitorTaskResult->InstructChain).ToLocalChecked();
                pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (InstructChain), Local<v8::Value>(InstructChainValue));

                v8::Local<v8::String> ResultChain = Nan::New<v8::String> ("ResultChain").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskResult->ResultChain, utf8string);
                v8::Local<v8::String> ResultChainValue = Nan::New<v8::String> (pRspQryNetMonitorTaskResult->ResultChain).ToLocalChecked();
                pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (ResultChain), Local<v8::Value>(ResultChainValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskResult->Flag);
                pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorTaskResult) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorTaskResultJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorTaskResult) { 
            delete[] pRspQryNetMonitorTaskResult;
            pRspQryNetMonitorTaskResult = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorTaskResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTaskResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorTaskResultTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorTaskResultTopic_trans_callbackNumb: ", g_RtnNetMonitorTaskResultTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorTaskResultTopic_mutex);

    int dataNumb = g_RtnNetMonitorTaskResultTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorTaskResultTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorTaskResultTopic_trans_dataNumb: ", g_RtnNetMonitorTaskResultTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorTaskResultTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorTaskResultTopic_queue.front());
        g_RtnNetMonitorTaskResultTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorTaskResultTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorTaskResultTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTaskResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorTaskResultTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTaskResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorTaskResultTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorTaskResultField* pRtnNetMonitorTaskResult = (CShfeFtdcRtnNetMonitorTaskResultField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorTaskResultJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorTaskResult) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskResult->OperationType);
                pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskResult->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnNetMonitorTaskResult->ObjectID).ToLocalChecked();
                pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> Task_ID = Nan::New<v8::String> ("Task_ID").ToLocalChecked();
                v8::Local<v8::Integer> Task_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskResult->Task_ID);
                pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (Task_ID), Local<v8::Value>(Task_IDValue));

                v8::Local<v8::String> OperateTime = Nan::New<v8::String> ("OperateTime").ToLocalChecked();
                v8::Local<v8::Integer> OperateTimeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskResult->OperateTime);
                pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (OperateTime), Local<v8::Value>(OperateTimeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskResult->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnNetMonitorTaskResult->MonDate).ToLocalChecked();
                pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskResult->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnNetMonitorTaskResult->MonTime).ToLocalChecked();
                pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> InstructChain = Nan::New<v8::String> ("InstructChain").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskResult->InstructChain, utf8string);
                v8::Local<v8::String> InstructChainValue = Nan::New<v8::String> (pRtnNetMonitorTaskResult->InstructChain).ToLocalChecked();
                pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (InstructChain), Local<v8::Value>(InstructChainValue));

                v8::Local<v8::String> ResultChain = Nan::New<v8::String> ("ResultChain").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskResult->ResultChain, utf8string);
                v8::Local<v8::String> ResultChainValue = Nan::New<v8::String> (pRtnNetMonitorTaskResult->ResultChain).ToLocalChecked();
                pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (ResultChain), Local<v8::Value>(ResultChainValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskResult->Flag);
                pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorTaskResult) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorTaskResultJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorTaskResult) { 
            delete[] pRtnNetMonitorTaskResult;
            pRtnNetMonitorTaskResult = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorTaskResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTaskObjectSetTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorTaskObjectSetTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorTaskObjectSetTopic_trans_callbackNumb: ", g_RspQryNetMonitorTaskObjectSetTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTaskObjectSetTopic_mutex);

    int dataNumb = g_RspQryNetMonitorTaskObjectSetTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorTaskObjectSetTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorTaskObjectSetTopic_trans_dataNumb: ", g_RspQryNetMonitorTaskObjectSetTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorTaskObjectSetTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorTaskObjectSetTopic_queue.front());
        g_RspQryNetMonitorTaskObjectSetTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorTaskObjectSetTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorTaskObjectSetTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTaskObjectSetTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorTaskObjectSetTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTaskObjectSetTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorTaskObjectSetTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorTaskObjectSetField* pRspQryNetMonitorTaskObjectSet = (CShfeFtdcRspQryNetMonitorTaskObjectSetField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorTaskObjectSetJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorTaskObjectSet) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskObjectSet->OperationType);
                pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskObjectSet->ID);
                pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> DeviceGroup_ID = Nan::New<v8::String> ("DeviceGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskObjectSet->DeviceGroup_ID);
                pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (DeviceGroup_ID), Local<v8::Value>(DeviceGroup_IDValue));

                v8::Local<v8::String> Device_ID = Nan::New<v8::String> ("Device_ID").ToLocalChecked();
                v8::Local<v8::Integer> Device_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskObjectSet->Device_ID);
                pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (Device_ID), Local<v8::Value>(Device_IDValue));

                v8::Local<v8::String> DataCenter = Nan::New<v8::String> ("DataCenter").ToLocalChecked();
                v8::Local<v8::Integer> DataCenterValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskObjectSet->DataCenter);
                pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (DataCenter), Local<v8::Value>(DataCenterValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorTaskObjectSet) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorTaskObjectSetJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorTaskObjectSet) { 
            delete[] pRspQryNetMonitorTaskObjectSet;
            pRspQryNetMonitorTaskObjectSet = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorTaskObjectSetTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTaskObjectSetTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorTaskObjectSetTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorTaskObjectSetTopic_trans_callbackNumb: ", g_RtnNetMonitorTaskObjectSetTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorTaskObjectSetTopic_mutex);

    int dataNumb = g_RtnNetMonitorTaskObjectSetTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorTaskObjectSetTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorTaskObjectSetTopic_trans_dataNumb: ", g_RtnNetMonitorTaskObjectSetTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorTaskObjectSetTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorTaskObjectSetTopic_queue.front());
        g_RtnNetMonitorTaskObjectSetTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorTaskObjectSetTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorTaskObjectSetTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTaskObjectSetTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorTaskObjectSetTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTaskObjectSetTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorTaskObjectSetTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorTaskObjectSetField* pRtnNetMonitorTaskObjectSet = (CShfeFtdcRtnNetMonitorTaskObjectSetField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorTaskObjectSetJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorTaskObjectSet) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskObjectSet->OperationType);
                pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskObjectSet->ID);
                pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> DeviceGroup_ID = Nan::New<v8::String> ("DeviceGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskObjectSet->DeviceGroup_ID);
                pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (DeviceGroup_ID), Local<v8::Value>(DeviceGroup_IDValue));

                v8::Local<v8::String> Device_ID = Nan::New<v8::String> ("Device_ID").ToLocalChecked();
                v8::Local<v8::Integer> Device_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskObjectSet->Device_ID);
                pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (Device_ID), Local<v8::Value>(Device_IDValue));

                v8::Local<v8::String> DataCenter = Nan::New<v8::String> ("DataCenter").ToLocalChecked();
                v8::Local<v8::Integer> DataCenterValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskObjectSet->DataCenter);
                pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (DataCenter), Local<v8::Value>(DataCenterValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorTaskObjectSet) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorTaskObjectSetJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorTaskObjectSet) { 
            delete[] pRtnNetMonitorTaskObjectSet;
            pRtnNetMonitorTaskObjectSet = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorTaskObjectSetTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetPartyLinkInfoTopic_trans_callbackNumb: ", g_RspQryNetPartyLinkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetPartyLinkInfoTopic_mutex);

    int dataNumb = g_RspQryNetPartyLinkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetPartyLinkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetPartyLinkInfoTopic_trans_dataNumb: ", g_RspQryNetPartyLinkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetPartyLinkInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetPartyLinkInfoTopic_queue.front());
        g_RspQryNetPartyLinkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetPartyLinkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetPartyLinkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetPartyLinkInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetPartyLinkInfoField* pRspQryNetPartyLinkInfo = (CShfeFtdcRspQryNetPartyLinkInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetPartyLinkInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetPartyLinkInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkInfo->OperationType);
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkInfo->ID);
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->MEMBER_NO, utf8string);
                v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->MEMBER_NO).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->MEMBER_NAME, utf8string);
                v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->REMOTE_ADDR, utf8string);
                v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->LOCAL_ADDR, utf8string);
                v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->ADDRESS, utf8string);
                v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->ADDRESS).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->LINE_STATUS, utf8string);
                v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->LINE_STATUS).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->CONTACT, utf8string);
                v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->CONTACT).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->TELEPHONE, utf8string);
                v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->TELEPHONE).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->MOBILEPHONE, utf8string);
                v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->EMAIL, utf8string);
                v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->EMAIL).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->FAX, utf8string);
                v8::Local<v8::String> FAXValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->FAX).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->PROVINCE, utf8string);
                v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->PROVINCE).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->DDN_NO).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IN_MODE, utf8string);
                v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->IN_MODE).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IP_WAN, utf8string);
                v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->IP_WAN).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IP_LAN, utf8string);
                v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->IP_LAN).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->IPADDR).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->Interface, utf8string);
                v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->Interface).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->INTERFACE_DATE, utf8string);
                v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->SOFTWARE, utf8string);
                v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->SOFTWARE).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->FEE_TYPE, utf8string);
                v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->FEE_TYPE).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->SERVICEPROVIDER, utf8string);
                v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IF_ZIYING, utf8string);
                v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->IF_ZIYING).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IF_TUOGUAN, utf8string);
                v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->HASOTHER, utf8string);
                v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->HASOTHER).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->SEAT_NO, utf8string);
                v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->SEAT_NO).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkInfo->PRO, utf8string);
                v8::Local<v8::String> PROValue = Nan::New<v8::String> (pRspQryNetPartyLinkInfo->PRO).ToLocalChecked();
                pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetPartyLinkInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetPartyLinkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetPartyLinkInfo) { 
            delete[] pRspQryNetPartyLinkInfo;
            pRspQryNetPartyLinkInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetPartyLinkInfoTopic_trans_callbackNumb: ", g_RtnNetPartyLinkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetPartyLinkInfoTopic_mutex);

    int dataNumb = g_RtnNetPartyLinkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetPartyLinkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetPartyLinkInfoTopic_trans_dataNumb: ", g_RtnNetPartyLinkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetPartyLinkInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetPartyLinkInfoTopic_queue.front());
        g_RtnNetPartyLinkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetPartyLinkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetPartyLinkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetPartyLinkInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetPartyLinkInfoField* pRtnNetPartyLinkInfo = (CShfeFtdcRtnNetPartyLinkInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetPartyLinkInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetPartyLinkInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPartyLinkInfo->OperationType);
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPartyLinkInfo->ID);
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->MEMBER_NO, utf8string);
                v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->MEMBER_NO).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->MEMBER_NAME, utf8string);
                v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->REMOTE_ADDR, utf8string);
                v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->LOCAL_ADDR, utf8string);
                v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->ADDRESS, utf8string);
                v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->ADDRESS).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->LINE_STATUS, utf8string);
                v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->LINE_STATUS).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->CONTACT, utf8string);
                v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->CONTACT).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->TELEPHONE, utf8string);
                v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->TELEPHONE).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->MOBILEPHONE, utf8string);
                v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->EMAIL, utf8string);
                v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->EMAIL).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->FAX, utf8string);
                v8::Local<v8::String> FAXValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->FAX).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->PROVINCE, utf8string);
                v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->PROVINCE).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->DDN_NO).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->IN_MODE, utf8string);
                v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->IN_MODE).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->IP_WAN, utf8string);
                v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->IP_WAN).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->IP_LAN, utf8string);
                v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->IP_LAN).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->IPADDR).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->Interface, utf8string);
                v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->Interface).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->INTERFACE_DATE, utf8string);
                v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->SOFTWARE, utf8string);
                v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->SOFTWARE).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->FEE_TYPE, utf8string);
                v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->FEE_TYPE).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->SERVICEPROVIDER, utf8string);
                v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->IF_ZIYING, utf8string);
                v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->IF_ZIYING).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->IF_TUOGUAN, utf8string);
                v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->HASOTHER, utf8string);
                v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->HASOTHER).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->SEAT_NO, utf8string);
                v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->SEAT_NO).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkInfo->PRO, utf8string);
                v8::Local<v8::String> PROValue = Nan::New<v8::String> (pRtnNetPartyLinkInfo->PRO).ToLocalChecked();
                pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetPartyLinkInfo) { 
                params[0] = Local<v8::Value>(pRtnNetPartyLinkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetPartyLinkInfo) { 
            delete[] pRtnNetPartyLinkInfo;
            pRtnNetPartyLinkInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorActionAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorActionAttrTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorActionAttrTopic_trans_callbackNumb: ", g_RspQryNetMonitorActionAttrTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorActionAttrTopic_mutex);

    int dataNumb = g_RspQryNetMonitorActionAttrTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorActionAttrTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorActionAttrTopic_trans_dataNumb: ", g_RspQryNetMonitorActionAttrTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorActionAttrTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorActionAttrTopic_queue.front());
        g_RspQryNetMonitorActionAttrTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorActionAttrTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorActionAttrTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorActionAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorActionAttrTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorActionAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorActionAttrTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorActionAttrField* pRspQryNetMonitorActionAttr = (CShfeFtdcRspQryNetMonitorActionAttrField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorActionAttrJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorActionAttr) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionAttr->OperationType);
                pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionAttr->ID);
                pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionAttr->ActionGroup_ID);
                pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                v8::Local<v8::String> MonitorAttr_ID = Nan::New<v8::String> ("MonitorAttr_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorAttr_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionAttr->MonitorAttr_ID);
                pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value> (MonitorAttr_ID), Local<v8::Value>(MonitorAttr_IDValue));

                v8::Local<v8::String> MonitorAttrName = Nan::New<v8::String> ("MonitorAttrName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorActionAttr->MonitorAttrName, utf8string);
                v8::Local<v8::String> MonitorAttrNameValue = Nan::New<v8::String> (pRspQryNetMonitorActionAttr->MonitorAttrName).ToLocalChecked();
                pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value> (MonitorAttrName), Local<v8::Value>(MonitorAttrNameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorActionAttr) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorActionAttrJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorActionAttr) { 
            delete[] pRspQryNetMonitorActionAttr;
            pRspQryNetMonitorActionAttr = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorActionAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorActionAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorActionAttrTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorActionAttrTopic_trans_callbackNumb: ", g_RtnNetMonitorActionAttrTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorActionAttrTopic_mutex);

    int dataNumb = g_RtnNetMonitorActionAttrTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorActionAttrTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorActionAttrTopic_trans_dataNumb: ", g_RtnNetMonitorActionAttrTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorActionAttrTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorActionAttrTopic_queue.front());
        g_RtnNetMonitorActionAttrTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorActionAttrTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorActionAttrTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorActionAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorActionAttrTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorActionAttrTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorActionAttrTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorActionAttrField* pRtnNetMonitorActionAttr = (CShfeFtdcRtnNetMonitorActionAttrField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorActionAttrJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorActionAttr) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorActionAttr->OperationType);
                pRtnNetMonitorActionAttrJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorActionAttr->ID);
                pRtnNetMonitorActionAttrJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorActionAttr->ActionGroup_ID);
                pRtnNetMonitorActionAttrJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                v8::Local<v8::String> MonitorAttr_ID = Nan::New<v8::String> ("MonitorAttr_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorAttr_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorActionAttr->MonitorAttr_ID);
                pRtnNetMonitorActionAttrJS->Set(Local<v8::Value> (MonitorAttr_ID), Local<v8::Value>(MonitorAttr_IDValue));

                v8::Local<v8::String> MonitorAttrName = Nan::New<v8::String> ("MonitorAttrName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorActionAttr->MonitorAttrName, utf8string);
                v8::Local<v8::String> MonitorAttrNameValue = Nan::New<v8::String> (pRtnNetMonitorActionAttr->MonitorAttrName).ToLocalChecked();
                pRtnNetMonitorActionAttrJS->Set(Local<v8::Value> (MonitorAttrName), Local<v8::Value>(MonitorAttrNameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorActionAttr) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorActionAttrJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorActionAttr) { 
            delete[] pRtnNetMonitorActionAttr;
            pRtnNetMonitorActionAttr = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorActionAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetModuleTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetModuleTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetModuleTopic_trans_callbackNumb: ", g_RspQryNetModuleTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetModuleTopic_mutex);

    int dataNumb = g_RspQryNetModuleTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetModuleTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetModuleTopic_trans_dataNumb: ", g_RspQryNetModuleTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetModuleTopic_queue.empty()) {
        receivedData.push (g_RspQryNetModuleTopic_queue.front());
        g_RspQryNetModuleTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetModuleTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetModuleTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetModuleTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetModuleTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetModuleTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetModuleTopic").ToLocalChecked());

        CShfeFtdcRspQryNetModuleField* pRspQryNetModule = (CShfeFtdcRspQryNetModuleField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetModuleJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetModule) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetModule->OperationType);
                pRspQryNetModuleJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetModule->ID);
                pRspQryNetModuleJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetModule->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryNetModule->ObjectID).ToLocalChecked();
                pRspQryNetModuleJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRspQryNetModule->MonitorType_ID);
                pRspQryNetModuleJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRspQryNetModule->DeviceID);
                pRspQryNetModuleJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                v8::Local<v8::String> DeviceObjectID = Nan::New<v8::String> ("DeviceObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetModule->DeviceObjectID, utf8string);
                v8::Local<v8::String> DeviceObjectIDValue = Nan::New<v8::String> (pRspQryNetModule->DeviceObjectID).ToLocalChecked();
                pRspQryNetModuleJS->Set(Local<v8::Value> (DeviceObjectID), Local<v8::Value>(DeviceObjectIDValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetModule->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRspQryNetModule->Name).ToLocalChecked();
                pRspQryNetModuleJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetModule->Description, utf8string);
                v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (pRspQryNetModule->Description).ToLocalChecked();
                pRspQryNetModuleJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                v8::Local<v8::String> ModuleIndex = Nan::New<v8::String> ("ModuleIndex").ToLocalChecked();
                v8::Local<v8::Integer> ModuleIndexValue = Nan::New<v8::Integer> (pRspQryNetModule->ModuleIndex);
                pRspQryNetModuleJS->Set(Local<v8::Value> (ModuleIndex), Local<v8::Value>(ModuleIndexValue));

                v8::Local<v8::String> EntPhyIndex = Nan::New<v8::String> ("EntPhyIndex").ToLocalChecked();
                v8::Local<v8::Integer> EntPhyIndexValue = Nan::New<v8::Integer> (pRspQryNetModule->EntPhyIndex);
                pRspQryNetModuleJS->Set(Local<v8::Value> (EntPhyIndex), Local<v8::Value>(EntPhyIndexValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetModule) { 
                params[0] = Local<v8::Value>(pRspQryNetModuleJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetModule) { 
            delete[] pRspQryNetModule;
            pRspQryNetModule = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetModuleTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetModuleTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetModuleTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetModuleTopic_trans_callbackNumb: ", g_RtnNetModuleTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetModuleTopic_mutex);

    int dataNumb = g_RtnNetModuleTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetModuleTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetModuleTopic_trans_dataNumb: ", g_RtnNetModuleTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetModuleTopic_queue.empty()) {
        receivedData.push (g_RtnNetModuleTopic_queue.front());
        g_RtnNetModuleTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetModuleTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetModuleTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetModuleTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetModuleTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetModuleTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetModuleTopic").ToLocalChecked());

        CShfeFtdcRtnNetModuleField* pRtnNetModule = (CShfeFtdcRtnNetModuleField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetModuleJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetModule) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetModule->OperationType);
                pRtnNetModuleJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetModule->ID);
                pRtnNetModuleJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetModule->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnNetModule->ObjectID).ToLocalChecked();
                pRtnNetModuleJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRtnNetModule->MonitorType_ID);
                pRtnNetModuleJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRtnNetModule->DeviceID);
                pRtnNetModuleJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                v8::Local<v8::String> DeviceObjectID = Nan::New<v8::String> ("DeviceObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetModule->DeviceObjectID, utf8string);
                v8::Local<v8::String> DeviceObjectIDValue = Nan::New<v8::String> (pRtnNetModule->DeviceObjectID).ToLocalChecked();
                pRtnNetModuleJS->Set(Local<v8::Value> (DeviceObjectID), Local<v8::Value>(DeviceObjectIDValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetModule->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRtnNetModule->Name).ToLocalChecked();
                pRtnNetModuleJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetModule->Description, utf8string);
                v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (pRtnNetModule->Description).ToLocalChecked();
                pRtnNetModuleJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                v8::Local<v8::String> ModuleIndex = Nan::New<v8::String> ("ModuleIndex").ToLocalChecked();
                v8::Local<v8::Integer> ModuleIndexValue = Nan::New<v8::Integer> (pRtnNetModule->ModuleIndex);
                pRtnNetModuleJS->Set(Local<v8::Value> (ModuleIndex), Local<v8::Value>(ModuleIndexValue));

                v8::Local<v8::String> EntPhyIndex = Nan::New<v8::String> ("EntPhyIndex").ToLocalChecked();
                v8::Local<v8::Integer> EntPhyIndexValue = Nan::New<v8::Integer> (pRtnNetModule->EntPhyIndex);
                pRtnNetModuleJS->Set(Local<v8::Value> (EntPhyIndex), Local<v8::Value>(EntPhyIndexValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetModule) { 
                params[0] = Local<v8::Value>(pRtnNetModuleJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetModule) { 
            delete[] pRtnNetModule;
            pRtnNetModule = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetModuleTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetEventExprTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetEventExprTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetEventExprTopic_trans_callbackNumb: ", g_RspQryNetEventExprTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetEventExprTopic_mutex);

    int dataNumb = g_RspQryNetEventExprTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetEventExprTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetEventExprTopic_trans_dataNumb: ", g_RspQryNetEventExprTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetEventExprTopic_queue.empty()) {
        receivedData.push (g_RspQryNetEventExprTopic_queue.front());
        g_RspQryNetEventExprTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetEventExprTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetEventExprTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetEventExprTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetEventExprTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetEventExprTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetEventExprTopic").ToLocalChecked());

        CShfeFtdcRspQryNetEventExprField* pRspQryNetEventExpr = (CShfeFtdcRspQryNetEventExprField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetEventExprJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetEventExpr) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->OperationType);
                pRspQryNetEventExprJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->ID);
                pRspQryNetEventExprJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CNAME = Nan::New<v8::String> ("CNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventExpr->CNAME, utf8string);
                v8::Local<v8::String> CNAMEValue = Nan::New<v8::String> (pRspQryNetEventExpr->CNAME).ToLocalChecked();
                pRspQryNetEventExprJS->Set(Local<v8::Value> (CNAME), Local<v8::Value>(CNAMEValue));

                v8::Local<v8::String> ENAME = Nan::New<v8::String> ("ENAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventExpr->ENAME, utf8string);
                v8::Local<v8::String> ENAMEValue = Nan::New<v8::String> (pRspQryNetEventExpr->ENAME).ToLocalChecked();
                pRspQryNetEventExprJS->Set(Local<v8::Value> (ENAME), Local<v8::Value>(ENAMEValue));

                v8::Local<v8::String> WarningLEVEL = Nan::New<v8::String> ("WarningLEVEL").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventExpr->WarningLEVEL, utf8string);
                v8::Local<v8::String> WarningLEVELValue = Nan::New<v8::String> (pRspQryNetEventExpr->WarningLEVEL).ToLocalChecked();
                pRspQryNetEventExprJS->Set(Local<v8::Value> (WarningLEVEL), Local<v8::Value>(WarningLEVELValue));

                v8::Local<v8::String> EventTypeID = Nan::New<v8::String> ("EventTypeID").ToLocalChecked();
                v8::Local<v8::Integer> EventTypeIDValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->EventTypeID);
                pRspQryNetEventExprJS->Set(Local<v8::Value> (EventTypeID), Local<v8::Value>(EventTypeIDValue));

                v8::Local<v8::String> SubEventTypeID = Nan::New<v8::String> ("SubEventTypeID").ToLocalChecked();
                v8::Local<v8::Integer> SubEventTypeIDValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->SubEventTypeID);
                pRspQryNetEventExprJS->Set(Local<v8::Value> (SubEventTypeID), Local<v8::Value>(SubEventTypeIDValue));

                v8::Local<v8::String> GIVEUPTIME = Nan::New<v8::String> ("GIVEUPTIME").ToLocalChecked();
                v8::Local<v8::Integer> GIVEUPTIMEValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->GIVEUPTIME);
                pRspQryNetEventExprJS->Set(Local<v8::Value> (GIVEUPTIME), Local<v8::Value>(GIVEUPTIMEValue));

                v8::Local<v8::String> CONTROL = Nan::New<v8::String> ("CONTROL").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventExpr->CONTROL, utf8string);
                v8::Local<v8::String> CONTROLValue = Nan::New<v8::String> (pRspQryNetEventExpr->CONTROL).ToLocalChecked();
                pRspQryNetEventExprJS->Set(Local<v8::Value> (CONTROL), Local<v8::Value>(CONTROLValue));

                v8::Local<v8::String> EXPR = Nan::New<v8::String> ("EXPR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventExpr->EXPR, utf8string);
                v8::Local<v8::String> EXPRValue = Nan::New<v8::String> (pRspQryNetEventExpr->EXPR).ToLocalChecked();
                pRspQryNetEventExprJS->Set(Local<v8::Value> (EXPR), Local<v8::Value>(EXPRValue));

                v8::Local<v8::String> BRIEF = Nan::New<v8::String> ("BRIEF").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventExpr->BRIEF, utf8string);
                v8::Local<v8::String> BRIEFValue = Nan::New<v8::String> (pRspQryNetEventExpr->BRIEF).ToLocalChecked();
                pRspQryNetEventExprJS->Set(Local<v8::Value> (BRIEF), Local<v8::Value>(BRIEFValue));

                v8::Local<v8::String> DISCRIPTION = Nan::New<v8::String> ("DISCRIPTION").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventExpr->DISCRIPTION, utf8string);
                v8::Local<v8::String> DISCRIPTIONValue = Nan::New<v8::String> (pRspQryNetEventExpr->DISCRIPTION).ToLocalChecked();
                pRspQryNetEventExprJS->Set(Local<v8::Value> (DISCRIPTION), Local<v8::Value>(DISCRIPTIONValue));

                v8::Local<v8::String> MSGGROUP_ID = Nan::New<v8::String> ("MSGGROUP_ID").ToLocalChecked();
                v8::Local<v8::Integer> MSGGROUP_IDValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->MSGGROUP_ID);
                pRspQryNetEventExprJS->Set(Local<v8::Value> (MSGGROUP_ID), Local<v8::Value>(MSGGROUP_IDValue));

                v8::Local<v8::String> ADMINGROUP_ID = Nan::New<v8::String> ("ADMINGROUP_ID").ToLocalChecked();
                v8::Local<v8::Integer> ADMINGROUP_IDValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->ADMINGROUP_ID);
                pRspQryNetEventExprJS->Set(Local<v8::Value> (ADMINGROUP_ID), Local<v8::Value>(ADMINGROUP_IDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetEventExpr) { 
                params[0] = Local<v8::Value>(pRspQryNetEventExprJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetEventExpr) { 
            delete[] pRspQryNetEventExpr;
            pRspQryNetEventExpr = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetEventExprTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetEventExprTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetEventExprTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetEventExprTopic_trans_callbackNumb: ", g_RtnNetEventExprTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetEventExprTopic_mutex);

    int dataNumb = g_RtnNetEventExprTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetEventExprTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetEventExprTopic_trans_dataNumb: ", g_RtnNetEventExprTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetEventExprTopic_queue.empty()) {
        receivedData.push (g_RtnNetEventExprTopic_queue.front());
        g_RtnNetEventExprTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetEventExprTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetEventExprTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetEventExprTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetEventExprTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetEventExprTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetEventExprTopic").ToLocalChecked());

        CShfeFtdcRtnNetEventExprField* pRtnNetEventExpr = (CShfeFtdcRtnNetEventExprField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetEventExprJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetEventExpr) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetEventExpr->OperationType);
                pRtnNetEventExprJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetEventExpr->ID);
                pRtnNetEventExprJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CNAME = Nan::New<v8::String> ("CNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventExpr->CNAME, utf8string);
                v8::Local<v8::String> CNAMEValue = Nan::New<v8::String> (pRtnNetEventExpr->CNAME).ToLocalChecked();
                pRtnNetEventExprJS->Set(Local<v8::Value> (CNAME), Local<v8::Value>(CNAMEValue));

                v8::Local<v8::String> ENAME = Nan::New<v8::String> ("ENAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventExpr->ENAME, utf8string);
                v8::Local<v8::String> ENAMEValue = Nan::New<v8::String> (pRtnNetEventExpr->ENAME).ToLocalChecked();
                pRtnNetEventExprJS->Set(Local<v8::Value> (ENAME), Local<v8::Value>(ENAMEValue));

                v8::Local<v8::String> WarningLEVEL = Nan::New<v8::String> ("WarningLEVEL").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventExpr->WarningLEVEL, utf8string);
                v8::Local<v8::String> WarningLEVELValue = Nan::New<v8::String> (pRtnNetEventExpr->WarningLEVEL).ToLocalChecked();
                pRtnNetEventExprJS->Set(Local<v8::Value> (WarningLEVEL), Local<v8::Value>(WarningLEVELValue));

                v8::Local<v8::String> EventTypeID = Nan::New<v8::String> ("EventTypeID").ToLocalChecked();
                v8::Local<v8::Integer> EventTypeIDValue = Nan::New<v8::Integer> (pRtnNetEventExpr->EventTypeID);
                pRtnNetEventExprJS->Set(Local<v8::Value> (EventTypeID), Local<v8::Value>(EventTypeIDValue));

                v8::Local<v8::String> SubEventTypeID = Nan::New<v8::String> ("SubEventTypeID").ToLocalChecked();
                v8::Local<v8::Integer> SubEventTypeIDValue = Nan::New<v8::Integer> (pRtnNetEventExpr->SubEventTypeID);
                pRtnNetEventExprJS->Set(Local<v8::Value> (SubEventTypeID), Local<v8::Value>(SubEventTypeIDValue));

                v8::Local<v8::String> GIVEUPTIME = Nan::New<v8::String> ("GIVEUPTIME").ToLocalChecked();
                v8::Local<v8::Integer> GIVEUPTIMEValue = Nan::New<v8::Integer> (pRtnNetEventExpr->GIVEUPTIME);
                pRtnNetEventExprJS->Set(Local<v8::Value> (GIVEUPTIME), Local<v8::Value>(GIVEUPTIMEValue));

                v8::Local<v8::String> CONTROL = Nan::New<v8::String> ("CONTROL").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventExpr->CONTROL, utf8string);
                v8::Local<v8::String> CONTROLValue = Nan::New<v8::String> (pRtnNetEventExpr->CONTROL).ToLocalChecked();
                pRtnNetEventExprJS->Set(Local<v8::Value> (CONTROL), Local<v8::Value>(CONTROLValue));

                v8::Local<v8::String> EXPR = Nan::New<v8::String> ("EXPR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventExpr->EXPR, utf8string);
                v8::Local<v8::String> EXPRValue = Nan::New<v8::String> (pRtnNetEventExpr->EXPR).ToLocalChecked();
                pRtnNetEventExprJS->Set(Local<v8::Value> (EXPR), Local<v8::Value>(EXPRValue));

                v8::Local<v8::String> BRIEF = Nan::New<v8::String> ("BRIEF").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventExpr->BRIEF, utf8string);
                v8::Local<v8::String> BRIEFValue = Nan::New<v8::String> (pRtnNetEventExpr->BRIEF).ToLocalChecked();
                pRtnNetEventExprJS->Set(Local<v8::Value> (BRIEF), Local<v8::Value>(BRIEFValue));

                v8::Local<v8::String> DISCRIPTION = Nan::New<v8::String> ("DISCRIPTION").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventExpr->DISCRIPTION, utf8string);
                v8::Local<v8::String> DISCRIPTIONValue = Nan::New<v8::String> (pRtnNetEventExpr->DISCRIPTION).ToLocalChecked();
                pRtnNetEventExprJS->Set(Local<v8::Value> (DISCRIPTION), Local<v8::Value>(DISCRIPTIONValue));

                v8::Local<v8::String> MSGGROUP_ID = Nan::New<v8::String> ("MSGGROUP_ID").ToLocalChecked();
                v8::Local<v8::Integer> MSGGROUP_IDValue = Nan::New<v8::Integer> (pRtnNetEventExpr->MSGGROUP_ID);
                pRtnNetEventExprJS->Set(Local<v8::Value> (MSGGROUP_ID), Local<v8::Value>(MSGGROUP_IDValue));

                v8::Local<v8::String> ADMINGROUP_ID = Nan::New<v8::String> ("ADMINGROUP_ID").ToLocalChecked();
                v8::Local<v8::Integer> ADMINGROUP_IDValue = Nan::New<v8::Integer> (pRtnNetEventExpr->ADMINGROUP_ID);
                pRtnNetEventExprJS->Set(Local<v8::Value> (ADMINGROUP_ID), Local<v8::Value>(ADMINGROUP_IDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetEventExpr) { 
                params[0] = Local<v8::Value>(pRtnNetEventExprJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetEventExpr) { 
            delete[] pRtnNetEventExpr;
            pRtnNetEventExpr = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetEventExprTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetEventTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetEventTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetEventTypeTopic_trans_callbackNumb: ", g_RspQryNetEventTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetEventTypeTopic_mutex);

    int dataNumb = g_RspQryNetEventTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetEventTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetEventTypeTopic_trans_dataNumb: ", g_RspQryNetEventTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetEventTypeTopic_queue.empty()) {
        receivedData.push (g_RspQryNetEventTypeTopic_queue.front());
        g_RspQryNetEventTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetEventTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetEventTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetEventTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetEventTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetEventTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetEventTypeTopic").ToLocalChecked());

        CShfeFtdcRspQryNetEventTypeField* pRspQryNetEventType = (CShfeFtdcRspQryNetEventTypeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetEventTypeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetEventType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetEventType->OperationType);
                pRspQryNetEventTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetEventType->ID);
                pRspQryNetEventTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventType->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetEventType->CName).ToLocalChecked();
                pRspQryNetEventTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventType->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetEventType->EName).ToLocalChecked();
                pRspQryNetEventTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetEventType) { 
                params[0] = Local<v8::Value>(pRspQryNetEventTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetEventType) { 
            delete[] pRspQryNetEventType;
            pRspQryNetEventType = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetEventTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetEventTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetEventTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetEventTypeTopic_trans_callbackNumb: ", g_RtnNetEventTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetEventTypeTopic_mutex);

    int dataNumb = g_RtnNetEventTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetEventTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetEventTypeTopic_trans_dataNumb: ", g_RtnNetEventTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetEventTypeTopic_queue.empty()) {
        receivedData.push (g_RtnNetEventTypeTopic_queue.front());
        g_RtnNetEventTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetEventTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetEventTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetEventTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetEventTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetEventTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetEventTypeTopic").ToLocalChecked());

        CShfeFtdcRtnNetEventTypeField* pRtnNetEventType = (CShfeFtdcRtnNetEventTypeField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetEventTypeJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetEventType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetEventType->OperationType);
                pRtnNetEventTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetEventType->ID);
                pRtnNetEventTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventType->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetEventType->CName).ToLocalChecked();
                pRtnNetEventTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventType->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetEventType->EName).ToLocalChecked();
                pRtnNetEventTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetEventType) { 
                params[0] = Local<v8::Value>(pRtnNetEventTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetEventType) { 
            delete[] pRtnNetEventType;
            pRtnNetEventType = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetEventTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetSubEventTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetSubEventTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetSubEventTypeTopic_trans_callbackNumb: ", g_RspQryNetSubEventTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetSubEventTypeTopic_mutex);

    int dataNumb = g_RspQryNetSubEventTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetSubEventTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetSubEventTypeTopic_trans_dataNumb: ", g_RspQryNetSubEventTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetSubEventTypeTopic_queue.empty()) {
        receivedData.push (g_RspQryNetSubEventTypeTopic_queue.front());
        g_RspQryNetSubEventTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetSubEventTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetSubEventTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetSubEventTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetSubEventTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetSubEventTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetSubEventTypeTopic").ToLocalChecked());

        CShfeFtdcRspQryNetSubEventTypeField* pRspQryNetSubEventType = (CShfeFtdcRspQryNetSubEventTypeField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetSubEventTypeJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetSubEventType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetSubEventType->OperationType);
                pRspQryNetSubEventTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetSubEventType->ID);
                pRspQryNetSubEventTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetSubEventType->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetSubEventType->CName).ToLocalChecked();
                pRspQryNetSubEventTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetSubEventType->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetSubEventType->EName).ToLocalChecked();
                pRspQryNetSubEventTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetSubEventType) { 
                params[0] = Local<v8::Value>(pRspQryNetSubEventTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetSubEventType) { 
            delete[] pRspQryNetSubEventType;
            pRspQryNetSubEventType = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetSubEventTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetSubEventTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetSubEventTypeTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetSubEventTypeTopic_trans_callbackNumb: ", g_RtnNetSubEventTypeTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetSubEventTypeTopic_mutex);

    int dataNumb = g_RtnNetSubEventTypeTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetSubEventTypeTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetSubEventTypeTopic_trans_dataNumb: ", g_RtnNetSubEventTypeTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetSubEventTypeTopic_queue.empty()) {
        receivedData.push (g_RtnNetSubEventTypeTopic_queue.front());
        g_RtnNetSubEventTypeTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetSubEventTypeTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetSubEventTypeTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetSubEventTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetSubEventTypeTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetSubEventTypeTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetSubEventTypeTopic").ToLocalChecked());

        CShfeFtdcRtnNetSubEventTypeField* pRtnNetSubEventType = (CShfeFtdcRtnNetSubEventTypeField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetSubEventTypeJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetSubEventType) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetSubEventType->OperationType);
                pRtnNetSubEventTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetSubEventType->ID);
                pRtnNetSubEventTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetSubEventType->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetSubEventType->CName).ToLocalChecked();
                pRtnNetSubEventTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetSubEventType->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetSubEventType->EName).ToLocalChecked();
                pRtnNetSubEventTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetSubEventType) { 
                params[0] = Local<v8::Value>(pRtnNetSubEventTypeJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetSubEventType) { 
            delete[] pRtnNetSubEventType;
            pRtnNetSubEventType = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetSubEventTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetEventLevelTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetEventLevelTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetEventLevelTopic_trans_callbackNumb: ", g_RspQryNetEventLevelTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetEventLevelTopic_mutex);

    int dataNumb = g_RspQryNetEventLevelTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetEventLevelTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetEventLevelTopic_trans_dataNumb: ", g_RspQryNetEventLevelTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetEventLevelTopic_queue.empty()) {
        receivedData.push (g_RspQryNetEventLevelTopic_queue.front());
        g_RspQryNetEventLevelTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetEventLevelTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetEventLevelTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetEventLevelTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetEventLevelTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetEventLevelTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetEventLevelTopic").ToLocalChecked());

        CShfeFtdcRspQryNetEventLevelField* pRspQryNetEventLevel = (CShfeFtdcRspQryNetEventLevelField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetEventLevelJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetEventLevel) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetEventLevel->OperationType);
                pRspQryNetEventLevelJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetEventLevel->ID);
                pRspQryNetEventLevelJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventLevel->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRspQryNetEventLevel->CName).ToLocalChecked();
                pRspQryNetEventLevelJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventLevel->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRspQryNetEventLevel->EName).ToLocalChecked();
                pRspQryNetEventLevelJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> DISCRIPTION = Nan::New<v8::String> ("DISCRIPTION").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetEventLevel->DISCRIPTION, utf8string);
                v8::Local<v8::String> DISCRIPTIONValue = Nan::New<v8::String> (pRspQryNetEventLevel->DISCRIPTION).ToLocalChecked();
                pRspQryNetEventLevelJS->Set(Local<v8::Value> (DISCRIPTION), Local<v8::Value>(DISCRIPTIONValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetEventLevel) { 
                params[0] = Local<v8::Value>(pRspQryNetEventLevelJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetEventLevel) { 
            delete[] pRspQryNetEventLevel;
            pRspQryNetEventLevel = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetEventLevelTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetEventLevelTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetEventLevelTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetEventLevelTopic_trans_callbackNumb: ", g_RtnNetEventLevelTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetEventLevelTopic_mutex);

    int dataNumb = g_RtnNetEventLevelTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetEventLevelTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetEventLevelTopic_trans_dataNumb: ", g_RtnNetEventLevelTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetEventLevelTopic_queue.empty()) {
        receivedData.push (g_RtnNetEventLevelTopic_queue.front());
        g_RtnNetEventLevelTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetEventLevelTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetEventLevelTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetEventLevelTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetEventLevelTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetEventLevelTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetEventLevelTopic").ToLocalChecked());

        CShfeFtdcRtnNetEventLevelField* pRtnNetEventLevel = (CShfeFtdcRtnNetEventLevelField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetEventLevelJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetEventLevel) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetEventLevel->OperationType);
                pRtnNetEventLevelJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetEventLevel->ID);
                pRtnNetEventLevelJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventLevel->CName, utf8string);
                v8::Local<v8::String> CNameValue = Nan::New<v8::String> (pRtnNetEventLevel->CName).ToLocalChecked();
                pRtnNetEventLevelJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventLevel->EName, utf8string);
                v8::Local<v8::String> ENameValue = Nan::New<v8::String> (pRtnNetEventLevel->EName).ToLocalChecked();
                pRtnNetEventLevelJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                v8::Local<v8::String> DISCRIPTION = Nan::New<v8::String> ("DISCRIPTION").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetEventLevel->DISCRIPTION, utf8string);
                v8::Local<v8::String> DISCRIPTIONValue = Nan::New<v8::String> (pRtnNetEventLevel->DISCRIPTION).ToLocalChecked();
                pRtnNetEventLevelJS->Set(Local<v8::Value> (DISCRIPTION), Local<v8::Value>(DISCRIPTIONValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetEventLevel) { 
                params[0] = Local<v8::Value>(pRtnNetEventLevelJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetEventLevel) { 
            delete[] pRtnNetEventLevel;
            pRtnNetEventLevel = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetEventLevelTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTaskStatusResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorTaskStatusResultTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorTaskStatusResultTopic_trans_callbackNumb: ", g_RspQryNetMonitorTaskStatusResultTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTaskStatusResultTopic_mutex);

    int dataNumb = g_RspQryNetMonitorTaskStatusResultTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorTaskStatusResultTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorTaskStatusResultTopic_trans_dataNumb: ", g_RspQryNetMonitorTaskStatusResultTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorTaskStatusResultTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorTaskStatusResultTopic_queue.front());
        g_RspQryNetMonitorTaskStatusResultTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorTaskStatusResultTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorTaskStatusResultTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTaskStatusResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorTaskStatusResultTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTaskStatusResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorTaskStatusResultTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorTaskStatusResultField* pRspQryNetMonitorTaskStatusResult = (CShfeFtdcRspQryNetMonitorTaskStatusResultField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorTaskStatusResultJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorTaskStatusResult) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskStatusResult->OperationType);
                pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskStatusResult->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryNetMonitorTaskStatusResult->ObjectID).ToLocalChecked();
                pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> Task_ID = Nan::New<v8::String> ("Task_ID").ToLocalChecked();
                v8::Local<v8::Integer> Task_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskStatusResult->Task_ID);
                pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (Task_ID), Local<v8::Value>(Task_IDValue));

                v8::Local<v8::String> OperateTime = Nan::New<v8::String> ("OperateTime").ToLocalChecked();
                v8::Local<v8::Integer> OperateTimeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskStatusResult->OperateTime);
                pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (OperateTime), Local<v8::Value>(OperateTimeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskStatusResult->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryNetMonitorTaskStatusResult->MonDate).ToLocalChecked();
                pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskStatusResult->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryNetMonitorTaskStatusResult->MonTime).ToLocalChecked();
                pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskStatusResult->Flag);
                pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorTaskStatusResult) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorTaskStatusResultJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorTaskStatusResult) { 
            delete[] pRspQryNetMonitorTaskStatusResult;
            pRspQryNetMonitorTaskStatusResult = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorTaskStatusResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTaskStatusResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorTaskStatusResultTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorTaskStatusResultTopic_trans_callbackNumb: ", g_RtnNetMonitorTaskStatusResultTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorTaskStatusResultTopic_mutex);

    int dataNumb = g_RtnNetMonitorTaskStatusResultTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorTaskStatusResultTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorTaskStatusResultTopic_trans_dataNumb: ", g_RtnNetMonitorTaskStatusResultTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorTaskStatusResultTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorTaskStatusResultTopic_queue.front());
        g_RtnNetMonitorTaskStatusResultTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorTaskStatusResultTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorTaskStatusResultTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTaskStatusResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorTaskStatusResultTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTaskStatusResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorTaskStatusResultTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorTaskStatusResultField* pRtnNetMonitorTaskStatusResult = (CShfeFtdcRtnNetMonitorTaskStatusResultField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorTaskStatusResultJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorTaskStatusResult) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskStatusResult->OperationType);
                pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskStatusResult->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnNetMonitorTaskStatusResult->ObjectID).ToLocalChecked();
                pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> Task_ID = Nan::New<v8::String> ("Task_ID").ToLocalChecked();
                v8::Local<v8::Integer> Task_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskStatusResult->Task_ID);
                pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (Task_ID), Local<v8::Value>(Task_IDValue));

                v8::Local<v8::String> OperateTime = Nan::New<v8::String> ("OperateTime").ToLocalChecked();
                v8::Local<v8::Integer> OperateTimeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskStatusResult->OperateTime);
                pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (OperateTime), Local<v8::Value>(OperateTimeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskStatusResult->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnNetMonitorTaskStatusResult->MonDate).ToLocalChecked();
                pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskStatusResult->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnNetMonitorTaskStatusResult->MonTime).ToLocalChecked();
                pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskStatusResult->Flag);
                pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorTaskStatusResult) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorTaskStatusResultJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorTaskStatusResult) { 
            delete[] pRtnNetMonitorTaskStatusResult;
            pRtnNetMonitorTaskStatusResult = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorTaskStatusResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetCfgFileTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetCfgFileTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetCfgFileTopic_trans_callbackNumb: ", g_RspQryNetCfgFileTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetCfgFileTopic_mutex);

    int dataNumb = g_RspQryNetCfgFileTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetCfgFileTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetCfgFileTopic_trans_dataNumb: ", g_RspQryNetCfgFileTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetCfgFileTopic_queue.empty()) {
        receivedData.push (g_RspQryNetCfgFileTopic_queue.front());
        g_RspQryNetCfgFileTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetCfgFileTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetCfgFileTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetCfgFileTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetCfgFileTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetCfgFileTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetCfgFileTopic").ToLocalChecked());

        CShfeFtdcRspQryNetCfgFileField* pRspQryNetCfgFile = (CShfeFtdcRspQryNetCfgFileField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetCfgFileJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetCfgFile) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetCfgFile->OperationType);
                pRspQryNetCfgFileJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetCfgFile->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryNetCfgFile->ObjectID).ToLocalChecked();
                pRspQryNetCfgFileJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetCfgFile->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryNetCfgFile->MonDate).ToLocalChecked();
                pRspQryNetCfgFileJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetCfgFile->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryNetCfgFile->MonTime).ToLocalChecked();
                pRspQryNetCfgFileJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> CfgFileName = Nan::New<v8::String> ("CfgFileName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetCfgFile->CfgFileName, utf8string);
                v8::Local<v8::String> CfgFileNameValue = Nan::New<v8::String> (pRspQryNetCfgFile->CfgFileName).ToLocalChecked();
                pRspQryNetCfgFileJS->Set(Local<v8::Value> (CfgFileName), Local<v8::Value>(CfgFileNameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetCfgFile) { 
                params[0] = Local<v8::Value>(pRspQryNetCfgFileJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetCfgFile) { 
            delete[] pRspQryNetCfgFile;
            pRspQryNetCfgFile = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetCfgFileTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetCfgFileTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetCfgFileTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetCfgFileTopic_trans_callbackNumb: ", g_RtnNetCfgFileTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetCfgFileTopic_mutex);

    int dataNumb = g_RtnNetCfgFileTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetCfgFileTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetCfgFileTopic_trans_dataNumb: ", g_RtnNetCfgFileTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetCfgFileTopic_queue.empty()) {
        receivedData.push (g_RtnNetCfgFileTopic_queue.front());
        g_RtnNetCfgFileTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetCfgFileTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetCfgFileTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetCfgFileTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetCfgFileTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetCfgFileTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetCfgFileTopic").ToLocalChecked());

        CShfeFtdcRtnNetCfgFileField* pRtnNetCfgFile = (CShfeFtdcRtnNetCfgFileField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetCfgFileJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetCfgFile) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetCfgFile->OperationType);
                pRtnNetCfgFileJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetCfgFile->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnNetCfgFile->ObjectID).ToLocalChecked();
                pRtnNetCfgFileJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetCfgFile->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnNetCfgFile->MonDate).ToLocalChecked();
                pRtnNetCfgFileJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetCfgFile->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnNetCfgFile->MonTime).ToLocalChecked();
                pRtnNetCfgFileJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> CfgFileName = Nan::New<v8::String> ("CfgFileName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetCfgFile->CfgFileName, utf8string);
                v8::Local<v8::String> CfgFileNameValue = Nan::New<v8::String> (pRtnNetCfgFile->CfgFileName).ToLocalChecked();
                pRtnNetCfgFileJS->Set(Local<v8::Value> (CfgFileName), Local<v8::Value>(CfgFileNameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetCfgFile) { 
                params[0] = Local<v8::Value>(pRtnNetCfgFileJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetCfgFile) { 
            delete[] pRtnNetCfgFile;
            pRtnNetCfgFile = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetCfgFileTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorDeviceTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorDeviceTaskTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorDeviceTaskTopic_trans_callbackNumb: ", g_RspQryNetMonitorDeviceTaskTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorDeviceTaskTopic_mutex);

    int dataNumb = g_RspQryNetMonitorDeviceTaskTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorDeviceTaskTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorDeviceTaskTopic_trans_dataNumb: ", g_RspQryNetMonitorDeviceTaskTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorDeviceTaskTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorDeviceTaskTopic_queue.front());
        g_RspQryNetMonitorDeviceTaskTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorDeviceTaskTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorDeviceTaskTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorDeviceTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorDeviceTaskTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorDeviceTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorDeviceTaskTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorDeviceTaskField* pRspQryNetMonitorDeviceTask = (CShfeFtdcRspQryNetMonitorDeviceTaskField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorDeviceTaskJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorDeviceTask) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceTask->OperationType);
                pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceTask->ID);
                pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRspQryNetMonitorDeviceTask->ObjectID).ToLocalChecked();
                pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRspQryNetMonitorDeviceTask->IPAddress).ToLocalChecked();
                pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceTask->Manufactory_ID);
                pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                v8::Local<v8::String> InstructChain = Nan::New<v8::String> ("InstructChain").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->InstructChain, utf8string);
                v8::Local<v8::String> InstructChainValue = Nan::New<v8::String> (pRspQryNetMonitorDeviceTask->InstructChain).ToLocalChecked();
                pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructChain), Local<v8::Value>(InstructChainValue));

                v8::Local<v8::String> InstructAlias = Nan::New<v8::String> ("InstructAlias").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->InstructAlias, utf8string);
                v8::Local<v8::String> InstructAliasValue = Nan::New<v8::String> (pRspQryNetMonitorDeviceTask->InstructAlias).ToLocalChecked();
                pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructAlias), Local<v8::Value>(InstructAliasValue));

                v8::Local<v8::String> InstructArgs = Nan::New<v8::String> ("InstructArgs").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->InstructArgs, utf8string);
                v8::Local<v8::String> InstructArgsValue = Nan::New<v8::String> (pRspQryNetMonitorDeviceTask->InstructArgs).ToLocalChecked();
                pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructArgs), Local<v8::Value>(InstructArgsValue));

                v8::Local<v8::String> DefParamChain = Nan::New<v8::String> ("DefParamChain").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->DefParamChain, utf8string);
                v8::Local<v8::String> DefParamChainValue = Nan::New<v8::String> (pRspQryNetMonitorDeviceTask->DefParamChain).ToLocalChecked();
                pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (DefParamChain), Local<v8::Value>(DefParamChainValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceTask->Flag);
                pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorDeviceTask) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorDeviceTaskJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorDeviceTask) { 
            delete[] pRspQryNetMonitorDeviceTask;
            pRspQryNetMonitorDeviceTask = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorDeviceTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorDeviceTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorDeviceTaskTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorDeviceTaskTopic_trans_callbackNumb: ", g_RtnNetMonitorDeviceTaskTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorDeviceTaskTopic_mutex);

    int dataNumb = g_RtnNetMonitorDeviceTaskTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorDeviceTaskTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorDeviceTaskTopic_trans_dataNumb: ", g_RtnNetMonitorDeviceTaskTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorDeviceTaskTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorDeviceTaskTopic_queue.front());
        g_RtnNetMonitorDeviceTaskTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorDeviceTaskTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorDeviceTaskTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorDeviceTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorDeviceTaskTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorDeviceTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorDeviceTaskTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorDeviceTaskField* pRtnNetMonitorDeviceTask = (CShfeFtdcRtnNetMonitorDeviceTaskField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorDeviceTaskJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorDeviceTask) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceTask->OperationType);
                pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceTask->ID);
                pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorDeviceTask->ObjectID, utf8string);
                v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (pRtnNetMonitorDeviceTask->ObjectID).ToLocalChecked();
                pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorDeviceTask->IPAddress, utf8string);
                v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (pRtnNetMonitorDeviceTask->IPAddress).ToLocalChecked();
                pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceTask->Manufactory_ID);
                pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                v8::Local<v8::String> InstructChain = Nan::New<v8::String> ("InstructChain").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorDeviceTask->InstructChain, utf8string);
                v8::Local<v8::String> InstructChainValue = Nan::New<v8::String> (pRtnNetMonitorDeviceTask->InstructChain).ToLocalChecked();
                pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructChain), Local<v8::Value>(InstructChainValue));

                v8::Local<v8::String> InstructAlias = Nan::New<v8::String> ("InstructAlias").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorDeviceTask->InstructAlias, utf8string);
                v8::Local<v8::String> InstructAliasValue = Nan::New<v8::String> (pRtnNetMonitorDeviceTask->InstructAlias).ToLocalChecked();
                pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructAlias), Local<v8::Value>(InstructAliasValue));

                v8::Local<v8::String> InstructArgs = Nan::New<v8::String> ("InstructArgs").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorDeviceTask->InstructArgs, utf8string);
                v8::Local<v8::String> InstructArgsValue = Nan::New<v8::String> (pRtnNetMonitorDeviceTask->InstructArgs).ToLocalChecked();
                pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructArgs), Local<v8::Value>(InstructArgsValue));

                v8::Local<v8::String> DefParamChain = Nan::New<v8::String> ("DefParamChain").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorDeviceTask->DefParamChain, utf8string);
                v8::Local<v8::String> DefParamChainValue = Nan::New<v8::String> (pRtnNetMonitorDeviceTask->DefParamChain).ToLocalChecked();
                pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (DefParamChain), Local<v8::Value>(DefParamChainValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceTask->Flag);
                pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorDeviceTask) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorDeviceTaskJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorDeviceTask) { 
            delete[] pRtnNetMonitorDeviceTask;
            pRtnNetMonitorDeviceTask = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorDeviceTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTaskInstAttrsTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMonitorTaskInstAttrsTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMonitorTaskInstAttrsTopic_trans_callbackNumb: ", g_RspQryNetMonitorTaskInstAttrsTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTaskInstAttrsTopic_mutex);

    int dataNumb = g_RspQryNetMonitorTaskInstAttrsTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMonitorTaskInstAttrsTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMonitorTaskInstAttrsTopic_trans_dataNumb: ", g_RspQryNetMonitorTaskInstAttrsTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMonitorTaskInstAttrsTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMonitorTaskInstAttrsTopic_queue.front());
        g_RspQryNetMonitorTaskInstAttrsTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMonitorTaskInstAttrsTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMonitorTaskInstAttrsTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTaskInstAttrsTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMonitorTaskInstAttrsTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMonitorTaskInstAttrsTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMonitorTaskInstAttrsTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMonitorTaskInstAttrsField* pRspQryNetMonitorTaskInstAttrs = (CShfeFtdcRspQryNetMonitorTaskInstAttrsField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMonitorTaskInstAttrsJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMonitorTaskInstAttrs) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInstAttrs->OperationType);
                pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInstAttrs->ID);
                pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInstAttrs->Manufactory_ID);
                pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                v8::Local<v8::String> InstructAlias = Nan::New<v8::String> ("InstructAlias").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInstAttrs->InstructAlias, utf8string);
                v8::Local<v8::String> InstructAliasValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInstAttrs->InstructAlias).ToLocalChecked();
                pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (InstructAlias), Local<v8::Value>(InstructAliasValue));

                v8::Local<v8::String> DEVICETYPE = Nan::New<v8::String> ("DEVICETYPE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInstAttrs->DEVICETYPE, utf8string);
                v8::Local<v8::String> DEVICETYPEValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInstAttrs->DEVICETYPE).ToLocalChecked();
                pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DEVICETYPE), Local<v8::Value>(DEVICETYPEValue));

                v8::Local<v8::String> AttrsChain = Nan::New<v8::String> ("AttrsChain").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInstAttrs->AttrsChain, utf8string);
                v8::Local<v8::String> AttrsChainValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInstAttrs->AttrsChain).ToLocalChecked();
                pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (AttrsChain), Local<v8::Value>(AttrsChainValue));

                v8::Local<v8::String> DefRegularChain = Nan::New<v8::String> ("DefRegularChain").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInstAttrs->DefRegularChain, utf8string);
                v8::Local<v8::String> DefRegularChainValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInstAttrs->DefRegularChain).ToLocalChecked();
                pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DefRegularChain), Local<v8::Value>(DefRegularChainValue));

                v8::Local<v8::String> DefParamChain = Nan::New<v8::String> ("DefParamChain").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMonitorTaskInstAttrs->DefParamChain, utf8string);
                v8::Local<v8::String> DefParamChainValue = Nan::New<v8::String> (pRspQryNetMonitorTaskInstAttrs->DefParamChain).ToLocalChecked();
                pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DefParamChain), Local<v8::Value>(DefParamChainValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMonitorTaskInstAttrs) { 
                params[0] = Local<v8::Value>(pRspQryNetMonitorTaskInstAttrsJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMonitorTaskInstAttrs) { 
            delete[] pRspQryNetMonitorTaskInstAttrs;
            pRspQryNetMonitorTaskInstAttrs = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMonitorTaskInstAttrsTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTaskInstAttrsTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMonitorTaskInstAttrsTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMonitorTaskInstAttrsTopic_trans_callbackNumb: ", g_RtnNetMonitorTaskInstAttrsTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMonitorTaskInstAttrsTopic_mutex);

    int dataNumb = g_RtnNetMonitorTaskInstAttrsTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMonitorTaskInstAttrsTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMonitorTaskInstAttrsTopic_trans_dataNumb: ", g_RtnNetMonitorTaskInstAttrsTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMonitorTaskInstAttrsTopic_queue.empty()) {
        receivedData.push (g_RtnNetMonitorTaskInstAttrsTopic_queue.front());
        g_RtnNetMonitorTaskInstAttrsTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMonitorTaskInstAttrsTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMonitorTaskInstAttrsTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTaskInstAttrsTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMonitorTaskInstAttrsTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMonitorTaskInstAttrsTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMonitorTaskInstAttrsTopic").ToLocalChecked());

        CShfeFtdcRtnNetMonitorTaskInstAttrsField* pRtnNetMonitorTaskInstAttrs = (CShfeFtdcRtnNetMonitorTaskInstAttrsField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMonitorTaskInstAttrsJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMonitorTaskInstAttrs) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInstAttrs->OperationType);
                pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInstAttrs->ID);
                pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInstAttrs->Manufactory_ID);
                pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                v8::Local<v8::String> InstructAlias = Nan::New<v8::String> ("InstructAlias").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInstAttrs->InstructAlias, utf8string);
                v8::Local<v8::String> InstructAliasValue = Nan::New<v8::String> (pRtnNetMonitorTaskInstAttrs->InstructAlias).ToLocalChecked();
                pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (InstructAlias), Local<v8::Value>(InstructAliasValue));

                v8::Local<v8::String> DEVICETYPE = Nan::New<v8::String> ("DEVICETYPE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInstAttrs->DEVICETYPE, utf8string);
                v8::Local<v8::String> DEVICETYPEValue = Nan::New<v8::String> (pRtnNetMonitorTaskInstAttrs->DEVICETYPE).ToLocalChecked();
                pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DEVICETYPE), Local<v8::Value>(DEVICETYPEValue));

                v8::Local<v8::String> AttrsChain = Nan::New<v8::String> ("AttrsChain").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInstAttrs->AttrsChain, utf8string);
                v8::Local<v8::String> AttrsChainValue = Nan::New<v8::String> (pRtnNetMonitorTaskInstAttrs->AttrsChain).ToLocalChecked();
                pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (AttrsChain), Local<v8::Value>(AttrsChainValue));

                v8::Local<v8::String> DefRegularChain = Nan::New<v8::String> ("DefRegularChain").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInstAttrs->DefRegularChain, utf8string);
                v8::Local<v8::String> DefRegularChainValue = Nan::New<v8::String> (pRtnNetMonitorTaskInstAttrs->DefRegularChain).ToLocalChecked();
                pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DefRegularChain), Local<v8::Value>(DefRegularChainValue));

                v8::Local<v8::String> DefParamChain = Nan::New<v8::String> ("DefParamChain").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMonitorTaskInstAttrs->DefParamChain, utf8string);
                v8::Local<v8::String> DefParamChainValue = Nan::New<v8::String> (pRtnNetMonitorTaskInstAttrs->DefParamChain).ToLocalChecked();
                pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DefParamChain), Local<v8::Value>(DefParamChainValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMonitorTaskInstAttrs) { 
                params[0] = Local<v8::Value>(pRtnNetMonitorTaskInstAttrsJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMonitorTaskInstAttrs) { 
            delete[] pRtnNetMonitorTaskInstAttrs;
            pRtnNetMonitorTaskInstAttrs = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMonitorTaskInstAttrsTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFileGeneralOperTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryFileGeneralOperTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryFileGeneralOperTopic_trans_callbackNumb: ", g_RspQryFileGeneralOperTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryFileGeneralOperTopic_mutex);

    int dataNumb = g_RspQryFileGeneralOperTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryFileGeneralOperTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryFileGeneralOperTopic_trans_dataNumb: ", g_RspQryFileGeneralOperTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryFileGeneralOperTopic_queue.empty()) {
        receivedData.push (g_RspQryFileGeneralOperTopic_queue.front());
        g_RspQryFileGeneralOperTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryFileGeneralOperTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryFileGeneralOperTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFileGeneralOperTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryFileGeneralOperTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryFileGeneralOperTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryFileGeneralOperTopic").ToLocalChecked());

        CShfeFtdcRspQryFileGeneralOperField* pRspQryFileGeneralOper = (CShfeFtdcRspQryFileGeneralOperField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryFileGeneralOperJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryFileGeneralOper) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->OperationType);
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> FileName = Nan::New<v8::String> ("FileName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileGeneralOper->FileName, utf8string);
                v8::Local<v8::String> FileNameValue = Nan::New<v8::String> (pRspQryFileGeneralOper->FileName).ToLocalChecked();
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (FileName), Local<v8::Value>(FileNameValue));

                v8::Local<v8::String> Version = Nan::New<v8::String> ("Version").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileGeneralOper->Version, utf8string);
                v8::Local<v8::String> VersionValue = Nan::New<v8::String> (pRspQryFileGeneralOper->Version).ToLocalChecked();
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (Version), Local<v8::Value>(VersionValue));

                v8::Local<v8::String> SubVersion = Nan::New<v8::String> ("SubVersion").ToLocalChecked();
                v8::Local<v8::Integer> SubVersionValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->SubVersion);
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (SubVersion), Local<v8::Value>(SubVersionValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileGeneralOper->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryFileGeneralOper->MonDate).ToLocalChecked();
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileGeneralOper->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryFileGeneralOper->MonTime).ToLocalChecked();
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileGeneralOper->UserName, utf8string);
                v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (pRspQryFileGeneralOper->UserName).ToLocalChecked();
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                v8::Local<v8::String> OperType = Nan::New<v8::String> ("OperType").ToLocalChecked();
                v8::Local<v8::Integer> OperTypeValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->OperType);
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (OperType), Local<v8::Value>(OperTypeValue));

                v8::Local<v8::String> OperResult = Nan::New<v8::String> ("OperResult").ToLocalChecked();
                v8::Local<v8::Integer> OperResultValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->OperResult);
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (OperResult), Local<v8::Value>(OperResultValue));

                v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileGeneralOper->Comments, utf8string);
                v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (pRspQryFileGeneralOper->Comments).ToLocalChecked();
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                v8::Local<v8::String> Offset = Nan::New<v8::String> ("Offset").ToLocalChecked();
                v8::Local<v8::Integer> OffsetValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->Offset);
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (Offset), Local<v8::Value>(OffsetValue));

                v8::Local<v8::String> Length = Nan::New<v8::String> ("Length").ToLocalChecked();
                v8::Local<v8::Integer> LengthValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->Length);
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (Length), Local<v8::Value>(LengthValue));

                v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                Gb2312ToUtf8(pRspQryFileGeneralOper->FileContent, utf8string);
                v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (pRspQryFileGeneralOper->FileContent).ToLocalChecked();
                pRspQryFileGeneralOperJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryFileGeneralOper) { 
                params[0] = Local<v8::Value>(pRspQryFileGeneralOperJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryFileGeneralOper) { 
            delete[] pRspQryFileGeneralOper;
            pRspQryFileGeneralOper = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryFileGeneralOperTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFileGeneralOperTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnFileGeneralOperTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnFileGeneralOperTopic_trans_callbackNumb: ", g_RtnFileGeneralOperTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnFileGeneralOperTopic_mutex);

    int dataNumb = g_RtnFileGeneralOperTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnFileGeneralOperTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnFileGeneralOperTopic_trans_dataNumb: ", g_RtnFileGeneralOperTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnFileGeneralOperTopic_queue.empty()) {
        receivedData.push (g_RtnFileGeneralOperTopic_queue.front());
        g_RtnFileGeneralOperTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnFileGeneralOperTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnFileGeneralOperTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFileGeneralOperTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnFileGeneralOperTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnFileGeneralOperTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnFileGeneralOperTopic").ToLocalChecked());

        CShfeFtdcRtnFileGeneralOperField* pRtnFileGeneralOper = (CShfeFtdcRtnFileGeneralOperField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnFileGeneralOperJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnFileGeneralOper) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->OperationType);
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> FileName = Nan::New<v8::String> ("FileName").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileGeneralOper->FileName, utf8string);
                v8::Local<v8::String> FileNameValue = Nan::New<v8::String> (pRtnFileGeneralOper->FileName).ToLocalChecked();
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (FileName), Local<v8::Value>(FileNameValue));

                v8::Local<v8::String> Version = Nan::New<v8::String> ("Version").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileGeneralOper->Version, utf8string);
                v8::Local<v8::String> VersionValue = Nan::New<v8::String> (pRtnFileGeneralOper->Version).ToLocalChecked();
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (Version), Local<v8::Value>(VersionValue));

                v8::Local<v8::String> SubVersion = Nan::New<v8::String> ("SubVersion").ToLocalChecked();
                v8::Local<v8::Integer> SubVersionValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->SubVersion);
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (SubVersion), Local<v8::Value>(SubVersionValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileGeneralOper->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnFileGeneralOper->MonDate).ToLocalChecked();
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileGeneralOper->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnFileGeneralOper->MonTime).ToLocalChecked();
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileGeneralOper->UserName, utf8string);
                v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (pRtnFileGeneralOper->UserName).ToLocalChecked();
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                v8::Local<v8::String> OperType = Nan::New<v8::String> ("OperType").ToLocalChecked();
                v8::Local<v8::Integer> OperTypeValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->OperType);
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (OperType), Local<v8::Value>(OperTypeValue));

                v8::Local<v8::String> OperResult = Nan::New<v8::String> ("OperResult").ToLocalChecked();
                v8::Local<v8::Integer> OperResultValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->OperResult);
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (OperResult), Local<v8::Value>(OperResultValue));

                v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileGeneralOper->Comments, utf8string);
                v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (pRtnFileGeneralOper->Comments).ToLocalChecked();
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                v8::Local<v8::String> Offset = Nan::New<v8::String> ("Offset").ToLocalChecked();
                v8::Local<v8::Integer> OffsetValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->Offset);
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (Offset), Local<v8::Value>(OffsetValue));

                v8::Local<v8::String> Length = Nan::New<v8::String> ("Length").ToLocalChecked();
                v8::Local<v8::Integer> LengthValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->Length);
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (Length), Local<v8::Value>(LengthValue));

                v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                Gb2312ToUtf8(pRtnFileGeneralOper->FileContent, utf8string);
                v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (pRtnFileGeneralOper->FileContent).ToLocalChecked();
                pRtnFileGeneralOperJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnFileGeneralOper) { 
                params[0] = Local<v8::Value>(pRtnFileGeneralOperJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnFileGeneralOper) { 
            delete[] pRtnFileGeneralOper;
            pRtnFileGeneralOper = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnFileGeneralOperTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetBaseLineTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetBaseLineTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetBaseLineTopic_trans_callbackNumb: ", g_RspQryNetBaseLineTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetBaseLineTopic_mutex);

    int dataNumb = g_RspQryNetBaseLineTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetBaseLineTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetBaseLineTopic_trans_dataNumb: ", g_RspQryNetBaseLineTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetBaseLineTopic_queue.empty()) {
        receivedData.push (g_RspQryNetBaseLineTopic_queue.front());
        g_RspQryNetBaseLineTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetBaseLineTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetBaseLineTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetBaseLineTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetBaseLineTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetBaseLineTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetBaseLineTopic").ToLocalChecked());

        CShfeFtdcRspQryNetBaseLineField* pRspQryNetBaseLine = (CShfeFtdcRspQryNetBaseLineField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetBaseLineJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetBaseLine) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetBaseLine->OperationType);
                pRspQryNetBaseLineJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetBaseLine->ID);
                pRspQryNetBaseLineJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRspQryNetBaseLine->MANUFACTORY_ID);
                pRspQryNetBaseLineJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLine->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRspQryNetBaseLine->Name).ToLocalChecked();
                pRspQryNetBaseLineJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> SerialUsed = Nan::New<v8::String> ("SerialUsed").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLine->SerialUsed, utf8string);
                v8::Local<v8::String> SerialUsedValue = Nan::New<v8::String> (pRspQryNetBaseLine->SerialUsed).ToLocalChecked();
                pRspQryNetBaseLineJS->Set(Local<v8::Value> (SerialUsed), Local<v8::Value>(SerialUsedValue));

                v8::Local<v8::String> data = Nan::New<v8::String> ("data").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLine->data, utf8string);
                v8::Local<v8::String> dataValue = Nan::New<v8::String> (pRspQryNetBaseLine->data).ToLocalChecked();
                pRspQryNetBaseLineJS->Set(Local<v8::Value> (data), Local<v8::Value>(dataValue));

                v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLine->memo, utf8string);
                v8::Local<v8::String> memoValue = Nan::New<v8::String> (pRspQryNetBaseLine->memo).ToLocalChecked();
                pRspQryNetBaseLineJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRspQryNetBaseLine->Flag);
                pRspQryNetBaseLineJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetBaseLine) { 
                params[0] = Local<v8::Value>(pRspQryNetBaseLineJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetBaseLine) { 
            delete[] pRspQryNetBaseLine;
            pRspQryNetBaseLine = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetBaseLineTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetBaseLineTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetBaseLineTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetBaseLineTopic_trans_callbackNumb: ", g_RtnNetBaseLineTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetBaseLineTopic_mutex);

    int dataNumb = g_RtnNetBaseLineTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetBaseLineTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetBaseLineTopic_trans_dataNumb: ", g_RtnNetBaseLineTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetBaseLineTopic_queue.empty()) {
        receivedData.push (g_RtnNetBaseLineTopic_queue.front());
        g_RtnNetBaseLineTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetBaseLineTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetBaseLineTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetBaseLineTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetBaseLineTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetBaseLineTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetBaseLineTopic").ToLocalChecked());

        CShfeFtdcRtnNetBaseLineField* pRtnNetBaseLine = (CShfeFtdcRtnNetBaseLineField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetBaseLineJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetBaseLine) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetBaseLine->OperationType);
                pRtnNetBaseLineJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetBaseLine->ID);
                pRtnNetBaseLineJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRtnNetBaseLine->MANUFACTORY_ID);
                pRtnNetBaseLineJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLine->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRtnNetBaseLine->Name).ToLocalChecked();
                pRtnNetBaseLineJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> SerialUsed = Nan::New<v8::String> ("SerialUsed").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLine->SerialUsed, utf8string);
                v8::Local<v8::String> SerialUsedValue = Nan::New<v8::String> (pRtnNetBaseLine->SerialUsed).ToLocalChecked();
                pRtnNetBaseLineJS->Set(Local<v8::Value> (SerialUsed), Local<v8::Value>(SerialUsedValue));

                v8::Local<v8::String> data = Nan::New<v8::String> ("data").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLine->data, utf8string);
                v8::Local<v8::String> dataValue = Nan::New<v8::String> (pRtnNetBaseLine->data).ToLocalChecked();
                pRtnNetBaseLineJS->Set(Local<v8::Value> (data), Local<v8::Value>(dataValue));

                v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLine->memo, utf8string);
                v8::Local<v8::String> memoValue = Nan::New<v8::String> (pRtnNetBaseLine->memo).ToLocalChecked();
                pRtnNetBaseLineJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRtnNetBaseLine->Flag);
                pRtnNetBaseLineJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetBaseLine) { 
                params[0] = Local<v8::Value>(pRtnNetBaseLineJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetBaseLine) { 
            delete[] pRtnNetBaseLine;
            pRtnNetBaseLine = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetBaseLineTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetBaseLineTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetBaseLineTaskTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetBaseLineTaskTopic_trans_callbackNumb: ", g_RspQryNetBaseLineTaskTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetBaseLineTaskTopic_mutex);

    int dataNumb = g_RspQryNetBaseLineTaskTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetBaseLineTaskTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetBaseLineTaskTopic_trans_dataNumb: ", g_RspQryNetBaseLineTaskTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetBaseLineTaskTopic_queue.empty()) {
        receivedData.push (g_RspQryNetBaseLineTaskTopic_queue.front());
        g_RspQryNetBaseLineTaskTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetBaseLineTaskTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetBaseLineTaskTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetBaseLineTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetBaseLineTaskTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetBaseLineTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetBaseLineTaskTopic").ToLocalChecked());

        CShfeFtdcRspQryNetBaseLineTaskField* pRspQryNetBaseLineTask = (CShfeFtdcRspQryNetBaseLineTaskField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetBaseLineTaskJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetBaseLineTask) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetBaseLineTask->OperationType);
                pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetBaseLineTask->ID);
                pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineTask->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRspQryNetBaseLineTask->Name).ToLocalChecked();
                pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> BaseLineIDList = Nan::New<v8::String> ("BaseLineIDList").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineTask->BaseLineIDList, utf8string);
                v8::Local<v8::String> BaseLineIDListValue = Nan::New<v8::String> (pRspQryNetBaseLineTask->BaseLineIDList).ToLocalChecked();
                pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (BaseLineIDList), Local<v8::Value>(BaseLineIDListValue));

                v8::Local<v8::String> DeviceIDList = Nan::New<v8::String> ("DeviceIDList").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineTask->DeviceIDList, utf8string);
                v8::Local<v8::String> DeviceIDListValue = Nan::New<v8::String> (pRspQryNetBaseLineTask->DeviceIDList).ToLocalChecked();
                pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (DeviceIDList), Local<v8::Value>(DeviceIDListValue));

                v8::Local<v8::String> GenDate = Nan::New<v8::String> ("GenDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineTask->GenDate, utf8string);
                v8::Local<v8::String> GenDateValue = Nan::New<v8::String> (pRspQryNetBaseLineTask->GenDate).ToLocalChecked();
                pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (GenDate), Local<v8::Value>(GenDateValue));

                v8::Local<v8::String> GenTime = Nan::New<v8::String> ("GenTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineTask->GenTime, utf8string);
                v8::Local<v8::String> GenTimeValue = Nan::New<v8::String> (pRspQryNetBaseLineTask->GenTime).ToLocalChecked();
                pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (GenTime), Local<v8::Value>(GenTimeValue));

                v8::Local<v8::String> GenUser = Nan::New<v8::String> ("GenUser").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineTask->GenUser, utf8string);
                v8::Local<v8::String> GenUserValue = Nan::New<v8::String> (pRspQryNetBaseLineTask->GenUser).ToLocalChecked();
                pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (GenUser), Local<v8::Value>(GenUserValue));

                v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineTask->memo, utf8string);
                v8::Local<v8::String> memoValue = Nan::New<v8::String> (pRspQryNetBaseLineTask->memo).ToLocalChecked();
                pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetBaseLineTask) { 
                params[0] = Local<v8::Value>(pRspQryNetBaseLineTaskJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetBaseLineTask) { 
            delete[] pRspQryNetBaseLineTask;
            pRspQryNetBaseLineTask = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetBaseLineTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetBaseLineTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetBaseLineTaskTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetBaseLineTaskTopic_trans_callbackNumb: ", g_RtnNetBaseLineTaskTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetBaseLineTaskTopic_mutex);

    int dataNumb = g_RtnNetBaseLineTaskTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetBaseLineTaskTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetBaseLineTaskTopic_trans_dataNumb: ", g_RtnNetBaseLineTaskTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetBaseLineTaskTopic_queue.empty()) {
        receivedData.push (g_RtnNetBaseLineTaskTopic_queue.front());
        g_RtnNetBaseLineTaskTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetBaseLineTaskTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetBaseLineTaskTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetBaseLineTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetBaseLineTaskTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetBaseLineTaskTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetBaseLineTaskTopic").ToLocalChecked());

        CShfeFtdcRtnNetBaseLineTaskField* pRtnNetBaseLineTask = (CShfeFtdcRtnNetBaseLineTaskField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetBaseLineTaskJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetBaseLineTask) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetBaseLineTask->OperationType);
                pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetBaseLineTask->ID);
                pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineTask->Name, utf8string);
                v8::Local<v8::String> NameValue = Nan::New<v8::String> (pRtnNetBaseLineTask->Name).ToLocalChecked();
                pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                v8::Local<v8::String> BaseLineIDList = Nan::New<v8::String> ("BaseLineIDList").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineTask->BaseLineIDList, utf8string);
                v8::Local<v8::String> BaseLineIDListValue = Nan::New<v8::String> (pRtnNetBaseLineTask->BaseLineIDList).ToLocalChecked();
                pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (BaseLineIDList), Local<v8::Value>(BaseLineIDListValue));

                v8::Local<v8::String> DeviceIDList = Nan::New<v8::String> ("DeviceIDList").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineTask->DeviceIDList, utf8string);
                v8::Local<v8::String> DeviceIDListValue = Nan::New<v8::String> (pRtnNetBaseLineTask->DeviceIDList).ToLocalChecked();
                pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (DeviceIDList), Local<v8::Value>(DeviceIDListValue));

                v8::Local<v8::String> GenDate = Nan::New<v8::String> ("GenDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineTask->GenDate, utf8string);
                v8::Local<v8::String> GenDateValue = Nan::New<v8::String> (pRtnNetBaseLineTask->GenDate).ToLocalChecked();
                pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (GenDate), Local<v8::Value>(GenDateValue));

                v8::Local<v8::String> GenTime = Nan::New<v8::String> ("GenTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineTask->GenTime, utf8string);
                v8::Local<v8::String> GenTimeValue = Nan::New<v8::String> (pRtnNetBaseLineTask->GenTime).ToLocalChecked();
                pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (GenTime), Local<v8::Value>(GenTimeValue));

                v8::Local<v8::String> GenUser = Nan::New<v8::String> ("GenUser").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineTask->GenUser, utf8string);
                v8::Local<v8::String> GenUserValue = Nan::New<v8::String> (pRtnNetBaseLineTask->GenUser).ToLocalChecked();
                pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (GenUser), Local<v8::Value>(GenUserValue));

                v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineTask->memo, utf8string);
                v8::Local<v8::String> memoValue = Nan::New<v8::String> (pRtnNetBaseLineTask->memo).ToLocalChecked();
                pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetBaseLineTask) { 
                params[0] = Local<v8::Value>(pRtnNetBaseLineTaskJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetBaseLineTask) { 
            delete[] pRtnNetBaseLineTask;
            pRtnNetBaseLineTask = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetBaseLineTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetBaseLineResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetBaseLineResultTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetBaseLineResultTopic_trans_callbackNumb: ", g_RspQryNetBaseLineResultTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetBaseLineResultTopic_mutex);

    int dataNumb = g_RspQryNetBaseLineResultTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetBaseLineResultTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetBaseLineResultTopic_trans_dataNumb: ", g_RspQryNetBaseLineResultTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetBaseLineResultTopic_queue.empty()) {
        receivedData.push (g_RspQryNetBaseLineResultTopic_queue.front());
        g_RspQryNetBaseLineResultTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetBaseLineResultTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetBaseLineResultTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetBaseLineResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetBaseLineResultTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetBaseLineResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetBaseLineResultTopic").ToLocalChecked());

        CShfeFtdcRspQryNetBaseLineResultField* pRspQryNetBaseLineResult = (CShfeFtdcRspQryNetBaseLineResultField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetBaseLineResultJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetBaseLineResult) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetBaseLineResult->OperationType);
                pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetBaseLineResult->ID);
                pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> BaseLineName = Nan::New<v8::String> ("BaseLineName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineResult->BaseLineName, utf8string);
                v8::Local<v8::String> BaseLineNameValue = Nan::New<v8::String> (pRspQryNetBaseLineResult->BaseLineName).ToLocalChecked();
                pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (BaseLineName), Local<v8::Value>(BaseLineNameValue));

                v8::Local<v8::String> DeviceObjID = Nan::New<v8::String> ("DeviceObjID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineResult->DeviceObjID, utf8string);
                v8::Local<v8::String> DeviceObjIDValue = Nan::New<v8::String> (pRspQryNetBaseLineResult->DeviceObjID).ToLocalChecked();
                pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (DeviceObjID), Local<v8::Value>(DeviceObjIDValue));

                v8::Local<v8::String> DeviceIP = Nan::New<v8::String> ("DeviceIP").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineResult->DeviceIP, utf8string);
                v8::Local<v8::String> DeviceIPValue = Nan::New<v8::String> (pRspQryNetBaseLineResult->DeviceIP).ToLocalChecked();
                pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (DeviceIP), Local<v8::Value>(DeviceIPValue));

                v8::Local<v8::String> Result = Nan::New<v8::String> ("Result").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineResult->Result, utf8string);
                v8::Local<v8::String> ResultValue = Nan::New<v8::String> (pRspQryNetBaseLineResult->Result).ToLocalChecked();
                pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (Result), Local<v8::Value>(ResultValue));

                v8::Local<v8::String> GenDate = Nan::New<v8::String> ("GenDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineResult->GenDate, utf8string);
                v8::Local<v8::String> GenDateValue = Nan::New<v8::String> (pRspQryNetBaseLineResult->GenDate).ToLocalChecked();
                pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (GenDate), Local<v8::Value>(GenDateValue));

                v8::Local<v8::String> GenTime = Nan::New<v8::String> ("GenTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineResult->GenTime, utf8string);
                v8::Local<v8::String> GenTimeValue = Nan::New<v8::String> (pRspQryNetBaseLineResult->GenTime).ToLocalChecked();
                pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (GenTime), Local<v8::Value>(GenTimeValue));

                v8::Local<v8::String> GenUser = Nan::New<v8::String> ("GenUser").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetBaseLineResult->GenUser, utf8string);
                v8::Local<v8::String> GenUserValue = Nan::New<v8::String> (pRspQryNetBaseLineResult->GenUser).ToLocalChecked();
                pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (GenUser), Local<v8::Value>(GenUserValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRspQryNetBaseLineResult->Flag);
                pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetBaseLineResult) { 
                params[0] = Local<v8::Value>(pRspQryNetBaseLineResultJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetBaseLineResult) { 
            delete[] pRspQryNetBaseLineResult;
            pRspQryNetBaseLineResult = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetBaseLineResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetBaseLineResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetBaseLineResultTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetBaseLineResultTopic_trans_callbackNumb: ", g_RtnNetBaseLineResultTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetBaseLineResultTopic_mutex);

    int dataNumb = g_RtnNetBaseLineResultTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetBaseLineResultTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetBaseLineResultTopic_trans_dataNumb: ", g_RtnNetBaseLineResultTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetBaseLineResultTopic_queue.empty()) {
        receivedData.push (g_RtnNetBaseLineResultTopic_queue.front());
        g_RtnNetBaseLineResultTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetBaseLineResultTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetBaseLineResultTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetBaseLineResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetBaseLineResultTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetBaseLineResultTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetBaseLineResultTopic").ToLocalChecked());

        CShfeFtdcRtnNetBaseLineResultField* pRtnNetBaseLineResult = (CShfeFtdcRtnNetBaseLineResultField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetBaseLineResultJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetBaseLineResult) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetBaseLineResult->OperationType);
                pRtnNetBaseLineResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetBaseLineResult->ID);
                pRtnNetBaseLineResultJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> BaseLineName = Nan::New<v8::String> ("BaseLineName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineResult->BaseLineName, utf8string);
                v8::Local<v8::String> BaseLineNameValue = Nan::New<v8::String> (pRtnNetBaseLineResult->BaseLineName).ToLocalChecked();
                pRtnNetBaseLineResultJS->Set(Local<v8::Value> (BaseLineName), Local<v8::Value>(BaseLineNameValue));

                v8::Local<v8::String> DeviceObjID = Nan::New<v8::String> ("DeviceObjID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineResult->DeviceObjID, utf8string);
                v8::Local<v8::String> DeviceObjIDValue = Nan::New<v8::String> (pRtnNetBaseLineResult->DeviceObjID).ToLocalChecked();
                pRtnNetBaseLineResultJS->Set(Local<v8::Value> (DeviceObjID), Local<v8::Value>(DeviceObjIDValue));

                v8::Local<v8::String> DeviceIP = Nan::New<v8::String> ("DeviceIP").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineResult->DeviceIP, utf8string);
                v8::Local<v8::String> DeviceIPValue = Nan::New<v8::String> (pRtnNetBaseLineResult->DeviceIP).ToLocalChecked();
                pRtnNetBaseLineResultJS->Set(Local<v8::Value> (DeviceIP), Local<v8::Value>(DeviceIPValue));

                v8::Local<v8::String> Result = Nan::New<v8::String> ("Result").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineResult->Result, utf8string);
                v8::Local<v8::String> ResultValue = Nan::New<v8::String> (pRtnNetBaseLineResult->Result).ToLocalChecked();
                pRtnNetBaseLineResultJS->Set(Local<v8::Value> (Result), Local<v8::Value>(ResultValue));

                v8::Local<v8::String> GenDate = Nan::New<v8::String> ("GenDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineResult->GenDate, utf8string);
                v8::Local<v8::String> GenDateValue = Nan::New<v8::String> (pRtnNetBaseLineResult->GenDate).ToLocalChecked();
                pRtnNetBaseLineResultJS->Set(Local<v8::Value> (GenDate), Local<v8::Value>(GenDateValue));

                v8::Local<v8::String> GenTime = Nan::New<v8::String> ("GenTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineResult->GenTime, utf8string);
                v8::Local<v8::String> GenTimeValue = Nan::New<v8::String> (pRtnNetBaseLineResult->GenTime).ToLocalChecked();
                pRtnNetBaseLineResultJS->Set(Local<v8::Value> (GenTime), Local<v8::Value>(GenTimeValue));

                v8::Local<v8::String> GenUser = Nan::New<v8::String> ("GenUser").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetBaseLineResult->GenUser, utf8string);
                v8::Local<v8::String> GenUserValue = Nan::New<v8::String> (pRtnNetBaseLineResult->GenUser).ToLocalChecked();
                pRtnNetBaseLineResultJS->Set(Local<v8::Value> (GenUser), Local<v8::Value>(GenUserValue));

                v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRtnNetBaseLineResult->Flag);
                pRtnNetBaseLineResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetBaseLineResult) { 
                params[0] = Local<v8::Value>(pRtnNetBaseLineResultJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetBaseLineResult) { 
            delete[] pRtnNetBaseLineResult;
            pRtnNetBaseLineResult = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetBaseLineResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPartyLinkStatusInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetPartyLinkStatusInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetPartyLinkStatusInfoTopic_trans_callbackNumb: ", g_RspQryNetPartyLinkStatusInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetPartyLinkStatusInfoTopic_mutex);

    int dataNumb = g_RspQryNetPartyLinkStatusInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetPartyLinkStatusInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetPartyLinkStatusInfoTopic_trans_dataNumb: ", g_RspQryNetPartyLinkStatusInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetPartyLinkStatusInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetPartyLinkStatusInfoTopic_queue.front());
        g_RspQryNetPartyLinkStatusInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetPartyLinkStatusInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetPartyLinkStatusInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPartyLinkStatusInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetPartyLinkStatusInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPartyLinkStatusInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetPartyLinkStatusInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetPartyLinkStatusInfoField* pRspQryNetPartyLinkStatusInfo = (CShfeFtdcRspQryNetPartyLinkStatusInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetPartyLinkStatusInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetPartyLinkStatusInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkStatusInfo->OperationType);
                pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRspQryNetPartyLinkStatusInfo->MonDate).ToLocalChecked();
                pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRspQryNetPartyLinkStatusInfo->MonTime).ToLocalChecked();
                pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->SEAT_NO, utf8string);
                v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (pRspQryNetPartyLinkStatusInfo->SEAT_NO).ToLocalChecked();
                pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRspQryNetPartyLinkStatusInfo->IPADDR).ToLocalChecked();
                pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->Interface, utf8string);
                v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (pRspQryNetPartyLinkStatusInfo->Interface).ToLocalChecked();
                pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                v8::Local<v8::String> status = Nan::New<v8::String> ("status").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->status, utf8string);
                v8::Local<v8::String> statusValue = Nan::New<v8::String> (pRspQryNetPartyLinkStatusInfo->status).ToLocalChecked();
                pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (status), Local<v8::Value>(statusValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetPartyLinkStatusInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetPartyLinkStatusInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetPartyLinkStatusInfo) { 
            delete[] pRspQryNetPartyLinkStatusInfo;
            pRspQryNetPartyLinkStatusInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetPartyLinkStatusInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPartyLinkStatusInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetPartyLinkStatusInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetPartyLinkStatusInfoTopic_trans_callbackNumb: ", g_RtnNetPartyLinkStatusInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetPartyLinkStatusInfoTopic_mutex);

    int dataNumb = g_RtnNetPartyLinkStatusInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetPartyLinkStatusInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetPartyLinkStatusInfoTopic_trans_dataNumb: ", g_RtnNetPartyLinkStatusInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetPartyLinkStatusInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetPartyLinkStatusInfoTopic_queue.front());
        g_RtnNetPartyLinkStatusInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetPartyLinkStatusInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetPartyLinkStatusInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPartyLinkStatusInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetPartyLinkStatusInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPartyLinkStatusInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetPartyLinkStatusInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetPartyLinkStatusInfoField* pRtnNetPartyLinkStatusInfo = (CShfeFtdcRtnNetPartyLinkStatusInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetPartyLinkStatusInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetPartyLinkStatusInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPartyLinkStatusInfo->OperationType);
                pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnNetPartyLinkStatusInfo->MonDate).ToLocalChecked();
                pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnNetPartyLinkStatusInfo->MonTime).ToLocalChecked();
                pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->SEAT_NO, utf8string);
                v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (pRtnNetPartyLinkStatusInfo->SEAT_NO).ToLocalChecked();
                pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRtnNetPartyLinkStatusInfo->IPADDR).ToLocalChecked();
                pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->Interface, utf8string);
                v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (pRtnNetPartyLinkStatusInfo->Interface).ToLocalChecked();
                pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                v8::Local<v8::String> status = Nan::New<v8::String> ("status").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->status, utf8string);
                v8::Local<v8::String> statusValue = Nan::New<v8::String> (pRtnNetPartyLinkStatusInfo->status).ToLocalChecked();
                pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (status), Local<v8::Value>(statusValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetPartyLinkStatusInfo) { 
                params[0] = Local<v8::Value>(pRtnNetPartyLinkStatusInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetPartyLinkStatusInfo) { 
            delete[] pRtnNetPartyLinkStatusInfo;
            pRtnNetPartyLinkStatusInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetPartyLinkStatusInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMemberSDHLineInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetMemberSDHLineInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetMemberSDHLineInfoTopic_trans_callbackNumb: ", g_RspQryNetMemberSDHLineInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetMemberSDHLineInfoTopic_mutex);

    int dataNumb = g_RspQryNetMemberSDHLineInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetMemberSDHLineInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetMemberSDHLineInfoTopic_trans_dataNumb: ", g_RspQryNetMemberSDHLineInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetMemberSDHLineInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetMemberSDHLineInfoTopic_queue.front());
        g_RspQryNetMemberSDHLineInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetMemberSDHLineInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetMemberSDHLineInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMemberSDHLineInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetMemberSDHLineInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetMemberSDHLineInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetMemberSDHLineInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetMemberSDHLineInfoField* pRspQryNetMemberSDHLineInfo = (CShfeFtdcRspQryNetMemberSDHLineInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetMemberSDHLineInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetMemberSDHLineInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMemberSDHLineInfo->OperationType);
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMemberSDHLineInfo->ID);
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SeqNo = Nan::New<v8::String> ("SeqNo").ToLocalChecked();
                v8::Local<v8::Integer> SeqNoValue = Nan::New<v8::Integer> (pRspQryNetMemberSDHLineInfo->SeqNo);
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (SeqNo), Local<v8::Value>(SeqNoValue));

                v8::Local<v8::String> MemContractNo = Nan::New<v8::String> ("MemContractNo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->MemContractNo, utf8string);
                v8::Local<v8::String> MemContractNoValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->MemContractNo).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MemContractNo), Local<v8::Value>(MemContractNoValue));

                v8::Local<v8::String> ApplyPerson = Nan::New<v8::String> ("ApplyPerson").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->ApplyPerson, utf8string);
                v8::Local<v8::String> ApplyPersonValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->ApplyPerson).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ApplyPerson), Local<v8::Value>(ApplyPersonValue));

                v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRspQryNetMemberSDHLineInfo->MonthlyRental);
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                v8::Local<v8::String> MemberNo = Nan::New<v8::String> ("MemberNo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->MemberNo, utf8string);
                v8::Local<v8::String> MemberNoValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->MemberNo).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MemberNo), Local<v8::Value>(MemberNoValue));

                v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->ParticipantName, utf8string);
                v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->ParticipantName).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                v8::Local<v8::String> ClientManager = Nan::New<v8::String> ("ClientManager").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->ClientManager, utf8string);
                v8::Local<v8::String> ClientManagerValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->ClientManager).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ClientManager), Local<v8::Value>(ClientManagerValue));

                v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->Bandwidth, utf8string);
                v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->Bandwidth).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                v8::Local<v8::String> InterfaceType = Nan::New<v8::String> ("InterfaceType").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->InterfaceType, utf8string);
                v8::Local<v8::String> InterfaceTypeValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->InterfaceType).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (InterfaceType), Local<v8::Value>(InterfaceTypeValue));

                v8::Local<v8::String> RemoteCircuit = Nan::New<v8::String> ("RemoteCircuit").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->RemoteCircuit, utf8string);
                v8::Local<v8::String> RemoteCircuitValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->RemoteCircuit).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (RemoteCircuit), Local<v8::Value>(RemoteCircuitValue));

                v8::Local<v8::String> LocalCircuit = Nan::New<v8::String> ("LocalCircuit").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->LocalCircuit, utf8string);
                v8::Local<v8::String> LocalCircuitValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->LocalCircuit).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (LocalCircuit), Local<v8::Value>(LocalCircuitValue));

                v8::Local<v8::String> Remark = Nan::New<v8::String> ("Remark").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->Remark, utf8string);
                v8::Local<v8::String> RemarkValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->Remark).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Remark), Local<v8::Value>(RemarkValue));

                v8::Local<v8::String> EndALineAddress = Nan::New<v8::String> ("EndALineAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->EndALineAddress, utf8string);
                v8::Local<v8::String> EndALineAddressValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->EndALineAddress).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndALineAddress), Local<v8::Value>(EndALineAddressValue));

                v8::Local<v8::String> EndAContact = Nan::New<v8::String> ("EndAContact").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->EndAContact, utf8string);
                v8::Local<v8::String> EndAContactValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->EndAContact).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndAContact), Local<v8::Value>(EndAContactValue));

                v8::Local<v8::String> EndZLineAddress = Nan::New<v8::String> ("EndZLineAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->EndZLineAddress, utf8string);
                v8::Local<v8::String> EndZLineAddressValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->EndZLineAddress).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndZLineAddress), Local<v8::Value>(EndZLineAddressValue));

                v8::Local<v8::String> ContactName = Nan::New<v8::String> ("ContactName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->ContactName, utf8string);
                v8::Local<v8::String> ContactNameValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->ContactName).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ContactName), Local<v8::Value>(ContactNameValue));

                v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->TELEPHONE, utf8string);
                v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->TELEPHONE).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->MOBILEPHONE, utf8string);
                v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->MOBILEPHONE).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->IPADDR).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->Interface, utf8string);
                v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->Interface).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->PROVINCE, utf8string);
                v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->PROVINCE).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                v8::Local<v8::String> StartPortID = Nan::New<v8::String> ("StartPortID").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->StartPortID, utf8string);
                v8::Local<v8::String> StartPortIDValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->StartPortID).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (StartPortID), Local<v8::Value>(StartPortIDValue));

                v8::Local<v8::String> StartJump = Nan::New<v8::String> ("StartJump").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->StartJump, utf8string);
                v8::Local<v8::String> StartJumpValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->StartJump).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (StartJump), Local<v8::Value>(StartJumpValue));

                v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->LINE_STATUS, utf8string);
                v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (pRspQryNetMemberSDHLineInfo->LINE_STATUS).ToLocalChecked();
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                v8::Local<v8::String> DataCenterID = Nan::New<v8::String> ("DataCenterID").ToLocalChecked();
                v8::Local<v8::Integer> DataCenterIDValue = Nan::New<v8::Integer> (pRspQryNetMemberSDHLineInfo->DataCenterID);
                pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (DataCenterID), Local<v8::Value>(DataCenterIDValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetMemberSDHLineInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetMemberSDHLineInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetMemberSDHLineInfo) { 
            delete[] pRspQryNetMemberSDHLineInfo;
            pRspQryNetMemberSDHLineInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetMemberSDHLineInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMemberSDHLineInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetMemberSDHLineInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetMemberSDHLineInfoTopic_trans_callbackNumb: ", g_RtnNetMemberSDHLineInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetMemberSDHLineInfoTopic_mutex);

    int dataNumb = g_RtnNetMemberSDHLineInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetMemberSDHLineInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetMemberSDHLineInfoTopic_trans_dataNumb: ", g_RtnNetMemberSDHLineInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetMemberSDHLineInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetMemberSDHLineInfoTopic_queue.front());
        g_RtnNetMemberSDHLineInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetMemberSDHLineInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetMemberSDHLineInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMemberSDHLineInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetMemberSDHLineInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetMemberSDHLineInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetMemberSDHLineInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetMemberSDHLineInfoField* pRtnNetMemberSDHLineInfo = (CShfeFtdcRtnNetMemberSDHLineInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetMemberSDHLineInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetMemberSDHLineInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMemberSDHLineInfo->OperationType);
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMemberSDHLineInfo->ID);
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SeqNo = Nan::New<v8::String> ("SeqNo").ToLocalChecked();
                v8::Local<v8::Integer> SeqNoValue = Nan::New<v8::Integer> (pRtnNetMemberSDHLineInfo->SeqNo);
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (SeqNo), Local<v8::Value>(SeqNoValue));

                v8::Local<v8::String> MemContractNo = Nan::New<v8::String> ("MemContractNo").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->MemContractNo, utf8string);
                v8::Local<v8::String> MemContractNoValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->MemContractNo).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MemContractNo), Local<v8::Value>(MemContractNoValue));

                v8::Local<v8::String> ApplyPerson = Nan::New<v8::String> ("ApplyPerson").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->ApplyPerson, utf8string);
                v8::Local<v8::String> ApplyPersonValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->ApplyPerson).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ApplyPerson), Local<v8::Value>(ApplyPersonValue));

                v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRtnNetMemberSDHLineInfo->MonthlyRental);
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                v8::Local<v8::String> MemberNo = Nan::New<v8::String> ("MemberNo").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->MemberNo, utf8string);
                v8::Local<v8::String> MemberNoValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->MemberNo).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MemberNo), Local<v8::Value>(MemberNoValue));

                v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->ParticipantName, utf8string);
                v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->ParticipantName).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                v8::Local<v8::String> ClientManager = Nan::New<v8::String> ("ClientManager").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->ClientManager, utf8string);
                v8::Local<v8::String> ClientManagerValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->ClientManager).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ClientManager), Local<v8::Value>(ClientManagerValue));

                v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->Bandwidth, utf8string);
                v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->Bandwidth).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                v8::Local<v8::String> InterfaceType = Nan::New<v8::String> ("InterfaceType").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->InterfaceType, utf8string);
                v8::Local<v8::String> InterfaceTypeValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->InterfaceType).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (InterfaceType), Local<v8::Value>(InterfaceTypeValue));

                v8::Local<v8::String> RemoteCircuit = Nan::New<v8::String> ("RemoteCircuit").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->RemoteCircuit, utf8string);
                v8::Local<v8::String> RemoteCircuitValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->RemoteCircuit).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (RemoteCircuit), Local<v8::Value>(RemoteCircuitValue));

                v8::Local<v8::String> LocalCircuit = Nan::New<v8::String> ("LocalCircuit").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->LocalCircuit, utf8string);
                v8::Local<v8::String> LocalCircuitValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->LocalCircuit).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (LocalCircuit), Local<v8::Value>(LocalCircuitValue));

                v8::Local<v8::String> Remark = Nan::New<v8::String> ("Remark").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->Remark, utf8string);
                v8::Local<v8::String> RemarkValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->Remark).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Remark), Local<v8::Value>(RemarkValue));

                v8::Local<v8::String> EndALineAddress = Nan::New<v8::String> ("EndALineAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->EndALineAddress, utf8string);
                v8::Local<v8::String> EndALineAddressValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->EndALineAddress).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndALineAddress), Local<v8::Value>(EndALineAddressValue));

                v8::Local<v8::String> EndAContact = Nan::New<v8::String> ("EndAContact").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->EndAContact, utf8string);
                v8::Local<v8::String> EndAContactValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->EndAContact).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndAContact), Local<v8::Value>(EndAContactValue));

                v8::Local<v8::String> EndZLineAddress = Nan::New<v8::String> ("EndZLineAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->EndZLineAddress, utf8string);
                v8::Local<v8::String> EndZLineAddressValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->EndZLineAddress).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndZLineAddress), Local<v8::Value>(EndZLineAddressValue));

                v8::Local<v8::String> ContactName = Nan::New<v8::String> ("ContactName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->ContactName, utf8string);
                v8::Local<v8::String> ContactNameValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->ContactName).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ContactName), Local<v8::Value>(ContactNameValue));

                v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->TELEPHONE, utf8string);
                v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->TELEPHONE).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->MOBILEPHONE, utf8string);
                v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->MOBILEPHONE).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->IPADDR).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->Interface, utf8string);
                v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->Interface).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->PROVINCE, utf8string);
                v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->PROVINCE).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                v8::Local<v8::String> StartPortID = Nan::New<v8::String> ("StartPortID").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->StartPortID, utf8string);
                v8::Local<v8::String> StartPortIDValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->StartPortID).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (StartPortID), Local<v8::Value>(StartPortIDValue));

                v8::Local<v8::String> StartJump = Nan::New<v8::String> ("StartJump").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->StartJump, utf8string);
                v8::Local<v8::String> StartJumpValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->StartJump).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (StartJump), Local<v8::Value>(StartJumpValue));

                v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->LINE_STATUS, utf8string);
                v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (pRtnNetMemberSDHLineInfo->LINE_STATUS).ToLocalChecked();
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                v8::Local<v8::String> DataCenterID = Nan::New<v8::String> ("DataCenterID").ToLocalChecked();
                v8::Local<v8::Integer> DataCenterIDValue = Nan::New<v8::Integer> (pRtnNetMemberSDHLineInfo->DataCenterID);
                pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (DataCenterID), Local<v8::Value>(DataCenterIDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetMemberSDHLineInfo) { 
                params[0] = Local<v8::Value>(pRtnNetMemberSDHLineInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetMemberSDHLineInfo) { 
            delete[] pRtnNetMemberSDHLineInfo;
            pRtnNetMemberSDHLineInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetMemberSDHLineInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDDNLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetDDNLinkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetDDNLinkInfoTopic_trans_callbackNumb: ", g_RspQryNetDDNLinkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetDDNLinkInfoTopic_mutex);

    int dataNumb = g_RspQryNetDDNLinkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetDDNLinkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetDDNLinkInfoTopic_trans_dataNumb: ", g_RspQryNetDDNLinkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetDDNLinkInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetDDNLinkInfoTopic_queue.front());
        g_RspQryNetDDNLinkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetDDNLinkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetDDNLinkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDDNLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetDDNLinkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetDDNLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetDDNLinkInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetDDNLinkInfoField* pRspQryNetDDNLinkInfo = (CShfeFtdcRspQryNetDDNLinkInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetDDNLinkInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetDDNLinkInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDDNLinkInfo->OperationType);
                pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDDNLinkInfo->ID);
                pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDDNLinkInfo->ClientName, utf8string);
                v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (pRspQryNetDDNLinkInfo->ClientName).ToLocalChecked();
                pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDDNLinkInfo->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRspQryNetDDNLinkInfo->DDN_NO).ToLocalChecked();
                pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> BusinessUnit = Nan::New<v8::String> ("BusinessUnit").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDDNLinkInfo->BusinessUnit, utf8string);
                v8::Local<v8::String> BusinessUnitValue = Nan::New<v8::String> (pRspQryNetDDNLinkInfo->BusinessUnit).ToLocalChecked();
                pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (BusinessUnit), Local<v8::Value>(BusinessUnitValue));

                v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDDNLinkInfo->Bandwidth, utf8string);
                v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (pRspQryNetDDNLinkInfo->Bandwidth).ToLocalChecked();
                pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                v8::Local<v8::String> EndAAddress = Nan::New<v8::String> ("EndAAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDDNLinkInfo->EndAAddress, utf8string);
                v8::Local<v8::String> EndAAddressValue = Nan::New<v8::String> (pRspQryNetDDNLinkInfo->EndAAddress).ToLocalChecked();
                pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (EndAAddress), Local<v8::Value>(EndAAddressValue));

                v8::Local<v8::String> EndAContactName = Nan::New<v8::String> ("EndAContactName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDDNLinkInfo->EndAContactName, utf8string);
                v8::Local<v8::String> EndAContactNameValue = Nan::New<v8::String> (pRspQryNetDDNLinkInfo->EndAContactName).ToLocalChecked();
                pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (EndAContactName), Local<v8::Value>(EndAContactNameValue));

                v8::Local<v8::String> EndZAddress = Nan::New<v8::String> ("EndZAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDDNLinkInfo->EndZAddress, utf8string);
                v8::Local<v8::String> EndZAddressValue = Nan::New<v8::String> (pRspQryNetDDNLinkInfo->EndZAddress).ToLocalChecked();
                pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (EndZAddress), Local<v8::Value>(EndZAddressValue));

                v8::Local<v8::String> EndZContactName = Nan::New<v8::String> ("EndZContactName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetDDNLinkInfo->EndZContactName, utf8string);
                v8::Local<v8::String> EndZContactNameValue = Nan::New<v8::String> (pRspQryNetDDNLinkInfo->EndZContactName).ToLocalChecked();
                pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (EndZContactName), Local<v8::Value>(EndZContactNameValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetDDNLinkInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetDDNLinkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetDDNLinkInfo) { 
            delete[] pRspQryNetDDNLinkInfo;
            pRspQryNetDDNLinkInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetDDNLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDDNLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetDDNLinkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetDDNLinkInfoTopic_trans_callbackNumb: ", g_RtnNetDDNLinkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetDDNLinkInfoTopic_mutex);

    int dataNumb = g_RtnNetDDNLinkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetDDNLinkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetDDNLinkInfoTopic_trans_dataNumb: ", g_RtnNetDDNLinkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetDDNLinkInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetDDNLinkInfoTopic_queue.front());
        g_RtnNetDDNLinkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetDDNLinkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetDDNLinkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDDNLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetDDNLinkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetDDNLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetDDNLinkInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetDDNLinkInfoField* pRtnNetDDNLinkInfo = (CShfeFtdcRtnNetDDNLinkInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetDDNLinkInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetDDNLinkInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDDNLinkInfo->OperationType);
                pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDDNLinkInfo->ID);
                pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDDNLinkInfo->ClientName, utf8string);
                v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (pRtnNetDDNLinkInfo->ClientName).ToLocalChecked();
                pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDDNLinkInfo->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRtnNetDDNLinkInfo->DDN_NO).ToLocalChecked();
                pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> BusinessUnit = Nan::New<v8::String> ("BusinessUnit").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDDNLinkInfo->BusinessUnit, utf8string);
                v8::Local<v8::String> BusinessUnitValue = Nan::New<v8::String> (pRtnNetDDNLinkInfo->BusinessUnit).ToLocalChecked();
                pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (BusinessUnit), Local<v8::Value>(BusinessUnitValue));

                v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDDNLinkInfo->Bandwidth, utf8string);
                v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (pRtnNetDDNLinkInfo->Bandwidth).ToLocalChecked();
                pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                v8::Local<v8::String> EndAAddress = Nan::New<v8::String> ("EndAAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDDNLinkInfo->EndAAddress, utf8string);
                v8::Local<v8::String> EndAAddressValue = Nan::New<v8::String> (pRtnNetDDNLinkInfo->EndAAddress).ToLocalChecked();
                pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (EndAAddress), Local<v8::Value>(EndAAddressValue));

                v8::Local<v8::String> EndAContactName = Nan::New<v8::String> ("EndAContactName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDDNLinkInfo->EndAContactName, utf8string);
                v8::Local<v8::String> EndAContactNameValue = Nan::New<v8::String> (pRtnNetDDNLinkInfo->EndAContactName).ToLocalChecked();
                pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (EndAContactName), Local<v8::Value>(EndAContactNameValue));

                v8::Local<v8::String> EndZAddress = Nan::New<v8::String> ("EndZAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDDNLinkInfo->EndZAddress, utf8string);
                v8::Local<v8::String> EndZAddressValue = Nan::New<v8::String> (pRtnNetDDNLinkInfo->EndZAddress).ToLocalChecked();
                pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (EndZAddress), Local<v8::Value>(EndZAddressValue));

                v8::Local<v8::String> EndZContactName = Nan::New<v8::String> ("EndZContactName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetDDNLinkInfo->EndZContactName, utf8string);
                v8::Local<v8::String> EndZContactNameValue = Nan::New<v8::String> (pRtnNetDDNLinkInfo->EndZContactName).ToLocalChecked();
                pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (EndZContactName), Local<v8::Value>(EndZContactNameValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetDDNLinkInfo) { 
                params[0] = Local<v8::Value>(pRtnNetDDNLinkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetDDNLinkInfo) { 
            delete[] pRtnNetDDNLinkInfo;
            pRtnNetDDNLinkInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetDDNLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPseudMemberLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetPseudMemberLinkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetPseudMemberLinkInfoTopic_trans_callbackNumb: ", g_RspQryNetPseudMemberLinkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetPseudMemberLinkInfoTopic_mutex);

    int dataNumb = g_RspQryNetPseudMemberLinkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetPseudMemberLinkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetPseudMemberLinkInfoTopic_trans_dataNumb: ", g_RspQryNetPseudMemberLinkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetPseudMemberLinkInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetPseudMemberLinkInfoTopic_queue.front());
        g_RspQryNetPseudMemberLinkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetPseudMemberLinkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetPseudMemberLinkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPseudMemberLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetPseudMemberLinkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPseudMemberLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetPseudMemberLinkInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetPseudMemberLinkInfoField* pRspQryNetPseudMemberLinkInfo = (CShfeFtdcRspQryNetPseudMemberLinkInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetPseudMemberLinkInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetPseudMemberLinkInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPseudMemberLinkInfo->OperationType);
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPseudMemberLinkInfo->ID);
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SeqNo = Nan::New<v8::String> ("SeqNo").ToLocalChecked();
                v8::Local<v8::Integer> SeqNoValue = Nan::New<v8::Integer> (pRspQryNetPseudMemberLinkInfo->SeqNo);
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (SeqNo), Local<v8::Value>(SeqNoValue));

                v8::Local<v8::String> MemContractNo = Nan::New<v8::String> ("MemContractNo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->MemContractNo, utf8string);
                v8::Local<v8::String> MemContractNoValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->MemContractNo).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (MemContractNo), Local<v8::Value>(MemContractNoValue));

                v8::Local<v8::String> LineUsage = Nan::New<v8::String> ("LineUsage").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->LineUsage, utf8string);
                v8::Local<v8::String> LineUsageValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->LineUsage).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LineUsage), Local<v8::Value>(LineUsageValue));

                v8::Local<v8::String> LocalCircuit = Nan::New<v8::String> ("LocalCircuit").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->LocalCircuit, utf8string);
                v8::Local<v8::String> LocalCircuitValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->LocalCircuit).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LocalCircuit), Local<v8::Value>(LocalCircuitValue));

                v8::Local<v8::String> RemoteCircuit = Nan::New<v8::String> ("RemoteCircuit").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->RemoteCircuit, utf8string);
                v8::Local<v8::String> RemoteCircuitValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->RemoteCircuit).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (RemoteCircuit), Local<v8::Value>(RemoteCircuitValue));

                v8::Local<v8::String> BusinessUnit = Nan::New<v8::String> ("BusinessUnit").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->BusinessUnit, utf8string);
                v8::Local<v8::String> BusinessUnitValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->BusinessUnit).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (BusinessUnit), Local<v8::Value>(BusinessUnitValue));

                v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->Bandwidth, utf8string);
                v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->Bandwidth).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                v8::Local<v8::String> ApplyPerson = Nan::New<v8::String> ("ApplyPerson").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->ApplyPerson, utf8string);
                v8::Local<v8::String> ApplyPersonValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->ApplyPerson).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (ApplyPerson), Local<v8::Value>(ApplyPersonValue));

                v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRspQryNetPseudMemberLinkInfo->MonthlyRental);
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                v8::Local<v8::String> EndAAddress = Nan::New<v8::String> ("EndAAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->EndAAddress, utf8string);
                v8::Local<v8::String> EndAAddressValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->EndAAddress).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndAAddress), Local<v8::Value>(EndAAddressValue));

                v8::Local<v8::String> EndAContactName = Nan::New<v8::String> ("EndAContactName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->EndAContactName, utf8string);
                v8::Local<v8::String> EndAContactNameValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->EndAContactName).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndAContactName), Local<v8::Value>(EndAContactNameValue));

                v8::Local<v8::String> EndZAddress = Nan::New<v8::String> ("EndZAddress").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->EndZAddress, utf8string);
                v8::Local<v8::String> EndZAddressValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->EndZAddress).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndZAddress), Local<v8::Value>(EndZAddressValue));

                v8::Local<v8::String> EndZContactName = Nan::New<v8::String> ("EndZContactName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->EndZContactName, utf8string);
                v8::Local<v8::String> EndZContactNameValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->EndZContactName).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndZContactName), Local<v8::Value>(EndZContactNameValue));

                v8::Local<v8::String> Telephone = Nan::New<v8::String> ("Telephone").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->Telephone, utf8string);
                v8::Local<v8::String> TelephoneValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->Telephone).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (Telephone), Local<v8::Value>(TelephoneValue));

                v8::Local<v8::String> LineInfo = Nan::New<v8::String> ("LineInfo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->LineInfo, utf8string);
                v8::Local<v8::String> LineInfoValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->LineInfo).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LineInfo), Local<v8::Value>(LineInfoValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRspQryNetPseudMemberLinkInfo->IPADDR).ToLocalChecked();
                pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetPseudMemberLinkInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetPseudMemberLinkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetPseudMemberLinkInfo) { 
            delete[] pRspQryNetPseudMemberLinkInfo;
            pRspQryNetPseudMemberLinkInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetPseudMemberLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPseudMemberLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetPseudMemberLinkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetPseudMemberLinkInfoTopic_trans_callbackNumb: ", g_RtnNetPseudMemberLinkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetPseudMemberLinkInfoTopic_mutex);

    int dataNumb = g_RtnNetPseudMemberLinkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetPseudMemberLinkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetPseudMemberLinkInfoTopic_trans_dataNumb: ", g_RtnNetPseudMemberLinkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetPseudMemberLinkInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetPseudMemberLinkInfoTopic_queue.front());
        g_RtnNetPseudMemberLinkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetPseudMemberLinkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetPseudMemberLinkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPseudMemberLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetPseudMemberLinkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPseudMemberLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetPseudMemberLinkInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetPseudMemberLinkInfoField* pRtnNetPseudMemberLinkInfo = (CShfeFtdcRtnNetPseudMemberLinkInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetPseudMemberLinkInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetPseudMemberLinkInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPseudMemberLinkInfo->OperationType);
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPseudMemberLinkInfo->ID);
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SeqNo = Nan::New<v8::String> ("SeqNo").ToLocalChecked();
                v8::Local<v8::Integer> SeqNoValue = Nan::New<v8::Integer> (pRtnNetPseudMemberLinkInfo->SeqNo);
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (SeqNo), Local<v8::Value>(SeqNoValue));

                v8::Local<v8::String> MemContractNo = Nan::New<v8::String> ("MemContractNo").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->MemContractNo, utf8string);
                v8::Local<v8::String> MemContractNoValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->MemContractNo).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (MemContractNo), Local<v8::Value>(MemContractNoValue));

                v8::Local<v8::String> LineUsage = Nan::New<v8::String> ("LineUsage").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->LineUsage, utf8string);
                v8::Local<v8::String> LineUsageValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->LineUsage).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LineUsage), Local<v8::Value>(LineUsageValue));

                v8::Local<v8::String> LocalCircuit = Nan::New<v8::String> ("LocalCircuit").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->LocalCircuit, utf8string);
                v8::Local<v8::String> LocalCircuitValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->LocalCircuit).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LocalCircuit), Local<v8::Value>(LocalCircuitValue));

                v8::Local<v8::String> RemoteCircuit = Nan::New<v8::String> ("RemoteCircuit").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->RemoteCircuit, utf8string);
                v8::Local<v8::String> RemoteCircuitValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->RemoteCircuit).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (RemoteCircuit), Local<v8::Value>(RemoteCircuitValue));

                v8::Local<v8::String> BusinessUnit = Nan::New<v8::String> ("BusinessUnit").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->BusinessUnit, utf8string);
                v8::Local<v8::String> BusinessUnitValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->BusinessUnit).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (BusinessUnit), Local<v8::Value>(BusinessUnitValue));

                v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->Bandwidth, utf8string);
                v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->Bandwidth).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                v8::Local<v8::String> ApplyPerson = Nan::New<v8::String> ("ApplyPerson").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->ApplyPerson, utf8string);
                v8::Local<v8::String> ApplyPersonValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->ApplyPerson).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (ApplyPerson), Local<v8::Value>(ApplyPersonValue));

                v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRtnNetPseudMemberLinkInfo->MonthlyRental);
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                v8::Local<v8::String> EndAAddress = Nan::New<v8::String> ("EndAAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->EndAAddress, utf8string);
                v8::Local<v8::String> EndAAddressValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->EndAAddress).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndAAddress), Local<v8::Value>(EndAAddressValue));

                v8::Local<v8::String> EndAContactName = Nan::New<v8::String> ("EndAContactName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->EndAContactName, utf8string);
                v8::Local<v8::String> EndAContactNameValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->EndAContactName).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndAContactName), Local<v8::Value>(EndAContactNameValue));

                v8::Local<v8::String> EndZAddress = Nan::New<v8::String> ("EndZAddress").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->EndZAddress, utf8string);
                v8::Local<v8::String> EndZAddressValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->EndZAddress).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndZAddress), Local<v8::Value>(EndZAddressValue));

                v8::Local<v8::String> EndZContactName = Nan::New<v8::String> ("EndZContactName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->EndZContactName, utf8string);
                v8::Local<v8::String> EndZContactNameValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->EndZContactName).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndZContactName), Local<v8::Value>(EndZContactNameValue));

                v8::Local<v8::String> Telephone = Nan::New<v8::String> ("Telephone").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->Telephone, utf8string);
                v8::Local<v8::String> TelephoneValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->Telephone).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (Telephone), Local<v8::Value>(TelephoneValue));

                v8::Local<v8::String> LineInfo = Nan::New<v8::String> ("LineInfo").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->LineInfo, utf8string);
                v8::Local<v8::String> LineInfoValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->LineInfo).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LineInfo), Local<v8::Value>(LineInfoValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRtnNetPseudMemberLinkInfo->IPADDR).ToLocalChecked();
                pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetPseudMemberLinkInfo) { 
                params[0] = Local<v8::Value>(pRtnNetPseudMemberLinkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetPseudMemberLinkInfo) { 
            delete[] pRtnNetPseudMemberLinkInfo;
            pRtnNetPseudMemberLinkInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetPseudMemberLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryOuterDeviceInfTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryOuterDeviceInfTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryOuterDeviceInfTopic_trans_callbackNumb: ", g_RspQryOuterDeviceInfTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryOuterDeviceInfTopic_mutex);

    int dataNumb = g_RspQryOuterDeviceInfTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryOuterDeviceInfTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryOuterDeviceInfTopic_trans_dataNumb: ", g_RspQryOuterDeviceInfTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryOuterDeviceInfTopic_queue.empty()) {
        receivedData.push (g_RspQryOuterDeviceInfTopic_queue.front());
        g_RspQryOuterDeviceInfTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryOuterDeviceInfTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryOuterDeviceInfTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryOuterDeviceInfTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryOuterDeviceInfTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryOuterDeviceInfTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryOuterDeviceInfTopic").ToLocalChecked());

        CShfeFtdcRspQryOuterDeviceInfField* pRspQryOuterDeviceInf = (CShfeFtdcRspQryOuterDeviceInfField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryOuterDeviceInfJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryOuterDeviceInf) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryOuterDeviceInf->OperationType);
                pRspQryOuterDeviceInfJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryOuterDeviceInf->ID);
                pRspQryOuterDeviceInfJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOuterDeviceInf->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRspQryOuterDeviceInf->IPADDR).ToLocalChecked();
                pRspQryOuterDeviceInfJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> NAME = Nan::New<v8::String> ("NAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOuterDeviceInf->NAME, utf8string);
                v8::Local<v8::String> NAMEValue = Nan::New<v8::String> (pRspQryOuterDeviceInf->NAME).ToLocalChecked();
                pRspQryOuterDeviceInfJS->Set(Local<v8::Value> (NAME), Local<v8::Value>(NAMEValue));

                v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                Gb2312ToUtf8(pRspQryOuterDeviceInf->memo, utf8string);
                v8::Local<v8::String> memoValue = Nan::New<v8::String> (pRspQryOuterDeviceInf->memo).ToLocalChecked();
                pRspQryOuterDeviceInfJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryOuterDeviceInf) { 
                params[0] = Local<v8::Value>(pRspQryOuterDeviceInfJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryOuterDeviceInf) { 
            delete[] pRspQryOuterDeviceInf;
            pRspQryOuterDeviceInf = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryOuterDeviceInfTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetOuterDeviceInfTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetOuterDeviceInfTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetOuterDeviceInfTopic_trans_callbackNumb: ", g_RtnNetOuterDeviceInfTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetOuterDeviceInfTopic_mutex);

    int dataNumb = g_RtnNetOuterDeviceInfTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetOuterDeviceInfTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetOuterDeviceInfTopic_trans_dataNumb: ", g_RtnNetOuterDeviceInfTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetOuterDeviceInfTopic_queue.empty()) {
        receivedData.push (g_RtnNetOuterDeviceInfTopic_queue.front());
        g_RtnNetOuterDeviceInfTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetOuterDeviceInfTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetOuterDeviceInfTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetOuterDeviceInfTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetOuterDeviceInfTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetOuterDeviceInfTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetOuterDeviceInfTopic").ToLocalChecked());

        CShfeFtdcRtnNetOuterDeviceInfField* pRtnNetOuterDeviceInf = (CShfeFtdcRtnNetOuterDeviceInfField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetOuterDeviceInfJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetOuterDeviceInf) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetOuterDeviceInf->OperationType);
                pRtnNetOuterDeviceInfJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetOuterDeviceInf->ID);
                pRtnNetOuterDeviceInfJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetOuterDeviceInf->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRtnNetOuterDeviceInf->IPADDR).ToLocalChecked();
                pRtnNetOuterDeviceInfJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> NAME = Nan::New<v8::String> ("NAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetOuterDeviceInf->NAME, utf8string);
                v8::Local<v8::String> NAMEValue = Nan::New<v8::String> (pRtnNetOuterDeviceInf->NAME).ToLocalChecked();
                pRtnNetOuterDeviceInfJS->Set(Local<v8::Value> (NAME), Local<v8::Value>(NAMEValue));

                v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetOuterDeviceInf->memo, utf8string);
                v8::Local<v8::String> memoValue = Nan::New<v8::String> (pRtnNetOuterDeviceInf->memo).ToLocalChecked();
                pRtnNetOuterDeviceInfJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetOuterDeviceInf) { 
                params[0] = Local<v8::Value>(pRtnNetOuterDeviceInfJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetOuterDeviceInf) { 
            delete[] pRtnNetOuterDeviceInf;
            pRtnNetOuterDeviceInf = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetOuterDeviceInfTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetLocalPingResultInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetLocalPingResultInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetLocalPingResultInfoTopic_trans_callbackNumb: ", g_RspQryNetLocalPingResultInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetLocalPingResultInfoTopic_mutex);

    int dataNumb = g_RspQryNetLocalPingResultInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetLocalPingResultInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetLocalPingResultInfoTopic_trans_dataNumb: ", g_RspQryNetLocalPingResultInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetLocalPingResultInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetLocalPingResultInfoTopic_queue.front());
        g_RspQryNetLocalPingResultInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetLocalPingResultInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetLocalPingResultInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetLocalPingResultInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetLocalPingResultInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetLocalPingResultInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetLocalPingResultInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetLocalPingResultInfoField* pRspQryNetLocalPingResultInfo = (CShfeFtdcRspQryNetLocalPingResultInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetLocalPingResultInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetLocalPingResultInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetLocalPingResultInfo->OperationType);
                pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetLocalPingResultInfo->ID);
                pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SouIPADDR = Nan::New<v8::String> ("SouIPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->SouIPADDR, utf8string);
                v8::Local<v8::String> SouIPADDRValue = Nan::New<v8::String> (pRspQryNetLocalPingResultInfo->SouIPADDR).ToLocalChecked();
                pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (SouIPADDR), Local<v8::Value>(SouIPADDRValue));

                v8::Local<v8::String> SouNAME = Nan::New<v8::String> ("SouNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->SouNAME, utf8string);
                v8::Local<v8::String> SouNAMEValue = Nan::New<v8::String> (pRspQryNetLocalPingResultInfo->SouNAME).ToLocalChecked();
                pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (SouNAME), Local<v8::Value>(SouNAMEValue));

                v8::Local<v8::String> TarIPADDR = Nan::New<v8::String> ("TarIPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->TarIPADDR, utf8string);
                v8::Local<v8::String> TarIPADDRValue = Nan::New<v8::String> (pRspQryNetLocalPingResultInfo->TarIPADDR).ToLocalChecked();
                pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (TarIPADDR), Local<v8::Value>(TarIPADDRValue));

                v8::Local<v8::String> TarNAME = Nan::New<v8::String> ("TarNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->TarNAME, utf8string);
                v8::Local<v8::String> TarNAMEValue = Nan::New<v8::String> (pRspQryNetLocalPingResultInfo->TarNAME).ToLocalChecked();
                pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (TarNAME), Local<v8::Value>(TarNAMEValue));

                v8::Local<v8::String> PDateSta = Nan::New<v8::String> ("PDateSta").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->PDateSta, utf8string);
                v8::Local<v8::String> PDateStaValue = Nan::New<v8::String> (pRspQryNetLocalPingResultInfo->PDateSta).ToLocalChecked();
                pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (PDateSta), Local<v8::Value>(PDateStaValue));

                v8::Local<v8::String> PTimeSta = Nan::New<v8::String> ("PTimeSta").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->PTimeSta, utf8string);
                v8::Local<v8::String> PTimeStaValue = Nan::New<v8::String> (pRspQryNetLocalPingResultInfo->PTimeSta).ToLocalChecked();
                pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (PTimeSta), Local<v8::Value>(PTimeStaValue));

                v8::Local<v8::String> ConnRate = Nan::New<v8::String> ("ConnRate").ToLocalChecked();
                v8::Local<v8::Integer> ConnRateValue = Nan::New<v8::Integer> (pRspQryNetLocalPingResultInfo->ConnRate);
                pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (ConnRate), Local<v8::Value>(ConnRateValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetLocalPingResultInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetLocalPingResultInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetLocalPingResultInfo) { 
            delete[] pRspQryNetLocalPingResultInfo;
            pRspQryNetLocalPingResultInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetLocalPingResultInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetLocalPingResultInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetLocalPingResultInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetLocalPingResultInfoTopic_trans_callbackNumb: ", g_RtnNetLocalPingResultInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetLocalPingResultInfoTopic_mutex);

    int dataNumb = g_RtnNetLocalPingResultInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetLocalPingResultInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetLocalPingResultInfoTopic_trans_dataNumb: ", g_RtnNetLocalPingResultInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetLocalPingResultInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetLocalPingResultInfoTopic_queue.front());
        g_RtnNetLocalPingResultInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetLocalPingResultInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetLocalPingResultInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetLocalPingResultInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetLocalPingResultInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetLocalPingResultInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetLocalPingResultInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetLocalPingResultInfoField* pRtnNetLocalPingResultInfo = (CShfeFtdcRtnNetLocalPingResultInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetLocalPingResultInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetLocalPingResultInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetLocalPingResultInfo->OperationType);
                pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetLocalPingResultInfo->ID);
                pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SouIPADDR = Nan::New<v8::String> ("SouIPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetLocalPingResultInfo->SouIPADDR, utf8string);
                v8::Local<v8::String> SouIPADDRValue = Nan::New<v8::String> (pRtnNetLocalPingResultInfo->SouIPADDR).ToLocalChecked();
                pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (SouIPADDR), Local<v8::Value>(SouIPADDRValue));

                v8::Local<v8::String> SouNAME = Nan::New<v8::String> ("SouNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetLocalPingResultInfo->SouNAME, utf8string);
                v8::Local<v8::String> SouNAMEValue = Nan::New<v8::String> (pRtnNetLocalPingResultInfo->SouNAME).ToLocalChecked();
                pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (SouNAME), Local<v8::Value>(SouNAMEValue));

                v8::Local<v8::String> TarIPADDR = Nan::New<v8::String> ("TarIPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetLocalPingResultInfo->TarIPADDR, utf8string);
                v8::Local<v8::String> TarIPADDRValue = Nan::New<v8::String> (pRtnNetLocalPingResultInfo->TarIPADDR).ToLocalChecked();
                pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (TarIPADDR), Local<v8::Value>(TarIPADDRValue));

                v8::Local<v8::String> TarNAME = Nan::New<v8::String> ("TarNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetLocalPingResultInfo->TarNAME, utf8string);
                v8::Local<v8::String> TarNAMEValue = Nan::New<v8::String> (pRtnNetLocalPingResultInfo->TarNAME).ToLocalChecked();
                pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (TarNAME), Local<v8::Value>(TarNAMEValue));

                v8::Local<v8::String> PDateSta = Nan::New<v8::String> ("PDateSta").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetLocalPingResultInfo->PDateSta, utf8string);
                v8::Local<v8::String> PDateStaValue = Nan::New<v8::String> (pRtnNetLocalPingResultInfo->PDateSta).ToLocalChecked();
                pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (PDateSta), Local<v8::Value>(PDateStaValue));

                v8::Local<v8::String> PTimeSta = Nan::New<v8::String> ("PTimeSta").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetLocalPingResultInfo->PTimeSta, utf8string);
                v8::Local<v8::String> PTimeStaValue = Nan::New<v8::String> (pRtnNetLocalPingResultInfo->PTimeSta).ToLocalChecked();
                pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (PTimeSta), Local<v8::Value>(PTimeStaValue));

                v8::Local<v8::String> ConnRate = Nan::New<v8::String> ("ConnRate").ToLocalChecked();
                v8::Local<v8::Integer> ConnRateValue = Nan::New<v8::Integer> (pRtnNetLocalPingResultInfo->ConnRate);
                pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (ConnRate), Local<v8::Value>(ConnRateValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetLocalPingResultInfo) { 
                params[0] = Local<v8::Value>(pRtnNetLocalPingResultInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetLocalPingResultInfo) { 
            delete[] pRtnNetLocalPingResultInfo;
            pRtnNetLocalPingResultInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetLocalPingResultInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetRomotePingResultInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetRomotePingResultInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetRomotePingResultInfoTopic_trans_callbackNumb: ", g_RspQryNetRomotePingResultInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetRomotePingResultInfoTopic_mutex);

    int dataNumb = g_RspQryNetRomotePingResultInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetRomotePingResultInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetRomotePingResultInfoTopic_trans_dataNumb: ", g_RspQryNetRomotePingResultInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetRomotePingResultInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetRomotePingResultInfoTopic_queue.front());
        g_RspQryNetRomotePingResultInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetRomotePingResultInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetRomotePingResultInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetRomotePingResultInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetRomotePingResultInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetRomotePingResultInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetRomotePingResultInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetRomotePingResultInfoField* pRspQryNetRomotePingResultInfo = (CShfeFtdcRspQryNetRomotePingResultInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetRomotePingResultInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetRomotePingResultInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetRomotePingResultInfo->OperationType);
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetRomotePingResultInfo->ID);
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SouIPADDR = Nan::New<v8::String> ("SouIPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->SouIPADDR, utf8string);
                v8::Local<v8::String> SouIPADDRValue = Nan::New<v8::String> (pRspQryNetRomotePingResultInfo->SouIPADDR).ToLocalChecked();
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (SouIPADDR), Local<v8::Value>(SouIPADDRValue));

                v8::Local<v8::String> SouNAME = Nan::New<v8::String> ("SouNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->SouNAME, utf8string);
                v8::Local<v8::String> SouNAMEValue = Nan::New<v8::String> (pRspQryNetRomotePingResultInfo->SouNAME).ToLocalChecked();
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (SouNAME), Local<v8::Value>(SouNAMEValue));

                v8::Local<v8::String> TarIPADDR = Nan::New<v8::String> ("TarIPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->TarIPADDR, utf8string);
                v8::Local<v8::String> TarIPADDRValue = Nan::New<v8::String> (pRspQryNetRomotePingResultInfo->TarIPADDR).ToLocalChecked();
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (TarIPADDR), Local<v8::Value>(TarIPADDRValue));

                v8::Local<v8::String> TarNAME = Nan::New<v8::String> ("TarNAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->TarNAME, utf8string);
                v8::Local<v8::String> TarNAMEValue = Nan::New<v8::String> (pRspQryNetRomotePingResultInfo->TarNAME).ToLocalChecked();
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (TarNAME), Local<v8::Value>(TarNAMEValue));

                v8::Local<v8::String> PDateSta = Nan::New<v8::String> ("PDateSta").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->PDateSta, utf8string);
                v8::Local<v8::String> PDateStaValue = Nan::New<v8::String> (pRspQryNetRomotePingResultInfo->PDateSta).ToLocalChecked();
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (PDateSta), Local<v8::Value>(PDateStaValue));

                v8::Local<v8::String> PTimeSta = Nan::New<v8::String> ("PTimeSta").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->PTimeSta, utf8string);
                v8::Local<v8::String> PTimeStaValue = Nan::New<v8::String> (pRspQryNetRomotePingResultInfo->PTimeSta).ToLocalChecked();
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (PTimeSta), Local<v8::Value>(PTimeStaValue));

                v8::Local<v8::String> ConnRate = Nan::New<v8::String> ("ConnRate").ToLocalChecked();
                v8::Local<v8::Integer> ConnRateValue = Nan::New<v8::Integer> (pRspQryNetRomotePingResultInfo->ConnRate);
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (ConnRate), Local<v8::Value>(ConnRateValue));

                v8::Local<v8::String> TimeDlyMin = Nan::New<v8::String> ("TimeDlyMin").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->TimeDlyMin, utf8string);
                v8::Local<v8::String> TimeDlyMinValue = Nan::New<v8::String> (pRspQryNetRomotePingResultInfo->TimeDlyMin).ToLocalChecked();
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyMin), Local<v8::Value>(TimeDlyMinValue));

                v8::Local<v8::String> TimeDlyMax = Nan::New<v8::String> ("TimeDlyMax").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->TimeDlyMax, utf8string);
                v8::Local<v8::String> TimeDlyMaxValue = Nan::New<v8::String> (pRspQryNetRomotePingResultInfo->TimeDlyMax).ToLocalChecked();
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyMax), Local<v8::Value>(TimeDlyMaxValue));

                v8::Local<v8::String> TimeDlyAvg = Nan::New<v8::String> ("TimeDlyAvg").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->TimeDlyAvg, utf8string);
                v8::Local<v8::String> TimeDlyAvgValue = Nan::New<v8::String> (pRspQryNetRomotePingResultInfo->TimeDlyAvg).ToLocalChecked();
                pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyAvg), Local<v8::Value>(TimeDlyAvgValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetRomotePingResultInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetRomotePingResultInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetRomotePingResultInfo) { 
            delete[] pRspQryNetRomotePingResultInfo;
            pRspQryNetRomotePingResultInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetRomotePingResultInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetRomotePingResultInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetRomotePingResultInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetRomotePingResultInfoTopic_trans_callbackNumb: ", g_RtnNetRomotePingResultInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetRomotePingResultInfoTopic_mutex);

    int dataNumb = g_RtnNetRomotePingResultInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetRomotePingResultInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetRomotePingResultInfoTopic_trans_dataNumb: ", g_RtnNetRomotePingResultInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetRomotePingResultInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetRomotePingResultInfoTopic_queue.front());
        g_RtnNetRomotePingResultInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetRomotePingResultInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetRomotePingResultInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetRomotePingResultInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetRomotePingResultInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetRomotePingResultInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetRomotePingResultInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetRomotePingResultInfoField* pRtnNetRomotePingResultInfo = (CShfeFtdcRtnNetRomotePingResultInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetRomotePingResultInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetRomotePingResultInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetRomotePingResultInfo->OperationType);
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetRomotePingResultInfo->ID);
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> SouIPADDR = Nan::New<v8::String> ("SouIPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRomotePingResultInfo->SouIPADDR, utf8string);
                v8::Local<v8::String> SouIPADDRValue = Nan::New<v8::String> (pRtnNetRomotePingResultInfo->SouIPADDR).ToLocalChecked();
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (SouIPADDR), Local<v8::Value>(SouIPADDRValue));

                v8::Local<v8::String> SouNAME = Nan::New<v8::String> ("SouNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRomotePingResultInfo->SouNAME, utf8string);
                v8::Local<v8::String> SouNAMEValue = Nan::New<v8::String> (pRtnNetRomotePingResultInfo->SouNAME).ToLocalChecked();
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (SouNAME), Local<v8::Value>(SouNAMEValue));

                v8::Local<v8::String> TarIPADDR = Nan::New<v8::String> ("TarIPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRomotePingResultInfo->TarIPADDR, utf8string);
                v8::Local<v8::String> TarIPADDRValue = Nan::New<v8::String> (pRtnNetRomotePingResultInfo->TarIPADDR).ToLocalChecked();
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (TarIPADDR), Local<v8::Value>(TarIPADDRValue));

                v8::Local<v8::String> TarNAME = Nan::New<v8::String> ("TarNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRomotePingResultInfo->TarNAME, utf8string);
                v8::Local<v8::String> TarNAMEValue = Nan::New<v8::String> (pRtnNetRomotePingResultInfo->TarNAME).ToLocalChecked();
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (TarNAME), Local<v8::Value>(TarNAMEValue));

                v8::Local<v8::String> PDateSta = Nan::New<v8::String> ("PDateSta").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRomotePingResultInfo->PDateSta, utf8string);
                v8::Local<v8::String> PDateStaValue = Nan::New<v8::String> (pRtnNetRomotePingResultInfo->PDateSta).ToLocalChecked();
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (PDateSta), Local<v8::Value>(PDateStaValue));

                v8::Local<v8::String> PTimeSta = Nan::New<v8::String> ("PTimeSta").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRomotePingResultInfo->PTimeSta, utf8string);
                v8::Local<v8::String> PTimeStaValue = Nan::New<v8::String> (pRtnNetRomotePingResultInfo->PTimeSta).ToLocalChecked();
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (PTimeSta), Local<v8::Value>(PTimeStaValue));

                v8::Local<v8::String> ConnRate = Nan::New<v8::String> ("ConnRate").ToLocalChecked();
                v8::Local<v8::Integer> ConnRateValue = Nan::New<v8::Integer> (pRtnNetRomotePingResultInfo->ConnRate);
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (ConnRate), Local<v8::Value>(ConnRateValue));

                v8::Local<v8::String> TimeDlyMin = Nan::New<v8::String> ("TimeDlyMin").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRomotePingResultInfo->TimeDlyMin, utf8string);
                v8::Local<v8::String> TimeDlyMinValue = Nan::New<v8::String> (pRtnNetRomotePingResultInfo->TimeDlyMin).ToLocalChecked();
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyMin), Local<v8::Value>(TimeDlyMinValue));

                v8::Local<v8::String> TimeDlyMax = Nan::New<v8::String> ("TimeDlyMax").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRomotePingResultInfo->TimeDlyMax, utf8string);
                v8::Local<v8::String> TimeDlyMaxValue = Nan::New<v8::String> (pRtnNetRomotePingResultInfo->TimeDlyMax).ToLocalChecked();
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyMax), Local<v8::Value>(TimeDlyMaxValue));

                v8::Local<v8::String> TimeDlyAvg = Nan::New<v8::String> ("TimeDlyAvg").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetRomotePingResultInfo->TimeDlyAvg, utf8string);
                v8::Local<v8::String> TimeDlyAvgValue = Nan::New<v8::String> (pRtnNetRomotePingResultInfo->TimeDlyAvg).ToLocalChecked();
                pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyAvg), Local<v8::Value>(TimeDlyAvgValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetRomotePingResultInfo) { 
                params[0] = Local<v8::Value>(pRtnNetRomotePingResultInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetRomotePingResultInfo) { 
            delete[] pRtnNetRomotePingResultInfo;
            pRtnNetRomotePingResultInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetRomotePingResultInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMonitorTopProcessInfo (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnMonitorTopProcessInfo: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnMonitorTopProcessInfo_trans_callbackNumb: ", g_RtnMonitorTopProcessInfo_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnMonitorTopProcessInfo_mutex);

    int dataNumb = g_RtnMonitorTopProcessInfo_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnMonitorTopProcessInfo_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnMonitorTopProcessInfo_trans_dataNumb: ", g_RtnMonitorTopProcessInfo_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnMonitorTopProcessInfo_queue.empty()) {
        receivedData.push (g_RtnMonitorTopProcessInfo_queue.front());
        g_RtnMonitorTopProcessInfo_queue.pop();
    }
    uv_mutex_unlock (&g_RtnMonitorTopProcessInfo_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnMonitorTopProcessInfo paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMonitorTopProcessInfo: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnMonitorTopProcessInfoSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMonitorTopProcessInfo: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnMonitorTopProcessInfo").ToLocalChecked());

        CShfeFtdcRtnMonitorTopProcessInfoField* pRtnMonitorTopProcessInfo = (CShfeFtdcRtnMonitorTopProcessInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnMonitorTopProcessInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnMonitorTopProcessInfo) { 
                string utf8string;
                v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorTopProcessInfo->HostName, utf8string);
                v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (pRtnMonitorTopProcessInfo->HostName).ToLocalChecked();
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorTopProcessInfo->MonDate, utf8string);
                v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (pRtnMonitorTopProcessInfo->MonDate).ToLocalChecked();
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorTopProcessInfo->MonTime, utf8string);
                v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (pRtnMonitorTopProcessInfo->MonTime).ToLocalChecked();
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorTopProcessInfo->CPU, utf8string);
                v8::Local<v8::String> CPUValue = Nan::New<v8::String> (pRtnMonitorTopProcessInfo->CPU).ToLocalChecked();
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                v8::Local<v8::String> TTY = Nan::New<v8::String> ("TTY").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorTopProcessInfo->TTY, utf8string);
                v8::Local<v8::String> TTYValue = Nan::New<v8::String> (pRtnMonitorTopProcessInfo->TTY).ToLocalChecked();
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (TTY), Local<v8::Value>(TTYValue));

                v8::Local<v8::String> PID = Nan::New<v8::String> ("PID").ToLocalChecked();
                v8::Local<v8::Integer> PIDValue = Nan::New<v8::Integer> (pRtnMonitorTopProcessInfo->PID);
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (PID), Local<v8::Value>(PIDValue));

                v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorTopProcessInfo->USERNAME, utf8string);
                v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (pRtnMonitorTopProcessInfo->USERNAME).ToLocalChecked();
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                v8::Local<v8::String> PRI = Nan::New<v8::String> ("PRI").ToLocalChecked();
                v8::Local<v8::Integer> PRIValue = Nan::New<v8::Integer> (pRtnMonitorTopProcessInfo->PRI);
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (PRI), Local<v8::Value>(PRIValue));

                v8::Local<v8::String> NI = Nan::New<v8::String> ("NI").ToLocalChecked();
                v8::Local<v8::Integer> NIValue = Nan::New<v8::Integer> (pRtnMonitorTopProcessInfo->NI);
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (NI), Local<v8::Value>(NIValue));

                v8::Local<v8::String> SSIZE = Nan::New<v8::String> ("SSIZE").ToLocalChecked();
                v8::Local<v8::Integer> SSIZEValue = Nan::New<v8::Integer> (pRtnMonitorTopProcessInfo->SSIZE);
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (SSIZE), Local<v8::Value>(SSIZEValue));

                v8::Local<v8::String> RES = Nan::New<v8::String> ("RES").ToLocalChecked();
                v8::Local<v8::Integer> RESValue = Nan::New<v8::Integer> (pRtnMonitorTopProcessInfo->RES);
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (RES), Local<v8::Value>(RESValue));

                v8::Local<v8::String> STATE = Nan::New<v8::String> ("STATE").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorTopProcessInfo->STATE, utf8string);
                v8::Local<v8::String> STATEValue = Nan::New<v8::String> (pRtnMonitorTopProcessInfo->STATE).ToLocalChecked();
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (STATE), Local<v8::Value>(STATEValue));

                v8::Local<v8::String> STIME = Nan::New<v8::String> ("STIME").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorTopProcessInfo->STIME, utf8string);
                v8::Local<v8::String> STIMEValue = Nan::New<v8::String> (pRtnMonitorTopProcessInfo->STIME).ToLocalChecked();
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (STIME), Local<v8::Value>(STIMEValue));

                v8::Local<v8::String> pWCPU = Nan::New<v8::String> ("pWCPU").ToLocalChecked();
                v8::Local<v8::Number> pWCPUValue = Nan::New<v8::Number> (pRtnMonitorTopProcessInfo->pWCPU);
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (pWCPU), Local<v8::Value>(pWCPUValue));

                v8::Local<v8::String> pCPU = Nan::New<v8::String> ("pCPU").ToLocalChecked();
                v8::Local<v8::Number> pCPUValue = Nan::New<v8::Number> (pRtnMonitorTopProcessInfo->pCPU);
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (pCPU), Local<v8::Value>(pCPUValue));

                v8::Local<v8::String> COMMAND = Nan::New<v8::String> ("COMMAND").ToLocalChecked();
                Gb2312ToUtf8(pRtnMonitorTopProcessInfo->COMMAND, utf8string);
                v8::Local<v8::String> COMMANDValue = Nan::New<v8::String> (pRtnMonitorTopProcessInfo->COMMAND).ToLocalChecked();
                pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (COMMAND), Local<v8::Value>(COMMANDValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnMonitorTopProcessInfo) { 
                params[0] = Local<v8::Value>(pRtnMonitorTopProcessInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnMonitorTopProcessInfo) { 
            delete[] pRtnMonitorTopProcessInfo;
            pRtnMonitorTopProcessInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnMonitorTopProcessInfo: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysInternalTopologyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQrySysInternalTopologyTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQrySysInternalTopologyTopic_trans_callbackNumb: ", g_RspQrySysInternalTopologyTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQrySysInternalTopologyTopic_mutex);

    int dataNumb = g_RspQrySysInternalTopologyTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQrySysInternalTopologyTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQrySysInternalTopologyTopic_trans_dataNumb: ", g_RspQrySysInternalTopologyTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQrySysInternalTopologyTopic_queue.empty()) {
        receivedData.push (g_RspQrySysInternalTopologyTopic_queue.front());
        g_RspQrySysInternalTopologyTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQrySysInternalTopologyTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQrySysInternalTopologyTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysInternalTopologyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQrySysInternalTopologyTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQrySysInternalTopologyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQrySysInternalTopologyTopic").ToLocalChecked());

        CShfeFtdcRspQrySysInternalTopologyField* pRspQrySysInternalTopology = (CShfeFtdcRspQrySysInternalTopologyField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQrySysInternalTopologyJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQrySysInternalTopology) { 
                string utf8string;
                v8::Local<v8::String> InfoType = Nan::New<v8::String> ("InfoType").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysInternalTopology->InfoType, utf8string);
                v8::Local<v8::String> InfoTypeValue = Nan::New<v8::String> (pRspQrySysInternalTopology->InfoType).ToLocalChecked();
                pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (InfoType), Local<v8::Value>(InfoTypeValue));

                v8::Local<v8::String> Node1_ID = Nan::New<v8::String> ("Node1_ID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysInternalTopology->Node1_ID, utf8string);
                v8::Local<v8::String> Node1_IDValue = Nan::New<v8::String> (pRspQrySysInternalTopology->Node1_ID).ToLocalChecked();
                pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (Node1_ID), Local<v8::Value>(Node1_IDValue));

                v8::Local<v8::String> Node1_Info = Nan::New<v8::String> ("Node1_Info").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysInternalTopology->Node1_Info, utf8string);
                v8::Local<v8::String> Node1_InfoValue = Nan::New<v8::String> (pRspQrySysInternalTopology->Node1_Info).ToLocalChecked();
                pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (Node1_Info), Local<v8::Value>(Node1_InfoValue));

                v8::Local<v8::String> LinkInfo = Nan::New<v8::String> ("LinkInfo").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysInternalTopology->LinkInfo, utf8string);
                v8::Local<v8::String> LinkInfoValue = Nan::New<v8::String> (pRspQrySysInternalTopology->LinkInfo).ToLocalChecked();
                pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (LinkInfo), Local<v8::Value>(LinkInfoValue));

                v8::Local<v8::String> LinkState = Nan::New<v8::String> ("LinkState").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysInternalTopology->LinkState, utf8string);
                v8::Local<v8::String> LinkStateValue = Nan::New<v8::String> (pRspQrySysInternalTopology->LinkState).ToLocalChecked();
                pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (LinkState), Local<v8::Value>(LinkStateValue));

                v8::Local<v8::String> Node2_ID = Nan::New<v8::String> ("Node2_ID").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysInternalTopology->Node2_ID, utf8string);
                v8::Local<v8::String> Node2_IDValue = Nan::New<v8::String> (pRspQrySysInternalTopology->Node2_ID).ToLocalChecked();
                pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (Node2_ID), Local<v8::Value>(Node2_IDValue));

                v8::Local<v8::String> Node2_Info = Nan::New<v8::String> ("Node2_Info").ToLocalChecked();
                Gb2312ToUtf8(pRspQrySysInternalTopology->Node2_Info, utf8string);
                v8::Local<v8::String> Node2_InfoValue = Nan::New<v8::String> (pRspQrySysInternalTopology->Node2_Info).ToLocalChecked();
                pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (Node2_Info), Local<v8::Value>(Node2_InfoValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQrySysInternalTopology) { 
                params[0] = Local<v8::Value>(pRspQrySysInternalTopologyJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQrySysInternalTopology) { 
            delete[] pRspQrySysInternalTopology;
            pRspQrySysInternalTopology = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQrySysInternalTopologyTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSysInternalTopologyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnSysInternalTopologyTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnSysInternalTopologyTopic_trans_callbackNumb: ", g_RtnSysInternalTopologyTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnSysInternalTopologyTopic_mutex);

    int dataNumb = g_RtnSysInternalTopologyTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnSysInternalTopologyTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnSysInternalTopologyTopic_trans_dataNumb: ", g_RtnSysInternalTopologyTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnSysInternalTopologyTopic_queue.empty()) {
        receivedData.push (g_RtnSysInternalTopologyTopic_queue.front());
        g_RtnSysInternalTopologyTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnSysInternalTopologyTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnSysInternalTopologyTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSysInternalTopologyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnSysInternalTopologyTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnSysInternalTopologyTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnSysInternalTopologyTopic").ToLocalChecked());

        CShfeFtdcRtnSysInternalTopologyField* pRtnSysInternalTopology = (CShfeFtdcRtnSysInternalTopologyField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnSysInternalTopologyJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnSysInternalTopology) { 
                string utf8string;
                v8::Local<v8::String> InfoType = Nan::New<v8::String> ("InfoType").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysInternalTopology->InfoType, utf8string);
                v8::Local<v8::String> InfoTypeValue = Nan::New<v8::String> (pRtnSysInternalTopology->InfoType).ToLocalChecked();
                pRtnSysInternalTopologyJS->Set(Local<v8::Value> (InfoType), Local<v8::Value>(InfoTypeValue));

                v8::Local<v8::String> Node1_ID = Nan::New<v8::String> ("Node1_ID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysInternalTopology->Node1_ID, utf8string);
                v8::Local<v8::String> Node1_IDValue = Nan::New<v8::String> (pRtnSysInternalTopology->Node1_ID).ToLocalChecked();
                pRtnSysInternalTopologyJS->Set(Local<v8::Value> (Node1_ID), Local<v8::Value>(Node1_IDValue));

                v8::Local<v8::String> Node1_Info = Nan::New<v8::String> ("Node1_Info").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysInternalTopology->Node1_Info, utf8string);
                v8::Local<v8::String> Node1_InfoValue = Nan::New<v8::String> (pRtnSysInternalTopology->Node1_Info).ToLocalChecked();
                pRtnSysInternalTopologyJS->Set(Local<v8::Value> (Node1_Info), Local<v8::Value>(Node1_InfoValue));

                v8::Local<v8::String> LinkInfo = Nan::New<v8::String> ("LinkInfo").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysInternalTopology->LinkInfo, utf8string);
                v8::Local<v8::String> LinkInfoValue = Nan::New<v8::String> (pRtnSysInternalTopology->LinkInfo).ToLocalChecked();
                pRtnSysInternalTopologyJS->Set(Local<v8::Value> (LinkInfo), Local<v8::Value>(LinkInfoValue));

                v8::Local<v8::String> LinkState = Nan::New<v8::String> ("LinkState").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysInternalTopology->LinkState, utf8string);
                v8::Local<v8::String> LinkStateValue = Nan::New<v8::String> (pRtnSysInternalTopology->LinkState).ToLocalChecked();
                pRtnSysInternalTopologyJS->Set(Local<v8::Value> (LinkState), Local<v8::Value>(LinkStateValue));

                v8::Local<v8::String> Node2_ID = Nan::New<v8::String> ("Node2_ID").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysInternalTopology->Node2_ID, utf8string);
                v8::Local<v8::String> Node2_IDValue = Nan::New<v8::String> (pRtnSysInternalTopology->Node2_ID).ToLocalChecked();
                pRtnSysInternalTopologyJS->Set(Local<v8::Value> (Node2_ID), Local<v8::Value>(Node2_IDValue));

                v8::Local<v8::String> Node2_Info = Nan::New<v8::String> ("Node2_Info").ToLocalChecked();
                Gb2312ToUtf8(pRtnSysInternalTopology->Node2_Info, utf8string);
                v8::Local<v8::String> Node2_InfoValue = Nan::New<v8::String> (pRtnSysInternalTopology->Node2_Info).ToLocalChecked();
                pRtnSysInternalTopologyJS->Set(Local<v8::Value> (Node2_Info), Local<v8::Value>(Node2_InfoValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnSysInternalTopology) { 
                params[0] = Local<v8::Value>(pRtnSysInternalTopologyJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnSysInternalTopology) { 
            delete[] pRtnSysInternalTopology;
            pRtnSysInternalTopology = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnSysInternalTopologyTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMemberLinkCostTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryMemberLinkCostTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryMemberLinkCostTopic_trans_callbackNumb: ", g_RspQryMemberLinkCostTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryMemberLinkCostTopic_mutex);

    int dataNumb = g_RspQryMemberLinkCostTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryMemberLinkCostTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryMemberLinkCostTopic_trans_dataNumb: ", g_RspQryMemberLinkCostTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryMemberLinkCostTopic_queue.empty()) {
        receivedData.push (g_RspQryMemberLinkCostTopic_queue.front());
        g_RspQryMemberLinkCostTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryMemberLinkCostTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryMemberLinkCostTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMemberLinkCostTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryMemberLinkCostTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryMemberLinkCostTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryMemberLinkCostTopic").ToLocalChecked());

        CShfeFtdcRspQryMemberLinkCostField* pRspQryMemberLinkCost = (CShfeFtdcRspQryMemberLinkCostField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryMemberLinkCostJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryMemberLinkCost) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryMemberLinkCost->OperationType);
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryMemberLinkCost->ID);
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemberLinkCost->ParticipantName, utf8string);
                v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (pRspQryMemberLinkCost->ParticipantName).ToLocalChecked();
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemberLinkCost->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRspQryMemberLinkCost->DDN_NO).ToLocalChecked();
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> ServiceProvider = Nan::New<v8::String> ("ServiceProvider").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemberLinkCost->ServiceProvider, utf8string);
                v8::Local<v8::String> ServiceProviderValue = Nan::New<v8::String> (pRspQryMemberLinkCost->ServiceProvider).ToLocalChecked();
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (ServiceProvider), Local<v8::Value>(ServiceProviderValue));

                v8::Local<v8::String> Pay_Date = Nan::New<v8::String> ("Pay_Date").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemberLinkCost->Pay_Date, utf8string);
                v8::Local<v8::String> Pay_DateValue = Nan::New<v8::String> (pRspQryMemberLinkCost->Pay_Date).ToLocalChecked();
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (Pay_Date), Local<v8::Value>(Pay_DateValue));

                v8::Local<v8::String> B_Pay_Date = Nan::New<v8::String> ("B_Pay_Date").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemberLinkCost->B_Pay_Date, utf8string);
                v8::Local<v8::String> B_Pay_DateValue = Nan::New<v8::String> (pRspQryMemberLinkCost->B_Pay_Date).ToLocalChecked();
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (B_Pay_Date), Local<v8::Value>(B_Pay_DateValue));

                v8::Local<v8::String> D_Pay_Date = Nan::New<v8::String> ("D_Pay_Date").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemberLinkCost->D_Pay_Date, utf8string);
                v8::Local<v8::String> D_Pay_DateValue = Nan::New<v8::String> (pRspQryMemberLinkCost->D_Pay_Date).ToLocalChecked();
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (D_Pay_Date), Local<v8::Value>(D_Pay_DateValue));

                v8::Local<v8::String> Charge = Nan::New<v8::String> ("Charge").ToLocalChecked();
                v8::Local<v8::Integer> ChargeValue = Nan::New<v8::Integer> (pRspQryMemberLinkCost->Charge);
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (Charge), Local<v8::Value>(ChargeValue));

                v8::Local<v8::String> Fee_Type = Nan::New<v8::String> ("Fee_Type").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemberLinkCost->Fee_Type, utf8string);
                v8::Local<v8::String> Fee_TypeValue = Nan::New<v8::String> (pRspQryMemberLinkCost->Fee_Type).ToLocalChecked();
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (Fee_Type), Local<v8::Value>(Fee_TypeValue));

                v8::Local<v8::String> Pro = Nan::New<v8::String> ("Pro").ToLocalChecked();
                Gb2312ToUtf8(pRspQryMemberLinkCost->Pro, utf8string);
                v8::Local<v8::String> ProValue = Nan::New<v8::String> (pRspQryMemberLinkCost->Pro).ToLocalChecked();
                pRspQryMemberLinkCostJS->Set(Local<v8::Value> (Pro), Local<v8::Value>(ProValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryMemberLinkCost) { 
                params[0] = Local<v8::Value>(pRspQryMemberLinkCostJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryMemberLinkCost) { 
            delete[] pRspQryMemberLinkCost;
            pRspQryMemberLinkCost = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryMemberLinkCostTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMemberLinkCostTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnMemberLinkCostTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnMemberLinkCostTopic_trans_callbackNumb: ", g_RtnMemberLinkCostTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnMemberLinkCostTopic_mutex);

    int dataNumb = g_RtnMemberLinkCostTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnMemberLinkCostTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnMemberLinkCostTopic_trans_dataNumb: ", g_RtnMemberLinkCostTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnMemberLinkCostTopic_queue.empty()) {
        receivedData.push (g_RtnMemberLinkCostTopic_queue.front());
        g_RtnMemberLinkCostTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnMemberLinkCostTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnMemberLinkCostTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMemberLinkCostTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnMemberLinkCostTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnMemberLinkCostTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnMemberLinkCostTopic").ToLocalChecked());

        CShfeFtdcRtnMemberLinkCostField* pRtnMemberLinkCost = (CShfeFtdcRtnMemberLinkCostField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnMemberLinkCostJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnMemberLinkCost) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnMemberLinkCost->OperationType);
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnMemberLinkCost->ID);
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemberLinkCost->ParticipantName, utf8string);
                v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (pRtnMemberLinkCost->ParticipantName).ToLocalChecked();
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemberLinkCost->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRtnMemberLinkCost->DDN_NO).ToLocalChecked();
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> ServiceProvider = Nan::New<v8::String> ("ServiceProvider").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemberLinkCost->ServiceProvider, utf8string);
                v8::Local<v8::String> ServiceProviderValue = Nan::New<v8::String> (pRtnMemberLinkCost->ServiceProvider).ToLocalChecked();
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (ServiceProvider), Local<v8::Value>(ServiceProviderValue));

                v8::Local<v8::String> Pay_Date = Nan::New<v8::String> ("Pay_Date").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemberLinkCost->Pay_Date, utf8string);
                v8::Local<v8::String> Pay_DateValue = Nan::New<v8::String> (pRtnMemberLinkCost->Pay_Date).ToLocalChecked();
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (Pay_Date), Local<v8::Value>(Pay_DateValue));

                v8::Local<v8::String> B_Pay_Date = Nan::New<v8::String> ("B_Pay_Date").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemberLinkCost->B_Pay_Date, utf8string);
                v8::Local<v8::String> B_Pay_DateValue = Nan::New<v8::String> (pRtnMemberLinkCost->B_Pay_Date).ToLocalChecked();
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (B_Pay_Date), Local<v8::Value>(B_Pay_DateValue));

                v8::Local<v8::String> D_Pay_Date = Nan::New<v8::String> ("D_Pay_Date").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemberLinkCost->D_Pay_Date, utf8string);
                v8::Local<v8::String> D_Pay_DateValue = Nan::New<v8::String> (pRtnMemberLinkCost->D_Pay_Date).ToLocalChecked();
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (D_Pay_Date), Local<v8::Value>(D_Pay_DateValue));

                v8::Local<v8::String> Charge = Nan::New<v8::String> ("Charge").ToLocalChecked();
                v8::Local<v8::Integer> ChargeValue = Nan::New<v8::Integer> (pRtnMemberLinkCost->Charge);
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (Charge), Local<v8::Value>(ChargeValue));

                v8::Local<v8::String> Fee_Type = Nan::New<v8::String> ("Fee_Type").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemberLinkCost->Fee_Type, utf8string);
                v8::Local<v8::String> Fee_TypeValue = Nan::New<v8::String> (pRtnMemberLinkCost->Fee_Type).ToLocalChecked();
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (Fee_Type), Local<v8::Value>(Fee_TypeValue));

                v8::Local<v8::String> Pro = Nan::New<v8::String> ("Pro").ToLocalChecked();
                Gb2312ToUtf8(pRtnMemberLinkCost->Pro, utf8string);
                v8::Local<v8::String> ProValue = Nan::New<v8::String> (pRtnMemberLinkCost->Pro).ToLocalChecked();
                pRtnMemberLinkCostJS->Set(Local<v8::Value> (Pro), Local<v8::Value>(ProValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnMemberLinkCost) { 
                params[0] = Local<v8::Value>(pRtnMemberLinkCostJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnMemberLinkCost) { 
            delete[] pRtnMemberLinkCost;
            pRtnMemberLinkCost = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnMemberLinkCostTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPartylinkMonthlyRentTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetPartylinkMonthlyRentTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetPartylinkMonthlyRentTopic_trans_callbackNumb: ", g_RspQryNetPartylinkMonthlyRentTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetPartylinkMonthlyRentTopic_mutex);

    int dataNumb = g_RspQryNetPartylinkMonthlyRentTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetPartylinkMonthlyRentTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetPartylinkMonthlyRentTopic_trans_dataNumb: ", g_RspQryNetPartylinkMonthlyRentTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetPartylinkMonthlyRentTopic_queue.empty()) {
        receivedData.push (g_RspQryNetPartylinkMonthlyRentTopic_queue.front());
        g_RspQryNetPartylinkMonthlyRentTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetPartylinkMonthlyRentTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetPartylinkMonthlyRentTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPartylinkMonthlyRentTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetPartylinkMonthlyRentTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetPartylinkMonthlyRentTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetPartylinkMonthlyRentTopic").ToLocalChecked());

        CShfeFtdcRspQryNetPartylinkMonthlyRentField* pRspQryNetPartylinkMonthlyRent = (CShfeFtdcRspQryNetPartylinkMonthlyRentField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetPartylinkMonthlyRentJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetPartylinkMonthlyRent) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPartylinkMonthlyRent->OperationType);
                pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPartylinkMonthlyRent->ID);
                pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> LineName = Nan::New<v8::String> ("LineName").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartylinkMonthlyRent->LineName, utf8string);
                v8::Local<v8::String> LineNameValue = Nan::New<v8::String> (pRspQryNetPartylinkMonthlyRent->LineName).ToLocalChecked();
                pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (LineName), Local<v8::Value>(LineNameValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartylinkMonthlyRent->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRspQryNetPartylinkMonthlyRent->DDN_NO).ToLocalChecked();
                pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> ServiceProvider = Nan::New<v8::String> ("ServiceProvider").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartylinkMonthlyRent->ServiceProvider, utf8string);
                v8::Local<v8::String> ServiceProviderValue = Nan::New<v8::String> (pRspQryNetPartylinkMonthlyRent->ServiceProvider).ToLocalChecked();
                pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (ServiceProvider), Local<v8::Value>(ServiceProviderValue));

                v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRspQryNetPartylinkMonthlyRent->MonthlyRental);
                pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                v8::Local<v8::String> Remark = Nan::New<v8::String> ("Remark").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetPartylinkMonthlyRent->Remark, utf8string);
                v8::Local<v8::String> RemarkValue = Nan::New<v8::String> (pRspQryNetPartylinkMonthlyRent->Remark).ToLocalChecked();
                pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (Remark), Local<v8::Value>(RemarkValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetPartylinkMonthlyRent) { 
                params[0] = Local<v8::Value>(pRspQryNetPartylinkMonthlyRentJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetPartylinkMonthlyRent) { 
            delete[] pRspQryNetPartylinkMonthlyRent;
            pRspQryNetPartylinkMonthlyRent = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetPartylinkMonthlyRentTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPartylinkMonthlyRentTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetPartylinkMonthlyRentTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetPartylinkMonthlyRentTopic_trans_callbackNumb: ", g_RtnNetPartylinkMonthlyRentTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetPartylinkMonthlyRentTopic_mutex);

    int dataNumb = g_RtnNetPartylinkMonthlyRentTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetPartylinkMonthlyRentTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetPartylinkMonthlyRentTopic_trans_dataNumb: ", g_RtnNetPartylinkMonthlyRentTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetPartylinkMonthlyRentTopic_queue.empty()) {
        receivedData.push (g_RtnNetPartylinkMonthlyRentTopic_queue.front());
        g_RtnNetPartylinkMonthlyRentTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetPartylinkMonthlyRentTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetPartylinkMonthlyRentTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPartylinkMonthlyRentTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetPartylinkMonthlyRentTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetPartylinkMonthlyRentTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetPartylinkMonthlyRentTopic").ToLocalChecked());

        CShfeFtdcRtnNetPartylinkMonthlyRentField* pRtnNetPartylinkMonthlyRent = (CShfeFtdcRtnNetPartylinkMonthlyRentField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetPartylinkMonthlyRentJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetPartylinkMonthlyRent) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPartylinkMonthlyRent->OperationType);
                pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPartylinkMonthlyRent->ID);
                pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> LineName = Nan::New<v8::String> ("LineName").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartylinkMonthlyRent->LineName, utf8string);
                v8::Local<v8::String> LineNameValue = Nan::New<v8::String> (pRtnNetPartylinkMonthlyRent->LineName).ToLocalChecked();
                pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (LineName), Local<v8::Value>(LineNameValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartylinkMonthlyRent->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRtnNetPartylinkMonthlyRent->DDN_NO).ToLocalChecked();
                pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> ServiceProvider = Nan::New<v8::String> ("ServiceProvider").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartylinkMonthlyRent->ServiceProvider, utf8string);
                v8::Local<v8::String> ServiceProviderValue = Nan::New<v8::String> (pRtnNetPartylinkMonthlyRent->ServiceProvider).ToLocalChecked();
                pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (ServiceProvider), Local<v8::Value>(ServiceProviderValue));

                v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRtnNetPartylinkMonthlyRent->MonthlyRental);
                pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                v8::Local<v8::String> Remark = Nan::New<v8::String> ("Remark").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetPartylinkMonthlyRent->Remark, utf8string);
                v8::Local<v8::String> RemarkValue = Nan::New<v8::String> (pRtnNetPartylinkMonthlyRent->Remark).ToLocalChecked();
                pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (Remark), Local<v8::Value>(RemarkValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetPartylinkMonthlyRent) { 
                params[0] = Local<v8::Value>(pRtnNetPartylinkMonthlyRentJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetPartylinkMonthlyRent) { 
            delete[] pRtnNetPartylinkMonthlyRent;
            pRtnNetPartylinkMonthlyRent = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetPartylinkMonthlyRentTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetNonPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RspQryNetNonPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RspQryNetNonPartyLinkInfoTopic_trans_callbackNumb: ", g_RspQryNetNonPartyLinkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RspQryNetNonPartyLinkInfoTopic_mutex);

    int dataNumb = g_RspQryNetNonPartyLinkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RspQryNetNonPartyLinkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RspQryNetNonPartyLinkInfoTopic_trans_dataNumb: ", g_RspQryNetNonPartyLinkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RspQryNetNonPartyLinkInfoTopic_queue.empty()) {
        receivedData.push (g_RspQryNetNonPartyLinkInfoTopic_queue.front());
        g_RspQryNetNonPartyLinkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RspQryNetNonPartyLinkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RspQryNetNonPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetNonPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RspQryNetNonPartyLinkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RspQryNetNonPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRspQryNetNonPartyLinkInfoTopic").ToLocalChecked());

        CShfeFtdcRspQryNetNonPartyLinkInfoField* pRspQryNetNonPartyLinkInfo = (CShfeFtdcRspQryNetNonPartyLinkInfoField*)(paramArray[0]);
        CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[1]);
        int* pRequestID = (int*)paramArray[2];
        bool* pIsLastNew = (bool*)paramArray[3];

        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRspQryNetNonPartyLinkInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
            v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
            v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
            
            if (NULL != pRspQryNetNonPartyLinkInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetNonPartyLinkInfo->OperationType);
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetNonPartyLinkInfo->ID);
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->MEMBER_NO, utf8string);
                v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->MEMBER_NO).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->MEMBER_NAME, utf8string);
                v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->REMOTE_ADDR, utf8string);
                v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->LOCAL_ADDR, utf8string);
                v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->ADDRESS, utf8string);
                v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->ADDRESS).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->LINE_STATUS, utf8string);
                v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->LINE_STATUS).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->CONTACT, utf8string);
                v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->CONTACT).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->TELEPHONE, utf8string);
                v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->TELEPHONE).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->MOBILEPHONE, utf8string);
                v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->EMAIL, utf8string);
                v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->EMAIL).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->FAX, utf8string);
                v8::Local<v8::String> FAXValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->FAX).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->PROVINCE, utf8string);
                v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->PROVINCE).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->DDN_NO).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IN_MODE, utf8string);
                v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->IN_MODE).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IP_WAN, utf8string);
                v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->IP_WAN).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IP_LAN, utf8string);
                v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->IP_LAN).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->IPADDR).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->Interface, utf8string);
                v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->Interface).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->INTERFACE_DATE, utf8string);
                v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->SOFTWARE, utf8string);
                v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->SOFTWARE).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->FEE_TYPE, utf8string);
                v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->FEE_TYPE).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->SERVICEPROVIDER, utf8string);
                v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IF_ZIYING, utf8string);
                v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->IF_ZIYING).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IF_TUOGUAN, utf8string);
                v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->HASOTHER, utf8string);
                v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->HASOTHER).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->SEAT_NO, utf8string);
                v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->SEAT_NO).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->PRO, utf8string);
                v8::Local<v8::String> PROValue = Nan::New<v8::String> (pRspQryNetNonPartyLinkInfo->PRO).ToLocalChecked();
                pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

            };

			if (NULL != pRspInfo){
				v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
				v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
				pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
					
				v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
				v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
				pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			}            

            v8::Local<v8::Value> params[4];
            if (NULL != pRspQryNetNonPartyLinkInfo) { 
                params[0] = Local<v8::Value>(pRspQryNetNonPartyLinkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

            if (NULL != pRspInfo) {
                params[1] = Local<v8::Value>(pRspInfoJS);
            } else {
                params[1] = Local<v8::Value>(Nan::Undefined());
            }
            params[2] = Local<v8::Value>(nRequestIDJS);
            params[3] = Local<v8::Value>(nIsLastNewJS);
			
            callback.Call(4, params);

        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRspQryNetNonPartyLinkInfo) { 
            delete[] pRspQryNetNonPartyLinkInfo;
            pRspQryNetNonPartyLinkInfo = NULL;
        }

        if (NULL != pRspInfo) {
           delete []pRspInfo;
           pRspInfo = NULL;
        }       
        
        if (NULL != pRequestID) {
           delete []pRequestID;
           pRequestID = NULL;
        }  
        
        if (NULL != pIsLastNew) {
           delete []pIsLastNew;
           pIsLastNew = NULL;
        }  

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RspQryNetNonPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetNonPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** spi-transform:: RtnNetNonPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    OutputCallbackMessage("g_RtnNetNonPartyLinkInfoTopic_trans_callbackNumb: ", g_RtnNetNonPartyLinkInfoTopic_trans_callbackNumb++, g_RunningResult_File);

    // 将全局队列数据转存到 receivedData 进行处理;
    queue<void**> receivedData;
    uv_mutex_lock (&g_RtnNetNonPartyLinkInfoTopic_mutex);

    int dataNumb = g_RtnNetNonPartyLinkInfoTopic_queue.size();
    OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
    g_RtnNetNonPartyLinkInfoTopic_trans_dataNumb += dataNumb;
    OutputCallbackMessage("g_RtnNetNonPartyLinkInfoTopic_trans_dataNumb: ", g_RtnNetNonPartyLinkInfoTopic_trans_dataNumb, g_RunningResult_File);

    while (!g_RtnNetNonPartyLinkInfoTopic_queue.empty()) {
        receivedData.push (g_RtnNetNonPartyLinkInfoTopic_queue.front());
        g_RtnNetNonPartyLinkInfoTopic_queue.pop();
    }
    uv_mutex_unlock (&g_RtnNetNonPartyLinkInfoTopic_mutex);

    while ( !receivedData.empty() ) {
        void** paramArray = receivedData.front();
        receivedData.pop();

        // 检测队列中的数据是否为空!
        if (NULL == paramArray ) {
            OutputCallbackMessage ("spi-transform::Delivered RtnNetNonPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetNonPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        Nan::HandleScope scope;
        if (SpiObj.IsEmpty()) {
            OutputCallbackMessage ("spi-transform::RtnNetNonPartyLinkInfoTopicSpiObi is Empty", g_RunningResult_File);
            OutputCallbackMessage ("****** spi-transform:: RtnNetNonPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
            return;
        }

        v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(SpiObj);
        v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get (Nan::New<v8::String> ("OnRtnNetNonPartyLinkInfoTopic").ToLocalChecked());

        CShfeFtdcRtnNetNonPartyLinkInfoField* pRtnNetNonPartyLinkInfo = (CShfeFtdcRtnNetNonPartyLinkInfoField*)(paramArray[0]);
        if (OnFrontConnected->IsFunction()) {

            v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnFrontConnected);
            Nan::Callback callback(function);

            v8::Local<v8::Object> pRtnNetNonPartyLinkInfoJS = Nan::New<v8::Object>();
            
            if (NULL != pRtnNetNonPartyLinkInfo) { 
                string utf8string;
                v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetNonPartyLinkInfo->OperationType);
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetNonPartyLinkInfo->ID);
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->MEMBER_NO, utf8string);
                v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->MEMBER_NO).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->MEMBER_NAME, utf8string);
                v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->REMOTE_ADDR, utf8string);
                v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->LOCAL_ADDR, utf8string);
                v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->ADDRESS, utf8string);
                v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->ADDRESS).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->LINE_STATUS, utf8string);
                v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->LINE_STATUS).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->CONTACT, utf8string);
                v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->CONTACT).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->TELEPHONE, utf8string);
                v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->TELEPHONE).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->MOBILEPHONE, utf8string);
                v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->EMAIL, utf8string);
                v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->EMAIL).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->FAX, utf8string);
                v8::Local<v8::String> FAXValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->FAX).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->PROVINCE, utf8string);
                v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->PROVINCE).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->DDN_NO, utf8string);
                v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->DDN_NO).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IN_MODE, utf8string);
                v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->IN_MODE).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IP_WAN, utf8string);
                v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->IP_WAN).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IP_LAN, utf8string);
                v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->IP_LAN).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IPADDR, utf8string);
                v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->IPADDR).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->Interface, utf8string);
                v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->Interface).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->INTERFACE_DATE, utf8string);
                v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->SOFTWARE, utf8string);
                v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->SOFTWARE).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->FEE_TYPE, utf8string);
                v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->FEE_TYPE).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->SERVICEPROVIDER, utf8string);
                v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IF_ZIYING, utf8string);
                v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->IF_ZIYING).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IF_TUOGUAN, utf8string);
                v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->HASOTHER, utf8string);
                v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->HASOTHER).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->SEAT_NO, utf8string);
                v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->SEAT_NO).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->PRO, utf8string);
                v8::Local<v8::String> PROValue = Nan::New<v8::String> (pRtnNetNonPartyLinkInfo->PRO).ToLocalChecked();
                pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

            };
            

            v8::Local<v8::Value> params[1];
            if (NULL != pRtnNetNonPartyLinkInfo) { 
                params[0] = Local<v8::Value>(pRtnNetNonPartyLinkInfoJS);
            } else { 
                params[0] = Local<v8::Value>(Nan::Undefined());
            };

			callback.Call(1, params);
			
        } // OnFrontConnected->IsFunction() end!

        if (NULL != pRtnNetNonPartyLinkInfo) { 
            delete[] pRtnNetNonPartyLinkInfo;
            pRtnNetNonPartyLinkInfo = NULL;
        }

        if (NULL != paramArray) {
           delete []paramArray;
           paramArray = NULL;
        }       
    } // while() end!;
    OutputCallbackMessage("****** spi-transform:: RtnNetNonPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

