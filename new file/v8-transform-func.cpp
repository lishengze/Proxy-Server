#include "v8-transform-data.h"
#include "v8-transform-func.h"
#include "FtdcSysUserApiStruct.h"
#include "tool-function.h"
#include "id-func.h"
#include <fstream>
#include <queue>
#include <map>
#include <vector>
#include <string>
using std::queue;
using std::map;
using std::vector;
using std::fstream;
using std::string;

using namespace v8;

#ifdef linux
#include "charset-convert-linux.h"
#endif

#ifdef __WINDOWS_
#include "charset-convert-windows.h"
#endif

#ifdef _WIN32
#include "charset-convert-windows.h"
#endif

extern fstream g_RunningResult_File;

void OnFrontConnected(uv_async_t *handle)
{   
    OutputCallbackMessage ("\n****** v8-transform-func:: OnFrontConnected: START! ******", g_RunningResult_File);
    uv_mutex_lock(&g_FrontConnected_mutex);
    
    int ioUserNumb = g_FrontConnected_IOUser_vec.size();
    queue<void**>* pReceivedData = new queue<void**>[ioUserNumb];
    
    if (NULL == pReceivedData) {
          OutputCallbackMessage ("v8-transform-func::pReceivedData is NULL", g_RunningResult_File);
          OutputCallbackMessage ("****** v8-transform-func:: OnFrontConnected: END! ******\n", g_RunningResult_File);
          return;       
    }
     
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_FrontConnected_IOUser_vec.begin();
        it != g_FrontConnected_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_FrontConnected_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);        
        while (!g_FrontConnected_Data_map[*it].empty()) {
            pReceivedData[i].push(g_FrontConnected_Data_map[*it].front());
            g_FrontConnected_Data_map[*it].pop();
        }
    }
    g_FrontConnected_IOUser_vec.clear();
    
    uv_mutex_unlock(&g_FrontConnected_mutex);
    
    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) { 
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();
        
            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered OnFrontConnected paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: OnFrontConnected: END! ******\n", g_RunningResult_File);
                return;
            }
        
            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
        
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: OnFrontConnected: END! ******\n", g_RunningResult_File);
                return;
            }
            
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);
            v8::Local<v8::Value> OnFrontConnected = localSpiObj->Get(Nan::New<v8::String>("OnFrontConnected").ToLocalChecked());
            if(OnFrontConnected->IsFunction())
            {
                v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
                Nan::Callback callback(function);
                callback.Call(localSpiObj, 0, 0);
            } else {
                cout << "OnFrontConnected is not function!" << endl;
                OutputCallbackMessage ("OnFrontConnected is not function!", g_RunningResult_File);
            }
        
            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }            
        }                    
    }
    
    if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
    }

    OutputCallbackMessage ("****** v8-transform-func:: OnFrontConnected: END! ******\n", g_RunningResult_File);
}

void OnFrontDisconnected(uv_async_t *handle) {
    OutputCallbackMessage ("\n****** v8-transform-func:: OnFrontDisconnected: START! ******", g_RunningResult_File);
   
    uv_mutex_lock(&g_FrontDisconnected_mutex);
    int ioUserNumb = g_FrontDisconnected_IOUser_vec.size();
    queue<void**>* pReceivedData = new queue<void**>[ioUserNumb];
    
    if (NULL == pReceivedData) {
          OutputCallbackMessage ("v8-transform-func::pReceivedData is NULL", g_RunningResult_File);
          OutputCallbackMessage ("****** v8-transform-func:: OnFrontDisconnected: END! ******\n", g_RunningResult_File);
          return;       
    }
     
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_FrontDisconnected_IOUser_vec.begin();
        it != g_FrontDisconnected_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_FrontDisconnected_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);        
        while (!g_FrontDisconnected_Data_map[*it].empty()) {
            pReceivedData[i].push(g_FrontDisconnected_Data_map[*it].front());
            g_FrontDisconnected_Data_map[*it].pop();
        }
        ReAllocateID(*it);
    }
    g_FrontDisconnected_IOUser_vec.clear();
    
    uv_mutex_unlock(&g_FrontDisconnected_mutex);
    
    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) { 
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();
            
            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered OnFrontDisconnected paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: OnFrontDisconnected: END! ******\n", g_RunningResult_File);
                return;
            }
        
            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: OnFrontDisconnected: END! ******\n", g_RunningResult_File);
                return;
            }
            
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);
            v8::Local<v8::Value> OnFrontDisconnected = localSpiObj->Get(Nan::New<v8::String>("OnFrontDisconnected").ToLocalChecked());
            
            int* pnReason = (int*)paramArray[1];
            if(OnFrontDisconnected->IsFunction())
            {
                v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontDisconnected);
                Nan::Callback callback(function);          
                
                v8::Local<v8::Integer> nReasonJS=Nan::New<v8::Integer>(*pnReason);
                v8::Local<v8::Value> param[1];
                param[0]=Local<v8::Value>(nReasonJS);
                    
                callback.Call(localSpiObj, 1, param);
            } else {
                OutputCallbackMessage ("OnFrontDisconnected is not function!", g_RunningResult_File);
            }
        
            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            
            if (NULL != pnReason) {
                delete pnReason;
                pnReason = NULL;
            }
        
        }
            
    }
    
    if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
    }      
    
    OutputCallbackMessage ("****** v8-transform-func:: OnFrontDisconnected: END! ******\n", g_RunningResult_File);
}

void OnHeartBeatWarning(uv_async_t *handle)
{
    OutputCallbackMessage ("\n****** v8-transform-func:: OnHeartBeatWarning: START! ******", g_RunningResult_File);
    
    uv_mutex_lock(&g_HeartBeatWarning_mutex);
    int ioUserNumb = g_HeartBeatWarning_IOUser_vec.size();
    queue<void**>* pReceivedData = new queue<void**>[ioUserNumb];
    
    if (NULL == pReceivedData) {
          OutputCallbackMessage ("v8-transform-func::pReceivedData is NULL", g_RunningResult_File);
          OutputCallbackMessage ("****** v8-transform-func:: OnHeartBeatWarning: END! ******\n", g_RunningResult_File);
          return;       
    }
     
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_HeartBeatWarning_IOUser_vec.begin();
        it != g_HeartBeatWarning_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_HeartBeatWarning_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);        
        while (!g_HeartBeatWarning_Data_map[*it].empty()) {
            pReceivedData[i].push(g_HeartBeatWarning_Data_map[*it].front());
            g_HeartBeatWarning_Data_map[*it].pop();
        }
    }
    g_HeartBeatWarning_IOUser_vec.clear();
    
    uv_mutex_unlock(&g_HeartBeatWarning_mutex);
    
    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) { 
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();       

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered OnHeartBeatWarning paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: OnHeartBeatWarning: END! ******\n", g_RunningResult_File);
                return;
            }
        
            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: OnHeartBeatWarning: END! ******\n", g_RunningResult_File);
                return;
            }
            
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);
            v8::Local<v8::Value> OnHeartBeatWarning = localSpiObj->Get(Nan::New<v8::String>("OnHeartBeatWarning").ToLocalChecked());
            
            int* pnTimeLapse = (int*)paramArray[1];
            if(OnHeartBeatWarning->IsFunction())
            {
                v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnHeartBeatWarning);
                Nan::Callback callback(function);          
                
                v8::Local<v8::Integer> nTimeLapseJS=Nan::New<v8::Integer>(*pnTimeLapse);
                v8::Local<v8::Value> param[1];
                param[0]=Local<v8::Value>(nTimeLapseJS);
                    
                callback.Call(localSpiObj, 1, param);
            } else {
                OutputCallbackMessage ("localSpi OnHeartBeatWarning is not function!", g_RunningResult_File);
            }
        
            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            
            if (NULL != pnTimeLapse) {
                delete pnTimeLapse;
                pnTimeLapse = NULL;
            }            
        }       
    }
    
    if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
    }
    
    OutputCallbackMessage ("****** v8-transform-func:: OnHeartBeatWarning: END! ******\n", g_RunningResult_File);   
}

void OnRspQryTopCpuInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTopCpuInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTopCpuInfoTopic_mutex);

    int ioUserNumb = g_RspQryTopCpuInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTopCpuInfoTopic_IOUser_vec.begin();
        it != g_RspQryTopCpuInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTopCpuInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTopCpuInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTopCpuInfoTopic_Data_map[*it].front());
            g_RspQryTopCpuInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTopCpuInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTopCpuInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTopCpuInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTopCpuInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTopCpuInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTopCpuInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryTopCpuInfoField* pRspQryTopCpuInfo = (CShfeFtdcRspQryTopCpuInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTopCpuInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTopCpuInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTopCpuInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTopCpuInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopCpuInfo->HostName);
                    Gb2312ToUtf8(pRspQryTopCpuInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopCpuInfo->MonDate);
                    Gb2312ToUtf8(pRspQryTopCpuInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopCpuInfo->MonTime);
                    Gb2312ToUtf8(pRspQryTopCpuInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopCpuInfo->CPU);
                    Gb2312ToUtf8(pRspQryTopCpuInfo->CPU, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CPUValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                    v8::Local<v8::String> LOAD = Nan::New<v8::String> ("LOAD").ToLocalChecked();
                    v8::Local<v8::Number> LOADValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->LOAD);
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (LOAD), Local<v8::Value>(LOADValue));

                    v8::Local<v8::String> USER = Nan::New<v8::String> ("USER").ToLocalChecked();
                    v8::Local<v8::Number> USERValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->USER);
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (USER), Local<v8::Value>(USERValue));

                    v8::Local<v8::String> NICE = Nan::New<v8::String> ("NICE").ToLocalChecked();
                    v8::Local<v8::Number> NICEValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->NICE);
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (NICE), Local<v8::Value>(NICEValue));

                    v8::Local<v8::String> SYS = Nan::New<v8::String> ("SYS").ToLocalChecked();
                    v8::Local<v8::Number> SYSValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->SYS);
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (SYS), Local<v8::Value>(SYSValue));

                    v8::Local<v8::String> IDLE = Nan::New<v8::String> ("IDLE").ToLocalChecked();
                    v8::Local<v8::Number> IDLEValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->IDLE);
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (IDLE), Local<v8::Value>(IDLEValue));

                    v8::Local<v8::String> BLOCK = Nan::New<v8::String> ("BLOCK").ToLocalChecked();
                    v8::Local<v8::Number> BLOCKValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->BLOCK);
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (BLOCK), Local<v8::Value>(BLOCKValue));

                    v8::Local<v8::String> SWAIT = Nan::New<v8::String> ("SWAIT").ToLocalChecked();
                    v8::Local<v8::Number> SWAITValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->SWAIT);
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (SWAIT), Local<v8::Value>(SWAITValue));

                    v8::Local<v8::String> INTR = Nan::New<v8::String> ("INTR").ToLocalChecked();
                    v8::Local<v8::Number> INTRValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->INTR);
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (INTR), Local<v8::Value>(INTRValue));

                    v8::Local<v8::String> SSYS = Nan::New<v8::String> ("SSYS").ToLocalChecked();
                    v8::Local<v8::Number> SSYSValue = Nan::New<v8::Number> (pRspQryTopCpuInfo->SSYS);
                    pRspQryTopCpuInfoJS->Set(Local<v8::Value> (SSYS), Local<v8::Value>(SSYSValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTopCpuInfo) { 
                    params[0] = Local<v8::Value>(pRspQryTopCpuInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTopCpuInfo) { 
                delete pRspQryTopCpuInfo;
                pRspQryTopCpuInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTopCpuInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTopCpuInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnTopCpuInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnTopCpuInfoTopic_mutex);

    int ioUserNumb = g_RtnTopCpuInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnTopCpuInfoTopic_IOUser_vec.begin();
        it != g_RtnTopCpuInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnTopCpuInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnTopCpuInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnTopCpuInfoTopic_Data_map[*it].front());
            g_RtnTopCpuInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnTopCpuInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnTopCpuInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnTopCpuInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnTopCpuInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnTopCpuInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnTopCpuInfoTopic").ToLocalChecked());
            CShfeFtdcRtnTopCpuInfoField* pRtnTopCpuInfo = (CShfeFtdcRtnTopCpuInfoField*)(paramArray[1]);
            if (OnRtnTopCpuInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnTopCpuInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnTopCpuInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnTopCpuInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopCpuInfo->HostName);
                    Gb2312ToUtf8(pRtnTopCpuInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopCpuInfo->MonDate);
                    Gb2312ToUtf8(pRtnTopCpuInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopCpuInfo->MonTime);
                    Gb2312ToUtf8(pRtnTopCpuInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopCpuInfo->CPU);
                    Gb2312ToUtf8(pRtnTopCpuInfo->CPU, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CPUValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                    v8::Local<v8::String> LOAD = Nan::New<v8::String> ("LOAD").ToLocalChecked();
                    v8::Local<v8::Number> LOADValue = Nan::New<v8::Number> (pRtnTopCpuInfo->LOAD);
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (LOAD), Local<v8::Value>(LOADValue));

                    v8::Local<v8::String> USER = Nan::New<v8::String> ("USER").ToLocalChecked();
                    v8::Local<v8::Number> USERValue = Nan::New<v8::Number> (pRtnTopCpuInfo->USER);
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (USER), Local<v8::Value>(USERValue));

                    v8::Local<v8::String> NICE = Nan::New<v8::String> ("NICE").ToLocalChecked();
                    v8::Local<v8::Number> NICEValue = Nan::New<v8::Number> (pRtnTopCpuInfo->NICE);
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (NICE), Local<v8::Value>(NICEValue));

                    v8::Local<v8::String> SYS = Nan::New<v8::String> ("SYS").ToLocalChecked();
                    v8::Local<v8::Number> SYSValue = Nan::New<v8::Number> (pRtnTopCpuInfo->SYS);
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (SYS), Local<v8::Value>(SYSValue));

                    v8::Local<v8::String> IDLE = Nan::New<v8::String> ("IDLE").ToLocalChecked();
                    v8::Local<v8::Number> IDLEValue = Nan::New<v8::Number> (pRtnTopCpuInfo->IDLE);
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (IDLE), Local<v8::Value>(IDLEValue));

                    v8::Local<v8::String> BLOCK = Nan::New<v8::String> ("BLOCK").ToLocalChecked();
                    v8::Local<v8::Number> BLOCKValue = Nan::New<v8::Number> (pRtnTopCpuInfo->BLOCK);
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (BLOCK), Local<v8::Value>(BLOCKValue));

                    v8::Local<v8::String> SWAIT = Nan::New<v8::String> ("SWAIT").ToLocalChecked();
                    v8::Local<v8::Number> SWAITValue = Nan::New<v8::Number> (pRtnTopCpuInfo->SWAIT);
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (SWAIT), Local<v8::Value>(SWAITValue));

                    v8::Local<v8::String> INTR = Nan::New<v8::String> ("INTR").ToLocalChecked();
                    v8::Local<v8::Number> INTRValue = Nan::New<v8::Number> (pRtnTopCpuInfo->INTR);
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (INTR), Local<v8::Value>(INTRValue));

                    v8::Local<v8::String> SSYS = Nan::New<v8::String> ("SSYS").ToLocalChecked();
                    v8::Local<v8::Number> SSYSValue = Nan::New<v8::Number> (pRtnTopCpuInfo->SSYS);
                    pRtnTopCpuInfoJS->Set(Local<v8::Value> (SSYS), Local<v8::Value>(SSYSValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnTopCpuInfo) { 
                    params[0] = Local<v8::Value>(pRtnTopCpuInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnTopCpuInfo) { 
                delete pRtnTopCpuInfo;
                pRtnTopCpuInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnTopCpuInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTopMemInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTopMemInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTopMemInfoTopic_mutex);

    int ioUserNumb = g_RspQryTopMemInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTopMemInfoTopic_IOUser_vec.begin();
        it != g_RspQryTopMemInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTopMemInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTopMemInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTopMemInfoTopic_Data_map[*it].front());
            g_RspQryTopMemInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTopMemInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTopMemInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTopMemInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTopMemInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTopMemInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTopMemInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryTopMemInfoField* pRspQryTopMemInfo = (CShfeFtdcRspQryTopMemInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTopMemInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTopMemInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTopMemInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTopMemInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopMemInfo->HostName);
                    Gb2312ToUtf8(pRspQryTopMemInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopMemInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopMemInfo->MonDate);
                    Gb2312ToUtf8(pRspQryTopMemInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopMemInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopMemInfo->MonTime);
                    Gb2312ToUtf8(pRspQryTopMemInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopMemInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> TOTALREAL = Nan::New<v8::String> ("TOTALREAL").ToLocalChecked();
                    v8::Local<v8::Integer> TOTALREALValue = Nan::New<v8::Integer> (pRspQryTopMemInfo->TOTALREAL);
                    pRspQryTopMemInfoJS->Set(Local<v8::Value> (TOTALREAL), Local<v8::Value>(TOTALREALValue));

                    v8::Local<v8::String> ACTIVEREAL = Nan::New<v8::String> ("ACTIVEREAL").ToLocalChecked();
                    v8::Local<v8::Integer> ACTIVEREALValue = Nan::New<v8::Integer> (pRspQryTopMemInfo->ACTIVEREAL);
                    pRspQryTopMemInfoJS->Set(Local<v8::Value> (ACTIVEREAL), Local<v8::Value>(ACTIVEREALValue));

                    v8::Local<v8::String> TOTALVIRTUAL = Nan::New<v8::String> ("TOTALVIRTUAL").ToLocalChecked();
                    v8::Local<v8::Integer> TOTALVIRTUALValue = Nan::New<v8::Integer> (pRspQryTopMemInfo->TOTALVIRTUAL);
                    pRspQryTopMemInfoJS->Set(Local<v8::Value> (TOTALVIRTUAL), Local<v8::Value>(TOTALVIRTUALValue));

                    v8::Local<v8::String> ACTIVEVIRTUAL = Nan::New<v8::String> ("ACTIVEVIRTUAL").ToLocalChecked();
                    v8::Local<v8::Integer> ACTIVEVIRTUALValue = Nan::New<v8::Integer> (pRspQryTopMemInfo->ACTIVEVIRTUAL);
                    pRspQryTopMemInfoJS->Set(Local<v8::Value> (ACTIVEVIRTUAL), Local<v8::Value>(ACTIVEVIRTUALValue));

                    v8::Local<v8::String> FREE = Nan::New<v8::String> ("FREE").ToLocalChecked();
                    v8::Local<v8::Integer> FREEValue = Nan::New<v8::Integer> (pRspQryTopMemInfo->FREE);
                    pRspQryTopMemInfoJS->Set(Local<v8::Value> (FREE), Local<v8::Value>(FREEValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTopMemInfo) { 
                    params[0] = Local<v8::Value>(pRspQryTopMemInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTopMemInfo) { 
                delete pRspQryTopMemInfo;
                pRspQryTopMemInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTopMemInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTopMemInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnTopMemInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnTopMemInfoTopic_mutex);

    int ioUserNumb = g_RtnTopMemInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnTopMemInfoTopic_IOUser_vec.begin();
        it != g_RtnTopMemInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnTopMemInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnTopMemInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnTopMemInfoTopic_Data_map[*it].front());
            g_RtnTopMemInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnTopMemInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnTopMemInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnTopMemInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnTopMemInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnTopMemInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnTopMemInfoTopic").ToLocalChecked());
            CShfeFtdcRtnTopMemInfoField* pRtnTopMemInfo = (CShfeFtdcRtnTopMemInfoField*)(paramArray[1]);
            if (OnRtnTopMemInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnTopMemInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnTopMemInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnTopMemInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopMemInfo->HostName);
                    Gb2312ToUtf8(pRtnTopMemInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopMemInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopMemInfo->MonDate);
                    Gb2312ToUtf8(pRtnTopMemInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopMemInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopMemInfo->MonTime);
                    Gb2312ToUtf8(pRtnTopMemInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopMemInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> TOTALREAL = Nan::New<v8::String> ("TOTALREAL").ToLocalChecked();
                    v8::Local<v8::Integer> TOTALREALValue = Nan::New<v8::Integer> (pRtnTopMemInfo->TOTALREAL);
                    pRtnTopMemInfoJS->Set(Local<v8::Value> (TOTALREAL), Local<v8::Value>(TOTALREALValue));

                    v8::Local<v8::String> ACTIVEREAL = Nan::New<v8::String> ("ACTIVEREAL").ToLocalChecked();
                    v8::Local<v8::Integer> ACTIVEREALValue = Nan::New<v8::Integer> (pRtnTopMemInfo->ACTIVEREAL);
                    pRtnTopMemInfoJS->Set(Local<v8::Value> (ACTIVEREAL), Local<v8::Value>(ACTIVEREALValue));

                    v8::Local<v8::String> TOTALVIRTUAL = Nan::New<v8::String> ("TOTALVIRTUAL").ToLocalChecked();
                    v8::Local<v8::Integer> TOTALVIRTUALValue = Nan::New<v8::Integer> (pRtnTopMemInfo->TOTALVIRTUAL);
                    pRtnTopMemInfoJS->Set(Local<v8::Value> (TOTALVIRTUAL), Local<v8::Value>(TOTALVIRTUALValue));

                    v8::Local<v8::String> ACTIVEVIRTUAL = Nan::New<v8::String> ("ACTIVEVIRTUAL").ToLocalChecked();
                    v8::Local<v8::Integer> ACTIVEVIRTUALValue = Nan::New<v8::Integer> (pRtnTopMemInfo->ACTIVEVIRTUAL);
                    pRtnTopMemInfoJS->Set(Local<v8::Value> (ACTIVEVIRTUAL), Local<v8::Value>(ACTIVEVIRTUALValue));

                    v8::Local<v8::String> FREE = Nan::New<v8::String> ("FREE").ToLocalChecked();
                    v8::Local<v8::Integer> FREEValue = Nan::New<v8::Integer> (pRtnTopMemInfo->FREE);
                    pRtnTopMemInfoJS->Set(Local<v8::Value> (FREE), Local<v8::Value>(FREEValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnTopMemInfo) { 
                    params[0] = Local<v8::Value>(pRtnTopMemInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnTopMemInfo) { 
                delete pRtnTopMemInfo;
                pRtnTopMemInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnTopMemInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTopProcessInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTopProcessInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTopProcessInfoTopic_mutex);

    int ioUserNumb = g_RspQryTopProcessInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTopProcessInfoTopic_IOUser_vec.begin();
        it != g_RspQryTopProcessInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTopProcessInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTopProcessInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTopProcessInfoTopic_Data_map[*it].front());
            g_RspQryTopProcessInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTopProcessInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTopProcessInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTopProcessInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTopProcessInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTopProcessInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTopProcessInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryTopProcessInfoField* pRspQryTopProcessInfo = (CShfeFtdcRspQryTopProcessInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTopProcessInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTopProcessInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTopProcessInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTopProcessInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopProcessInfo->HostName);
                    Gb2312ToUtf8(pRspQryTopProcessInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopProcessInfo->MonDate);
                    Gb2312ToUtf8(pRspQryTopProcessInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopProcessInfo->MonTime);
                    Gb2312ToUtf8(pRspQryTopProcessInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopProcessInfo->CPU);
                    Gb2312ToUtf8(pRspQryTopProcessInfo->CPU, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CPUValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                    v8::Local<v8::String> TTY = Nan::New<v8::String> ("TTY").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopProcessInfo->TTY);
                    Gb2312ToUtf8(pRspQryTopProcessInfo->TTY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TTYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (TTY), Local<v8::Value>(TTYValue));

                    v8::Local<v8::String> PID = Nan::New<v8::String> ("PID").ToLocalChecked();
                    v8::Local<v8::Integer> PIDValue = Nan::New<v8::Integer> (pRspQryTopProcessInfo->PID);
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (PID), Local<v8::Value>(PIDValue));

                    v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopProcessInfo->USERNAME);
                    Gb2312ToUtf8(pRspQryTopProcessInfo->USERNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                    v8::Local<v8::String> PRI = Nan::New<v8::String> ("PRI").ToLocalChecked();
                    v8::Local<v8::Integer> PRIValue = Nan::New<v8::Integer> (pRspQryTopProcessInfo->PRI);
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (PRI), Local<v8::Value>(PRIValue));

                    v8::Local<v8::String> NI = Nan::New<v8::String> ("NI").ToLocalChecked();
                    v8::Local<v8::Integer> NIValue = Nan::New<v8::Integer> (pRspQryTopProcessInfo->NI);
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (NI), Local<v8::Value>(NIValue));

                    v8::Local<v8::String> SIZE = Nan::New<v8::String> ("SIZE").ToLocalChecked();
                    v8::Local<v8::Integer> SIZEValue = Nan::New<v8::Integer> (pRspQryTopProcessInfo->SIZE);
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (SIZE), Local<v8::Value>(SIZEValue));

                    v8::Local<v8::String> RES = Nan::New<v8::String> ("RES").ToLocalChecked();
                    v8::Local<v8::Integer> RESValue = Nan::New<v8::Integer> (pRspQryTopProcessInfo->RES);
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (RES), Local<v8::Value>(RESValue));

                    v8::Local<v8::String> STATE = Nan::New<v8::String> ("STATE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopProcessInfo->STATE);
                    Gb2312ToUtf8(pRspQryTopProcessInfo->STATE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> STATEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (STATE), Local<v8::Value>(STATEValue));

                    v8::Local<v8::String> TIME = Nan::New<v8::String> ("TIME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopProcessInfo->TIME);
                    Gb2312ToUtf8(pRspQryTopProcessInfo->TIME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TIMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (TIME), Local<v8::Value>(TIMEValue));

                    v8::Local<v8::String> pWCPU = Nan::New<v8::String> ("pWCPU").ToLocalChecked();
                    v8::Local<v8::Number> pWCPUValue = Nan::New<v8::Number> (pRspQryTopProcessInfo->pWCPU);
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (pWCPU), Local<v8::Value>(pWCPUValue));

                    v8::Local<v8::String> pCPU = Nan::New<v8::String> ("pCPU").ToLocalChecked();
                    v8::Local<v8::Number> pCPUValue = Nan::New<v8::Number> (pRspQryTopProcessInfo->pCPU);
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (pCPU), Local<v8::Value>(pCPUValue));

                    v8::Local<v8::String> COMMAND = Nan::New<v8::String> ("COMMAND").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTopProcessInfo->COMMAND);
                    Gb2312ToUtf8(pRspQryTopProcessInfo->COMMAND, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> COMMANDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTopProcessInfoJS->Set(Local<v8::Value> (COMMAND), Local<v8::Value>(COMMANDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTopProcessInfo) { 
                    params[0] = Local<v8::Value>(pRspQryTopProcessInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTopProcessInfo) { 
                delete pRspQryTopProcessInfo;
                pRspQryTopProcessInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTopProcessInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTopProcessInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnTopProcessInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnTopProcessInfoTopic_mutex);

    int ioUserNumb = g_RtnTopProcessInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnTopProcessInfoTopic_IOUser_vec.begin();
        it != g_RtnTopProcessInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnTopProcessInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnTopProcessInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnTopProcessInfoTopic_Data_map[*it].front());
            g_RtnTopProcessInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnTopProcessInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnTopProcessInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnTopProcessInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnTopProcessInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnTopProcessInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnTopProcessInfoTopic").ToLocalChecked());
            CShfeFtdcRtnTopProcessInfoField* pRtnTopProcessInfo = (CShfeFtdcRtnTopProcessInfoField*)(paramArray[1]);
            if (OnRtnTopProcessInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnTopProcessInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnTopProcessInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnTopProcessInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopProcessInfo->HostName);
                    Gb2312ToUtf8(pRtnTopProcessInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopProcessInfo->MonDate);
                    Gb2312ToUtf8(pRtnTopProcessInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopProcessInfo->MonTime);
                    Gb2312ToUtf8(pRtnTopProcessInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopProcessInfo->CPU);
                    Gb2312ToUtf8(pRtnTopProcessInfo->CPU, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CPUValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                    v8::Local<v8::String> TTY = Nan::New<v8::String> ("TTY").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopProcessInfo->TTY);
                    Gb2312ToUtf8(pRtnTopProcessInfo->TTY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TTYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (TTY), Local<v8::Value>(TTYValue));

                    v8::Local<v8::String> PID = Nan::New<v8::String> ("PID").ToLocalChecked();
                    v8::Local<v8::Integer> PIDValue = Nan::New<v8::Integer> (pRtnTopProcessInfo->PID);
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (PID), Local<v8::Value>(PIDValue));

                    v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopProcessInfo->USERNAME);
                    Gb2312ToUtf8(pRtnTopProcessInfo->USERNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                    v8::Local<v8::String> PRI = Nan::New<v8::String> ("PRI").ToLocalChecked();
                    v8::Local<v8::Integer> PRIValue = Nan::New<v8::Integer> (pRtnTopProcessInfo->PRI);
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (PRI), Local<v8::Value>(PRIValue));

                    v8::Local<v8::String> NI = Nan::New<v8::String> ("NI").ToLocalChecked();
                    v8::Local<v8::Integer> NIValue = Nan::New<v8::Integer> (pRtnTopProcessInfo->NI);
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (NI), Local<v8::Value>(NIValue));

                    v8::Local<v8::String> SIZE = Nan::New<v8::String> ("SIZE").ToLocalChecked();
                    v8::Local<v8::Integer> SIZEValue = Nan::New<v8::Integer> (pRtnTopProcessInfo->SIZE);
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (SIZE), Local<v8::Value>(SIZEValue));

                    v8::Local<v8::String> RES = Nan::New<v8::String> ("RES").ToLocalChecked();
                    v8::Local<v8::Integer> RESValue = Nan::New<v8::Integer> (pRtnTopProcessInfo->RES);
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (RES), Local<v8::Value>(RESValue));

                    v8::Local<v8::String> STATE = Nan::New<v8::String> ("STATE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopProcessInfo->STATE);
                    Gb2312ToUtf8(pRtnTopProcessInfo->STATE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> STATEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (STATE), Local<v8::Value>(STATEValue));

                    v8::Local<v8::String> TIME = Nan::New<v8::String> ("TIME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopProcessInfo->TIME);
                    Gb2312ToUtf8(pRtnTopProcessInfo->TIME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TIMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (TIME), Local<v8::Value>(TIMEValue));

                    v8::Local<v8::String> pWCPU = Nan::New<v8::String> ("pWCPU").ToLocalChecked();
                    v8::Local<v8::Number> pWCPUValue = Nan::New<v8::Number> (pRtnTopProcessInfo->pWCPU);
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (pWCPU), Local<v8::Value>(pWCPUValue));

                    v8::Local<v8::String> pCPU = Nan::New<v8::String> ("pCPU").ToLocalChecked();
                    v8::Local<v8::Number> pCPUValue = Nan::New<v8::Number> (pRtnTopProcessInfo->pCPU);
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (pCPU), Local<v8::Value>(pCPUValue));

                    v8::Local<v8::String> COMMAND = Nan::New<v8::String> ("COMMAND").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTopProcessInfo->COMMAND);
                    Gb2312ToUtf8(pRtnTopProcessInfo->COMMAND, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> COMMANDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTopProcessInfoJS->Set(Local<v8::Value> (COMMAND), Local<v8::Value>(COMMANDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnTopProcessInfo) { 
                    params[0] = Local<v8::Value>(pRtnTopProcessInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnTopProcessInfo) { 
                delete pRtnTopProcessInfo;
                pRtnTopProcessInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnTopProcessInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFileSystemInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryFileSystemInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryFileSystemInfoTopic_mutex);

    int ioUserNumb = g_RspQryFileSystemInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryFileSystemInfoTopic_IOUser_vec.begin();
        it != g_RspQryFileSystemInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryFileSystemInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryFileSystemInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryFileSystemInfoTopic_Data_map[*it].front());
            g_RspQryFileSystemInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryFileSystemInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryFileSystemInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryFileSystemInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryFileSystemInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryFileSystemInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryFileSystemInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryFileSystemInfoField* pRspQryFileSystemInfo = (CShfeFtdcRspQryFileSystemInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryFileSystemInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryFileSystemInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryFileSystemInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryFileSystemInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileSystemInfo->HostName);
                    Gb2312ToUtf8(pRspQryFileSystemInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileSystemInfo->MonDate);
                    Gb2312ToUtf8(pRspQryFileSystemInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileSystemInfo->MonTime);
                    Gb2312ToUtf8(pRspQryFileSystemInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> FILESYSTEM = Nan::New<v8::String> ("FILESYSTEM").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileSystemInfo->FILESYSTEM);
                    Gb2312ToUtf8(pRspQryFileSystemInfo->FILESYSTEM, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FILESYSTEMValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (FILESYSTEM), Local<v8::Value>(FILESYSTEMValue));

                    v8::Local<v8::String> SIZE = Nan::New<v8::String> ("SIZE").ToLocalChecked();
                    v8::Local<v8::Integer> SIZEValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->SIZE);
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (SIZE), Local<v8::Value>(SIZEValue));

                    v8::Local<v8::String> USED = Nan::New<v8::String> ("USED").ToLocalChecked();
                    v8::Local<v8::Integer> USEDValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->USED);
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (USED), Local<v8::Value>(USEDValue));

                    v8::Local<v8::String> AVAIL = Nan::New<v8::String> ("AVAIL").ToLocalChecked();
                    v8::Local<v8::Integer> AVAILValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->AVAIL);
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (AVAIL), Local<v8::Value>(AVAILValue));

                    v8::Local<v8::String> pUSERD = Nan::New<v8::String> ("pUSERD").ToLocalChecked();
                    v8::Local<v8::Number> pUSERDValue = Nan::New<v8::Number> (pRspQryFileSystemInfo->pUSERD);
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (pUSERD), Local<v8::Value>(pUSERDValue));

                    v8::Local<v8::String> ISIZE = Nan::New<v8::String> ("ISIZE").ToLocalChecked();
                    v8::Local<v8::Integer> ISIZEValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->ISIZE);
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (ISIZE), Local<v8::Value>(ISIZEValue));

                    v8::Local<v8::String> IUSED = Nan::New<v8::String> ("IUSED").ToLocalChecked();
                    v8::Local<v8::Integer> IUSEDValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->IUSED);
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (IUSED), Local<v8::Value>(IUSEDValue));

                    v8::Local<v8::String> IFREE = Nan::New<v8::String> ("IFREE").ToLocalChecked();
                    v8::Local<v8::Integer> IFREEValue = Nan::New<v8::Integer> (pRspQryFileSystemInfo->IFREE);
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (IFREE), Local<v8::Value>(IFREEValue));

                    v8::Local<v8::String> pIUSED = Nan::New<v8::String> ("pIUSED").ToLocalChecked();
                    v8::Local<v8::Number> pIUSEDValue = Nan::New<v8::Number> (pRspQryFileSystemInfo->pIUSED);
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (pIUSED), Local<v8::Value>(pIUSEDValue));

                    v8::Local<v8::String> MountedOn = Nan::New<v8::String> ("MountedOn").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileSystemInfo->MountedOn);
                    Gb2312ToUtf8(pRspQryFileSystemInfo->MountedOn, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MountedOnValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileSystemInfoJS->Set(Local<v8::Value> (MountedOn), Local<v8::Value>(MountedOnValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryFileSystemInfo) { 
                    params[0] = Local<v8::Value>(pRspQryFileSystemInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryFileSystemInfo) { 
                delete pRspQryFileSystemInfo;
                pRspQryFileSystemInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryFileSystemInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFileSystemInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnFileSystemInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnFileSystemInfoTopic_mutex);

    int ioUserNumb = g_RtnFileSystemInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnFileSystemInfoTopic_IOUser_vec.begin();
        it != g_RtnFileSystemInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnFileSystemInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnFileSystemInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnFileSystemInfoTopic_Data_map[*it].front());
            g_RtnFileSystemInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnFileSystemInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnFileSystemInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnFileSystemInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnFileSystemInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnFileSystemInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnFileSystemInfoTopic").ToLocalChecked());
            CShfeFtdcRtnFileSystemInfoField* pRtnFileSystemInfo = (CShfeFtdcRtnFileSystemInfoField*)(paramArray[1]);
            if (OnRtnFileSystemInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnFileSystemInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnFileSystemInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnFileSystemInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileSystemInfo->HostName);
                    Gb2312ToUtf8(pRtnFileSystemInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileSystemInfo->MonDate);
                    Gb2312ToUtf8(pRtnFileSystemInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileSystemInfo->MonTime);
                    Gb2312ToUtf8(pRtnFileSystemInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> FILESYSTEM = Nan::New<v8::String> ("FILESYSTEM").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileSystemInfo->FILESYSTEM);
                    Gb2312ToUtf8(pRtnFileSystemInfo->FILESYSTEM, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FILESYSTEMValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (FILESYSTEM), Local<v8::Value>(FILESYSTEMValue));

                    v8::Local<v8::String> SIZE = Nan::New<v8::String> ("SIZE").ToLocalChecked();
                    v8::Local<v8::Integer> SIZEValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->SIZE);
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (SIZE), Local<v8::Value>(SIZEValue));

                    v8::Local<v8::String> USED = Nan::New<v8::String> ("USED").ToLocalChecked();
                    v8::Local<v8::Integer> USEDValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->USED);
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (USED), Local<v8::Value>(USEDValue));

                    v8::Local<v8::String> AVAIL = Nan::New<v8::String> ("AVAIL").ToLocalChecked();
                    v8::Local<v8::Integer> AVAILValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->AVAIL);
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (AVAIL), Local<v8::Value>(AVAILValue));

                    v8::Local<v8::String> pUSERD = Nan::New<v8::String> ("pUSERD").ToLocalChecked();
                    v8::Local<v8::Number> pUSERDValue = Nan::New<v8::Number> (pRtnFileSystemInfo->pUSERD);
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (pUSERD), Local<v8::Value>(pUSERDValue));

                    v8::Local<v8::String> ISIZE = Nan::New<v8::String> ("ISIZE").ToLocalChecked();
                    v8::Local<v8::Integer> ISIZEValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->ISIZE);
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (ISIZE), Local<v8::Value>(ISIZEValue));

                    v8::Local<v8::String> IUSED = Nan::New<v8::String> ("IUSED").ToLocalChecked();
                    v8::Local<v8::Integer> IUSEDValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->IUSED);
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (IUSED), Local<v8::Value>(IUSEDValue));

                    v8::Local<v8::String> IFREE = Nan::New<v8::String> ("IFREE").ToLocalChecked();
                    v8::Local<v8::Integer> IFREEValue = Nan::New<v8::Integer> (pRtnFileSystemInfo->IFREE);
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (IFREE), Local<v8::Value>(IFREEValue));

                    v8::Local<v8::String> pIUSED = Nan::New<v8::String> ("pIUSED").ToLocalChecked();
                    v8::Local<v8::Number> pIUSEDValue = Nan::New<v8::Number> (pRtnFileSystemInfo->pIUSED);
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (pIUSED), Local<v8::Value>(pIUSEDValue));

                    v8::Local<v8::String> MountedOn = Nan::New<v8::String> ("MountedOn").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileSystemInfo->MountedOn);
                    Gb2312ToUtf8(pRtnFileSystemInfo->MountedOn, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MountedOnValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileSystemInfoJS->Set(Local<v8::Value> (MountedOn), Local<v8::Value>(MountedOnValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnFileSystemInfo) { 
                    params[0] = Local<v8::Value>(pRtnFileSystemInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnFileSystemInfo) { 
                delete pRtnFileSystemInfo;
                pRtnFileSystemInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnFileSystemInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetworkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetworkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetworkInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetworkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetworkInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetworkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetworkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetworkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetworkInfoTopic_Data_map[*it].front());
            g_RspQryNetworkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetworkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetworkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetworkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetworkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetworkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetworkInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetworkInfoField* pRspQryNetworkInfo = (CShfeFtdcRspQryNetworkInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetworkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetworkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetworkInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetworkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetworkInfo->HostName);
                    Gb2312ToUtf8(pRspQryNetworkInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetworkInfo->MonDate);
                    Gb2312ToUtf8(pRspQryNetworkInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetworkInfo->MonTime);
                    Gb2312ToUtf8(pRspQryNetworkInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> LANNAME = Nan::New<v8::String> ("LANNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetworkInfo->LANNAME);
                    Gb2312ToUtf8(pRspQryNetworkInfo->LANNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LANNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (LANNAME), Local<v8::Value>(LANNAMEValue));

                    v8::Local<v8::String> LANSTATUS = Nan::New<v8::String> ("LANSTATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetworkInfo->LANSTATUS);
                    Gb2312ToUtf8(pRspQryNetworkInfo->LANSTATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LANSTATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (LANSTATUS), Local<v8::Value>(LANSTATUSValue));

                    v8::Local<v8::String> IPADDRESS = Nan::New<v8::String> ("IPADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetworkInfo->IPADDRESS);
                    Gb2312ToUtf8(pRspQryNetworkInfo->IPADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (IPADDRESS), Local<v8::Value>(IPADDRESSValue));

                    v8::Local<v8::String> RECVBYTES = Nan::New<v8::String> ("RECVBYTES").ToLocalChecked();
                    v8::Local<v8::Number> RECVBYTESValue = Nan::New<v8::Number> (pRspQryNetworkInfo->RECVBYTES);
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (RECVBYTES), Local<v8::Value>(RECVBYTESValue));

                    v8::Local<v8::String> RECVPACKETS = Nan::New<v8::String> ("RECVPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> RECVPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->RECVPACKETS);
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (RECVPACKETS), Local<v8::Value>(RECVPACKETSValue));

                    v8::Local<v8::String> RECVERRORPACKETS = Nan::New<v8::String> ("RECVERRORPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> RECVERRORPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->RECVERRORPACKETS);
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (RECVERRORPACKETS), Local<v8::Value>(RECVERRORPACKETSValue));

                    v8::Local<v8::String> RECVDROPPACKETS = Nan::New<v8::String> ("RECVDROPPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> RECVDROPPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->RECVDROPPACKETS);
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (RECVDROPPACKETS), Local<v8::Value>(RECVDROPPACKETSValue));

                    v8::Local<v8::String> SENDBYTES = Nan::New<v8::String> ("SENDBYTES").ToLocalChecked();
                    v8::Local<v8::Number> SENDBYTESValue = Nan::New<v8::Number> (pRspQryNetworkInfo->SENDBYTES);
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (SENDBYTES), Local<v8::Value>(SENDBYTESValue));

                    v8::Local<v8::String> SENDPACKETS = Nan::New<v8::String> ("SENDPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> SENDPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->SENDPACKETS);
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (SENDPACKETS), Local<v8::Value>(SENDPACKETSValue));

                    v8::Local<v8::String> SENDERRORPACKETS = Nan::New<v8::String> ("SENDERRORPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> SENDERRORPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->SENDERRORPACKETS);
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (SENDERRORPACKETS), Local<v8::Value>(SENDERRORPACKETSValue));

                    v8::Local<v8::String> SENDDROPPACKETS = Nan::New<v8::String> ("SENDDROPPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> SENDDROPPACKETSValue = Nan::New<v8::Number> (pRspQryNetworkInfo->SENDDROPPACKETS);
                    pRspQryNetworkInfoJS->Set(Local<v8::Value> (SENDDROPPACKETS), Local<v8::Value>(SENDDROPPACKETSValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetworkInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetworkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetworkInfo) { 
                delete pRspQryNetworkInfo;
                pRspQryNetworkInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetworkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetworkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetworkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetworkInfoTopic_mutex);

    int ioUserNumb = g_RtnNetworkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetworkInfoTopic_IOUser_vec.begin();
        it != g_RtnNetworkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetworkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetworkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetworkInfoTopic_Data_map[*it].front());
            g_RtnNetworkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetworkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetworkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetworkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetworkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetworkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetworkInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetworkInfoField* pRtnNetworkInfo = (CShfeFtdcRtnNetworkInfoField*)(paramArray[1]);
            if (OnRtnNetworkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetworkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetworkInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetworkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetworkInfo->HostName);
                    Gb2312ToUtf8(pRtnNetworkInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetworkInfo->MonDate);
                    Gb2312ToUtf8(pRtnNetworkInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetworkInfo->MonTime);
                    Gb2312ToUtf8(pRtnNetworkInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> LANNAME = Nan::New<v8::String> ("LANNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetworkInfo->LANNAME);
                    Gb2312ToUtf8(pRtnNetworkInfo->LANNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LANNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (LANNAME), Local<v8::Value>(LANNAMEValue));

                    v8::Local<v8::String> LANSTATUS = Nan::New<v8::String> ("LANSTATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetworkInfo->LANSTATUS);
                    Gb2312ToUtf8(pRtnNetworkInfo->LANSTATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LANSTATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (LANSTATUS), Local<v8::Value>(LANSTATUSValue));

                    v8::Local<v8::String> IPADDRESS = Nan::New<v8::String> ("IPADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetworkInfo->IPADDRESS);
                    Gb2312ToUtf8(pRtnNetworkInfo->IPADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (IPADDRESS), Local<v8::Value>(IPADDRESSValue));

                    v8::Local<v8::String> RECVBYTES = Nan::New<v8::String> ("RECVBYTES").ToLocalChecked();
                    v8::Local<v8::Number> RECVBYTESValue = Nan::New<v8::Number> (pRtnNetworkInfo->RECVBYTES);
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (RECVBYTES), Local<v8::Value>(RECVBYTESValue));

                    v8::Local<v8::String> RECVPACKETS = Nan::New<v8::String> ("RECVPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> RECVPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->RECVPACKETS);
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (RECVPACKETS), Local<v8::Value>(RECVPACKETSValue));

                    v8::Local<v8::String> RECVERRORPACKETS = Nan::New<v8::String> ("RECVERRORPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> RECVERRORPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->RECVERRORPACKETS);
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (RECVERRORPACKETS), Local<v8::Value>(RECVERRORPACKETSValue));

                    v8::Local<v8::String> RECVDROPPACKETS = Nan::New<v8::String> ("RECVDROPPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> RECVDROPPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->RECVDROPPACKETS);
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (RECVDROPPACKETS), Local<v8::Value>(RECVDROPPACKETSValue));

                    v8::Local<v8::String> SENDBYTES = Nan::New<v8::String> ("SENDBYTES").ToLocalChecked();
                    v8::Local<v8::Number> SENDBYTESValue = Nan::New<v8::Number> (pRtnNetworkInfo->SENDBYTES);
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (SENDBYTES), Local<v8::Value>(SENDBYTESValue));

                    v8::Local<v8::String> SENDPACKETS = Nan::New<v8::String> ("SENDPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> SENDPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->SENDPACKETS);
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (SENDPACKETS), Local<v8::Value>(SENDPACKETSValue));

                    v8::Local<v8::String> SENDERRORPACKETS = Nan::New<v8::String> ("SENDERRORPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> SENDERRORPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->SENDERRORPACKETS);
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (SENDERRORPACKETS), Local<v8::Value>(SENDERRORPACKETSValue));

                    v8::Local<v8::String> SENDDROPPACKETS = Nan::New<v8::String> ("SENDDROPPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> SENDDROPPACKETSValue = Nan::New<v8::Number> (pRtnNetworkInfo->SENDDROPPACKETS);
                    pRtnNetworkInfoJS->Set(Local<v8::Value> (SENDDROPPACKETS), Local<v8::Value>(SENDDROPPACKETSValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetworkInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetworkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetworkInfo) { 
                delete pRtnNetworkInfo;
                pRtnNetworkInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetworkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientLoginTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryClientLoginTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryClientLoginTopic_mutex);

    int ioUserNumb = g_RspQryClientLoginTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryClientLoginTopic_IOUser_vec.begin();
        it != g_RspQryClientLoginTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryClientLoginTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryClientLoginTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryClientLoginTopic_Data_map[*it].front());
            g_RspQryClientLoginTopic_Data_map[*it].pop();
        }
    }
    g_RspQryClientLoginTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryClientLoginTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryClientLoginTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryClientLoginTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryClientLoginTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientLoginTopic").ToLocalChecked());
            CShfeFtdcRspQryClientLoginField* pRspQryClientLogin = (CShfeFtdcRspQryClientLoginField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryClientLoginTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryClientLoginTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryClientLoginJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryClientLogin) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientLogin->UserName);
                    Gb2312ToUtf8(pRspQryClientLogin->UserName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientLoginJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                    v8::Local<v8::String> Privalage = Nan::New<v8::String> ("Privalage").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientLogin->Privalage);
                    Gb2312ToUtf8(pRspQryClientLogin->Privalage, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PrivalageValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientLoginJS->Set(Local<v8::Value> (Privalage), Local<v8::Value>(PrivalageValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryClientLogin) { 
                    params[0] = Local<v8::Value>(pRspQryClientLoginJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryClientLogin) { 
                delete pRspQryClientLogin;
                pRspQryClientLogin = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryClientLoginTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMonitorObjectTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryMonitorObjectTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryMonitorObjectTopic_mutex);

    int ioUserNumb = g_RspQryMonitorObjectTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryMonitorObjectTopic_IOUser_vec.begin();
        it != g_RspQryMonitorObjectTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryMonitorObjectTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryMonitorObjectTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryMonitorObjectTopic_Data_map[*it].front());
            g_RspQryMonitorObjectTopic_Data_map[*it].pop();
        }
    }
    g_RspQryMonitorObjectTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryMonitorObjectTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryMonitorObjectTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryMonitorObjectTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryMonitorObjectTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryMonitorObjectTopic").ToLocalChecked());
            CShfeFtdcRspQryMonitorObjectField* pRspQryMonitorObject = (CShfeFtdcRspQryMonitorObjectField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryMonitorObjectTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryMonitorObjectTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryMonitorObjectJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryMonitorObject) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMonitorObject->ObjectID);
                    Gb2312ToUtf8(pRspQryMonitorObject->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMonitorObjectJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> ObjectName = Nan::New<v8::String> ("ObjectName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMonitorObject->ObjectName);
                    Gb2312ToUtf8(pRspQryMonitorObject->ObjectName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMonitorObjectJS->Set(Local<v8::Value> (ObjectName), Local<v8::Value>(ObjectNameValue));

                    v8::Local<v8::String> WarningActive = Nan::New<v8::String> ("WarningActive").ToLocalChecked();
                    v8::Local<v8::Integer> WarningActiveValue = Nan::New<v8::Integer> (pRspQryMonitorObject->WarningActive);
                    pRspQryMonitorObjectJS->Set(Local<v8::Value> (WarningActive), Local<v8::Value>(WarningActiveValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryMonitorObject) { 
                    params[0] = Local<v8::Value>(pRspQryMonitorObjectJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryMonitorObject) { 
                delete pRspQryMonitorObject;
                pRspQryMonitorObject = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryMonitorObjectTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMonitorObjectTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnMonitorObjectTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnMonitorObjectTopic_mutex);

    int ioUserNumb = g_RtnMonitorObjectTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnMonitorObjectTopic_IOUser_vec.begin();
        it != g_RtnMonitorObjectTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnMonitorObjectTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnMonitorObjectTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnMonitorObjectTopic_Data_map[*it].front());
            g_RtnMonitorObjectTopic_Data_map[*it].pop();
        }
    }
    g_RtnMonitorObjectTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnMonitorObjectTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnMonitorObjectTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnMonitorObjectTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnMonitorObjectTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnMonitorObjectTopic").ToLocalChecked());
            CShfeFtdcRtnMonitorObjectField* pRtnMonitorObject = (CShfeFtdcRtnMonitorObjectField*)(paramArray[1]);
            if (OnRtnMonitorObjectTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnMonitorObjectTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnMonitorObjectJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnMonitorObject) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorObject->ObjectID);
                    Gb2312ToUtf8(pRtnMonitorObject->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorObjectJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> ObjectName = Nan::New<v8::String> ("ObjectName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorObject->ObjectName);
                    Gb2312ToUtf8(pRtnMonitorObject->ObjectName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorObjectJS->Set(Local<v8::Value> (ObjectName), Local<v8::Value>(ObjectNameValue));

                    v8::Local<v8::String> WarningActive = Nan::New<v8::String> ("WarningActive").ToLocalChecked();
                    v8::Local<v8::Integer> WarningActiveValue = Nan::New<v8::Integer> (pRtnMonitorObject->WarningActive);
                    pRtnMonitorObjectJS->Set(Local<v8::Value> (WarningActive), Local<v8::Value>(WarningActiveValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnMonitorObject) { 
                    params[0] = Local<v8::Value>(pRtnMonitorObjectJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnMonitorObject) { 
                delete pRtnMonitorObject;
                pRtnMonitorObject = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnMonitorObjectTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryObjectRationalTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryObjectRationalTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryObjectRationalTopic_mutex);

    int ioUserNumb = g_RspQryObjectRationalTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryObjectRationalTopic_IOUser_vec.begin();
        it != g_RspQryObjectRationalTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryObjectRationalTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryObjectRationalTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryObjectRationalTopic_Data_map[*it].front());
            g_RspQryObjectRationalTopic_Data_map[*it].pop();
        }
    }
    g_RspQryObjectRationalTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryObjectRationalTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryObjectRationalTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryObjectRationalTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryObjectRationalTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryObjectRationalTopic").ToLocalChecked());
            CShfeFtdcRspQryObjectRationalField* pRspQryObjectRational = (CShfeFtdcRspQryObjectRationalField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryObjectRationalTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryObjectRationalTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryObjectRationalJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryObjectRational) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryObjectRational->ObjectID);
                    Gb2312ToUtf8(pRspQryObjectRational->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryObjectRationalJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> HostObjectID = Nan::New<v8::String> ("HostObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryObjectRational->HostObjectID);
                    Gb2312ToUtf8(pRspQryObjectRational->HostObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryObjectRationalJS->Set(Local<v8::Value> (HostObjectID), Local<v8::Value>(HostObjectIDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryObjectRational) { 
                    params[0] = Local<v8::Value>(pRspQryObjectRationalJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryObjectRational) { 
                delete pRspQryObjectRational;
                pRspQryObjectRational = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryObjectRationalTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnObjectRationalTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnObjectRationalTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnObjectRationalTopic_mutex);

    int ioUserNumb = g_RtnObjectRationalTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnObjectRationalTopic_IOUser_vec.begin();
        it != g_RtnObjectRationalTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnObjectRationalTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnObjectRationalTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnObjectRationalTopic_Data_map[*it].front());
            g_RtnObjectRationalTopic_Data_map[*it].pop();
        }
    }
    g_RtnObjectRationalTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnObjectRationalTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnObjectRationalTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnObjectRationalTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnObjectRationalTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnObjectRationalTopic").ToLocalChecked());
            CShfeFtdcRtnObjectRationalField* pRtnObjectRational = (CShfeFtdcRtnObjectRationalField*)(paramArray[1]);
            if (OnRtnObjectRationalTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnObjectRationalTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnObjectRationalJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnObjectRational) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnObjectRational->ObjectID);
                    Gb2312ToUtf8(pRtnObjectRational->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnObjectRationalJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> HostObjectID = Nan::New<v8::String> ("HostObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnObjectRational->HostObjectID);
                    Gb2312ToUtf8(pRtnObjectRational->HostObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnObjectRationalJS->Set(Local<v8::Value> (HostObjectID), Local<v8::Value>(HostObjectIDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnObjectRational) { 
                    params[0] = Local<v8::Value>(pRtnObjectRationalJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnObjectRational) { 
                delete pRtnObjectRational;
                pRtnObjectRational = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnObjectRationalTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySyslogInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySyslogInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySyslogInfoTopic_mutex);

    int ioUserNumb = g_RspQrySyslogInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySyslogInfoTopic_IOUser_vec.begin();
        it != g_RspQrySyslogInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySyslogInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySyslogInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySyslogInfoTopic_Data_map[*it].front());
            g_RspQrySyslogInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySyslogInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySyslogInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySyslogInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySyslogInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySyslogInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySyslogInfoTopic").ToLocalChecked());
            CShfeFtdcRspQrySyslogInfoField* pRspQrySyslogInfo = (CShfeFtdcRspQrySyslogInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySyslogInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySyslogInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySyslogInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySyslogInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogInfo->MonDate);
                    Gb2312ToUtf8(pRspQrySyslogInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogInfo->MonTime);
                    Gb2312ToUtf8(pRspQrySyslogInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogInfo->ObjectID);
                    Gb2312ToUtf8(pRspQrySyslogInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogInfo->AttrType);
                    Gb2312ToUtf8(pRspQrySyslogInfo->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogInfoJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> ContLen = Nan::New<v8::String> ("ContLen").ToLocalChecked();
                    v8::Local<v8::Integer> ContLenValue = Nan::New<v8::Integer> (pRspQrySyslogInfo->ContLen);
                    pRspQrySyslogInfoJS->Set(Local<v8::Value> (ContLen), Local<v8::Value>(ContLenValue));

                    v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogInfo->FileContent);
                    Gb2312ToUtf8(pRspQrySyslogInfo->FileContent, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogInfoJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySyslogInfo) { 
                    params[0] = Local<v8::Value>(pRspQrySyslogInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySyslogInfo) { 
                delete pRspQrySyslogInfo;
                pRspQrySyslogInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySyslogInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSyslogInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnSyslogInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnSyslogInfoTopic_mutex);

    int ioUserNumb = g_RtnSyslogInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnSyslogInfoTopic_IOUser_vec.begin();
        it != g_RtnSyslogInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnSyslogInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnSyslogInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnSyslogInfoTopic_Data_map[*it].front());
            g_RtnSyslogInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnSyslogInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnSyslogInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnSyslogInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnSyslogInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnSyslogInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnSyslogInfoTopic").ToLocalChecked());
            CShfeFtdcRtnSyslogInfoField* pRtnSyslogInfo = (CShfeFtdcRtnSyslogInfoField*)(paramArray[1]);
            if (OnRtnSyslogInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnSyslogInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnSyslogInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnSyslogInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogInfo->MonDate);
                    Gb2312ToUtf8(pRtnSyslogInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogInfo->MonTime);
                    Gb2312ToUtf8(pRtnSyslogInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogInfo->ObjectID);
                    Gb2312ToUtf8(pRtnSyslogInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogInfo->AttrType);
                    Gb2312ToUtf8(pRtnSyslogInfo->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogInfoJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> ContLen = Nan::New<v8::String> ("ContLen").ToLocalChecked();
                    v8::Local<v8::Integer> ContLenValue = Nan::New<v8::Integer> (pRtnSyslogInfo->ContLen);
                    pRtnSyslogInfoJS->Set(Local<v8::Value> (ContLen), Local<v8::Value>(ContLenValue));

                    v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogInfo->FileContent);
                    Gb2312ToUtf8(pRtnSyslogInfo->FileContent, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogInfoJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnSyslogInfo) { 
                    params[0] = Local<v8::Value>(pRtnSyslogInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnSyslogInfo) { 
                delete pRtnSyslogInfo;
                pRtnSyslogInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnSyslogInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySubscriberTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySubscriberTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySubscriberTopic_mutex);

    int ioUserNumb = g_RspQrySubscriberTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySubscriberTopic_IOUser_vec.begin();
        it != g_RspQrySubscriberTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySubscriberTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySubscriberTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySubscriberTopic_Data_map[*it].front());
            g_RspQrySubscriberTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySubscriberTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySubscriberTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySubscriberTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySubscriberTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySubscriberTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySubscriberTopic").ToLocalChecked());
            CShfeFtdcRspQrySubscriberField* pRspQrySubscriber = (CShfeFtdcRspQrySubscriberField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySubscriberTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySubscriberTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySubscriberJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySubscriber) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ErrorID = Nan::New<v8::String> ("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer> (pRspQrySubscriber->ErrorID);
                    pRspQrySubscriberJS->Set(Local<v8::Value> (ErrorID), Local<v8::Value>(ErrorIDValue));

                    v8::Local<v8::String> ErrorMsg = Nan::New<v8::String> ("ErrorMsg").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySubscriber->ErrorMsg);
                    Gb2312ToUtf8(pRspQrySubscriber->ErrorMsg, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ErrorMsgValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySubscriberJS->Set(Local<v8::Value> (ErrorMsg), Local<v8::Value>(ErrorMsgValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySubscriber->ObjectID);
                    Gb2312ToUtf8(pRspQrySubscriber->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySubscriberJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySubscriber) { 
                    params[0] = Local<v8::Value>(pRspQrySubscriberJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySubscriber) { 
                delete pRspQrySubscriber;
                pRspQrySubscriber = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySubscriberTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryOidRelationTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryOidRelationTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryOidRelationTopic_mutex);

    int ioUserNumb = g_RspQryOidRelationTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryOidRelationTopic_IOUser_vec.begin();
        it != g_RspQryOidRelationTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryOidRelationTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryOidRelationTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryOidRelationTopic_Data_map[*it].front());
            g_RspQryOidRelationTopic_Data_map[*it].pop();
        }
    }
    g_RspQryOidRelationTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryOidRelationTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryOidRelationTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryOidRelationTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryOidRelationTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryOidRelationTopic").ToLocalChecked());
            CShfeFtdcRspQryOidRelationField* pRspQryOidRelation = (CShfeFtdcRspQryOidRelationField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryOidRelationTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryOidRelationTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryOidRelationJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryOidRelation) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOidRelation->ObjectID);
                    Gb2312ToUtf8(pRspQryOidRelation->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOidRelationJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> HoldObjectID = Nan::New<v8::String> ("HoldObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOidRelation->HoldObjectID);
                    Gb2312ToUtf8(pRspQryOidRelation->HoldObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HoldObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOidRelationJS->Set(Local<v8::Value> (HoldObjectID), Local<v8::Value>(HoldObjectIDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryOidRelation) { 
                    params[0] = Local<v8::Value>(pRspQryOidRelationJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryOidRelation) { 
                delete pRspQryOidRelation;
                pRspQryOidRelation = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryOidRelationTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnOidRelationTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnOidRelationTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnOidRelationTopic_mutex);

    int ioUserNumb = g_RtnOidRelationTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnOidRelationTopic_IOUser_vec.begin();
        it != g_RtnOidRelationTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnOidRelationTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnOidRelationTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnOidRelationTopic_Data_map[*it].front());
            g_RtnOidRelationTopic_Data_map[*it].pop();
        }
    }
    g_RtnOidRelationTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnOidRelationTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnOidRelationTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnOidRelationTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnOidRelationTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnOidRelationTopic").ToLocalChecked());
            CShfeFtdcRtnOidRelationField* pRtnOidRelation = (CShfeFtdcRtnOidRelationField*)(paramArray[1]);
            if (OnRtnOidRelationTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnOidRelationTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnOidRelationJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnOidRelation) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOidRelation->ObjectID);
                    Gb2312ToUtf8(pRtnOidRelation->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOidRelationJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> HoldObjectID = Nan::New<v8::String> ("HoldObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOidRelation->HoldObjectID);
                    Gb2312ToUtf8(pRtnOidRelation->HoldObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HoldObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOidRelationJS->Set(Local<v8::Value> (HoldObjectID), Local<v8::Value>(HoldObjectIDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnOidRelation) { 
                    params[0] = Local<v8::Value>(pRtnOidRelationJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnOidRelation) { 
                delete pRtnOidRelation;
                pRtnOidRelation = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnOidRelationTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryUserInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryUserInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryUserInfoTopic_mutex);

    int ioUserNumb = g_RspQryUserInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryUserInfoTopic_IOUser_vec.begin();
        it != g_RspQryUserInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryUserInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryUserInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryUserInfoTopic_Data_map[*it].front());
            g_RspQryUserInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryUserInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryUserInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryUserInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryUserInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryUserInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryUserInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryUserInfoField* pRspQryUserInfo = (CShfeFtdcRspQryUserInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryUserInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryUserInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryUserInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryUserInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserInfo->USERNAME);
                    Gb2312ToUtf8(pRspQryUserInfo->USERNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                    v8::Local<v8::String> USERID = Nan::New<v8::String> ("USERID").ToLocalChecked();
                    v8::Local<v8::Integer> USERIDValue = Nan::New<v8::Integer> (pRspQryUserInfo->USERID);
                    pRspQryUserInfoJS->Set(Local<v8::Value> (USERID), Local<v8::Value>(USERIDValue));

                    v8::Local<v8::String> GROUPNAME = Nan::New<v8::String> ("GROUPNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserInfo->GROUPNAME);
                    Gb2312ToUtf8(pRspQryUserInfo->GROUPNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GROUPNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserInfoJS->Set(Local<v8::Value> (GROUPNAME), Local<v8::Value>(GROUPNAMEValue));

                    v8::Local<v8::String> GROUPID = Nan::New<v8::String> ("GROUPID").ToLocalChecked();
                    v8::Local<v8::Integer> GROUPIDValue = Nan::New<v8::Integer> (pRspQryUserInfo->GROUPID);
                    pRspQryUserInfoJS->Set(Local<v8::Value> (GROUPID), Local<v8::Value>(GROUPIDValue));

                    v8::Local<v8::String> HOMEPATH = Nan::New<v8::String> ("HOMEPATH").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserInfo->HOMEPATH);
                    Gb2312ToUtf8(pRspQryUserInfo->HOMEPATH, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HOMEPATHValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserInfoJS->Set(Local<v8::Value> (HOMEPATH), Local<v8::Value>(HOMEPATHValue));

                    v8::Local<v8::String> SHELL = Nan::New<v8::String> ("SHELL").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserInfo->SHELL);
                    Gb2312ToUtf8(pRspQryUserInfo->SHELL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SHELLValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserInfoJS->Set(Local<v8::Value> (SHELL), Local<v8::Value>(SHELLValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryUserInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserInfo->MonTime);
                    Gb2312ToUtf8(pRspQryUserInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserInfo->MonDate);
                    Gb2312ToUtf8(pRspQryUserInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryUserInfo) { 
                    params[0] = Local<v8::Value>(pRspQryUserInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryUserInfo) { 
                delete pRspQryUserInfo;
                pRspQryUserInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryUserInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnUserInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnUserInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnUserInfoTopic_mutex);

    int ioUserNumb = g_RtnUserInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnUserInfoTopic_IOUser_vec.begin();
        it != g_RtnUserInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnUserInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnUserInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnUserInfoTopic_Data_map[*it].front());
            g_RtnUserInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnUserInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnUserInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnUserInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnUserInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnUserInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnUserInfoTopic").ToLocalChecked());
            CShfeFtdcRtnUserInfoField* pRtnUserInfo = (CShfeFtdcRtnUserInfoField*)(paramArray[1]);
            if (OnRtnUserInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnUserInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnUserInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnUserInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserInfo->USERNAME);
                    Gb2312ToUtf8(pRtnUserInfo->USERNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                    v8::Local<v8::String> USERID = Nan::New<v8::String> ("USERID").ToLocalChecked();
                    v8::Local<v8::Integer> USERIDValue = Nan::New<v8::Integer> (pRtnUserInfo->USERID);
                    pRtnUserInfoJS->Set(Local<v8::Value> (USERID), Local<v8::Value>(USERIDValue));

                    v8::Local<v8::String> GROUPNAME = Nan::New<v8::String> ("GROUPNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserInfo->GROUPNAME);
                    Gb2312ToUtf8(pRtnUserInfo->GROUPNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GROUPNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserInfoJS->Set(Local<v8::Value> (GROUPNAME), Local<v8::Value>(GROUPNAMEValue));

                    v8::Local<v8::String> GROUPID = Nan::New<v8::String> ("GROUPID").ToLocalChecked();
                    v8::Local<v8::Integer> GROUPIDValue = Nan::New<v8::Integer> (pRtnUserInfo->GROUPID);
                    pRtnUserInfoJS->Set(Local<v8::Value> (GROUPID), Local<v8::Value>(GROUPIDValue));

                    v8::Local<v8::String> HOMEPATH = Nan::New<v8::String> ("HOMEPATH").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserInfo->HOMEPATH);
                    Gb2312ToUtf8(pRtnUserInfo->HOMEPATH, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HOMEPATHValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserInfoJS->Set(Local<v8::Value> (HOMEPATH), Local<v8::Value>(HOMEPATHValue));

                    v8::Local<v8::String> SHELL = Nan::New<v8::String> ("SHELL").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserInfo->SHELL);
                    Gb2312ToUtf8(pRtnUserInfo->SHELL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SHELLValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserInfoJS->Set(Local<v8::Value> (SHELL), Local<v8::Value>(SHELLValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserInfo->ObjectID);
                    Gb2312ToUtf8(pRtnUserInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserInfo->MonTime);
                    Gb2312ToUtf8(pRtnUserInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserInfo->MonDate);
                    Gb2312ToUtf8(pRtnUserInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnUserInfo) { 
                    params[0] = Local<v8::Value>(pRtnUserInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnUserInfo) { 
                delete pRtnUserInfo;
                pRtnUserInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnUserInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryOnlineUserInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryOnlineUserInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryOnlineUserInfoTopic_mutex);

    int ioUserNumb = g_RspQryOnlineUserInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryOnlineUserInfoTopic_IOUser_vec.begin();
        it != g_RspQryOnlineUserInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryOnlineUserInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryOnlineUserInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryOnlineUserInfoTopic_Data_map[*it].front());
            g_RspQryOnlineUserInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryOnlineUserInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryOnlineUserInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryOnlineUserInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryOnlineUserInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryOnlineUserInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryOnlineUserInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryOnlineUserInfoField* pRspQryOnlineUserInfo = (CShfeFtdcRspQryOnlineUserInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryOnlineUserInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryOnlineUserInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryOnlineUserInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryOnlineUserInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOnlineUserInfo->USERNAME);
                    Gb2312ToUtf8(pRspQryOnlineUserInfo->USERNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                    v8::Local<v8::String> TIME = Nan::New<v8::String> ("TIME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOnlineUserInfo->TIME);
                    Gb2312ToUtf8(pRspQryOnlineUserInfo->TIME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TIMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (TIME), Local<v8::Value>(TIMEValue));

                    v8::Local<v8::String> TTY = Nan::New<v8::String> ("TTY").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOnlineUserInfo->TTY);
                    Gb2312ToUtf8(pRspQryOnlineUserInfo->TTY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TTYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (TTY), Local<v8::Value>(TTYValue));

                    v8::Local<v8::String> IP = Nan::New<v8::String> ("IP").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOnlineUserInfo->IP);
                    Gb2312ToUtf8(pRspQryOnlineUserInfo->IP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (IP), Local<v8::Value>(IPValue));

                    v8::Local<v8::String> CONNECTIME = Nan::New<v8::String> ("CONNECTIME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOnlineUserInfo->CONNECTIME);
                    Gb2312ToUtf8(pRspQryOnlineUserInfo->CONNECTIME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONNECTIMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (CONNECTIME), Local<v8::Value>(CONNECTIMEValue));

                    v8::Local<v8::String> PID = Nan::New<v8::String> ("PID").ToLocalChecked();
                    v8::Local<v8::Integer> PIDValue = Nan::New<v8::Integer> (pRspQryOnlineUserInfo->PID);
                    pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (PID), Local<v8::Value>(PIDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOnlineUserInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryOnlineUserInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOnlineUserInfo->MonTime);
                    Gb2312ToUtf8(pRspQryOnlineUserInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOnlineUserInfo->MonDate);
                    Gb2312ToUtf8(pRspQryOnlineUserInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOnlineUserInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryOnlineUserInfo) { 
                    params[0] = Local<v8::Value>(pRspQryOnlineUserInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryOnlineUserInfo) { 
                delete pRspQryOnlineUserInfo;
                pRspQryOnlineUserInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryOnlineUserInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnOnlineUserInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnOnlineUserInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnOnlineUserInfoTopic_mutex);

    int ioUserNumb = g_RtnOnlineUserInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnOnlineUserInfoTopic_IOUser_vec.begin();
        it != g_RtnOnlineUserInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnOnlineUserInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnOnlineUserInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnOnlineUserInfoTopic_Data_map[*it].front());
            g_RtnOnlineUserInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnOnlineUserInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnOnlineUserInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnOnlineUserInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnOnlineUserInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnOnlineUserInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnOnlineUserInfoTopic").ToLocalChecked());
            CShfeFtdcRtnOnlineUserInfoField* pRtnOnlineUserInfo = (CShfeFtdcRtnOnlineUserInfoField*)(paramArray[1]);
            if (OnRtnOnlineUserInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnOnlineUserInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnOnlineUserInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnOnlineUserInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOnlineUserInfo->USERNAME);
                    Gb2312ToUtf8(pRtnOnlineUserInfo->USERNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOnlineUserInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                    v8::Local<v8::String> TIME = Nan::New<v8::String> ("TIME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOnlineUserInfo->TIME);
                    Gb2312ToUtf8(pRtnOnlineUserInfo->TIME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TIMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOnlineUserInfoJS->Set(Local<v8::Value> (TIME), Local<v8::Value>(TIMEValue));

                    v8::Local<v8::String> TTY = Nan::New<v8::String> ("TTY").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOnlineUserInfo->TTY);
                    Gb2312ToUtf8(pRtnOnlineUserInfo->TTY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TTYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOnlineUserInfoJS->Set(Local<v8::Value> (TTY), Local<v8::Value>(TTYValue));

                    v8::Local<v8::String> IP = Nan::New<v8::String> ("IP").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOnlineUserInfo->IP);
                    Gb2312ToUtf8(pRtnOnlineUserInfo->IP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOnlineUserInfoJS->Set(Local<v8::Value> (IP), Local<v8::Value>(IPValue));

                    v8::Local<v8::String> CONNECTIME = Nan::New<v8::String> ("CONNECTIME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOnlineUserInfo->CONNECTIME);
                    Gb2312ToUtf8(pRtnOnlineUserInfo->CONNECTIME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONNECTIMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOnlineUserInfoJS->Set(Local<v8::Value> (CONNECTIME), Local<v8::Value>(CONNECTIMEValue));

                    v8::Local<v8::String> PID = Nan::New<v8::String> ("PID").ToLocalChecked();
                    v8::Local<v8::Integer> PIDValue = Nan::New<v8::Integer> (pRtnOnlineUserInfo->PID);
                    pRtnOnlineUserInfoJS->Set(Local<v8::Value> (PID), Local<v8::Value>(PIDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOnlineUserInfo->ObjectID);
                    Gb2312ToUtf8(pRtnOnlineUserInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOnlineUserInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOnlineUserInfo->MonTime);
                    Gb2312ToUtf8(pRtnOnlineUserInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOnlineUserInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOnlineUserInfo->MonDate);
                    Gb2312ToUtf8(pRtnOnlineUserInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOnlineUserInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnOnlineUserInfo) { 
                    params[0] = Local<v8::Value>(pRtnOnlineUserInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnOnlineUserInfo) { 
                delete pRtnOnlineUserInfo;
                pRtnOnlineUserInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnOnlineUserInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryWarningEventTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryWarningEventTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryWarningEventTopic_mutex);

    int ioUserNumb = g_RspQryWarningEventTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryWarningEventTopic_IOUser_vec.begin();
        it != g_RspQryWarningEventTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryWarningEventTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryWarningEventTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryWarningEventTopic_Data_map[*it].front());
            g_RspQryWarningEventTopic_Data_map[*it].pop();
        }
    }
    g_RspQryWarningEventTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryWarningEventTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryWarningEventTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryWarningEventTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryWarningEventTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryWarningEventTopic").ToLocalChecked());
            CShfeFtdcRspQryWarningEventField* pRspQryWarningEvent = (CShfeFtdcRspQryWarningEventField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryWarningEventTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryWarningEventTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryWarningEventJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryWarningEvent) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->MonDate);
                    Gb2312ToUtf8(pRspQryWarningEvent->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->MonTime);
                    Gb2312ToUtf8(pRspQryWarningEvent->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> OccurDate = Nan::New<v8::String> ("OccurDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->OccurDate);
                    Gb2312ToUtf8(pRspQryWarningEvent->OccurDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OccurDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (OccurDate), Local<v8::Value>(OccurDateValue));

                    v8::Local<v8::String> OccurTime = Nan::New<v8::String> ("OccurTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->OccurTime);
                    Gb2312ToUtf8(pRspQryWarningEvent->OccurTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OccurTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (OccurTime), Local<v8::Value>(OccurTimeValue));

                    v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                    v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRspQryWarningEvent->EvendID);
                    pRspQryWarningEventJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->ObjectID);
                    Gb2312ToUtf8(pRspQryWarningEvent->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->IPAddress);
                    Gb2312ToUtf8(pRspQryWarningEvent->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> EventName = Nan::New<v8::String> ("EventName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->EventName);
                    Gb2312ToUtf8(pRspQryWarningEvent->EventName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (EventName), Local<v8::Value>(EventNameValue));

                    v8::Local<v8::String> EventNum = Nan::New<v8::String> ("EventNum").ToLocalChecked();
                    v8::Local<v8::Integer> EventNumValue = Nan::New<v8::Integer> (pRspQryWarningEvent->EventNum);
                    pRspQryWarningEventJS->Set(Local<v8::Value> (EventNum), Local<v8::Value>(EventNumValue));

                    v8::Local<v8::String> EventType = Nan::New<v8::String> ("EventType").ToLocalChecked();
                    v8::Local<v8::Integer> EventTypeValue = Nan::New<v8::Integer> (pRspQryWarningEvent->EventType);
                    pRspQryWarningEventJS->Set(Local<v8::Value> (EventType), Local<v8::Value>(EventTypeValue));

                    v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->EventDes);
                    Gb2312ToUtf8(pRspQryWarningEvent->EventDes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

                    v8::Local<v8::String> ProcessFlag = Nan::New<v8::String> ("ProcessFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->ProcessFlag);
                    Gb2312ToUtf8(pRspQryWarningEvent->ProcessFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ProcessFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (ProcessFlag), Local<v8::Value>(ProcessFlagValue));

                    v8::Local<v8::String> WarningLevel = Nan::New<v8::String> ("WarningLevel").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->WarningLevel);
                    Gb2312ToUtf8(pRspQryWarningEvent->WarningLevel, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> WarningLevelValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (WarningLevel), Local<v8::Value>(WarningLevelValue));

                    v8::Local<v8::String> EventDealDes = Nan::New<v8::String> ("EventDealDes").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->EventDealDes);
                    Gb2312ToUtf8(pRspQryWarningEvent->EventDealDes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDealDesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (EventDealDes), Local<v8::Value>(EventDealDesValue));

                    v8::Local<v8::String> FullEventName = Nan::New<v8::String> ("FullEventName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningEvent->FullEventName);
                    Gb2312ToUtf8(pRspQryWarningEvent->FullEventName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FullEventNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningEventJS->Set(Local<v8::Value> (FullEventName), Local<v8::Value>(FullEventNameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryWarningEvent) { 
                    params[0] = Local<v8::Value>(pRspQryWarningEventJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryWarningEvent) { 
                delete pRspQryWarningEvent;
                pRspQryWarningEvent = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryWarningEventTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnWarningEventTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnWarningEventTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnWarningEventTopic_mutex);

    int ioUserNumb = g_RtnWarningEventTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnWarningEventTopic_IOUser_vec.begin();
        it != g_RtnWarningEventTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnWarningEventTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnWarningEventTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnWarningEventTopic_Data_map[*it].front());
            g_RtnWarningEventTopic_Data_map[*it].pop();
        }
    }
    g_RtnWarningEventTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnWarningEventTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnWarningEventTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnWarningEventTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnWarningEventTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnWarningEventTopic").ToLocalChecked());
            CShfeFtdcRtnWarningEventField* pRtnWarningEvent = (CShfeFtdcRtnWarningEventField*)(paramArray[1]);
            if (OnRtnWarningEventTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnWarningEventTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnWarningEventJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnWarningEvent) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->MonDate);
                    Gb2312ToUtf8(pRtnWarningEvent->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->MonTime);
                    Gb2312ToUtf8(pRtnWarningEvent->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> OccurDate = Nan::New<v8::String> ("OccurDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->OccurDate);
                    Gb2312ToUtf8(pRtnWarningEvent->OccurDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OccurDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (OccurDate), Local<v8::Value>(OccurDateValue));

                    v8::Local<v8::String> OccurTime = Nan::New<v8::String> ("OccurTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->OccurTime);
                    Gb2312ToUtf8(pRtnWarningEvent->OccurTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OccurTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (OccurTime), Local<v8::Value>(OccurTimeValue));

                    v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                    v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRtnWarningEvent->EvendID);
                    pRtnWarningEventJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->ObjectID);
                    Gb2312ToUtf8(pRtnWarningEvent->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->IPAddress);
                    Gb2312ToUtf8(pRtnWarningEvent->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> EventName = Nan::New<v8::String> ("EventName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->EventName);
                    Gb2312ToUtf8(pRtnWarningEvent->EventName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (EventName), Local<v8::Value>(EventNameValue));

                    v8::Local<v8::String> EventNum = Nan::New<v8::String> ("EventNum").ToLocalChecked();
                    v8::Local<v8::Integer> EventNumValue = Nan::New<v8::Integer> (pRtnWarningEvent->EventNum);
                    pRtnWarningEventJS->Set(Local<v8::Value> (EventNum), Local<v8::Value>(EventNumValue));

                    v8::Local<v8::String> EventType = Nan::New<v8::String> ("EventType").ToLocalChecked();
                    v8::Local<v8::Integer> EventTypeValue = Nan::New<v8::Integer> (pRtnWarningEvent->EventType);
                    pRtnWarningEventJS->Set(Local<v8::Value> (EventType), Local<v8::Value>(EventTypeValue));

                    v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->EventDes);
                    Gb2312ToUtf8(pRtnWarningEvent->EventDes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

                    v8::Local<v8::String> ProcessFlag = Nan::New<v8::String> ("ProcessFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->ProcessFlag);
                    Gb2312ToUtf8(pRtnWarningEvent->ProcessFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ProcessFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (ProcessFlag), Local<v8::Value>(ProcessFlagValue));

                    v8::Local<v8::String> WarningLevel = Nan::New<v8::String> ("WarningLevel").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->WarningLevel);
                    Gb2312ToUtf8(pRtnWarningEvent->WarningLevel, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> WarningLevelValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (WarningLevel), Local<v8::Value>(WarningLevelValue));

                    v8::Local<v8::String> EventDealDes = Nan::New<v8::String> ("EventDealDes").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->EventDealDes);
                    Gb2312ToUtf8(pRtnWarningEvent->EventDealDes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDealDesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (EventDealDes), Local<v8::Value>(EventDealDesValue));

                    v8::Local<v8::String> FullEventName = Nan::New<v8::String> ("FullEventName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningEvent->FullEventName);
                    Gb2312ToUtf8(pRtnWarningEvent->FullEventName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FullEventNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningEventJS->Set(Local<v8::Value> (FullEventName), Local<v8::Value>(FullEventNameValue));

                    v8::Local<v8::String> EventCount = Nan::New<v8::String> ("EventCount").ToLocalChecked();
                    v8::Local<v8::Integer> EventCountValue = Nan::New<v8::Integer> (pRtnWarningEvent->EventCount);
                    pRtnWarningEventJS->Set(Local<v8::Value> (EventCount), Local<v8::Value>(EventCountValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnWarningEvent) { 
                    params[0] = Local<v8::Value>(pRtnWarningEventJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnWarningEvent) { 
                delete pRtnWarningEvent;
                pRtnWarningEvent = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnWarningEventTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryCPUUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryCPUUsageTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryCPUUsageTopic_mutex);

    int ioUserNumb = g_RspQryCPUUsageTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryCPUUsageTopic_IOUser_vec.begin();
        it != g_RspQryCPUUsageTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryCPUUsageTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryCPUUsageTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryCPUUsageTopic_Data_map[*it].front());
            g_RspQryCPUUsageTopic_Data_map[*it].pop();
        }
    }
    g_RspQryCPUUsageTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryCPUUsageTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryCPUUsageTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryCPUUsageTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryCPUUsageTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryCPUUsageTopic").ToLocalChecked());
            CShfeFtdcRspQryCPUUsageField* pRspQryCPUUsage = (CShfeFtdcRspQryCPUUsageField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryCPUUsageTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryCPUUsageTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryCPUUsageJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryCPUUsage) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryCPUUsage->ObjectID);
                    Gb2312ToUtf8(pRspQryCPUUsage->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryCPUUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryCPUUsage->MonDate);
                    Gb2312ToUtf8(pRspQryCPUUsage->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryCPUUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryCPUUsage->MonTime);
                    Gb2312ToUtf8(pRspQryCPUUsage->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryCPUUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> CPUUsage = Nan::New<v8::String> ("CPUUsage").ToLocalChecked();
                    v8::Local<v8::Number> CPUUsageValue = Nan::New<v8::Number> (pRspQryCPUUsage->CPUUsage);
                    pRspQryCPUUsageJS->Set(Local<v8::Value> (CPUUsage), Local<v8::Value>(CPUUsageValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryCPUUsage) { 
                    params[0] = Local<v8::Value>(pRspQryCPUUsageJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryCPUUsage) { 
                delete pRspQryCPUUsage;
                pRspQryCPUUsage = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryCPUUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnCPUUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnCPUUsageTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnCPUUsageTopic_mutex);

    int ioUserNumb = g_RtnCPUUsageTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnCPUUsageTopic_IOUser_vec.begin();
        it != g_RtnCPUUsageTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnCPUUsageTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnCPUUsageTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnCPUUsageTopic_Data_map[*it].front());
            g_RtnCPUUsageTopic_Data_map[*it].pop();
        }
    }
    g_RtnCPUUsageTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnCPUUsageTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnCPUUsageTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnCPUUsageTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnCPUUsageTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnCPUUsageTopic").ToLocalChecked());
            CShfeFtdcRtnCPUUsageField* pRtnCPUUsage = (CShfeFtdcRtnCPUUsageField*)(paramArray[1]);
            if (OnRtnCPUUsageTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnCPUUsageTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnCPUUsageJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnCPUUsage) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnCPUUsage->ObjectID);
                    Gb2312ToUtf8(pRtnCPUUsage->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnCPUUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnCPUUsage->MonDate);
                    Gb2312ToUtf8(pRtnCPUUsage->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnCPUUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnCPUUsage->MonTime);
                    Gb2312ToUtf8(pRtnCPUUsage->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnCPUUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> CPUUsage = Nan::New<v8::String> ("CPUUsage").ToLocalChecked();
                    v8::Local<v8::Number> CPUUsageValue = Nan::New<v8::Number> (pRtnCPUUsage->CPUUsage);
                    pRtnCPUUsageJS->Set(Local<v8::Value> (CPUUsage), Local<v8::Value>(CPUUsageValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnCPUUsage) { 
                    params[0] = Local<v8::Value>(pRtnCPUUsageJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnCPUUsage) { 
                delete pRtnCPUUsage;
                pRtnCPUUsage = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnCPUUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMemoryUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryMemoryUsageTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryMemoryUsageTopic_mutex);

    int ioUserNumb = g_RspQryMemoryUsageTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryMemoryUsageTopic_IOUser_vec.begin();
        it != g_RspQryMemoryUsageTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryMemoryUsageTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryMemoryUsageTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryMemoryUsageTopic_Data_map[*it].front());
            g_RspQryMemoryUsageTopic_Data_map[*it].pop();
        }
    }
    g_RspQryMemoryUsageTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryMemoryUsageTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryMemoryUsageTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryMemoryUsageTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryMemoryUsageTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryMemoryUsageTopic").ToLocalChecked());
            CShfeFtdcRspQryMemoryUsageField* pRspQryMemoryUsage = (CShfeFtdcRspQryMemoryUsageField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryMemoryUsageTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryMemoryUsageTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryMemoryUsageJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryMemoryUsage) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemoryUsage->ObjectID);
                    Gb2312ToUtf8(pRspQryMemoryUsage->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemoryUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemoryUsage->MonDate);
                    Gb2312ToUtf8(pRspQryMemoryUsage->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemoryUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemoryUsage->MonTime);
                    Gb2312ToUtf8(pRspQryMemoryUsage->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemoryUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> MemoryUsage = Nan::New<v8::String> ("MemoryUsage").ToLocalChecked();
                    v8::Local<v8::Number> MemoryUsageValue = Nan::New<v8::Number> (pRspQryMemoryUsage->MemoryUsage);
                    pRspQryMemoryUsageJS->Set(Local<v8::Value> (MemoryUsage), Local<v8::Value>(MemoryUsageValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryMemoryUsage) { 
                    params[0] = Local<v8::Value>(pRspQryMemoryUsageJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryMemoryUsage) { 
                delete pRspQryMemoryUsage;
                pRspQryMemoryUsage = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryMemoryUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMemoryUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnMemoryUsageTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnMemoryUsageTopic_mutex);

    int ioUserNumb = g_RtnMemoryUsageTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnMemoryUsageTopic_IOUser_vec.begin();
        it != g_RtnMemoryUsageTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnMemoryUsageTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnMemoryUsageTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnMemoryUsageTopic_Data_map[*it].front());
            g_RtnMemoryUsageTopic_Data_map[*it].pop();
        }
    }
    g_RtnMemoryUsageTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnMemoryUsageTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnMemoryUsageTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnMemoryUsageTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnMemoryUsageTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnMemoryUsageTopic").ToLocalChecked());
            CShfeFtdcRtnMemoryUsageField* pRtnMemoryUsage = (CShfeFtdcRtnMemoryUsageField*)(paramArray[1]);
            if (OnRtnMemoryUsageTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnMemoryUsageTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnMemoryUsageJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnMemoryUsage) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemoryUsage->ObjectID);
                    Gb2312ToUtf8(pRtnMemoryUsage->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemoryUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemoryUsage->MonDate);
                    Gb2312ToUtf8(pRtnMemoryUsage->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemoryUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemoryUsage->MonTime);
                    Gb2312ToUtf8(pRtnMemoryUsage->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemoryUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> MemoryUsage = Nan::New<v8::String> ("MemoryUsage").ToLocalChecked();
                    v8::Local<v8::Number> MemoryUsageValue = Nan::New<v8::Number> (pRtnMemoryUsage->MemoryUsage);
                    pRtnMemoryUsageJS->Set(Local<v8::Value> (MemoryUsage), Local<v8::Value>(MemoryUsageValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnMemoryUsage) { 
                    params[0] = Local<v8::Value>(pRtnMemoryUsageJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnMemoryUsage) { 
                delete pRtnMemoryUsage;
                pRtnMemoryUsage = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnMemoryUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryDiskUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryDiskUsageTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryDiskUsageTopic_mutex);

    int ioUserNumb = g_RspQryDiskUsageTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryDiskUsageTopic_IOUser_vec.begin();
        it != g_RspQryDiskUsageTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryDiskUsageTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryDiskUsageTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryDiskUsageTopic_Data_map[*it].front());
            g_RspQryDiskUsageTopic_Data_map[*it].pop();
        }
    }
    g_RspQryDiskUsageTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryDiskUsageTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryDiskUsageTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryDiskUsageTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryDiskUsageTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryDiskUsageTopic").ToLocalChecked());
            CShfeFtdcRspQryDiskUsageField* pRspQryDiskUsage = (CShfeFtdcRspQryDiskUsageField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryDiskUsageTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryDiskUsageTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryDiskUsageJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryDiskUsage) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDiskUsage->ObjectID);
                    Gb2312ToUtf8(pRspQryDiskUsage->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDiskUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDiskUsage->MonDate);
                    Gb2312ToUtf8(pRspQryDiskUsage->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDiskUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDiskUsage->MonTime);
                    Gb2312ToUtf8(pRspQryDiskUsage->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDiskUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> DiskUsage = Nan::New<v8::String> ("DiskUsage").ToLocalChecked();
                    v8::Local<v8::Number> DiskUsageValue = Nan::New<v8::Number> (pRspQryDiskUsage->DiskUsage);
                    pRspQryDiskUsageJS->Set(Local<v8::Value> (DiskUsage), Local<v8::Value>(DiskUsageValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryDiskUsage) { 
                    params[0] = Local<v8::Value>(pRspQryDiskUsageJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryDiskUsage) { 
                delete pRspQryDiskUsage;
                pRspQryDiskUsage = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryDiskUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnDiskUsageTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnDiskUsageTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnDiskUsageTopic_mutex);

    int ioUserNumb = g_RtnDiskUsageTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnDiskUsageTopic_IOUser_vec.begin();
        it != g_RtnDiskUsageTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnDiskUsageTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnDiskUsageTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnDiskUsageTopic_Data_map[*it].front());
            g_RtnDiskUsageTopic_Data_map[*it].pop();
        }
    }
    g_RtnDiskUsageTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnDiskUsageTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnDiskUsageTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnDiskUsageTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnDiskUsageTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnDiskUsageTopic").ToLocalChecked());
            CShfeFtdcRtnDiskUsageField* pRtnDiskUsage = (CShfeFtdcRtnDiskUsageField*)(paramArray[1]);
            if (OnRtnDiskUsageTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnDiskUsageTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnDiskUsageJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnDiskUsage) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDiskUsage->ObjectID);
                    Gb2312ToUtf8(pRtnDiskUsage->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDiskUsageJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDiskUsage->MonDate);
                    Gb2312ToUtf8(pRtnDiskUsage->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDiskUsageJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDiskUsage->MonTime);
                    Gb2312ToUtf8(pRtnDiskUsage->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDiskUsageJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> DiskUsage = Nan::New<v8::String> ("DiskUsage").ToLocalChecked();
                    v8::Local<v8::Number> DiskUsageValue = Nan::New<v8::Number> (pRtnDiskUsage->DiskUsage);
                    pRtnDiskUsageJS->Set(Local<v8::Value> (DiskUsage), Local<v8::Value>(DiskUsageValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnDiskUsage) { 
                    params[0] = Local<v8::Value>(pRtnDiskUsageJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnDiskUsage) { 
                delete pRtnDiskUsage;
                pRtnDiskUsage = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnDiskUsageTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryObjectAttrTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryObjectAttrTopic_mutex);

    int ioUserNumb = g_RspQryObjectAttrTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryObjectAttrTopic_IOUser_vec.begin();
        it != g_RspQryObjectAttrTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryObjectAttrTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryObjectAttrTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryObjectAttrTopic_Data_map[*it].front());
            g_RspQryObjectAttrTopic_Data_map[*it].pop();
        }
    }
    g_RspQryObjectAttrTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryObjectAttrTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryObjectAttrTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryObjectAttrTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryObjectAttrTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryObjectAttrTopic").ToLocalChecked());
            CShfeFtdcRspQryObjectAttrField* pRspQryObjectAttr = (CShfeFtdcRspQryObjectAttrField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryObjectAttrTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryObjectAttrTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryObjectAttrJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryObjectAttr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryObjectAttr->ObjectID);
                    Gb2312ToUtf8(pRspQryObjectAttr->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryObjectAttr->AttrType);
                    Gb2312ToUtf8(pRspQryObjectAttr->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryObjectAttr->MonDate);
                    Gb2312ToUtf8(pRspQryObjectAttr->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryObjectAttrJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryObjectAttr->MonTime);
                    Gb2312ToUtf8(pRspQryObjectAttr->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryObjectAttrJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ValueType = Nan::New<v8::String> ("ValueType").ToLocalChecked();
                    v8::Local<v8::Integer> ValueTypeValue = Nan::New<v8::Integer> (pRspQryObjectAttr->ValueType);
                    pRspQryObjectAttrJS->Set(Local<v8::Value> (ValueType), Local<v8::Value>(ValueTypeValue));

                    v8::Local<v8::String> AttrValue = Nan::New<v8::String> ("AttrValue").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryObjectAttr->AttrValue);
                    Gb2312ToUtf8(pRspQryObjectAttr->AttrValue, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrValueValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryObjectAttrJS->Set(Local<v8::Value> (AttrValue), Local<v8::Value>(AttrValueValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryObjectAttr) { 
                    params[0] = Local<v8::Value>(pRspQryObjectAttrJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryObjectAttr) { 
                delete pRspQryObjectAttr;
                pRspQryObjectAttr = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnObjectAttrTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnObjectAttrTopic_mutex);

    int ioUserNumb = g_RtnObjectAttrTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnObjectAttrTopic_IOUser_vec.begin();
        it != g_RtnObjectAttrTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnObjectAttrTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnObjectAttrTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnObjectAttrTopic_Data_map[*it].front());
            g_RtnObjectAttrTopic_Data_map[*it].pop();
        }
    }
    g_RtnObjectAttrTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnObjectAttrTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnObjectAttrTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnObjectAttrTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnObjectAttrTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnObjectAttrTopic").ToLocalChecked());
            CShfeFtdcRtnObjectAttrField* pRtnObjectAttr = (CShfeFtdcRtnObjectAttrField*)(paramArray[1]);
            if (OnRtnObjectAttrTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnObjectAttrTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnObjectAttrJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnObjectAttr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnObjectAttr->ObjectID);
                    Gb2312ToUtf8(pRtnObjectAttr->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnObjectAttr->AttrType);
                    Gb2312ToUtf8(pRtnObjectAttr->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnObjectAttr->MonDate);
                    Gb2312ToUtf8(pRtnObjectAttr->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnObjectAttrJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnObjectAttr->MonTime);
                    Gb2312ToUtf8(pRtnObjectAttr->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnObjectAttrJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ValueType = Nan::New<v8::String> ("ValueType").ToLocalChecked();
                    v8::Local<v8::Integer> ValueTypeValue = Nan::New<v8::Integer> (pRtnObjectAttr->ValueType);
                    pRtnObjectAttrJS->Set(Local<v8::Value> (ValueType), Local<v8::Value>(ValueTypeValue));

                    v8::Local<v8::String> AttrValue = Nan::New<v8::String> ("AttrValue").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnObjectAttr->AttrValue);
                    Gb2312ToUtf8(pRtnObjectAttr->AttrValue, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrValueValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnObjectAttrJS->Set(Local<v8::Value> (AttrValue), Local<v8::Value>(AttrValueValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnObjectAttr) { 
                    params[0] = Local<v8::Value>(pRtnObjectAttrJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnObjectAttr) { 
                delete pRtnObjectAttr;
                pRtnObjectAttr = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryInvalidateOrderTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryInvalidateOrderTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryInvalidateOrderTopic_mutex);

    int ioUserNumb = g_RspQryInvalidateOrderTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryInvalidateOrderTopic_IOUser_vec.begin();
        it != g_RspQryInvalidateOrderTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryInvalidateOrderTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryInvalidateOrderTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryInvalidateOrderTopic_Data_map[*it].front());
            g_RspQryInvalidateOrderTopic_Data_map[*it].pop();
        }
    }
    g_RspQryInvalidateOrderTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryInvalidateOrderTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryInvalidateOrderTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryInvalidateOrderTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryInvalidateOrderTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryInvalidateOrderTopic").ToLocalChecked());
            CShfeFtdcRspQryInvalidateOrderField* pRspQryInvalidateOrder = (CShfeFtdcRspQryInvalidateOrderField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryInvalidateOrderTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryInvalidateOrderTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryInvalidateOrderJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryInvalidateOrder) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->OrderSysID);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->OrderSysID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                    v8::Local<v8::String> OrderLocalID = Nan::New<v8::String> ("OrderLocalID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->OrderLocalID);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->OrderLocalID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderLocalIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (OrderLocalID), Local<v8::Value>(OrderLocalIDValue));

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->ActionDate);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->ActionTime);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ErrorMsg = Nan::New<v8::String> ("ErrorMsg").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->ErrorMsg);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->ErrorMsg, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ErrorMsgValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (ErrorMsg), Local<v8::Value>(ErrorMsgValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->ParticipantID);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->UserID);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->ClientID);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->InstrumentID);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> Direction = Nan::New<v8::String> ("Direction").ToLocalChecked();
                    v8::Local<v8::Integer> DirectionValue = Nan::New<v8::Integer> (pRspQryInvalidateOrder->Direction);
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (Direction), Local<v8::Value>(DirectionValue));

                    v8::Local<v8::String> CombOffsetFlag = Nan::New<v8::String> ("CombOffsetFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->CombOffsetFlag);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->CombOffsetFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CombOffsetFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (CombOffsetFlag), Local<v8::Value>(CombOffsetFlagValue));

                    v8::Local<v8::String> CombHedgeFlag = Nan::New<v8::String> ("CombHedgeFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInvalidateOrder->CombHedgeFlag);
                    Gb2312ToUtf8(pRspQryInvalidateOrder->CombHedgeFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CombHedgeFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (CombHedgeFlag), Local<v8::Value>(CombHedgeFlagValue));

                    v8::Local<v8::String> LimitPrice = Nan::New<v8::String> ("LimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LimitPriceValue = Nan::New<v8::Number> (pRspQryInvalidateOrder->LimitPrice);
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (LimitPrice), Local<v8::Value>(LimitPriceValue));

                    v8::Local<v8::String> VolumeTotalOriginal = Nan::New<v8::String> ("VolumeTotalOriginal").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeTotalOriginalValue = Nan::New<v8::Integer> (pRspQryInvalidateOrder->VolumeTotalOriginal);
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (VolumeTotalOriginal), Local<v8::Value>(VolumeTotalOriginalValue));

                    v8::Local<v8::String> TimeCondition = Nan::New<v8::String> ("TimeCondition").ToLocalChecked();
                    v8::Local<v8::Integer> TimeConditionValue = Nan::New<v8::Integer> (pRspQryInvalidateOrder->TimeCondition);
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (TimeCondition), Local<v8::Value>(TimeConditionValue));

                    v8::Local<v8::String> VolumeCondition = Nan::New<v8::String> ("VolumeCondition").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeConditionValue = Nan::New<v8::Integer> (pRspQryInvalidateOrder->VolumeCondition);
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (VolumeCondition), Local<v8::Value>(VolumeConditionValue));

                    v8::Local<v8::String> MinVolume = Nan::New<v8::String> ("MinVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MinVolumeValue = Nan::New<v8::Integer> (pRspQryInvalidateOrder->MinVolume);
                    pRspQryInvalidateOrderJS->Set(Local<v8::Value> (MinVolume), Local<v8::Value>(MinVolumeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryInvalidateOrder) { 
                    params[0] = Local<v8::Value>(pRspQryInvalidateOrderJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryInvalidateOrder) { 
                delete pRspQryInvalidateOrder;
                pRspQryInvalidateOrder = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryInvalidateOrderTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnInvalidateOrderTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnInvalidateOrderTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnInvalidateOrderTopic_mutex);

    int ioUserNumb = g_RtnInvalidateOrderTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnInvalidateOrderTopic_IOUser_vec.begin();
        it != g_RtnInvalidateOrderTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnInvalidateOrderTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnInvalidateOrderTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnInvalidateOrderTopic_Data_map[*it].front());
            g_RtnInvalidateOrderTopic_Data_map[*it].pop();
        }
    }
    g_RtnInvalidateOrderTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnInvalidateOrderTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnInvalidateOrderTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnInvalidateOrderTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnInvalidateOrderTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnInvalidateOrderTopic").ToLocalChecked());
            CShfeFtdcRtnInvalidateOrderField* pRtnInvalidateOrder = (CShfeFtdcRtnInvalidateOrderField*)(paramArray[1]);
            if (OnRtnInvalidateOrderTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnInvalidateOrderTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnInvalidateOrderJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnInvalidateOrder) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->OrderSysID);
                    Gb2312ToUtf8(pRtnInvalidateOrder->OrderSysID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                    v8::Local<v8::String> OrderLocalID = Nan::New<v8::String> ("OrderLocalID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->OrderLocalID);
                    Gb2312ToUtf8(pRtnInvalidateOrder->OrderLocalID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderLocalIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (OrderLocalID), Local<v8::Value>(OrderLocalIDValue));

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->ActionDate);
                    Gb2312ToUtf8(pRtnInvalidateOrder->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->ActionTime);
                    Gb2312ToUtf8(pRtnInvalidateOrder->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ErrorMsg = Nan::New<v8::String> ("ErrorMsg").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->ErrorMsg);
                    Gb2312ToUtf8(pRtnInvalidateOrder->ErrorMsg, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ErrorMsgValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (ErrorMsg), Local<v8::Value>(ErrorMsgValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->ParticipantID);
                    Gb2312ToUtf8(pRtnInvalidateOrder->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->UserID);
                    Gb2312ToUtf8(pRtnInvalidateOrder->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->ClientID);
                    Gb2312ToUtf8(pRtnInvalidateOrder->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->InstrumentID);
                    Gb2312ToUtf8(pRtnInvalidateOrder->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> Direction = Nan::New<v8::String> ("Direction").ToLocalChecked();
                    v8::Local<v8::Integer> DirectionValue = Nan::New<v8::Integer> (pRtnInvalidateOrder->Direction);
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (Direction), Local<v8::Value>(DirectionValue));

                    v8::Local<v8::String> CombOffsetFlag = Nan::New<v8::String> ("CombOffsetFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->CombOffsetFlag);
                    Gb2312ToUtf8(pRtnInvalidateOrder->CombOffsetFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CombOffsetFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (CombOffsetFlag), Local<v8::Value>(CombOffsetFlagValue));

                    v8::Local<v8::String> CombHedgeFlag = Nan::New<v8::String> ("CombHedgeFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInvalidateOrder->CombHedgeFlag);
                    Gb2312ToUtf8(pRtnInvalidateOrder->CombHedgeFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CombHedgeFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (CombHedgeFlag), Local<v8::Value>(CombHedgeFlagValue));

                    v8::Local<v8::String> LimitPrice = Nan::New<v8::String> ("LimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LimitPriceValue = Nan::New<v8::Number> (pRtnInvalidateOrder->LimitPrice);
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (LimitPrice), Local<v8::Value>(LimitPriceValue));

                    v8::Local<v8::String> VolumeTotalOriginal = Nan::New<v8::String> ("VolumeTotalOriginal").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeTotalOriginalValue = Nan::New<v8::Integer> (pRtnInvalidateOrder->VolumeTotalOriginal);
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (VolumeTotalOriginal), Local<v8::Value>(VolumeTotalOriginalValue));

                    v8::Local<v8::String> TimeCondition = Nan::New<v8::String> ("TimeCondition").ToLocalChecked();
                    v8::Local<v8::Integer> TimeConditionValue = Nan::New<v8::Integer> (pRtnInvalidateOrder->TimeCondition);
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (TimeCondition), Local<v8::Value>(TimeConditionValue));

                    v8::Local<v8::String> VolumeCondition = Nan::New<v8::String> ("VolumeCondition").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeConditionValue = Nan::New<v8::Integer> (pRtnInvalidateOrder->VolumeCondition);
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (VolumeCondition), Local<v8::Value>(VolumeConditionValue));

                    v8::Local<v8::String> MinVolume = Nan::New<v8::String> ("MinVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MinVolumeValue = Nan::New<v8::Integer> (pRtnInvalidateOrder->MinVolume);
                    pRtnInvalidateOrderJS->Set(Local<v8::Value> (MinVolume), Local<v8::Value>(MinVolumeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnInvalidateOrder) { 
                    params[0] = Local<v8::Value>(pRtnInvalidateOrderJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnInvalidateOrder) { 
                delete pRtnInvalidateOrder;
                pRtnInvalidateOrder = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnInvalidateOrderTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryOrderStatusTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryOrderStatusTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryOrderStatusTopic_mutex);

    int ioUserNumb = g_RspQryOrderStatusTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryOrderStatusTopic_IOUser_vec.begin();
        it != g_RspQryOrderStatusTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryOrderStatusTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryOrderStatusTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryOrderStatusTopic_Data_map[*it].front());
            g_RspQryOrderStatusTopic_Data_map[*it].pop();
        }
    }
    g_RspQryOrderStatusTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryOrderStatusTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryOrderStatusTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryOrderStatusTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryOrderStatusTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryOrderStatusTopic").ToLocalChecked());
            CShfeFtdcRspQryOrderStatusField* pRspQryOrderStatus = (CShfeFtdcRspQryOrderStatusField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryOrderStatusTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryOrderStatusTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryOrderStatusJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryOrderStatus) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->ActionDate);
                    Gb2312ToUtf8(pRspQryOrderStatus->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->ActionTime);
                    Gb2312ToUtf8(pRspQryOrderStatus->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->OrderSysID);
                    Gb2312ToUtf8(pRspQryOrderStatus->OrderSysID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                    v8::Local<v8::String> OrderLocalID = Nan::New<v8::String> ("OrderLocalID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->OrderLocalID);
                    Gb2312ToUtf8(pRspQryOrderStatus->OrderLocalID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderLocalIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (OrderLocalID), Local<v8::Value>(OrderLocalIDValue));

                    v8::Local<v8::String> InsertDate = Nan::New<v8::String> ("InsertDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->InsertDate);
                    Gb2312ToUtf8(pRspQryOrderStatus->InsertDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InsertDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (InsertDate), Local<v8::Value>(InsertDateValue));

                    v8::Local<v8::String> InsertTime = Nan::New<v8::String> ("InsertTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->InsertTime);
                    Gb2312ToUtf8(pRspQryOrderStatus->InsertTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InsertTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (InsertTime), Local<v8::Value>(InsertTimeValue));

                    v8::Local<v8::String> OrderStatus = Nan::New<v8::String> ("OrderStatus").ToLocalChecked();
                    v8::Local<v8::Integer> OrderStatusValue = Nan::New<v8::Integer> (pRspQryOrderStatus->OrderStatus);
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (OrderStatus), Local<v8::Value>(OrderStatusValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->ParticipantID);
                    Gb2312ToUtf8(pRspQryOrderStatus->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->UserID);
                    Gb2312ToUtf8(pRspQryOrderStatus->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->ClientID);
                    Gb2312ToUtf8(pRspQryOrderStatus->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->InstrumentID);
                    Gb2312ToUtf8(pRspQryOrderStatus->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> Direction = Nan::New<v8::String> ("Direction").ToLocalChecked();
                    v8::Local<v8::Integer> DirectionValue = Nan::New<v8::Integer> (pRspQryOrderStatus->Direction);
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (Direction), Local<v8::Value>(DirectionValue));

                    v8::Local<v8::String> CombOffsetFlag = Nan::New<v8::String> ("CombOffsetFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->CombOffsetFlag);
                    Gb2312ToUtf8(pRspQryOrderStatus->CombOffsetFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CombOffsetFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (CombOffsetFlag), Local<v8::Value>(CombOffsetFlagValue));

                    v8::Local<v8::String> CombHedgeFlag = Nan::New<v8::String> ("CombHedgeFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOrderStatus->CombHedgeFlag);
                    Gb2312ToUtf8(pRspQryOrderStatus->CombHedgeFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CombHedgeFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (CombHedgeFlag), Local<v8::Value>(CombHedgeFlagValue));

                    v8::Local<v8::String> LimitPrice = Nan::New<v8::String> ("LimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LimitPriceValue = Nan::New<v8::Number> (pRspQryOrderStatus->LimitPrice);
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (LimitPrice), Local<v8::Value>(LimitPriceValue));

                    v8::Local<v8::String> VolumeTotalOriginal = Nan::New<v8::String> ("VolumeTotalOriginal").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeTotalOriginalValue = Nan::New<v8::Integer> (pRspQryOrderStatus->VolumeTotalOriginal);
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (VolumeTotalOriginal), Local<v8::Value>(VolumeTotalOriginalValue));

                    v8::Local<v8::String> TimeCondition = Nan::New<v8::String> ("TimeCondition").ToLocalChecked();
                    v8::Local<v8::Integer> TimeConditionValue = Nan::New<v8::Integer> (pRspQryOrderStatus->TimeCondition);
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (TimeCondition), Local<v8::Value>(TimeConditionValue));

                    v8::Local<v8::String> VolumeCondition = Nan::New<v8::String> ("VolumeCondition").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeConditionValue = Nan::New<v8::Integer> (pRspQryOrderStatus->VolumeCondition);
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (VolumeCondition), Local<v8::Value>(VolumeConditionValue));

                    v8::Local<v8::String> MinVolume = Nan::New<v8::String> ("MinVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MinVolumeValue = Nan::New<v8::Integer> (pRspQryOrderStatus->MinVolume);
                    pRspQryOrderStatusJS->Set(Local<v8::Value> (MinVolume), Local<v8::Value>(MinVolumeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryOrderStatus) { 
                    params[0] = Local<v8::Value>(pRspQryOrderStatusJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryOrderStatus) { 
                delete pRspQryOrderStatus;
                pRspQryOrderStatus = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryOrderStatusTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnOrderStatusTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnOrderStatusTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnOrderStatusTopic_mutex);

    int ioUserNumb = g_RtnOrderStatusTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnOrderStatusTopic_IOUser_vec.begin();
        it != g_RtnOrderStatusTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnOrderStatusTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnOrderStatusTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnOrderStatusTopic_Data_map[*it].front());
            g_RtnOrderStatusTopic_Data_map[*it].pop();
        }
    }
    g_RtnOrderStatusTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnOrderStatusTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnOrderStatusTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnOrderStatusTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnOrderStatusTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnOrderStatusTopic").ToLocalChecked());
            CShfeFtdcRtnOrderStatusField* pRtnOrderStatus = (CShfeFtdcRtnOrderStatusField*)(paramArray[1]);
            if (OnRtnOrderStatusTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnOrderStatusTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnOrderStatusJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnOrderStatus) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->ActionDate);
                    Gb2312ToUtf8(pRtnOrderStatus->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->ActionTime);
                    Gb2312ToUtf8(pRtnOrderStatus->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->OrderSysID);
                    Gb2312ToUtf8(pRtnOrderStatus->OrderSysID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                    v8::Local<v8::String> OrderLocalID = Nan::New<v8::String> ("OrderLocalID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->OrderLocalID);
                    Gb2312ToUtf8(pRtnOrderStatus->OrderLocalID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderLocalIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (OrderLocalID), Local<v8::Value>(OrderLocalIDValue));

                    v8::Local<v8::String> InsertDate = Nan::New<v8::String> ("InsertDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->InsertDate);
                    Gb2312ToUtf8(pRtnOrderStatus->InsertDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InsertDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (InsertDate), Local<v8::Value>(InsertDateValue));

                    v8::Local<v8::String> InsertTime = Nan::New<v8::String> ("InsertTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->InsertTime);
                    Gb2312ToUtf8(pRtnOrderStatus->InsertTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InsertTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (InsertTime), Local<v8::Value>(InsertTimeValue));

                    v8::Local<v8::String> OrderStatus = Nan::New<v8::String> ("OrderStatus").ToLocalChecked();
                    v8::Local<v8::Integer> OrderStatusValue = Nan::New<v8::Integer> (pRtnOrderStatus->OrderStatus);
                    pRtnOrderStatusJS->Set(Local<v8::Value> (OrderStatus), Local<v8::Value>(OrderStatusValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->ParticipantID);
                    Gb2312ToUtf8(pRtnOrderStatus->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->UserID);
                    Gb2312ToUtf8(pRtnOrderStatus->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->ClientID);
                    Gb2312ToUtf8(pRtnOrderStatus->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->InstrumentID);
                    Gb2312ToUtf8(pRtnOrderStatus->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> Direction = Nan::New<v8::String> ("Direction").ToLocalChecked();
                    v8::Local<v8::Integer> DirectionValue = Nan::New<v8::Integer> (pRtnOrderStatus->Direction);
                    pRtnOrderStatusJS->Set(Local<v8::Value> (Direction), Local<v8::Value>(DirectionValue));

                    v8::Local<v8::String> CombOffsetFlag = Nan::New<v8::String> ("CombOffsetFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->CombOffsetFlag);
                    Gb2312ToUtf8(pRtnOrderStatus->CombOffsetFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CombOffsetFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (CombOffsetFlag), Local<v8::Value>(CombOffsetFlagValue));

                    v8::Local<v8::String> CombHedgeFlag = Nan::New<v8::String> ("CombHedgeFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnOrderStatus->CombHedgeFlag);
                    Gb2312ToUtf8(pRtnOrderStatus->CombHedgeFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CombHedgeFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnOrderStatusJS->Set(Local<v8::Value> (CombHedgeFlag), Local<v8::Value>(CombHedgeFlagValue));

                    v8::Local<v8::String> LimitPrice = Nan::New<v8::String> ("LimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LimitPriceValue = Nan::New<v8::Number> (pRtnOrderStatus->LimitPrice);
                    pRtnOrderStatusJS->Set(Local<v8::Value> (LimitPrice), Local<v8::Value>(LimitPriceValue));

                    v8::Local<v8::String> VolumeTotalOriginal = Nan::New<v8::String> ("VolumeTotalOriginal").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeTotalOriginalValue = Nan::New<v8::Integer> (pRtnOrderStatus->VolumeTotalOriginal);
                    pRtnOrderStatusJS->Set(Local<v8::Value> (VolumeTotalOriginal), Local<v8::Value>(VolumeTotalOriginalValue));

                    v8::Local<v8::String> TimeCondition = Nan::New<v8::String> ("TimeCondition").ToLocalChecked();
                    v8::Local<v8::Integer> TimeConditionValue = Nan::New<v8::Integer> (pRtnOrderStatus->TimeCondition);
                    pRtnOrderStatusJS->Set(Local<v8::Value> (TimeCondition), Local<v8::Value>(TimeConditionValue));

                    v8::Local<v8::String> VolumeCondition = Nan::New<v8::String> ("VolumeCondition").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeConditionValue = Nan::New<v8::Integer> (pRtnOrderStatus->VolumeCondition);
                    pRtnOrderStatusJS->Set(Local<v8::Value> (VolumeCondition), Local<v8::Value>(VolumeConditionValue));

                    v8::Local<v8::String> MinVolume = Nan::New<v8::String> ("MinVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MinVolumeValue = Nan::New<v8::Integer> (pRtnOrderStatus->MinVolume);
                    pRtnOrderStatusJS->Set(Local<v8::Value> (MinVolume), Local<v8::Value>(MinVolumeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnOrderStatus) { 
                    params[0] = Local<v8::Value>(pRtnOrderStatusJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnOrderStatus) { 
                delete pRtnOrderStatus;
                pRtnOrderStatus = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnOrderStatusTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryBargainOrderTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryBargainOrderTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryBargainOrderTopic_mutex);

    int ioUserNumb = g_RspQryBargainOrderTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryBargainOrderTopic_IOUser_vec.begin();
        it != g_RspQryBargainOrderTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryBargainOrderTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryBargainOrderTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryBargainOrderTopic_Data_map[*it].front());
            g_RspQryBargainOrderTopic_Data_map[*it].pop();
        }
    }
    g_RspQryBargainOrderTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryBargainOrderTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryBargainOrderTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryBargainOrderTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryBargainOrderTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryBargainOrderTopic").ToLocalChecked());
            CShfeFtdcRspQryBargainOrderField* pRspQryBargainOrder = (CShfeFtdcRspQryBargainOrderField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryBargainOrderTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryBargainOrderTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryBargainOrderJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryBargainOrder) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryBargainOrder->ActionDate);
                    Gb2312ToUtf8(pRspQryBargainOrder->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryBargainOrderJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryBargainOrder->ActionTime);
                    Gb2312ToUtf8(pRspQryBargainOrder->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryBargainOrderJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> TradeID = Nan::New<v8::String> ("TradeID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryBargainOrder->TradeID);
                    Gb2312ToUtf8(pRspQryBargainOrder->TradeID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TradeIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryBargainOrderJS->Set(Local<v8::Value> (TradeID), Local<v8::Value>(TradeIDValue));

                    v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryBargainOrder->OrderSysID);
                    Gb2312ToUtf8(pRspQryBargainOrder->OrderSysID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryBargainOrderJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryBargainOrder->InstrumentID);
                    Gb2312ToUtf8(pRspQryBargainOrder->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryBargainOrderJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> Price = Nan::New<v8::String> ("Price").ToLocalChecked();
                    v8::Local<v8::Number> PriceValue = Nan::New<v8::Number> (pRspQryBargainOrder->Price);
                    pRspQryBargainOrderJS->Set(Local<v8::Value> (Price), Local<v8::Value>(PriceValue));

                    v8::Local<v8::String> Volume = Nan::New<v8::String> ("Volume").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeValue = Nan::New<v8::Integer> (pRspQryBargainOrder->Volume);
                    pRspQryBargainOrderJS->Set(Local<v8::Value> (Volume), Local<v8::Value>(VolumeValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryBargainOrder->ParticipantID);
                    Gb2312ToUtf8(pRspQryBargainOrder->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryBargainOrderJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryBargainOrder->UserID);
                    Gb2312ToUtf8(pRspQryBargainOrder->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryBargainOrderJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryBargainOrder->ClientID);
                    Gb2312ToUtf8(pRspQryBargainOrder->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryBargainOrderJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryBargainOrder) { 
                    params[0] = Local<v8::Value>(pRspQryBargainOrderJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryBargainOrder) { 
                delete pRspQryBargainOrder;
                pRspQryBargainOrder = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryBargainOrderTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnBargainOrderTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnBargainOrderTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnBargainOrderTopic_mutex);

    int ioUserNumb = g_RtnBargainOrderTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnBargainOrderTopic_IOUser_vec.begin();
        it != g_RtnBargainOrderTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnBargainOrderTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnBargainOrderTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnBargainOrderTopic_Data_map[*it].front());
            g_RtnBargainOrderTopic_Data_map[*it].pop();
        }
    }
    g_RtnBargainOrderTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnBargainOrderTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnBargainOrderTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnBargainOrderTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnBargainOrderTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnBargainOrderTopic").ToLocalChecked());
            CShfeFtdcRtnBargainOrderField* pRtnBargainOrder = (CShfeFtdcRtnBargainOrderField*)(paramArray[1]);
            if (OnRtnBargainOrderTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnBargainOrderTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnBargainOrderJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnBargainOrder) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnBargainOrder->ActionDate);
                    Gb2312ToUtf8(pRtnBargainOrder->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnBargainOrderJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnBargainOrder->ActionTime);
                    Gb2312ToUtf8(pRtnBargainOrder->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnBargainOrderJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> TradeID = Nan::New<v8::String> ("TradeID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnBargainOrder->TradeID);
                    Gb2312ToUtf8(pRtnBargainOrder->TradeID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TradeIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnBargainOrderJS->Set(Local<v8::Value> (TradeID), Local<v8::Value>(TradeIDValue));

                    v8::Local<v8::String> OrderSysID = Nan::New<v8::String> ("OrderSysID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnBargainOrder->OrderSysID);
                    Gb2312ToUtf8(pRtnBargainOrder->OrderSysID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderSysIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnBargainOrderJS->Set(Local<v8::Value> (OrderSysID), Local<v8::Value>(OrderSysIDValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnBargainOrder->InstrumentID);
                    Gb2312ToUtf8(pRtnBargainOrder->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnBargainOrderJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> Price = Nan::New<v8::String> ("Price").ToLocalChecked();
                    v8::Local<v8::Number> PriceValue = Nan::New<v8::Number> (pRtnBargainOrder->Price);
                    pRtnBargainOrderJS->Set(Local<v8::Value> (Price), Local<v8::Value>(PriceValue));

                    v8::Local<v8::String> Volume = Nan::New<v8::String> ("Volume").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeValue = Nan::New<v8::Integer> (pRtnBargainOrder->Volume);
                    pRtnBargainOrderJS->Set(Local<v8::Value> (Volume), Local<v8::Value>(VolumeValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnBargainOrder->ParticipantID);
                    Gb2312ToUtf8(pRtnBargainOrder->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnBargainOrderJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnBargainOrder->UserID);
                    Gb2312ToUtf8(pRtnBargainOrder->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnBargainOrderJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnBargainOrder->ClientID);
                    Gb2312ToUtf8(pRtnBargainOrder->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnBargainOrderJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnBargainOrder) { 
                    params[0] = Local<v8::Value>(pRtnBargainOrderJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnBargainOrder) { 
                delete pRtnBargainOrder;
                pRtnBargainOrder = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnBargainOrderTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryInstPropertyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryInstPropertyTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryInstPropertyTopic_mutex);

    int ioUserNumb = g_RspQryInstPropertyTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryInstPropertyTopic_IOUser_vec.begin();
        it != g_RspQryInstPropertyTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryInstPropertyTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryInstPropertyTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryInstPropertyTopic_Data_map[*it].front());
            g_RspQryInstPropertyTopic_Data_map[*it].pop();
        }
    }
    g_RspQryInstPropertyTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryInstPropertyTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryInstPropertyTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryInstPropertyTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryInstPropertyTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryInstPropertyTopic").ToLocalChecked());
            CShfeFtdcRspQryInstPropertyField* pRspQryInstProperty = (CShfeFtdcRspQryInstPropertyField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryInstPropertyTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryInstPropertyTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryInstPropertyJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryInstProperty) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstProperty->ActionDate);
                    Gb2312ToUtf8(pRspQryInstProperty->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstProperty->ActionTime);
                    Gb2312ToUtf8(pRspQryInstProperty->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstProperty->InstrumentID);
                    Gb2312ToUtf8(pRspQryInstProperty->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstProperty->SettlementGroupID);
                    Gb2312ToUtf8(pRspQryInstProperty->SettlementGroupID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                    v8::Local<v8::String> UnderlyingInstrID = Nan::New<v8::String> ("UnderlyingInstrID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstProperty->UnderlyingInstrID);
                    Gb2312ToUtf8(pRspQryInstProperty->UnderlyingInstrID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UnderlyingInstrIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (UnderlyingInstrID), Local<v8::Value>(UnderlyingInstrIDValue));

                    v8::Local<v8::String> ProductClass = Nan::New<v8::String> ("ProductClass").ToLocalChecked();
                    v8::Local<v8::Integer> ProductClassValue = Nan::New<v8::Integer> (pRspQryInstProperty->ProductClass);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (ProductClass), Local<v8::Value>(ProductClassValue));

                    v8::Local<v8::String> PositionType = Nan::New<v8::String> ("PositionType").ToLocalChecked();
                    v8::Local<v8::Integer> PositionTypeValue = Nan::New<v8::Integer> (pRspQryInstProperty->PositionType);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (PositionType), Local<v8::Value>(PositionTypeValue));

                    v8::Local<v8::String> VolumeMultiple = Nan::New<v8::String> ("VolumeMultiple").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeMultipleValue = Nan::New<v8::Integer> (pRspQryInstProperty->VolumeMultiple);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (VolumeMultiple), Local<v8::Value>(VolumeMultipleValue));

                    v8::Local<v8::String> UnderlyingMultiple = Nan::New<v8::String> ("UnderlyingMultiple").ToLocalChecked();
                    v8::Local<v8::Number> UnderlyingMultipleValue = Nan::New<v8::Number> (pRspQryInstProperty->UnderlyingMultiple);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (UnderlyingMultiple), Local<v8::Value>(UnderlyingMultipleValue));

                    v8::Local<v8::String> InstLifePhase = Nan::New<v8::String> ("InstLifePhase").ToLocalChecked();
                    v8::Local<v8::Integer> InstLifePhaseValue = Nan::New<v8::Integer> (pRspQryInstProperty->InstLifePhase);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (InstLifePhase), Local<v8::Value>(InstLifePhaseValue));

                    v8::Local<v8::String> OpenDate = Nan::New<v8::String> ("OpenDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstProperty->OpenDate);
                    Gb2312ToUtf8(pRspQryInstProperty->OpenDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OpenDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (OpenDate), Local<v8::Value>(OpenDateValue));

                    v8::Local<v8::String> ExpireDate = Nan::New<v8::String> ("ExpireDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstProperty->ExpireDate);
                    Gb2312ToUtf8(pRspQryInstProperty->ExpireDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ExpireDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (ExpireDate), Local<v8::Value>(ExpireDateValue));

                    v8::Local<v8::String> StartDelivDate = Nan::New<v8::String> ("StartDelivDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstProperty->StartDelivDate);
                    Gb2312ToUtf8(pRspQryInstProperty->StartDelivDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartDelivDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (StartDelivDate), Local<v8::Value>(StartDelivDateValue));

                    v8::Local<v8::String> EndDelivDate = Nan::New<v8::String> ("EndDelivDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstProperty->EndDelivDate);
                    Gb2312ToUtf8(pRspQryInstProperty->EndDelivDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndDelivDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (EndDelivDate), Local<v8::Value>(EndDelivDateValue));

                    v8::Local<v8::String> BasisPrice = Nan::New<v8::String> ("BasisPrice").ToLocalChecked();
                    v8::Local<v8::Number> BasisPriceValue = Nan::New<v8::Number> (pRspQryInstProperty->BasisPrice);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (BasisPrice), Local<v8::Value>(BasisPriceValue));

                    v8::Local<v8::String> MaxMarketOrderVolume = Nan::New<v8::String> ("MaxMarketOrderVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MaxMarketOrderVolumeValue = Nan::New<v8::Integer> (pRspQryInstProperty->MaxMarketOrderVolume);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (MaxMarketOrderVolume), Local<v8::Value>(MaxMarketOrderVolumeValue));

                    v8::Local<v8::String> MinMarketOrderVolume = Nan::New<v8::String> ("MinMarketOrderVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MinMarketOrderVolumeValue = Nan::New<v8::Integer> (pRspQryInstProperty->MinMarketOrderVolume);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (MinMarketOrderVolume), Local<v8::Value>(MinMarketOrderVolumeValue));

                    v8::Local<v8::String> MaxLimitOrderVolume = Nan::New<v8::String> ("MaxLimitOrderVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MaxLimitOrderVolumeValue = Nan::New<v8::Integer> (pRspQryInstProperty->MaxLimitOrderVolume);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (MaxLimitOrderVolume), Local<v8::Value>(MaxLimitOrderVolumeValue));

                    v8::Local<v8::String> MinLimitOrderVolume = Nan::New<v8::String> ("MinLimitOrderVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MinLimitOrderVolumeValue = Nan::New<v8::Integer> (pRspQryInstProperty->MinLimitOrderVolume);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (MinLimitOrderVolume), Local<v8::Value>(MinLimitOrderVolumeValue));

                    v8::Local<v8::String> PriceTick = Nan::New<v8::String> ("PriceTick").ToLocalChecked();
                    v8::Local<v8::Number> PriceTickValue = Nan::New<v8::Number> (pRspQryInstProperty->PriceTick);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (PriceTick), Local<v8::Value>(PriceTickValue));

                    v8::Local<v8::String> AllowDelivPersonOpen = Nan::New<v8::String> ("AllowDelivPersonOpen").ToLocalChecked();
                    v8::Local<v8::Integer> AllowDelivPersonOpenValue = Nan::New<v8::Integer> (pRspQryInstProperty->AllowDelivPersonOpen);
                    pRspQryInstPropertyJS->Set(Local<v8::Value> (AllowDelivPersonOpen), Local<v8::Value>(AllowDelivPersonOpenValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryInstProperty) { 
                    params[0] = Local<v8::Value>(pRspQryInstPropertyJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryInstProperty) { 
                delete pRspQryInstProperty;
                pRspQryInstProperty = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryInstPropertyTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnInstPropertyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnInstPropertyTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnInstPropertyTopic_mutex);

    int ioUserNumb = g_RtnInstPropertyTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnInstPropertyTopic_IOUser_vec.begin();
        it != g_RtnInstPropertyTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnInstPropertyTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnInstPropertyTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnInstPropertyTopic_Data_map[*it].front());
            g_RtnInstPropertyTopic_Data_map[*it].pop();
        }
    }
    g_RtnInstPropertyTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnInstPropertyTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnInstPropertyTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnInstPropertyTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnInstPropertyTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnInstPropertyTopic").ToLocalChecked());
            CShfeFtdcRtnInstPropertyField* pRtnInstProperty = (CShfeFtdcRtnInstPropertyField*)(paramArray[1]);
            if (OnRtnInstPropertyTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnInstPropertyTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnInstPropertyJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnInstProperty) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstProperty->ActionDate);
                    Gb2312ToUtf8(pRtnInstProperty->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstPropertyJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstProperty->ActionTime);
                    Gb2312ToUtf8(pRtnInstProperty->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstPropertyJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstProperty->InstrumentID);
                    Gb2312ToUtf8(pRtnInstProperty->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstPropertyJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstProperty->SettlementGroupID);
                    Gb2312ToUtf8(pRtnInstProperty->SettlementGroupID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstPropertyJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                    v8::Local<v8::String> UnderlyingInstrID = Nan::New<v8::String> ("UnderlyingInstrID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstProperty->UnderlyingInstrID);
                    Gb2312ToUtf8(pRtnInstProperty->UnderlyingInstrID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UnderlyingInstrIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstPropertyJS->Set(Local<v8::Value> (UnderlyingInstrID), Local<v8::Value>(UnderlyingInstrIDValue));

                    v8::Local<v8::String> ProductClass = Nan::New<v8::String> ("ProductClass").ToLocalChecked();
                    v8::Local<v8::Integer> ProductClassValue = Nan::New<v8::Integer> (pRtnInstProperty->ProductClass);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (ProductClass), Local<v8::Value>(ProductClassValue));

                    v8::Local<v8::String> PositionType = Nan::New<v8::String> ("PositionType").ToLocalChecked();
                    v8::Local<v8::Integer> PositionTypeValue = Nan::New<v8::Integer> (pRtnInstProperty->PositionType);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (PositionType), Local<v8::Value>(PositionTypeValue));

                    v8::Local<v8::String> VolumeMultiple = Nan::New<v8::String> ("VolumeMultiple").ToLocalChecked();
                    v8::Local<v8::Integer> VolumeMultipleValue = Nan::New<v8::Integer> (pRtnInstProperty->VolumeMultiple);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (VolumeMultiple), Local<v8::Value>(VolumeMultipleValue));

                    v8::Local<v8::String> UnderlyingMultiple = Nan::New<v8::String> ("UnderlyingMultiple").ToLocalChecked();
                    v8::Local<v8::Number> UnderlyingMultipleValue = Nan::New<v8::Number> (pRtnInstProperty->UnderlyingMultiple);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (UnderlyingMultiple), Local<v8::Value>(UnderlyingMultipleValue));

                    v8::Local<v8::String> InstLifePhase = Nan::New<v8::String> ("InstLifePhase").ToLocalChecked();
                    v8::Local<v8::Integer> InstLifePhaseValue = Nan::New<v8::Integer> (pRtnInstProperty->InstLifePhase);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (InstLifePhase), Local<v8::Value>(InstLifePhaseValue));

                    v8::Local<v8::String> OpenDate = Nan::New<v8::String> ("OpenDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstProperty->OpenDate);
                    Gb2312ToUtf8(pRtnInstProperty->OpenDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OpenDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstPropertyJS->Set(Local<v8::Value> (OpenDate), Local<v8::Value>(OpenDateValue));

                    v8::Local<v8::String> ExpireDate = Nan::New<v8::String> ("ExpireDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstProperty->ExpireDate);
                    Gb2312ToUtf8(pRtnInstProperty->ExpireDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ExpireDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstPropertyJS->Set(Local<v8::Value> (ExpireDate), Local<v8::Value>(ExpireDateValue));

                    v8::Local<v8::String> StartDelivDate = Nan::New<v8::String> ("StartDelivDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstProperty->StartDelivDate);
                    Gb2312ToUtf8(pRtnInstProperty->StartDelivDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartDelivDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstPropertyJS->Set(Local<v8::Value> (StartDelivDate), Local<v8::Value>(StartDelivDateValue));

                    v8::Local<v8::String> EndDelivDate = Nan::New<v8::String> ("EndDelivDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstProperty->EndDelivDate);
                    Gb2312ToUtf8(pRtnInstProperty->EndDelivDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndDelivDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstPropertyJS->Set(Local<v8::Value> (EndDelivDate), Local<v8::Value>(EndDelivDateValue));

                    v8::Local<v8::String> BasisPrice = Nan::New<v8::String> ("BasisPrice").ToLocalChecked();
                    v8::Local<v8::Number> BasisPriceValue = Nan::New<v8::Number> (pRtnInstProperty->BasisPrice);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (BasisPrice), Local<v8::Value>(BasisPriceValue));

                    v8::Local<v8::String> MaxMarketOrderVolume = Nan::New<v8::String> ("MaxMarketOrderVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MaxMarketOrderVolumeValue = Nan::New<v8::Integer> (pRtnInstProperty->MaxMarketOrderVolume);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (MaxMarketOrderVolume), Local<v8::Value>(MaxMarketOrderVolumeValue));

                    v8::Local<v8::String> MinMarketOrderVolume = Nan::New<v8::String> ("MinMarketOrderVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MinMarketOrderVolumeValue = Nan::New<v8::Integer> (pRtnInstProperty->MinMarketOrderVolume);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (MinMarketOrderVolume), Local<v8::Value>(MinMarketOrderVolumeValue));

                    v8::Local<v8::String> MaxLimitOrderVolume = Nan::New<v8::String> ("MaxLimitOrderVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MaxLimitOrderVolumeValue = Nan::New<v8::Integer> (pRtnInstProperty->MaxLimitOrderVolume);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (MaxLimitOrderVolume), Local<v8::Value>(MaxLimitOrderVolumeValue));

                    v8::Local<v8::String> MinLimitOrderVolume = Nan::New<v8::String> ("MinLimitOrderVolume").ToLocalChecked();
                    v8::Local<v8::Integer> MinLimitOrderVolumeValue = Nan::New<v8::Integer> (pRtnInstProperty->MinLimitOrderVolume);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (MinLimitOrderVolume), Local<v8::Value>(MinLimitOrderVolumeValue));

                    v8::Local<v8::String> PriceTick = Nan::New<v8::String> ("PriceTick").ToLocalChecked();
                    v8::Local<v8::Number> PriceTickValue = Nan::New<v8::Number> (pRtnInstProperty->PriceTick);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (PriceTick), Local<v8::Value>(PriceTickValue));

                    v8::Local<v8::String> AllowDelivPersonOpen = Nan::New<v8::String> ("AllowDelivPersonOpen").ToLocalChecked();
                    v8::Local<v8::Integer> AllowDelivPersonOpenValue = Nan::New<v8::Integer> (pRtnInstProperty->AllowDelivPersonOpen);
                    pRtnInstPropertyJS->Set(Local<v8::Value> (AllowDelivPersonOpen), Local<v8::Value>(AllowDelivPersonOpenValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnInstProperty) { 
                    params[0] = Local<v8::Value>(pRtnInstPropertyJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnInstProperty) { 
                delete pRtnInstProperty;
                pRtnInstProperty = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnInstPropertyTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMarginRateTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryMarginRateTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryMarginRateTopic_mutex);

    int ioUserNumb = g_RspQryMarginRateTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryMarginRateTopic_IOUser_vec.begin();
        it != g_RspQryMarginRateTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryMarginRateTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryMarginRateTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryMarginRateTopic_Data_map[*it].front());
            g_RspQryMarginRateTopic_Data_map[*it].pop();
        }
    }
    g_RspQryMarginRateTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryMarginRateTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryMarginRateTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryMarginRateTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryMarginRateTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryMarginRateTopic").ToLocalChecked());
            CShfeFtdcRspQryMarginRateField* pRspQryMarginRate = (CShfeFtdcRspQryMarginRateField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryMarginRateTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryMarginRateTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryMarginRateJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryMarginRate) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMarginRate->ActionDate);
                    Gb2312ToUtf8(pRspQryMarginRate->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMarginRateJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMarginRate->ActionTime);
                    Gb2312ToUtf8(pRspQryMarginRate->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMarginRateJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMarginRate->InstrumentID);
                    Gb2312ToUtf8(pRspQryMarginRate->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMarginRateJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMarginRate->ParticipantID);
                    Gb2312ToUtf8(pRspQryMarginRate->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMarginRateJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryMarginRate->TradingRole);
                    pRspQryMarginRateJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> HedgeFlag = Nan::New<v8::String> ("HedgeFlag").ToLocalChecked();
                    v8::Local<v8::Integer> HedgeFlagValue = Nan::New<v8::Integer> (pRspQryMarginRate->HedgeFlag);
                    pRspQryMarginRateJS->Set(Local<v8::Value> (HedgeFlag), Local<v8::Value>(HedgeFlagValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryMarginRate->ValueMode);
                    pRspQryMarginRateJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongMarginRatio = Nan::New<v8::String> ("LongMarginRatio").ToLocalChecked();
                    v8::Local<v8::Number> LongMarginRatioValue = Nan::New<v8::Number> (pRspQryMarginRate->LongMarginRatio);
                    pRspQryMarginRateJS->Set(Local<v8::Value> (LongMarginRatio), Local<v8::Value>(LongMarginRatioValue));

                    v8::Local<v8::String> ShortMarginRatio = Nan::New<v8::String> ("ShortMarginRatio").ToLocalChecked();
                    v8::Local<v8::Number> ShortMarginRatioValue = Nan::New<v8::Number> (pRspQryMarginRate->ShortMarginRatio);
                    pRspQryMarginRateJS->Set(Local<v8::Value> (ShortMarginRatio), Local<v8::Value>(ShortMarginRatioValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryMarginRate) { 
                    params[0] = Local<v8::Value>(pRspQryMarginRateJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryMarginRate) { 
                delete pRspQryMarginRate;
                pRspQryMarginRate = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryMarginRateTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMarginRateTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnMarginRateTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnMarginRateTopic_mutex);

    int ioUserNumb = g_RtnMarginRateTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnMarginRateTopic_IOUser_vec.begin();
        it != g_RtnMarginRateTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnMarginRateTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnMarginRateTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnMarginRateTopic_Data_map[*it].front());
            g_RtnMarginRateTopic_Data_map[*it].pop();
        }
    }
    g_RtnMarginRateTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnMarginRateTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnMarginRateTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnMarginRateTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnMarginRateTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnMarginRateTopic").ToLocalChecked());
            CShfeFtdcRtnMarginRateField* pRtnMarginRate = (CShfeFtdcRtnMarginRateField*)(paramArray[1]);
            if (OnRtnMarginRateTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnMarginRateTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnMarginRateJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnMarginRate) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMarginRate->ActionDate);
                    Gb2312ToUtf8(pRtnMarginRate->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMarginRateJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMarginRate->ActionTime);
                    Gb2312ToUtf8(pRtnMarginRate->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMarginRateJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMarginRate->InstrumentID);
                    Gb2312ToUtf8(pRtnMarginRate->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMarginRateJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMarginRate->ParticipantID);
                    Gb2312ToUtf8(pRtnMarginRate->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMarginRateJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnMarginRate->TradingRole);
                    pRtnMarginRateJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> HedgeFlag = Nan::New<v8::String> ("HedgeFlag").ToLocalChecked();
                    v8::Local<v8::Integer> HedgeFlagValue = Nan::New<v8::Integer> (pRtnMarginRate->HedgeFlag);
                    pRtnMarginRateJS->Set(Local<v8::Value> (HedgeFlag), Local<v8::Value>(HedgeFlagValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnMarginRate->ValueMode);
                    pRtnMarginRateJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongMarginRatio = Nan::New<v8::String> ("LongMarginRatio").ToLocalChecked();
                    v8::Local<v8::Number> LongMarginRatioValue = Nan::New<v8::Number> (pRtnMarginRate->LongMarginRatio);
                    pRtnMarginRateJS->Set(Local<v8::Value> (LongMarginRatio), Local<v8::Value>(LongMarginRatioValue));

                    v8::Local<v8::String> ShortMarginRatio = Nan::New<v8::String> ("ShortMarginRatio").ToLocalChecked();
                    v8::Local<v8::Number> ShortMarginRatioValue = Nan::New<v8::Number> (pRtnMarginRate->ShortMarginRatio);
                    pRtnMarginRateJS->Set(Local<v8::Value> (ShortMarginRatio), Local<v8::Value>(ShortMarginRatioValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnMarginRate) { 
                    params[0] = Local<v8::Value>(pRtnMarginRateJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnMarginRate) { 
                delete pRtnMarginRate;
                pRtnMarginRate = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnMarginRateTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPriceLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryPriceLimitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryPriceLimitTopic_mutex);

    int ioUserNumb = g_RspQryPriceLimitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryPriceLimitTopic_IOUser_vec.begin();
        it != g_RspQryPriceLimitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryPriceLimitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryPriceLimitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryPriceLimitTopic_Data_map[*it].front());
            g_RspQryPriceLimitTopic_Data_map[*it].pop();
        }
    }
    g_RspQryPriceLimitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryPriceLimitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryPriceLimitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryPriceLimitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryPriceLimitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryPriceLimitTopic").ToLocalChecked());
            CShfeFtdcRspQryPriceLimitField* pRspQryPriceLimit = (CShfeFtdcRspQryPriceLimitField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryPriceLimitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryPriceLimitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryPriceLimitJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryPriceLimit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPriceLimit->ActionDate);
                    Gb2312ToUtf8(pRspQryPriceLimit->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPriceLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPriceLimit->ActionTime);
                    Gb2312ToUtf8(pRspQryPriceLimit->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPriceLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPriceLimit->InstrumentID);
                    Gb2312ToUtf8(pRspQryPriceLimit->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPriceLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryPriceLimit->ValueMode);
                    pRspQryPriceLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> RoundingMode = Nan::New<v8::String> ("RoundingMode").ToLocalChecked();
                    v8::Local<v8::Integer> RoundingModeValue = Nan::New<v8::Integer> (pRspQryPriceLimit->RoundingMode);
                    pRspQryPriceLimitJS->Set(Local<v8::Value> (RoundingMode), Local<v8::Value>(RoundingModeValue));

                    v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRspQryPriceLimit->UpperLimitPrice);
                    pRspQryPriceLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                    v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRspQryPriceLimit->LowerLimitPrice);
                    pRspQryPriceLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryPriceLimit) { 
                    params[0] = Local<v8::Value>(pRspQryPriceLimitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryPriceLimit) { 
                delete pRspQryPriceLimit;
                pRspQryPriceLimit = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryPriceLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPriceLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnPriceLimitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnPriceLimitTopic_mutex);

    int ioUserNumb = g_RtnPriceLimitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnPriceLimitTopic_IOUser_vec.begin();
        it != g_RtnPriceLimitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnPriceLimitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnPriceLimitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnPriceLimitTopic_Data_map[*it].front());
            g_RtnPriceLimitTopic_Data_map[*it].pop();
        }
    }
    g_RtnPriceLimitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnPriceLimitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnPriceLimitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnPriceLimitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnPriceLimitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnPriceLimitTopic").ToLocalChecked());
            CShfeFtdcRtnPriceLimitField* pRtnPriceLimit = (CShfeFtdcRtnPriceLimitField*)(paramArray[1]);
            if (OnRtnPriceLimitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnPriceLimitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnPriceLimitJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnPriceLimit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPriceLimit->ActionDate);
                    Gb2312ToUtf8(pRtnPriceLimit->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPriceLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPriceLimit->ActionTime);
                    Gb2312ToUtf8(pRtnPriceLimit->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPriceLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPriceLimit->InstrumentID);
                    Gb2312ToUtf8(pRtnPriceLimit->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPriceLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnPriceLimit->ValueMode);
                    pRtnPriceLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> RoundingMode = Nan::New<v8::String> ("RoundingMode").ToLocalChecked();
                    v8::Local<v8::Integer> RoundingModeValue = Nan::New<v8::Integer> (pRtnPriceLimit->RoundingMode);
                    pRtnPriceLimitJS->Set(Local<v8::Value> (RoundingMode), Local<v8::Value>(RoundingModeValue));

                    v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRtnPriceLimit->UpperLimitPrice);
                    pRtnPriceLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                    v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRtnPriceLimit->LowerLimitPrice);
                    pRtnPriceLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnPriceLimit) { 
                    params[0] = Local<v8::Value>(pRtnPriceLimitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnPriceLimit) { 
                delete pRtnPriceLimit;
                pRtnPriceLimit = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnPriceLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPartPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryPartPosiLimitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryPartPosiLimitTopic_mutex);

    int ioUserNumb = g_RspQryPartPosiLimitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryPartPosiLimitTopic_IOUser_vec.begin();
        it != g_RspQryPartPosiLimitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryPartPosiLimitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryPartPosiLimitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryPartPosiLimitTopic_Data_map[*it].front());
            g_RspQryPartPosiLimitTopic_Data_map[*it].pop();
        }
    }
    g_RspQryPartPosiLimitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryPartPosiLimitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryPartPosiLimitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryPartPosiLimitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryPartPosiLimitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryPartPosiLimitTopic").ToLocalChecked());
            CShfeFtdcRspQryPartPosiLimitField* pRspQryPartPosiLimit = (CShfeFtdcRspQryPartPosiLimitField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryPartPosiLimitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryPartPosiLimitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryPartPosiLimitJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryPartPosiLimit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartPosiLimit->ActionDate);
                    Gb2312ToUtf8(pRspQryPartPosiLimit->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartPosiLimit->ActionTime);
                    Gb2312ToUtf8(pRspQryPartPosiLimit->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartPosiLimit->InstrumentID);
                    Gb2312ToUtf8(pRspQryPartPosiLimit->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartPosiLimit->ParticipantID);
                    Gb2312ToUtf8(pRspQryPartPosiLimit->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryPartPosiLimit->TradingRole);
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQryPartPosiLimit->StartTotalPosition);
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryPartPosiLimit->ValueMode);
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQryPartPosiLimit->LongPosLimit);
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQryPartPosiLimit->ShortPosLimit);
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRspQryPartPosiLimit->UpperLimitPrice);
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                    v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRspQryPartPosiLimit->LowerLimitPrice);
                    pRspQryPartPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryPartPosiLimit) { 
                    params[0] = Local<v8::Value>(pRspQryPartPosiLimitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryPartPosiLimit) { 
                delete pRspQryPartPosiLimit;
                pRspQryPartPosiLimit = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryPartPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPartPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnPartPosiLimitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnPartPosiLimitTopic_mutex);

    int ioUserNumb = g_RtnPartPosiLimitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnPartPosiLimitTopic_IOUser_vec.begin();
        it != g_RtnPartPosiLimitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnPartPosiLimitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnPartPosiLimitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnPartPosiLimitTopic_Data_map[*it].front());
            g_RtnPartPosiLimitTopic_Data_map[*it].pop();
        }
    }
    g_RtnPartPosiLimitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnPartPosiLimitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnPartPosiLimitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnPartPosiLimitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnPartPosiLimitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnPartPosiLimitTopic").ToLocalChecked());
            CShfeFtdcRtnPartPosiLimitField* pRtnPartPosiLimit = (CShfeFtdcRtnPartPosiLimitField*)(paramArray[1]);
            if (OnRtnPartPosiLimitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnPartPosiLimitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnPartPosiLimitJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnPartPosiLimit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPartPosiLimit->ActionDate);
                    Gb2312ToUtf8(pRtnPartPosiLimit->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPartPosiLimit->ActionTime);
                    Gb2312ToUtf8(pRtnPartPosiLimit->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPartPosiLimit->InstrumentID);
                    Gb2312ToUtf8(pRtnPartPosiLimit->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPartPosiLimit->ParticipantID);
                    Gb2312ToUtf8(pRtnPartPosiLimit->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnPartPosiLimit->TradingRole);
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnPartPosiLimit->StartTotalPosition);
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnPartPosiLimit->ValueMode);
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnPartPosiLimit->LongPosLimit);
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnPartPosiLimit->ShortPosLimit);
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRtnPartPosiLimit->UpperLimitPrice);
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                    v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRtnPartPosiLimit->LowerLimitPrice);
                    pRtnPartPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnPartPosiLimit) { 
                    params[0] = Local<v8::Value>(pRtnPartPosiLimitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnPartPosiLimit) { 
                delete pRtnPartPosiLimit;
                pRtnPartPosiLimit = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnPartPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryClientPosiLimitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryClientPosiLimitTopic_mutex);

    int ioUserNumb = g_RspQryClientPosiLimitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryClientPosiLimitTopic_IOUser_vec.begin();
        it != g_RspQryClientPosiLimitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryClientPosiLimitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryClientPosiLimitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryClientPosiLimitTopic_Data_map[*it].front());
            g_RspQryClientPosiLimitTopic_Data_map[*it].pop();
        }
    }
    g_RspQryClientPosiLimitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryClientPosiLimitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryClientPosiLimitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryClientPosiLimitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryClientPosiLimitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientPosiLimitTopic").ToLocalChecked());
            CShfeFtdcRspQryClientPosiLimitField* pRspQryClientPosiLimit = (CShfeFtdcRspQryClientPosiLimitField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryClientPosiLimitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryClientPosiLimitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryClientPosiLimitJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryClientPosiLimit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientPosiLimit->ActionDate);
                    Gb2312ToUtf8(pRspQryClientPosiLimit->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientPosiLimit->ActionTime);
                    Gb2312ToUtf8(pRspQryClientPosiLimit->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientPosiLimit->InstrumentID);
                    Gb2312ToUtf8(pRspQryClientPosiLimit->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                    v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRspQryClientPosiLimit->ClientType);
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryClientPosiLimit->TradingRole);
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQryClientPosiLimit->StartTotalPosition);
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryClientPosiLimit->ValueMode);
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQryClientPosiLimit->LongPosLimit);
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQryClientPosiLimit->ShortPosLimit);
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRspQryClientPosiLimit->UpperLimitPrice);
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                    v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRspQryClientPosiLimit->LowerLimitPrice);
                    pRspQryClientPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryClientPosiLimit) { 
                    params[0] = Local<v8::Value>(pRspQryClientPosiLimitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryClientPosiLimit) { 
                delete pRspQryClientPosiLimit;
                pRspQryClientPosiLimit = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryClientPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnClientPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnClientPosiLimitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnClientPosiLimitTopic_mutex);

    int ioUserNumb = g_RtnClientPosiLimitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnClientPosiLimitTopic_IOUser_vec.begin();
        it != g_RtnClientPosiLimitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnClientPosiLimitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnClientPosiLimitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnClientPosiLimitTopic_Data_map[*it].front());
            g_RtnClientPosiLimitTopic_Data_map[*it].pop();
        }
    }
    g_RtnClientPosiLimitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnClientPosiLimitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnClientPosiLimitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnClientPosiLimitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnClientPosiLimitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnClientPosiLimitTopic").ToLocalChecked());
            CShfeFtdcRtnClientPosiLimitField* pRtnClientPosiLimit = (CShfeFtdcRtnClientPosiLimitField*)(paramArray[1]);
            if (OnRtnClientPosiLimitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnClientPosiLimitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnClientPosiLimitJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnClientPosiLimit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientPosiLimit->ActionDate);
                    Gb2312ToUtf8(pRtnClientPosiLimit->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientPosiLimit->ActionTime);
                    Gb2312ToUtf8(pRtnClientPosiLimit->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientPosiLimit->InstrumentID);
                    Gb2312ToUtf8(pRtnClientPosiLimit->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                    v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRtnClientPosiLimit->ClientType);
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnClientPosiLimit->TradingRole);
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnClientPosiLimit->StartTotalPosition);
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnClientPosiLimit->ValueMode);
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnClientPosiLimit->LongPosLimit);
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnClientPosiLimit->ShortPosLimit);
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRtnClientPosiLimit->UpperLimitPrice);
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                    v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRtnClientPosiLimit->LowerLimitPrice);
                    pRtnClientPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnClientPosiLimit) { 
                    params[0] = Local<v8::Value>(pRtnClientPosiLimitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnClientPosiLimit) { 
                delete pRtnClientPosiLimit;
                pRtnClientPosiLimit = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnClientPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySpecialPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySpecialPosiLimitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySpecialPosiLimitTopic_mutex);

    int ioUserNumb = g_RspQrySpecialPosiLimitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySpecialPosiLimitTopic_IOUser_vec.begin();
        it != g_RspQrySpecialPosiLimitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySpecialPosiLimitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySpecialPosiLimitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySpecialPosiLimitTopic_Data_map[*it].front());
            g_RspQrySpecialPosiLimitTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySpecialPosiLimitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySpecialPosiLimitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySpecialPosiLimitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySpecialPosiLimitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySpecialPosiLimitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySpecialPosiLimitTopic").ToLocalChecked());
            CShfeFtdcRspQrySpecialPosiLimitField* pRspQrySpecialPosiLimit = (CShfeFtdcRspQrySpecialPosiLimitField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySpecialPosiLimitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySpecialPosiLimitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySpecialPosiLimitJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySpecialPosiLimit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySpecialPosiLimit->ActionDate);
                    Gb2312ToUtf8(pRspQrySpecialPosiLimit->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySpecialPosiLimit->ActionTime);
                    Gb2312ToUtf8(pRspQrySpecialPosiLimit->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySpecialPosiLimit->InstrumentID);
                    Gb2312ToUtf8(pRspQrySpecialPosiLimit->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySpecialPosiLimit->ClientID);
                    Gb2312ToUtf8(pRspQrySpecialPosiLimit->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQrySpecialPosiLimit->TradingRole);
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQrySpecialPosiLimit->StartTotalPosition);
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQrySpecialPosiLimit->ValueMode);
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQrySpecialPosiLimit->LongPosLimit);
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQrySpecialPosiLimit->ShortPosLimit);
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRspQrySpecialPosiLimit->UpperLimitPrice);
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                    v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRspQrySpecialPosiLimit->LowerLimitPrice);
                    pRspQrySpecialPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySpecialPosiLimit) { 
                    params[0] = Local<v8::Value>(pRspQrySpecialPosiLimitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySpecialPosiLimit) { 
                delete pRspQrySpecialPosiLimit;
                pRspQrySpecialPosiLimit = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySpecialPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSpecialPosiLimitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnSpecialPosiLimitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnSpecialPosiLimitTopic_mutex);

    int ioUserNumb = g_RtnSpecialPosiLimitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnSpecialPosiLimitTopic_IOUser_vec.begin();
        it != g_RtnSpecialPosiLimitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnSpecialPosiLimitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnSpecialPosiLimitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnSpecialPosiLimitTopic_Data_map[*it].front());
            g_RtnSpecialPosiLimitTopic_Data_map[*it].pop();
        }
    }
    g_RtnSpecialPosiLimitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnSpecialPosiLimitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnSpecialPosiLimitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnSpecialPosiLimitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnSpecialPosiLimitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnSpecialPosiLimitTopic").ToLocalChecked());
            CShfeFtdcRtnSpecialPosiLimitField* pRtnSpecialPosiLimit = (CShfeFtdcRtnSpecialPosiLimitField*)(paramArray[1]);
            if (OnRtnSpecialPosiLimitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnSpecialPosiLimitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnSpecialPosiLimitJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnSpecialPosiLimit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSpecialPosiLimit->ActionDate);
                    Gb2312ToUtf8(pRtnSpecialPosiLimit->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSpecialPosiLimit->ActionTime);
                    Gb2312ToUtf8(pRtnSpecialPosiLimit->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSpecialPosiLimit->InstrumentID);
                    Gb2312ToUtf8(pRtnSpecialPosiLimit->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSpecialPosiLimit->ClientID);
                    Gb2312ToUtf8(pRtnSpecialPosiLimit->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnSpecialPosiLimit->TradingRole);
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnSpecialPosiLimit->StartTotalPosition);
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnSpecialPosiLimit->ValueMode);
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnSpecialPosiLimit->LongPosLimit);
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnSpecialPosiLimit->ShortPosLimit);
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRtnSpecialPosiLimit->UpperLimitPrice);
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                    v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRtnSpecialPosiLimit->LowerLimitPrice);
                    pRtnSpecialPosiLimitJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnSpecialPosiLimit) { 
                    params[0] = Local<v8::Value>(pRtnSpecialPosiLimitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnSpecialPosiLimit) { 
                delete pRtnSpecialPosiLimit;
                pRtnSpecialPosiLimit = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnSpecialPosiLimitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTransactionChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTransactionChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTransactionChgTopic_mutex);

    int ioUserNumb = g_RspQryTransactionChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTransactionChgTopic_IOUser_vec.begin();
        it != g_RspQryTransactionChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTransactionChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTransactionChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTransactionChgTopic_Data_map[*it].front());
            g_RspQryTransactionChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTransactionChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTransactionChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTransactionChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTransactionChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTransactionChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTransactionChgTopic").ToLocalChecked());
            CShfeFtdcRspQryTransactionChgField* pRspQryTransactionChg = (CShfeFtdcRspQryTransactionChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTransactionChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTransactionChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTransactionChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTransactionChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTransactionChg->ActionDate);
                    Gb2312ToUtf8(pRspQryTransactionChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTransactionChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTransactionChg->ActionTime);
                    Gb2312ToUtf8(pRspQryTransactionChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTransactionChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> BillSN = Nan::New<v8::String> ("BillSN").ToLocalChecked();
                    v8::Local<v8::Integer> BillSNValue = Nan::New<v8::Integer> (pRspQryTransactionChg->BillSN);
                    pRspQryTransactionChgJS->Set(Local<v8::Value> (BillSN), Local<v8::Value>(BillSNValue));

                    v8::Local<v8::String> ParticipantAccount = Nan::New<v8::String> ("ParticipantAccount").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTransactionChg->ParticipantAccount);
                    Gb2312ToUtf8(pRspQryTransactionChg->ParticipantAccount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantAccountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTransactionChgJS->Set(Local<v8::Value> (ParticipantAccount), Local<v8::Value>(ParticipantAccountValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTransactionChg->ParticipantID);
                    Gb2312ToUtf8(pRspQryTransactionChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTransactionChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> Amount = Nan::New<v8::String> ("Amount").ToLocalChecked();
                    v8::Local<v8::Number> AmountValue = Nan::New<v8::Number> (pRspQryTransactionChg->Amount);
                    pRspQryTransactionChgJS->Set(Local<v8::Value> (Amount), Local<v8::Value>(AmountValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTransactionChg) { 
                    params[0] = Local<v8::Value>(pRspQryTransactionChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTransactionChg) { 
                delete pRspQryTransactionChg;
                pRspQryTransactionChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTransactionChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTransactionChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnTransactionChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnTransactionChgTopic_mutex);

    int ioUserNumb = g_RtnTransactionChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnTransactionChgTopic_IOUser_vec.begin();
        it != g_RtnTransactionChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnTransactionChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnTransactionChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnTransactionChgTopic_Data_map[*it].front());
            g_RtnTransactionChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnTransactionChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnTransactionChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnTransactionChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnTransactionChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnTransactionChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnTransactionChgTopic").ToLocalChecked());
            CShfeFtdcRtnTransactionChgField* pRtnTransactionChg = (CShfeFtdcRtnTransactionChgField*)(paramArray[1]);
            if (OnRtnTransactionChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnTransactionChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnTransactionChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnTransactionChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTransactionChg->ActionDate);
                    Gb2312ToUtf8(pRtnTransactionChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTransactionChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTransactionChg->ActionTime);
                    Gb2312ToUtf8(pRtnTransactionChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTransactionChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> BillSN = Nan::New<v8::String> ("BillSN").ToLocalChecked();
                    v8::Local<v8::Integer> BillSNValue = Nan::New<v8::Integer> (pRtnTransactionChg->BillSN);
                    pRtnTransactionChgJS->Set(Local<v8::Value> (BillSN), Local<v8::Value>(BillSNValue));

                    v8::Local<v8::String> ParticipantAccount = Nan::New<v8::String> ("ParticipantAccount").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTransactionChg->ParticipantAccount);
                    Gb2312ToUtf8(pRtnTransactionChg->ParticipantAccount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantAccountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTransactionChgJS->Set(Local<v8::Value> (ParticipantAccount), Local<v8::Value>(ParticipantAccountValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTransactionChg->ParticipantID);
                    Gb2312ToUtf8(pRtnTransactionChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTransactionChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> Amount = Nan::New<v8::String> ("Amount").ToLocalChecked();
                    v8::Local<v8::Number> AmountValue = Nan::New<v8::Number> (pRtnTransactionChg->Amount);
                    pRtnTransactionChgJS->Set(Local<v8::Value> (Amount), Local<v8::Value>(AmountValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnTransactionChg) { 
                    params[0] = Local<v8::Value>(pRtnTransactionChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnTransactionChg) { 
                delete pRtnTransactionChg;
                pRtnTransactionChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnTransactionChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryClientChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryClientChgTopic_mutex);

    int ioUserNumb = g_RspQryClientChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryClientChgTopic_IOUser_vec.begin();
        it != g_RspQryClientChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryClientChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryClientChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryClientChgTopic_Data_map[*it].front());
            g_RspQryClientChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQryClientChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryClientChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryClientChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryClientChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryClientChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientChgTopic").ToLocalChecked());
            CShfeFtdcRspQryClientChgField* pRspQryClientChg = (CShfeFtdcRspQryClientChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryClientChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryClientChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryClientChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryClientChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientChg->ActionDate);
                    Gb2312ToUtf8(pRspQryClientChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientChg->ActionTime);
                    Gb2312ToUtf8(pRspQryClientChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientChg->ClientID);
                    Gb2312ToUtf8(pRspQryClientChg->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientChg->ClientName);
                    Gb2312ToUtf8(pRspQryClientChg->ClientName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientChgJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                    v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                    v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRspQryClientChg->ClientType);
                    pRspQryClientChgJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryClientChg->IsActive);
                    pRspQryClientChgJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientChg->IdentifiedCardType);
                    Gb2312ToUtf8(pRspQryClientChg->IdentifiedCardType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientChgJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                    v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientChg->IdentifiedCardNo);
                    Gb2312ToUtf8(pRspQryClientChg->IdentifiedCardNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientChgJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryClientChg->OperationType);
                    pRspQryClientChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryClientChg) { 
                    params[0] = Local<v8::Value>(pRspQryClientChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryClientChg) { 
                delete pRspQryClientChg;
                pRspQryClientChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryClientChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnClientChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnClientChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnClientChgTopic_mutex);

    int ioUserNumb = g_RtnClientChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnClientChgTopic_IOUser_vec.begin();
        it != g_RtnClientChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnClientChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnClientChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnClientChgTopic_Data_map[*it].front());
            g_RtnClientChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnClientChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnClientChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnClientChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnClientChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnClientChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnClientChgTopic").ToLocalChecked());
            CShfeFtdcRtnClientChgField* pRtnClientChg = (CShfeFtdcRtnClientChgField*)(paramArray[1]);
            if (OnRtnClientChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnClientChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnClientChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnClientChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientChg->ActionDate);
                    Gb2312ToUtf8(pRtnClientChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientChg->ActionTime);
                    Gb2312ToUtf8(pRtnClientChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientChg->ClientID);
                    Gb2312ToUtf8(pRtnClientChg->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientChg->ClientName);
                    Gb2312ToUtf8(pRtnClientChg->ClientName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientChgJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                    v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                    v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRtnClientChg->ClientType);
                    pRtnClientChgJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnClientChg->IsActive);
                    pRtnClientChgJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientChg->IdentifiedCardType);
                    Gb2312ToUtf8(pRtnClientChg->IdentifiedCardType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientChgJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                    v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientChg->IdentifiedCardNo);
                    Gb2312ToUtf8(pRtnClientChg->IdentifiedCardNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientChgJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnClientChg->OperationType);
                    pRtnClientChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnClientChg) { 
                    params[0] = Local<v8::Value>(pRtnClientChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnClientChg) { 
                delete pRtnClientChg;
                pRtnClientChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnClientChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPartClientChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryPartClientChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryPartClientChgTopic_mutex);

    int ioUserNumb = g_RspQryPartClientChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryPartClientChgTopic_IOUser_vec.begin();
        it != g_RspQryPartClientChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryPartClientChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryPartClientChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryPartClientChgTopic_Data_map[*it].front());
            g_RspQryPartClientChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQryPartClientChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryPartClientChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryPartClientChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryPartClientChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryPartClientChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryPartClientChgTopic").ToLocalChecked());
            CShfeFtdcRspQryPartClientChgField* pRspQryPartClientChg = (CShfeFtdcRspQryPartClientChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryPartClientChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryPartClientChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryPartClientChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryPartClientChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartClientChg->ActionDate);
                    Gb2312ToUtf8(pRspQryPartClientChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartClientChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartClientChg->ActionTime);
                    Gb2312ToUtf8(pRspQryPartClientChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartClientChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartClientChg->ClientID);
                    Gb2312ToUtf8(pRspQryPartClientChg->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartClientChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartClientChg->ParticipantID);
                    Gb2312ToUtf8(pRspQryPartClientChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartClientChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryPartClientChg->OperationType);
                    pRspQryPartClientChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryPartClientChg) { 
                    params[0] = Local<v8::Value>(pRspQryPartClientChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryPartClientChg) { 
                delete pRspQryPartClientChg;
                pRspQryPartClientChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryPartClientChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPartClientChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnPartClientChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnPartClientChgTopic_mutex);

    int ioUserNumb = g_RtnPartClientChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnPartClientChgTopic_IOUser_vec.begin();
        it != g_RtnPartClientChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnPartClientChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnPartClientChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnPartClientChgTopic_Data_map[*it].front());
            g_RtnPartClientChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnPartClientChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnPartClientChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnPartClientChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnPartClientChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnPartClientChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnPartClientChgTopic").ToLocalChecked());
            CShfeFtdcRtnPartClientChgField* pRtnPartClientChg = (CShfeFtdcRtnPartClientChgField*)(paramArray[1]);
            if (OnRtnPartClientChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnPartClientChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnPartClientChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnPartClientChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPartClientChg->ActionDate);
                    Gb2312ToUtf8(pRtnPartClientChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPartClientChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPartClientChg->ActionTime);
                    Gb2312ToUtf8(pRtnPartClientChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPartClientChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPartClientChg->ClientID);
                    Gb2312ToUtf8(pRtnPartClientChg->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPartClientChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPartClientChg->ParticipantID);
                    Gb2312ToUtf8(pRtnPartClientChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPartClientChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnPartClientChg->OperationType);
                    pRtnPartClientChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnPartClientChg) { 
                    params[0] = Local<v8::Value>(pRtnPartClientChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnPartClientChg) { 
                delete pRtnPartClientChg;
                pRtnPartClientChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnPartClientChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryPosiLimitChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryPosiLimitChgTopic_mutex);

    int ioUserNumb = g_RspQryPosiLimitChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryPosiLimitChgTopic_IOUser_vec.begin();
        it != g_RspQryPosiLimitChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryPosiLimitChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryPosiLimitChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryPosiLimitChgTopic_Data_map[*it].front());
            g_RspQryPosiLimitChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQryPosiLimitChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryPosiLimitChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryPosiLimitChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryPosiLimitChgTopic").ToLocalChecked());
            CShfeFtdcRspQryPosiLimitChgField* pRspQryPosiLimitChg = (CShfeFtdcRspQryPosiLimitChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryPosiLimitChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryPosiLimitChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryPosiLimitChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryPosiLimitChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPosiLimitChg->ActionDate);
                    Gb2312ToUtf8(pRspQryPosiLimitChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPosiLimitChg->ActionTime);
                    Gb2312ToUtf8(pRspQryPosiLimitChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPosiLimitChg->InstrumentID);
                    Gb2312ToUtf8(pRspQryPosiLimitChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPosiLimitChg->ParticipantID);
                    Gb2312ToUtf8(pRspQryPosiLimitChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPosiLimitChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryPosiLimitChg->TradingRole);
                    pRspQryPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQryPosiLimitChg->StartTotalPosition);
                    pRspQryPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryPosiLimitChg->ValueMode);
                    pRspQryPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQryPosiLimitChg->LongPosLimit);
                    pRspQryPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQryPosiLimitChg->ShortPosLimit);
                    pRspQryPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryPosiLimitChg->OperationType);
                    pRspQryPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryPosiLimitChg) { 
                    params[0] = Local<v8::Value>(pRspQryPosiLimitChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryPosiLimitChg) { 
                delete pRspQryPosiLimitChg;
                pRspQryPosiLimitChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnPosiLimitChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnPosiLimitChgTopic_mutex);

    int ioUserNumb = g_RtnPosiLimitChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnPosiLimitChgTopic_IOUser_vec.begin();
        it != g_RtnPosiLimitChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnPosiLimitChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnPosiLimitChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnPosiLimitChgTopic_Data_map[*it].front());
            g_RtnPosiLimitChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnPosiLimitChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnPosiLimitChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnPosiLimitChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnPosiLimitChgTopic").ToLocalChecked());
            CShfeFtdcRtnPosiLimitChgField* pRtnPosiLimitChg = (CShfeFtdcRtnPosiLimitChgField*)(paramArray[1]);
            if (OnRtnPosiLimitChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnPosiLimitChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnPosiLimitChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnPosiLimitChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPosiLimitChg->ActionDate);
                    Gb2312ToUtf8(pRtnPosiLimitChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPosiLimitChg->ActionTime);
                    Gb2312ToUtf8(pRtnPosiLimitChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPosiLimitChg->InstrumentID);
                    Gb2312ToUtf8(pRtnPosiLimitChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPosiLimitChg->ParticipantID);
                    Gb2312ToUtf8(pRtnPosiLimitChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPosiLimitChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnPosiLimitChg->TradingRole);
                    pRtnPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnPosiLimitChg->StartTotalPosition);
                    pRtnPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnPosiLimitChg->ValueMode);
                    pRtnPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnPosiLimitChg->LongPosLimit);
                    pRtnPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnPosiLimitChg->ShortPosLimit);
                    pRtnPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnPosiLimitChg->OperationType);
                    pRtnPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnPosiLimitChg) { 
                    params[0] = Local<v8::Value>(pRtnPosiLimitChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnPosiLimitChg) { 
                delete pRtnPosiLimitChg;
                pRtnPosiLimitChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHedgeDetailChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryHedgeDetailChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryHedgeDetailChgTopic_mutex);

    int ioUserNumb = g_RspQryHedgeDetailChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryHedgeDetailChgTopic_IOUser_vec.begin();
        it != g_RspQryHedgeDetailChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryHedgeDetailChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryHedgeDetailChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryHedgeDetailChgTopic_Data_map[*it].front());
            g_RspQryHedgeDetailChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQryHedgeDetailChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryHedgeDetailChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryHedgeDetailChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryHedgeDetailChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryHedgeDetailChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryHedgeDetailChgTopic").ToLocalChecked());
            CShfeFtdcRspQryHedgeDetailChgField* pRspQryHedgeDetailChg = (CShfeFtdcRspQryHedgeDetailChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryHedgeDetailChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryHedgeDetailChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryHedgeDetailChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryHedgeDetailChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHedgeDetailChg->ActionDate);
                    Gb2312ToUtf8(pRspQryHedgeDetailChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHedgeDetailChg->ActionTime);
                    Gb2312ToUtf8(pRspQryHedgeDetailChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHedgeDetailChg->ParticipantID);
                    Gb2312ToUtf8(pRspQryHedgeDetailChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHedgeDetailChg->ClientID);
                    Gb2312ToUtf8(pRspQryHedgeDetailChg->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> OperatorID = Nan::New<v8::String> ("OperatorID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHedgeDetailChg->OperatorID);
                    Gb2312ToUtf8(pRspQryHedgeDetailChg->OperatorID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OperatorIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (OperatorID), Local<v8::Value>(OperatorIDValue));

                    v8::Local<v8::String> Time = Nan::New<v8::String> ("Time").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHedgeDetailChg->Time);
                    Gb2312ToUtf8(pRspQryHedgeDetailChg->Time, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (Time), Local<v8::Value>(TimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHedgeDetailChg->InstrumentID);
                    Gb2312ToUtf8(pRspQryHedgeDetailChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> PosiDirection = Nan::New<v8::String> ("PosiDirection").ToLocalChecked();
                    v8::Local<v8::Integer> PosiDirectionValue = Nan::New<v8::Integer> (pRspQryHedgeDetailChg->PosiDirection);
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (PosiDirection), Local<v8::Value>(PosiDirectionValue));

                    v8::Local<v8::String> TradingVolume = Nan::New<v8::String> ("TradingVolume").ToLocalChecked();
                    v8::Local<v8::Integer> TradingVolumeValue = Nan::New<v8::Integer> (pRspQryHedgeDetailChg->TradingVolume);
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (TradingVolume), Local<v8::Value>(TradingVolumeValue));

                    v8::Local<v8::String> HedgeQuota = Nan::New<v8::String> ("HedgeQuota").ToLocalChecked();
                    v8::Local<v8::Integer> HedgeQuotaValue = Nan::New<v8::Integer> (pRspQryHedgeDetailChg->HedgeQuota);
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (HedgeQuota), Local<v8::Value>(HedgeQuotaValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryHedgeDetailChg->OperationType);
                    pRspQryHedgeDetailChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryHedgeDetailChg) { 
                    params[0] = Local<v8::Value>(pRspQryHedgeDetailChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryHedgeDetailChg) { 
                delete pRspQryHedgeDetailChg;
                pRspQryHedgeDetailChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryHedgeDetailChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnHedgeDetailChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnHedgeDetailChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnHedgeDetailChgTopic_mutex);

    int ioUserNumb = g_RtnHedgeDetailChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnHedgeDetailChgTopic_IOUser_vec.begin();
        it != g_RtnHedgeDetailChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnHedgeDetailChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnHedgeDetailChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnHedgeDetailChgTopic_Data_map[*it].front());
            g_RtnHedgeDetailChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnHedgeDetailChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnHedgeDetailChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnHedgeDetailChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnHedgeDetailChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnHedgeDetailChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnHedgeDetailChgTopic").ToLocalChecked());
            CShfeFtdcRtnHedgeDetailChgField* pRtnHedgeDetailChg = (CShfeFtdcRtnHedgeDetailChgField*)(paramArray[1]);
            if (OnRtnHedgeDetailChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnHedgeDetailChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnHedgeDetailChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnHedgeDetailChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHedgeDetailChg->ActionDate);
                    Gb2312ToUtf8(pRtnHedgeDetailChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHedgeDetailChg->ActionTime);
                    Gb2312ToUtf8(pRtnHedgeDetailChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHedgeDetailChg->ParticipantID);
                    Gb2312ToUtf8(pRtnHedgeDetailChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHedgeDetailChg->ClientID);
                    Gb2312ToUtf8(pRtnHedgeDetailChg->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> OperatorID = Nan::New<v8::String> ("OperatorID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHedgeDetailChg->OperatorID);
                    Gb2312ToUtf8(pRtnHedgeDetailChg->OperatorID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OperatorIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (OperatorID), Local<v8::Value>(OperatorIDValue));

                    v8::Local<v8::String> Time = Nan::New<v8::String> ("Time").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHedgeDetailChg->Time);
                    Gb2312ToUtf8(pRtnHedgeDetailChg->Time, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (Time), Local<v8::Value>(TimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHedgeDetailChg->InstrumentID);
                    Gb2312ToUtf8(pRtnHedgeDetailChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> PosiDirection = Nan::New<v8::String> ("PosiDirection").ToLocalChecked();
                    v8::Local<v8::Integer> PosiDirectionValue = Nan::New<v8::Integer> (pRtnHedgeDetailChg->PosiDirection);
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (PosiDirection), Local<v8::Value>(PosiDirectionValue));

                    v8::Local<v8::String> TradingVolume = Nan::New<v8::String> ("TradingVolume").ToLocalChecked();
                    v8::Local<v8::Integer> TradingVolumeValue = Nan::New<v8::Integer> (pRtnHedgeDetailChg->TradingVolume);
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (TradingVolume), Local<v8::Value>(TradingVolumeValue));

                    v8::Local<v8::String> HedgeQuota = Nan::New<v8::String> ("HedgeQuota").ToLocalChecked();
                    v8::Local<v8::Integer> HedgeQuotaValue = Nan::New<v8::Integer> (pRtnHedgeDetailChg->HedgeQuota);
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (HedgeQuota), Local<v8::Value>(HedgeQuotaValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnHedgeDetailChg->OperationType);
                    pRtnHedgeDetailChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnHedgeDetailChg) { 
                    params[0] = Local<v8::Value>(pRtnHedgeDetailChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnHedgeDetailChg) { 
                delete pRtnHedgeDetailChg;
                pRtnHedgeDetailChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnHedgeDetailChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryParticipantChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryParticipantChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryParticipantChgTopic_mutex);

    int ioUserNumb = g_RspQryParticipantChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryParticipantChgTopic_IOUser_vec.begin();
        it != g_RspQryParticipantChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryParticipantChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryParticipantChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryParticipantChgTopic_Data_map[*it].front());
            g_RspQryParticipantChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQryParticipantChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryParticipantChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryParticipantChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryParticipantChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryParticipantChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryParticipantChgTopic").ToLocalChecked());
            CShfeFtdcRspQryParticipantChgField* pRspQryParticipantChg = (CShfeFtdcRspQryParticipantChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryParticipantChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryParticipantChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryParticipantChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryParticipantChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticipantChg->ActionDate);
                    Gb2312ToUtf8(pRspQryParticipantChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticipantChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticipantChg->ActionTime);
                    Gb2312ToUtf8(pRspQryParticipantChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticipantChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticipantChg->ParticipantID);
                    Gb2312ToUtf8(pRspQryParticipantChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticipantChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticipantChg->ParticipantName);
                    Gb2312ToUtf8(pRspQryParticipantChg->ParticipantName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticipantChgJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                    v8::Local<v8::String> ParticipantAbbr = Nan::New<v8::String> ("ParticipantAbbr").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticipantChg->ParticipantAbbr);
                    Gb2312ToUtf8(pRspQryParticipantChg->ParticipantAbbr, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantAbbrValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticipantChgJS->Set(Local<v8::Value> (ParticipantAbbr), Local<v8::Value>(ParticipantAbbrValue));

                    v8::Local<v8::String> MemberType = Nan::New<v8::String> ("MemberType").ToLocalChecked();
                    v8::Local<v8::Integer> MemberTypeValue = Nan::New<v8::Integer> (pRspQryParticipantChg->MemberType);
                    pRspQryParticipantChgJS->Set(Local<v8::Value> (MemberType), Local<v8::Value>(MemberTypeValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryParticipantChg->IsActive);
                    pRspQryParticipantChgJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryParticipantChg->OperationType);
                    pRspQryParticipantChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryParticipantChg) { 
                    params[0] = Local<v8::Value>(pRspQryParticipantChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryParticipantChg) { 
                delete pRspQryParticipantChg;
                pRspQryParticipantChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryParticipantChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnParticipantChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnParticipantChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnParticipantChgTopic_mutex);

    int ioUserNumb = g_RtnParticipantChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnParticipantChgTopic_IOUser_vec.begin();
        it != g_RtnParticipantChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnParticipantChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnParticipantChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnParticipantChgTopic_Data_map[*it].front());
            g_RtnParticipantChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnParticipantChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnParticipantChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnParticipantChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnParticipantChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnParticipantChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnParticipantChgTopic").ToLocalChecked());
            CShfeFtdcRtnParticipantChgField* pRtnParticipantChg = (CShfeFtdcRtnParticipantChgField*)(paramArray[1]);
            if (OnRtnParticipantChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnParticipantChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnParticipantChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnParticipantChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticipantChg->ActionDate);
                    Gb2312ToUtf8(pRtnParticipantChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticipantChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticipantChg->ActionTime);
                    Gb2312ToUtf8(pRtnParticipantChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticipantChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticipantChg->ParticipantID);
                    Gb2312ToUtf8(pRtnParticipantChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticipantChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticipantChg->ParticipantName);
                    Gb2312ToUtf8(pRtnParticipantChg->ParticipantName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticipantChgJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                    v8::Local<v8::String> ParticipantAbbr = Nan::New<v8::String> ("ParticipantAbbr").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticipantChg->ParticipantAbbr);
                    Gb2312ToUtf8(pRtnParticipantChg->ParticipantAbbr, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantAbbrValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticipantChgJS->Set(Local<v8::Value> (ParticipantAbbr), Local<v8::Value>(ParticipantAbbrValue));

                    v8::Local<v8::String> MemberType = Nan::New<v8::String> ("MemberType").ToLocalChecked();
                    v8::Local<v8::Integer> MemberTypeValue = Nan::New<v8::Integer> (pRtnParticipantChg->MemberType);
                    pRtnParticipantChgJS->Set(Local<v8::Value> (MemberType), Local<v8::Value>(MemberTypeValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnParticipantChg->IsActive);
                    pRtnParticipantChgJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnParticipantChg->OperationType);
                    pRtnParticipantChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnParticipantChg) { 
                    params[0] = Local<v8::Value>(pRtnParticipantChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnParticipantChg) { 
                delete pRtnParticipantChg;
                pRtnParticipantChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnParticipantChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMarginRateChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryMarginRateChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryMarginRateChgTopic_mutex);

    int ioUserNumb = g_RspQryMarginRateChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryMarginRateChgTopic_IOUser_vec.begin();
        it != g_RspQryMarginRateChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryMarginRateChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryMarginRateChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryMarginRateChgTopic_Data_map[*it].front());
            g_RspQryMarginRateChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQryMarginRateChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryMarginRateChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryMarginRateChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryMarginRateChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryMarginRateChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryMarginRateChgTopic").ToLocalChecked());
            CShfeFtdcRspQryMarginRateChgField* pRspQryMarginRateChg = (CShfeFtdcRspQryMarginRateChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryMarginRateChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryMarginRateChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryMarginRateChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryMarginRateChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMarginRateChg->ActionDate);
                    Gb2312ToUtf8(pRspQryMarginRateChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMarginRateChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMarginRateChg->ActionTime);
                    Gb2312ToUtf8(pRspQryMarginRateChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMarginRateChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMarginRateChg->InstrumentID);
                    Gb2312ToUtf8(pRspQryMarginRateChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMarginRateChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMarginRateChg->ParticipantID);
                    Gb2312ToUtf8(pRspQryMarginRateChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMarginRateChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryMarginRateChg->TradingRole);
                    pRspQryMarginRateChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> HedgeFlag = Nan::New<v8::String> ("HedgeFlag").ToLocalChecked();
                    v8::Local<v8::Integer> HedgeFlagValue = Nan::New<v8::Integer> (pRspQryMarginRateChg->HedgeFlag);
                    pRspQryMarginRateChgJS->Set(Local<v8::Value> (HedgeFlag), Local<v8::Value>(HedgeFlagValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryMarginRateChg->ValueMode);
                    pRspQryMarginRateChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongMarginRatio = Nan::New<v8::String> ("LongMarginRatio").ToLocalChecked();
                    v8::Local<v8::Number> LongMarginRatioValue = Nan::New<v8::Number> (pRspQryMarginRateChg->LongMarginRatio);
                    pRspQryMarginRateChgJS->Set(Local<v8::Value> (LongMarginRatio), Local<v8::Value>(LongMarginRatioValue));

                    v8::Local<v8::String> ShortMarginRatio = Nan::New<v8::String> ("ShortMarginRatio").ToLocalChecked();
                    v8::Local<v8::Number> ShortMarginRatioValue = Nan::New<v8::Number> (pRspQryMarginRateChg->ShortMarginRatio);
                    pRspQryMarginRateChgJS->Set(Local<v8::Value> (ShortMarginRatio), Local<v8::Value>(ShortMarginRatioValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryMarginRateChg->OperationType);
                    pRspQryMarginRateChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryMarginRateChg) { 
                    params[0] = Local<v8::Value>(pRspQryMarginRateChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryMarginRateChg) { 
                delete pRspQryMarginRateChg;
                pRspQryMarginRateChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryMarginRateChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMarginRateChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnMarginRateChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnMarginRateChgTopic_mutex);

    int ioUserNumb = g_RtnMarginRateChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnMarginRateChgTopic_IOUser_vec.begin();
        it != g_RtnMarginRateChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnMarginRateChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnMarginRateChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnMarginRateChgTopic_Data_map[*it].front());
            g_RtnMarginRateChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnMarginRateChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnMarginRateChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnMarginRateChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnMarginRateChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnMarginRateChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnMarginRateChgTopic").ToLocalChecked());
            CShfeFtdcRtnMarginRateChgField* pRtnMarginRateChg = (CShfeFtdcRtnMarginRateChgField*)(paramArray[1]);
            if (OnRtnMarginRateChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnMarginRateChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnMarginRateChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnMarginRateChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMarginRateChg->ActionDate);
                    Gb2312ToUtf8(pRtnMarginRateChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMarginRateChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMarginRateChg->ActionTime);
                    Gb2312ToUtf8(pRtnMarginRateChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMarginRateChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMarginRateChg->InstrumentID);
                    Gb2312ToUtf8(pRtnMarginRateChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMarginRateChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMarginRateChg->ParticipantID);
                    Gb2312ToUtf8(pRtnMarginRateChg->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMarginRateChgJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnMarginRateChg->TradingRole);
                    pRtnMarginRateChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> HedgeFlag = Nan::New<v8::String> ("HedgeFlag").ToLocalChecked();
                    v8::Local<v8::Integer> HedgeFlagValue = Nan::New<v8::Integer> (pRtnMarginRateChg->HedgeFlag);
                    pRtnMarginRateChgJS->Set(Local<v8::Value> (HedgeFlag), Local<v8::Value>(HedgeFlagValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnMarginRateChg->ValueMode);
                    pRtnMarginRateChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongMarginRatio = Nan::New<v8::String> ("LongMarginRatio").ToLocalChecked();
                    v8::Local<v8::Number> LongMarginRatioValue = Nan::New<v8::Number> (pRtnMarginRateChg->LongMarginRatio);
                    pRtnMarginRateChgJS->Set(Local<v8::Value> (LongMarginRatio), Local<v8::Value>(LongMarginRatioValue));

                    v8::Local<v8::String> ShortMarginRatio = Nan::New<v8::String> ("ShortMarginRatio").ToLocalChecked();
                    v8::Local<v8::Number> ShortMarginRatioValue = Nan::New<v8::Number> (pRtnMarginRateChg->ShortMarginRatio);
                    pRtnMarginRateChgJS->Set(Local<v8::Value> (ShortMarginRatio), Local<v8::Value>(ShortMarginRatioValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnMarginRateChg->OperationType);
                    pRtnMarginRateChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnMarginRateChg) { 
                    params[0] = Local<v8::Value>(pRtnMarginRateChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnMarginRateChg) { 
                delete pRtnMarginRateChg;
                pRtnMarginRateChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnMarginRateChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryUserIpChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryUserIpChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryUserIpChgTopic_mutex);

    int ioUserNumb = g_RspQryUserIpChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryUserIpChgTopic_IOUser_vec.begin();
        it != g_RspQryUserIpChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryUserIpChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryUserIpChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryUserIpChgTopic_Data_map[*it].front());
            g_RspQryUserIpChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQryUserIpChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryUserIpChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryUserIpChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryUserIpChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryUserIpChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryUserIpChgTopic").ToLocalChecked());
            CShfeFtdcRspQryUserIpChgField* pRspQryUserIpChg = (CShfeFtdcRspQryUserIpChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryUserIpChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryUserIpChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryUserIpChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryUserIpChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserIpChg->ActionDate);
                    Gb2312ToUtf8(pRspQryUserIpChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserIpChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserIpChg->ActionTime);
                    Gb2312ToUtf8(pRspQryUserIpChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserIpChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserIpChg->UserID);
                    Gb2312ToUtf8(pRspQryUserIpChg->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserIpChgJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserIpChg->IPAddress);
                    Gb2312ToUtf8(pRspQryUserIpChg->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserIpChgJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> IPMask = Nan::New<v8::String> ("IPMask").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserIpChg->IPMask);
                    Gb2312ToUtf8(pRspQryUserIpChg->IPMask, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPMaskValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserIpChgJS->Set(Local<v8::Value> (IPMask), Local<v8::Value>(IPMaskValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryUserIpChg->OperationType);
                    pRspQryUserIpChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryUserIpChg) { 
                    params[0] = Local<v8::Value>(pRspQryUserIpChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryUserIpChg) { 
                delete pRspQryUserIpChg;
                pRspQryUserIpChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryUserIpChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnUserIpChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnUserIpChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnUserIpChgTopic_mutex);

    int ioUserNumb = g_RtnUserIpChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnUserIpChgTopic_IOUser_vec.begin();
        it != g_RtnUserIpChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnUserIpChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnUserIpChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnUserIpChgTopic_Data_map[*it].front());
            g_RtnUserIpChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnUserIpChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnUserIpChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnUserIpChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnUserIpChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnUserIpChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnUserIpChgTopic").ToLocalChecked());
            CShfeFtdcRtnUserIpChgField* pRtnUserIpChg = (CShfeFtdcRtnUserIpChgField*)(paramArray[1]);
            if (OnRtnUserIpChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnUserIpChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnUserIpChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnUserIpChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserIpChg->ActionDate);
                    Gb2312ToUtf8(pRtnUserIpChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserIpChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserIpChg->ActionTime);
                    Gb2312ToUtf8(pRtnUserIpChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserIpChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserIpChg->UserID);
                    Gb2312ToUtf8(pRtnUserIpChg->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserIpChgJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserIpChg->IPAddress);
                    Gb2312ToUtf8(pRtnUserIpChg->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserIpChgJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> IPMask = Nan::New<v8::String> ("IPMask").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserIpChg->IPMask);
                    Gb2312ToUtf8(pRtnUserIpChg->IPMask, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPMaskValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserIpChgJS->Set(Local<v8::Value> (IPMask), Local<v8::Value>(IPMaskValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnUserIpChg->OperationType);
                    pRtnUserIpChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnUserIpChg) { 
                    params[0] = Local<v8::Value>(pRtnUserIpChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnUserIpChg) { 
                delete pRtnUserIpChg;
                pRtnUserIpChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnUserIpChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryClientPosiLimitChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryClientPosiLimitChgTopic_mutex);

    int ioUserNumb = g_RspQryClientPosiLimitChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryClientPosiLimitChgTopic_IOUser_vec.begin();
        it != g_RspQryClientPosiLimitChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryClientPosiLimitChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryClientPosiLimitChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryClientPosiLimitChgTopic_Data_map[*it].front());
            g_RspQryClientPosiLimitChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQryClientPosiLimitChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryClientPosiLimitChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryClientPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryClientPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryClientPosiLimitChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientPosiLimitChgTopic").ToLocalChecked());
            CShfeFtdcRspQryClientPosiLimitChgField* pRspQryClientPosiLimitChg = (CShfeFtdcRspQryClientPosiLimitChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryClientPosiLimitChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryClientPosiLimitChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryClientPosiLimitChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryClientPosiLimitChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientPosiLimitChg->ActionDate);
                    Gb2312ToUtf8(pRspQryClientPosiLimitChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientPosiLimitChg->ActionTime);
                    Gb2312ToUtf8(pRspQryClientPosiLimitChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientPosiLimitChg->InstrumentID);
                    Gb2312ToUtf8(pRspQryClientPosiLimitChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                    v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRspQryClientPosiLimitChg->ClientType);
                    pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryClientPosiLimitChg->TradingRole);
                    pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQryClientPosiLimitChg->StartTotalPosition);
                    pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQryClientPosiLimitChg->ValueMode);
                    pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQryClientPosiLimitChg->LongPosLimit);
                    pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQryClientPosiLimitChg->ShortPosLimit);
                    pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryClientPosiLimitChg->OperationType);
                    pRspQryClientPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryClientPosiLimitChg) { 
                    params[0] = Local<v8::Value>(pRspQryClientPosiLimitChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryClientPosiLimitChg) { 
                delete pRspQryClientPosiLimitChg;
                pRspQryClientPosiLimitChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryClientPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnClientPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnClientPosiLimitChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnClientPosiLimitChgTopic_mutex);

    int ioUserNumb = g_RtnClientPosiLimitChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnClientPosiLimitChgTopic_IOUser_vec.begin();
        it != g_RtnClientPosiLimitChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnClientPosiLimitChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnClientPosiLimitChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnClientPosiLimitChgTopic_Data_map[*it].front());
            g_RtnClientPosiLimitChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnClientPosiLimitChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnClientPosiLimitChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnClientPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnClientPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnClientPosiLimitChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnClientPosiLimitChgTopic").ToLocalChecked());
            CShfeFtdcRtnClientPosiLimitChgField* pRtnClientPosiLimitChg = (CShfeFtdcRtnClientPosiLimitChgField*)(paramArray[1]);
            if (OnRtnClientPosiLimitChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnClientPosiLimitChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnClientPosiLimitChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnClientPosiLimitChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientPosiLimitChg->ActionDate);
                    Gb2312ToUtf8(pRtnClientPosiLimitChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientPosiLimitChg->ActionTime);
                    Gb2312ToUtf8(pRtnClientPosiLimitChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientPosiLimitChg->InstrumentID);
                    Gb2312ToUtf8(pRtnClientPosiLimitChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                    v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRtnClientPosiLimitChg->ClientType);
                    pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnClientPosiLimitChg->TradingRole);
                    pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnClientPosiLimitChg->StartTotalPosition);
                    pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnClientPosiLimitChg->ValueMode);
                    pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnClientPosiLimitChg->LongPosLimit);
                    pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnClientPosiLimitChg->ShortPosLimit);
                    pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnClientPosiLimitChg->OperationType);
                    pRtnClientPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnClientPosiLimitChg) { 
                    params[0] = Local<v8::Value>(pRtnClientPosiLimitChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnClientPosiLimitChg) { 
                delete pRtnClientPosiLimitChg;
                pRtnClientPosiLimitChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnClientPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySpecPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySpecPosiLimitChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySpecPosiLimitChgTopic_mutex);

    int ioUserNumb = g_RspQrySpecPosiLimitChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySpecPosiLimitChgTopic_IOUser_vec.begin();
        it != g_RspQrySpecPosiLimitChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySpecPosiLimitChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySpecPosiLimitChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySpecPosiLimitChgTopic_Data_map[*it].front());
            g_RspQrySpecPosiLimitChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySpecPosiLimitChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySpecPosiLimitChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySpecPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySpecPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySpecPosiLimitChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySpecPosiLimitChgTopic").ToLocalChecked());
            CShfeFtdcRspQrySpecPosiLimitChgField* pRspQrySpecPosiLimitChg = (CShfeFtdcRspQrySpecPosiLimitChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySpecPosiLimitChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySpecPosiLimitChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySpecPosiLimitChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySpecPosiLimitChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySpecPosiLimitChg->ActionDate);
                    Gb2312ToUtf8(pRspQrySpecPosiLimitChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySpecPosiLimitChg->ActionTime);
                    Gb2312ToUtf8(pRspQrySpecPosiLimitChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySpecPosiLimitChg->InstrumentID);
                    Gb2312ToUtf8(pRspQrySpecPosiLimitChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySpecPosiLimitChg->ClientID);
                    Gb2312ToUtf8(pRspQrySpecPosiLimitChg->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQrySpecPosiLimitChg->TradingRole);
                    pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRspQrySpecPosiLimitChg->StartTotalPosition);
                    pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRspQrySpecPosiLimitChg->ValueMode);
                    pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRspQrySpecPosiLimitChg->LongPosLimit);
                    pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRspQrySpecPosiLimitChg->ShortPosLimit);
                    pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQrySpecPosiLimitChg->OperationType);
                    pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySpecPosiLimitChg) { 
                    params[0] = Local<v8::Value>(pRspQrySpecPosiLimitChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySpecPosiLimitChg) { 
                delete pRspQrySpecPosiLimitChg;
                pRspQrySpecPosiLimitChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySpecPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSpecPosiLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnSpecPosiLimitChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnSpecPosiLimitChgTopic_mutex);

    int ioUserNumb = g_RtnSpecPosiLimitChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnSpecPosiLimitChgTopic_IOUser_vec.begin();
        it != g_RtnSpecPosiLimitChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnSpecPosiLimitChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnSpecPosiLimitChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnSpecPosiLimitChgTopic_Data_map[*it].front());
            g_RtnSpecPosiLimitChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnSpecPosiLimitChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnSpecPosiLimitChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnSpecPosiLimitChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnSpecPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnSpecPosiLimitChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnSpecPosiLimitChgTopic").ToLocalChecked());
            CShfeFtdcRtnSpecPosiLimitChgField* pRtnSpecPosiLimitChg = (CShfeFtdcRtnSpecPosiLimitChgField*)(paramArray[1]);
            if (OnRtnSpecPosiLimitChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnSpecPosiLimitChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnSpecPosiLimitChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnSpecPosiLimitChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSpecPosiLimitChg->ActionDate);
                    Gb2312ToUtf8(pRtnSpecPosiLimitChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSpecPosiLimitChg->ActionTime);
                    Gb2312ToUtf8(pRtnSpecPosiLimitChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSpecPosiLimitChg->InstrumentID);
                    Gb2312ToUtf8(pRtnSpecPosiLimitChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSpecPosiLimitChg->ClientID);
                    Gb2312ToUtf8(pRtnSpecPosiLimitChg->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnSpecPosiLimitChg->TradingRole);
                    pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> StartTotalPosition = Nan::New<v8::String> ("StartTotalPosition").ToLocalChecked();
                    v8::Local<v8::Number> StartTotalPositionValue = Nan::New<v8::Number> (pRtnSpecPosiLimitChg->StartTotalPosition);
                    pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (StartTotalPosition), Local<v8::Value>(StartTotalPositionValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnSpecPosiLimitChg->ValueMode);
                    pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> LongPosLimit = Nan::New<v8::String> ("LongPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> LongPosLimitValue = Nan::New<v8::Number> (pRtnSpecPosiLimitChg->LongPosLimit);
                    pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (LongPosLimit), Local<v8::Value>(LongPosLimitValue));

                    v8::Local<v8::String> ShortPosLimit = Nan::New<v8::String> ("ShortPosLimit").ToLocalChecked();
                    v8::Local<v8::Number> ShortPosLimitValue = Nan::New<v8::Number> (pRtnSpecPosiLimitChg->ShortPosLimit);
                    pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (ShortPosLimit), Local<v8::Value>(ShortPosLimitValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnSpecPosiLimitChg->OperationType);
                    pRtnSpecPosiLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnSpecPosiLimitChg) { 
                    params[0] = Local<v8::Value>(pRtnSpecPosiLimitChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnSpecPosiLimitChg) { 
                delete pRtnSpecPosiLimitChg;
                pRtnSpecPosiLimitChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnSpecPosiLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHistoryObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryHistoryObjectAttrTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryHistoryObjectAttrTopic_mutex);

    int ioUserNumb = g_RspQryHistoryObjectAttrTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryHistoryObjectAttrTopic_IOUser_vec.begin();
        it != g_RspQryHistoryObjectAttrTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryHistoryObjectAttrTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryHistoryObjectAttrTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryHistoryObjectAttrTopic_Data_map[*it].front());
            g_RspQryHistoryObjectAttrTopic_Data_map[*it].pop();
        }
    }
    g_RspQryHistoryObjectAttrTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryHistoryObjectAttrTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryHistoryObjectAttrTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryHistoryObjectAttrTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryHistoryObjectAttrTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryHistoryObjectAttrTopic").ToLocalChecked());
            CShfeFtdcRspQryHistoryObjectAttrField* pRspQryHistoryObjectAttr = (CShfeFtdcRspQryHistoryObjectAttrField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryHistoryObjectAttrTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryHistoryObjectAttrTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryHistoryObjectAttrJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryHistoryObjectAttr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryObjectAttr->MonDate);
                    Gb2312ToUtf8(pRspQryHistoryObjectAttr->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> BeginTime = Nan::New<v8::String> ("BeginTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryObjectAttr->BeginTime);
                    Gb2312ToUtf8(pRspQryHistoryObjectAttr->BeginTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BeginTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (BeginTime), Local<v8::Value>(BeginTimeValue));

                    v8::Local<v8::String> EndTime = Nan::New<v8::String> ("EndTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryObjectAttr->EndTime);
                    Gb2312ToUtf8(pRspQryHistoryObjectAttr->EndTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (EndTime), Local<v8::Value>(EndTimeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryObjectAttr->ObjectID);
                    Gb2312ToUtf8(pRspQryHistoryObjectAttr->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryObjectAttr->AttrType);
                    Gb2312ToUtf8(pRspQryHistoryObjectAttr->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> ValueType = Nan::New<v8::String> ("ValueType").ToLocalChecked();
                    v8::Local<v8::Integer> ValueTypeValue = Nan::New<v8::Integer> (pRspQryHistoryObjectAttr->ValueType);
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (ValueType), Local<v8::Value>(ValueTypeValue));

                    v8::Local<v8::String> FirstValue = Nan::New<v8::String> ("FirstValue").ToLocalChecked();
                    v8::Local<v8::Number> FirstValueValue = Nan::New<v8::Number> (pRspQryHistoryObjectAttr->FirstValue);
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (FirstValue), Local<v8::Value>(FirstValueValue));

                    v8::Local<v8::String> EndValue = Nan::New<v8::String> ("EndValue").ToLocalChecked();
                    v8::Local<v8::Number> EndValueValue = Nan::New<v8::Number> (pRspQryHistoryObjectAttr->EndValue);
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (EndValue), Local<v8::Value>(EndValueValue));

                    v8::Local<v8::String> AvgValue = Nan::New<v8::String> ("AvgValue").ToLocalChecked();
                    v8::Local<v8::Number> AvgValueValue = Nan::New<v8::Number> (pRspQryHistoryObjectAttr->AvgValue);
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (AvgValue), Local<v8::Value>(AvgValueValue));

                    v8::Local<v8::String> MinValue = Nan::New<v8::String> ("MinValue").ToLocalChecked();
                    v8::Local<v8::Number> MinValueValue = Nan::New<v8::Number> (pRspQryHistoryObjectAttr->MinValue);
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (MinValue), Local<v8::Value>(MinValueValue));

                    v8::Local<v8::String> MaxValue = Nan::New<v8::String> ("MaxValue").ToLocalChecked();
                    v8::Local<v8::Number> MaxValueValue = Nan::New<v8::Number> (pRspQryHistoryObjectAttr->MaxValue);
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (MaxValue), Local<v8::Value>(MaxValueValue));

                    v8::Local<v8::String> ValueCount = Nan::New<v8::String> ("ValueCount").ToLocalChecked();
                    v8::Local<v8::Integer> ValueCountValue = Nan::New<v8::Integer> (pRspQryHistoryObjectAttr->ValueCount);
                    pRspQryHistoryObjectAttrJS->Set(Local<v8::Value> (ValueCount), Local<v8::Value>(ValueCountValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryHistoryObjectAttr) { 
                    params[0] = Local<v8::Value>(pRspQryHistoryObjectAttrJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryHistoryObjectAttr) { 
                delete pRspQryHistoryObjectAttr;
                pRspQryHistoryObjectAttr = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryHistoryObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnHistoryObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnHistoryObjectAttrTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnHistoryObjectAttrTopic_mutex);

    int ioUserNumb = g_RtnHistoryObjectAttrTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnHistoryObjectAttrTopic_IOUser_vec.begin();
        it != g_RtnHistoryObjectAttrTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnHistoryObjectAttrTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnHistoryObjectAttrTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnHistoryObjectAttrTopic_Data_map[*it].front());
            g_RtnHistoryObjectAttrTopic_Data_map[*it].pop();
        }
    }
    g_RtnHistoryObjectAttrTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnHistoryObjectAttrTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnHistoryObjectAttrTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnHistoryObjectAttrTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnHistoryObjectAttrTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnHistoryObjectAttrTopic").ToLocalChecked());
            CShfeFtdcRtnHistoryObjectAttrField* pRtnHistoryObjectAttr = (CShfeFtdcRtnHistoryObjectAttrField*)(paramArray[1]);
            if (OnRtnHistoryObjectAttrTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnHistoryObjectAttrTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnHistoryObjectAttrJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnHistoryObjectAttr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryObjectAttr->MonDate);
                    Gb2312ToUtf8(pRtnHistoryObjectAttr->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> BeginTime = Nan::New<v8::String> ("BeginTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryObjectAttr->BeginTime);
                    Gb2312ToUtf8(pRtnHistoryObjectAttr->BeginTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BeginTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (BeginTime), Local<v8::Value>(BeginTimeValue));

                    v8::Local<v8::String> EndTime = Nan::New<v8::String> ("EndTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryObjectAttr->EndTime);
                    Gb2312ToUtf8(pRtnHistoryObjectAttr->EndTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (EndTime), Local<v8::Value>(EndTimeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryObjectAttr->ObjectID);
                    Gb2312ToUtf8(pRtnHistoryObjectAttr->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryObjectAttr->AttrType);
                    Gb2312ToUtf8(pRtnHistoryObjectAttr->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> ValueType = Nan::New<v8::String> ("ValueType").ToLocalChecked();
                    v8::Local<v8::Integer> ValueTypeValue = Nan::New<v8::Integer> (pRtnHistoryObjectAttr->ValueType);
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (ValueType), Local<v8::Value>(ValueTypeValue));

                    v8::Local<v8::String> FirstValue = Nan::New<v8::String> ("FirstValue").ToLocalChecked();
                    v8::Local<v8::Number> FirstValueValue = Nan::New<v8::Number> (pRtnHistoryObjectAttr->FirstValue);
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (FirstValue), Local<v8::Value>(FirstValueValue));

                    v8::Local<v8::String> EndValue = Nan::New<v8::String> ("EndValue").ToLocalChecked();
                    v8::Local<v8::Number> EndValueValue = Nan::New<v8::Number> (pRtnHistoryObjectAttr->EndValue);
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (EndValue), Local<v8::Value>(EndValueValue));

                    v8::Local<v8::String> AvgValue = Nan::New<v8::String> ("AvgValue").ToLocalChecked();
                    v8::Local<v8::Number> AvgValueValue = Nan::New<v8::Number> (pRtnHistoryObjectAttr->AvgValue);
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (AvgValue), Local<v8::Value>(AvgValueValue));

                    v8::Local<v8::String> MinValue = Nan::New<v8::String> ("MinValue").ToLocalChecked();
                    v8::Local<v8::Number> MinValueValue = Nan::New<v8::Number> (pRtnHistoryObjectAttr->MinValue);
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (MinValue), Local<v8::Value>(MinValueValue));

                    v8::Local<v8::String> MaxValue = Nan::New<v8::String> ("MaxValue").ToLocalChecked();
                    v8::Local<v8::Number> MaxValueValue = Nan::New<v8::Number> (pRtnHistoryObjectAttr->MaxValue);
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (MaxValue), Local<v8::Value>(MaxValueValue));

                    v8::Local<v8::String> ValueCount = Nan::New<v8::String> ("ValueCount").ToLocalChecked();
                    v8::Local<v8::Integer> ValueCountValue = Nan::New<v8::Integer> (pRtnHistoryObjectAttr->ValueCount);
                    pRtnHistoryObjectAttrJS->Set(Local<v8::Value> (ValueCount), Local<v8::Value>(ValueCountValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnHistoryObjectAttr) { 
                    params[0] = Local<v8::Value>(pRtnHistoryObjectAttrJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnHistoryObjectAttr) { 
                delete pRtnHistoryObjectAttr;
                pRtnHistoryObjectAttr = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnHistoryObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFrontInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryFrontInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryFrontInfoTopic_mutex);

    int ioUserNumb = g_RspQryFrontInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryFrontInfoTopic_IOUser_vec.begin();
        it != g_RspQryFrontInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryFrontInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryFrontInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryFrontInfoTopic_Data_map[*it].front());
            g_RspQryFrontInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryFrontInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryFrontInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryFrontInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryFrontInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryFrontInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryFrontInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryFrontInfoField* pRspQryFrontInfo = (CShfeFtdcRspQryFrontInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryFrontInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryFrontInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryFrontInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryFrontInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFrontInfo->MonDate);
                    Gb2312ToUtf8(pRspQryFrontInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFrontInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFrontInfo->MonTime);
                    Gb2312ToUtf8(pRspQryFrontInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFrontInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> FrontId = Nan::New<v8::String> ("FrontId").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFrontInfo->FrontId);
                    Gb2312ToUtf8(pRspQryFrontInfo->FrontId, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FrontIdValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFrontInfoJS->Set(Local<v8::Value> (FrontId), Local<v8::Value>(FrontIdValue));

                    v8::Local<v8::String> RspCondition = Nan::New<v8::String> ("RspCondition").ToLocalChecked();
                    v8::Local<v8::Integer> RspConditionValue = Nan::New<v8::Integer> (pRspQryFrontInfo->RspCondition);
                    pRspQryFrontInfoJS->Set(Local<v8::Value> (RspCondition), Local<v8::Value>(RspConditionValue));

                    v8::Local<v8::String> ReqCount = Nan::New<v8::String> ("ReqCount").ToLocalChecked();
                    v8::Local<v8::Integer> ReqCountValue = Nan::New<v8::Integer> (pRspQryFrontInfo->ReqCount);
                    pRspQryFrontInfoJS->Set(Local<v8::Value> (ReqCount), Local<v8::Value>(ReqCountValue));

                    v8::Local<v8::String> ReqRate = Nan::New<v8::String> ("ReqRate").ToLocalChecked();
                    v8::Local<v8::Number> ReqRateValue = Nan::New<v8::Number> (pRspQryFrontInfo->ReqRate);
                    pRspQryFrontInfoJS->Set(Local<v8::Value> (ReqRate), Local<v8::Value>(ReqRateValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryFrontInfo) { 
                    params[0] = Local<v8::Value>(pRspQryFrontInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryFrontInfo) { 
                delete pRspQryFrontInfo;
                pRspQryFrontInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryFrontInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFrontInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnFrontInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnFrontInfoTopic_mutex);

    int ioUserNumb = g_RtnFrontInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnFrontInfoTopic_IOUser_vec.begin();
        it != g_RtnFrontInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnFrontInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnFrontInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnFrontInfoTopic_Data_map[*it].front());
            g_RtnFrontInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnFrontInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnFrontInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnFrontInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnFrontInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnFrontInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnFrontInfoTopic").ToLocalChecked());
            CShfeFtdcRtnFrontInfoField* pRtnFrontInfo = (CShfeFtdcRtnFrontInfoField*)(paramArray[1]);
            if (OnRtnFrontInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnFrontInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnFrontInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnFrontInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFrontInfo->MonDate);
                    Gb2312ToUtf8(pRtnFrontInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFrontInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFrontInfo->MonTime);
                    Gb2312ToUtf8(pRtnFrontInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFrontInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> FrontId = Nan::New<v8::String> ("FrontId").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFrontInfo->FrontId);
                    Gb2312ToUtf8(pRtnFrontInfo->FrontId, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FrontIdValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFrontInfoJS->Set(Local<v8::Value> (FrontId), Local<v8::Value>(FrontIdValue));

                    v8::Local<v8::String> RspCondition = Nan::New<v8::String> ("RspCondition").ToLocalChecked();
                    v8::Local<v8::Integer> RspConditionValue = Nan::New<v8::Integer> (pRtnFrontInfo->RspCondition);
                    pRtnFrontInfoJS->Set(Local<v8::Value> (RspCondition), Local<v8::Value>(RspConditionValue));

                    v8::Local<v8::String> ReqCount = Nan::New<v8::String> ("ReqCount").ToLocalChecked();
                    v8::Local<v8::Integer> ReqCountValue = Nan::New<v8::Integer> (pRtnFrontInfo->ReqCount);
                    pRtnFrontInfoJS->Set(Local<v8::Value> (ReqCount), Local<v8::Value>(ReqCountValue));

                    v8::Local<v8::String> ReqRate = Nan::New<v8::String> ("ReqRate").ToLocalChecked();
                    v8::Local<v8::Number> ReqRateValue = Nan::New<v8::Number> (pRtnFrontInfo->ReqRate);
                    pRtnFrontInfoJS->Set(Local<v8::Value> (ReqRate), Local<v8::Value>(ReqRateValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnFrontInfo) { 
                    params[0] = Local<v8::Value>(pRtnFrontInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnFrontInfo) { 
                delete pRtnFrontInfo;
                pRtnFrontInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnFrontInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysUserLoginTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySysUserLoginTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySysUserLoginTopic_mutex);

    int ioUserNumb = g_RspQrySysUserLoginTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySysUserLoginTopic_IOUser_vec.begin();
        it != g_RspQrySysUserLoginTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySysUserLoginTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySysUserLoginTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySysUserLoginTopic_Data_map[*it].front());
            g_RspQrySysUserLoginTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySysUserLoginTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySysUserLoginTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySysUserLoginTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySysUserLoginTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySysUserLoginTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysUserLoginTopic").ToLocalChecked());
            CShfeFtdcRspQrySysUserLoginField* pRspQrySysUserLogin = (CShfeFtdcRspQrySysUserLoginField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySysUserLoginTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySysUserLoginTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySysUserLoginJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySysUserLogin) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysUserLogin->UserID);
                    Gb2312ToUtf8(pRspQrySysUserLogin->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysUserLoginJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> TradingDay = Nan::New<v8::String> ("TradingDay").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysUserLogin->TradingDay);
                    Gb2312ToUtf8(pRspQrySysUserLogin->TradingDay, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TradingDayValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysUserLoginJS->Set(Local<v8::Value> (TradingDay), Local<v8::Value>(TradingDayValue));

                    v8::Local<v8::String> LoginTime = Nan::New<v8::String> ("LoginTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysUserLogin->LoginTime);
                    Gb2312ToUtf8(pRspQrySysUserLogin->LoginTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LoginTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysUserLoginJS->Set(Local<v8::Value> (LoginTime), Local<v8::Value>(LoginTimeValue));

                    v8::Local<v8::String> Privilege = Nan::New<v8::String> ("Privilege").ToLocalChecked();
                    v8::Local<v8::Integer> PrivilegeValue = Nan::New<v8::Integer> (pRspQrySysUserLogin->Privilege);
                    pRspQrySysUserLoginJS->Set(Local<v8::Value> (Privilege), Local<v8::Value>(PrivilegeValue));

                    v8::Local<v8::String> VersionFlag = Nan::New<v8::String> ("VersionFlag").ToLocalChecked();
                    v8::Local<v8::Integer> VersionFlagValue = Nan::New<v8::Integer> (pRspQrySysUserLogin->VersionFlag);
                    pRspQrySysUserLoginJS->Set(Local<v8::Value> (VersionFlag), Local<v8::Value>(VersionFlagValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySysUserLogin) { 
                    params[0] = Local<v8::Value>(pRspQrySysUserLoginJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySysUserLogin) { 
                delete pRspQrySysUserLogin;
                pRspQrySysUserLogin = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySysUserLoginTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysUserLogoutTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySysUserLogoutTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySysUserLogoutTopic_mutex);

    int ioUserNumb = g_RspQrySysUserLogoutTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySysUserLogoutTopic_IOUser_vec.begin();
        it != g_RspQrySysUserLogoutTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySysUserLogoutTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySysUserLogoutTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySysUserLogoutTopic_Data_map[*it].front());
            g_RspQrySysUserLogoutTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySysUserLogoutTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySysUserLogoutTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySysUserLogoutTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySysUserLogoutTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySysUserLogoutTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysUserLogoutTopic").ToLocalChecked());
            CShfeFtdcRspQrySysUserLogoutField* pRspQrySysUserLogout = (CShfeFtdcRspQrySysUserLogoutField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySysUserLogoutTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySysUserLogoutTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySysUserLogoutJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySysUserLogout) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysUserLogout->UserID);
                    Gb2312ToUtf8(pRspQrySysUserLogout->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysUserLogoutJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySysUserLogout) { 
                    params[0] = Local<v8::Value>(pRspQrySysUserLogoutJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySysUserLogout) { 
                delete pRspQrySysUserLogout;
                pRspQrySysUserLogout = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySysUserLogoutTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysUserPasswordUpdateTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySysUserPasswordUpdateTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySysUserPasswordUpdateTopic_mutex);

    int ioUserNumb = g_RspQrySysUserPasswordUpdateTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySysUserPasswordUpdateTopic_IOUser_vec.begin();
        it != g_RspQrySysUserPasswordUpdateTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySysUserPasswordUpdateTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySysUserPasswordUpdateTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySysUserPasswordUpdateTopic_Data_map[*it].front());
            g_RspQrySysUserPasswordUpdateTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySysUserPasswordUpdateTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySysUserPasswordUpdateTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySysUserPasswordUpdateTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySysUserPasswordUpdateTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySysUserPasswordUpdateTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysUserPasswordUpdateTopic").ToLocalChecked());
            CShfeFtdcRspQrySysUserPasswordUpdateField* pRspQrySysUserPasswordUpdate = (CShfeFtdcRspQrySysUserPasswordUpdateField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySysUserPasswordUpdateTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySysUserPasswordUpdateTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySysUserPasswordUpdateJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySysUserPasswordUpdate) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysUserPasswordUpdate->UserID);
                    Gb2312ToUtf8(pRspQrySysUserPasswordUpdate->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysUserPasswordUpdateJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> PasswordChgMsg = Nan::New<v8::String> ("PasswordChgMsg").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysUserPasswordUpdate->PasswordChgMsg);
                    Gb2312ToUtf8(pRspQrySysUserPasswordUpdate->PasswordChgMsg, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PasswordChgMsgValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysUserPasswordUpdateJS->Set(Local<v8::Value> (PasswordChgMsg), Local<v8::Value>(PasswordChgMsgValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySysUserPasswordUpdate) { 
                    params[0] = Local<v8::Value>(pRspQrySysUserPasswordUpdateJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySysUserPasswordUpdate) { 
                delete pRspQrySysUserPasswordUpdate;
                pRspQrySysUserPasswordUpdate = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySysUserPasswordUpdateTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysUserRegisterTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySysUserRegisterTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySysUserRegisterTopic_mutex);

    int ioUserNumb = g_RspQrySysUserRegisterTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySysUserRegisterTopic_IOUser_vec.begin();
        it != g_RspQrySysUserRegisterTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySysUserRegisterTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySysUserRegisterTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySysUserRegisterTopic_Data_map[*it].front());
            g_RspQrySysUserRegisterTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySysUserRegisterTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySysUserRegisterTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySysUserRegisterTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySysUserRegisterTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySysUserRegisterTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysUserRegisterTopic").ToLocalChecked());
            CShfeFtdcRspQrySysUserRegisterField* pRspQrySysUserRegister = (CShfeFtdcRspQrySysUserRegisterField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySysUserRegisterTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySysUserRegisterTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySysUserRegisterJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySysUserRegister) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysUserRegister->UserID);
                    Gb2312ToUtf8(pRspQrySysUserRegister->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysUserRegisterJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> Privilege = Nan::New<v8::String> ("Privilege").ToLocalChecked();
                    v8::Local<v8::Integer> PrivilegeValue = Nan::New<v8::Integer> (pRspQrySysUserRegister->Privilege);
                    pRspQrySysUserRegisterJS->Set(Local<v8::Value> (Privilege), Local<v8::Value>(PrivilegeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySysUserRegister) { 
                    params[0] = Local<v8::Value>(pRspQrySysUserRegisterJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySysUserRegister) { 
                delete pRspQrySysUserRegister;
                pRspQrySysUserRegister = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySysUserRegisterTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysUserDeleteTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySysUserDeleteTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySysUserDeleteTopic_mutex);

    int ioUserNumb = g_RspQrySysUserDeleteTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySysUserDeleteTopic_IOUser_vec.begin();
        it != g_RspQrySysUserDeleteTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySysUserDeleteTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySysUserDeleteTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySysUserDeleteTopic_Data_map[*it].front());
            g_RspQrySysUserDeleteTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySysUserDeleteTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySysUserDeleteTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySysUserDeleteTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySysUserDeleteTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySysUserDeleteTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysUserDeleteTopic").ToLocalChecked());
            CShfeFtdcRspQrySysUserDeleteField* pRspQrySysUserDelete = (CShfeFtdcRspQrySysUserDeleteField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySysUserDeleteTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySysUserDeleteTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySysUserDeleteJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySysUserDelete) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysUserDelete->UserID);
                    Gb2312ToUtf8(pRspQrySysUserDelete->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysUserDeleteJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySysUserDelete) { 
                    params[0] = Local<v8::Value>(pRspQrySysUserDeleteJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySysUserDelete) { 
                delete pRspQrySysUserDelete;
                pRspQrySysUserDelete = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySysUserDeleteTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryParticipantInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryParticipantInitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryParticipantInitTopic_mutex);

    int ioUserNumb = g_RspQryParticipantInitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryParticipantInitTopic_IOUser_vec.begin();
        it != g_RspQryParticipantInitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryParticipantInitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryParticipantInitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryParticipantInitTopic_Data_map[*it].front());
            g_RspQryParticipantInitTopic_Data_map[*it].pop();
        }
    }
    g_RspQryParticipantInitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryParticipantInitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryParticipantInitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryParticipantInitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryParticipantInitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryParticipantInitTopic").ToLocalChecked());
            CShfeFtdcRspQryParticipantInitField* pRspQryParticipantInit = (CShfeFtdcRspQryParticipantInitField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryParticipantInitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryParticipantInitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryParticipantInitJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryParticipantInit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticipantInit->ParticipantID);
                    Gb2312ToUtf8(pRspQryParticipantInit->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticipantInitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticipantInit->ParticipantName);
                    Gb2312ToUtf8(pRspQryParticipantInit->ParticipantName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticipantInitJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                    v8::Local<v8::String> ParticipantAbbr = Nan::New<v8::String> ("ParticipantAbbr").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticipantInit->ParticipantAbbr);
                    Gb2312ToUtf8(pRspQryParticipantInit->ParticipantAbbr, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantAbbrValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticipantInitJS->Set(Local<v8::Value> (ParticipantAbbr), Local<v8::Value>(ParticipantAbbrValue));

                    v8::Local<v8::String> MemberType = Nan::New<v8::String> ("MemberType").ToLocalChecked();
                    v8::Local<v8::Integer> MemberTypeValue = Nan::New<v8::Integer> (pRspQryParticipantInit->MemberType);
                    pRspQryParticipantInitJS->Set(Local<v8::Value> (MemberType), Local<v8::Value>(MemberTypeValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryParticipantInit->IsActive);
                    pRspQryParticipantInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryParticipantInit->OperationType);
                    pRspQryParticipantInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryParticipantInit) { 
                    params[0] = Local<v8::Value>(pRspQryParticipantInitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryParticipantInit) { 
                delete pRspQryParticipantInit;
                pRspQryParticipantInit = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryParticipantInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnParticipantInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnParticipantInitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnParticipantInitTopic_mutex);

    int ioUserNumb = g_RtnParticipantInitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnParticipantInitTopic_IOUser_vec.begin();
        it != g_RtnParticipantInitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnParticipantInitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnParticipantInitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnParticipantInitTopic_Data_map[*it].front());
            g_RtnParticipantInitTopic_Data_map[*it].pop();
        }
    }
    g_RtnParticipantInitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnParticipantInitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnParticipantInitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnParticipantInitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnParticipantInitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnParticipantInitTopic").ToLocalChecked());
            CShfeFtdcRtnParticipantInitField* pRtnParticipantInit = (CShfeFtdcRtnParticipantInitField*)(paramArray[1]);
            if (OnRtnParticipantInitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnParticipantInitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnParticipantInitJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnParticipantInit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticipantInit->ParticipantID);
                    Gb2312ToUtf8(pRtnParticipantInit->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticipantInitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticipantInit->ParticipantName);
                    Gb2312ToUtf8(pRtnParticipantInit->ParticipantName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticipantInitJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                    v8::Local<v8::String> ParticipantAbbr = Nan::New<v8::String> ("ParticipantAbbr").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticipantInit->ParticipantAbbr);
                    Gb2312ToUtf8(pRtnParticipantInit->ParticipantAbbr, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantAbbrValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticipantInitJS->Set(Local<v8::Value> (ParticipantAbbr), Local<v8::Value>(ParticipantAbbrValue));

                    v8::Local<v8::String> MemberType = Nan::New<v8::String> ("MemberType").ToLocalChecked();
                    v8::Local<v8::Integer> MemberTypeValue = Nan::New<v8::Integer> (pRtnParticipantInit->MemberType);
                    pRtnParticipantInitJS->Set(Local<v8::Value> (MemberType), Local<v8::Value>(MemberTypeValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnParticipantInit->IsActive);
                    pRtnParticipantInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnParticipantInit->OperationType);
                    pRtnParticipantInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnParticipantInit) { 
                    params[0] = Local<v8::Value>(pRtnParticipantInitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnParticipantInit) { 
                delete pRtnParticipantInit;
                pRtnParticipantInit = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnParticipantInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryUserInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryUserInitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryUserInitTopic_mutex);

    int ioUserNumb = g_RspQryUserInitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryUserInitTopic_IOUser_vec.begin();
        it != g_RspQryUserInitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryUserInitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryUserInitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryUserInitTopic_Data_map[*it].front());
            g_RspQryUserInitTopic_Data_map[*it].pop();
        }
    }
    g_RspQryUserInitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryUserInitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryUserInitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryUserInitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryUserInitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryUserInitTopic").ToLocalChecked());
            CShfeFtdcRspQryUserInitField* pRspQryUserInit = (CShfeFtdcRspQryUserInitField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryUserInitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryUserInitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryUserInitJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryUserInit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserInit->ParticipantID);
                    Gb2312ToUtf8(pRspQryUserInit->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserInitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserInit->UserID);
                    Gb2312ToUtf8(pRspQryUserInit->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserInitJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> UserType = Nan::New<v8::String> ("UserType").ToLocalChecked();
                    v8::Local<v8::Integer> UserTypeValue = Nan::New<v8::Integer> (pRspQryUserInit->UserType);
                    pRspQryUserInitJS->Set(Local<v8::Value> (UserType), Local<v8::Value>(UserTypeValue));

                    v8::Local<v8::String> Password = Nan::New<v8::String> ("Password").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryUserInit->Password);
                    Gb2312ToUtf8(pRspQryUserInit->Password, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PasswordValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryUserInitJS->Set(Local<v8::Value> (Password), Local<v8::Value>(PasswordValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryUserInit->IsActive);
                    pRspQryUserInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryUserInit->OperationType);
                    pRspQryUserInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryUserInit) { 
                    params[0] = Local<v8::Value>(pRspQryUserInitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryUserInit) { 
                delete pRspQryUserInit;
                pRspQryUserInit = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryUserInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnUserInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnUserInitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnUserInitTopic_mutex);

    int ioUserNumb = g_RtnUserInitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnUserInitTopic_IOUser_vec.begin();
        it != g_RtnUserInitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnUserInitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnUserInitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnUserInitTopic_Data_map[*it].front());
            g_RtnUserInitTopic_Data_map[*it].pop();
        }
    }
    g_RtnUserInitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnUserInitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnUserInitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnUserInitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnUserInitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnUserInitTopic").ToLocalChecked());
            CShfeFtdcRtnUserInitField* pRtnUserInit = (CShfeFtdcRtnUserInitField*)(paramArray[1]);
            if (OnRtnUserInitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnUserInitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnUserInitJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnUserInit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserInit->ParticipantID);
                    Gb2312ToUtf8(pRtnUserInit->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserInitJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserInit->UserID);
                    Gb2312ToUtf8(pRtnUserInit->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserInitJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> UserType = Nan::New<v8::String> ("UserType").ToLocalChecked();
                    v8::Local<v8::Integer> UserTypeValue = Nan::New<v8::Integer> (pRtnUserInit->UserType);
                    pRtnUserInitJS->Set(Local<v8::Value> (UserType), Local<v8::Value>(UserTypeValue));

                    v8::Local<v8::String> Password = Nan::New<v8::String> ("Password").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUserInit->Password);
                    Gb2312ToUtf8(pRtnUserInit->Password, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PasswordValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUserInitJS->Set(Local<v8::Value> (Password), Local<v8::Value>(PasswordValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnUserInit->IsActive);
                    pRtnUserInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnUserInit->OperationType);
                    pRtnUserInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnUserInit) { 
                    params[0] = Local<v8::Value>(pRtnUserInitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnUserInit) { 
                delete pRtnUserInit;
                pRtnUserInit = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnUserInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryClientInitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryClientInitTopic_mutex);

    int ioUserNumb = g_RspQryClientInitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryClientInitTopic_IOUser_vec.begin();
        it != g_RspQryClientInitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryClientInitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryClientInitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryClientInitTopic_Data_map[*it].front());
            g_RspQryClientInitTopic_Data_map[*it].pop();
        }
    }
    g_RspQryClientInitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryClientInitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryClientInitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryClientInitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryClientInitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientInitTopic").ToLocalChecked());
            CShfeFtdcRspQryClientInitField* pRspQryClientInit = (CShfeFtdcRspQryClientInitField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryClientInitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryClientInitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryClientInitJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryClientInit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientInit->ClientID);
                    Gb2312ToUtf8(pRspQryClientInit->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientInitJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientInit->ClientName);
                    Gb2312ToUtf8(pRspQryClientInit->ClientName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientInitJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                    v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientInit->IdentifiedCardType);
                    Gb2312ToUtf8(pRspQryClientInit->IdentifiedCardType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientInitJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                    v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientInit->IdentifiedCardNo);
                    Gb2312ToUtf8(pRspQryClientInit->IdentifiedCardNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientInitJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryClientInit->TradingRole);
                    pRspQryClientInitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                    v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRspQryClientInit->ClientType);
                    pRspQryClientInitJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryClientInit->IsActive);
                    pRspQryClientInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryClientInit->OperationType);
                    pRspQryClientInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryClientInit) { 
                    params[0] = Local<v8::Value>(pRspQryClientInitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryClientInit) { 
                delete pRspQryClientInit;
                pRspQryClientInit = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryClientInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnClientInitTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnClientInitTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnClientInitTopic_mutex);

    int ioUserNumb = g_RtnClientInitTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnClientInitTopic_IOUser_vec.begin();
        it != g_RtnClientInitTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnClientInitTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnClientInitTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnClientInitTopic_Data_map[*it].front());
            g_RtnClientInitTopic_Data_map[*it].pop();
        }
    }
    g_RtnClientInitTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnClientInitTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnClientInitTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnClientInitTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnClientInitTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnClientInitTopic").ToLocalChecked());
            CShfeFtdcRtnClientInitField* pRtnClientInit = (CShfeFtdcRtnClientInitField*)(paramArray[1]);
            if (OnRtnClientInitTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnClientInitTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnClientInitJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnClientInit) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientInit->ClientID);
                    Gb2312ToUtf8(pRtnClientInit->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientInitJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientInit->ClientName);
                    Gb2312ToUtf8(pRtnClientInit->ClientName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientInitJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                    v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientInit->IdentifiedCardType);
                    Gb2312ToUtf8(pRtnClientInit->IdentifiedCardType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientInitJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                    v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientInit->IdentifiedCardNo);
                    Gb2312ToUtf8(pRtnClientInit->IdentifiedCardNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientInitJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnClientInit->TradingRole);
                    pRtnClientInitJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                    v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRtnClientInit->ClientType);
                    pRtnClientInitJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnClientInit->IsActive);
                    pRtnClientInitJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnClientInit->OperationType);
                    pRtnClientInitJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnClientInit) { 
                    params[0] = Local<v8::Value>(pRtnClientInitJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnClientInit) { 
                delete pRtnClientInit;
                pRtnClientInit = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnClientInitTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeLogTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTradeLogTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTradeLogTopic_mutex);

    int ioUserNumb = g_RspQryTradeLogTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTradeLogTopic_IOUser_vec.begin();
        it != g_RspQryTradeLogTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTradeLogTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTradeLogTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTradeLogTopic_Data_map[*it].front());
            g_RspQryTradeLogTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTradeLogTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTradeLogTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTradeLogTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTradeLogTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTradeLogTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeLogTopic").ToLocalChecked());
            CShfeFtdcRspQryTradeLogField* pRspQryTradeLog = (CShfeFtdcRspQryTradeLogField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTradeLogTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTradeLogTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTradeLogJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTradeLog) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> bFlag = Nan::New<v8::String> ("bFlag").ToLocalChecked();
                    v8::Local<v8::Integer> bFlagValue = Nan::New<v8::Integer> (pRspQryTradeLog->bFlag);
                    pRspQryTradeLogJS->Set(Local<v8::Value> (bFlag), Local<v8::Value>(bFlagValue));

                    v8::Local<v8::String> TradeLogStr = Nan::New<v8::String> ("TradeLogStr").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeLog->TradeLogStr);
                    Gb2312ToUtf8(pRspQryTradeLog->TradeLogStr, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TradeLogStrValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeLogJS->Set(Local<v8::Value> (TradeLogStr), Local<v8::Value>(TradeLogStrValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTradeLog) { 
                    params[0] = Local<v8::Value>(pRspQryTradeLogJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTradeLog) { 
                delete pRspQryTradeLog;
                pRspQryTradeLog = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTradeLogTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTradeLogTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnTradeLogTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnTradeLogTopic_mutex);

    int ioUserNumb = g_RtnTradeLogTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnTradeLogTopic_IOUser_vec.begin();
        it != g_RtnTradeLogTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnTradeLogTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnTradeLogTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnTradeLogTopic_Data_map[*it].front());
            g_RtnTradeLogTopic_Data_map[*it].pop();
        }
    }
    g_RtnTradeLogTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnTradeLogTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnTradeLogTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnTradeLogTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnTradeLogTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnTradeLogTopic").ToLocalChecked());
            CShfeFtdcRtnTradeLogField* pRtnTradeLog = (CShfeFtdcRtnTradeLogField*)(paramArray[1]);
            if (OnRtnTradeLogTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnTradeLogTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnTradeLogJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnTradeLog) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> bFlag = Nan::New<v8::String> ("bFlag").ToLocalChecked();
                    v8::Local<v8::Integer> bFlagValue = Nan::New<v8::Integer> (pRtnTradeLog->bFlag);
                    pRtnTradeLogJS->Set(Local<v8::Value> (bFlag), Local<v8::Value>(bFlagValue));

                    v8::Local<v8::String> TradeLogStr = Nan::New<v8::String> ("TradeLogStr").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeLog->TradeLogStr);
                    Gb2312ToUtf8(pRtnTradeLog->TradeLogStr, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TradeLogStrValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeLogJS->Set(Local<v8::Value> (TradeLogStr), Local<v8::Value>(TradeLogStrValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnTradeLog) { 
                    params[0] = Local<v8::Value>(pRtnTradeLogJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnTradeLog) { 
                delete pRtnTradeLog;
                pRtnTradeLog = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnTradeLogTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeUserLoginInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTradeUserLoginInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTradeUserLoginInfoTopic_mutex);

    int ioUserNumb = g_RspQryTradeUserLoginInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTradeUserLoginInfoTopic_IOUser_vec.begin();
        it != g_RspQryTradeUserLoginInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTradeUserLoginInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTradeUserLoginInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTradeUserLoginInfoTopic_Data_map[*it].front());
            g_RspQryTradeUserLoginInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTradeUserLoginInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTradeUserLoginInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTradeUserLoginInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTradeUserLoginInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTradeUserLoginInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeUserLoginInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryTradeUserLoginInfoField* pRspQryTradeUserLoginInfo = (CShfeFtdcRspQryTradeUserLoginInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTradeUserLoginInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTradeUserLoginInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTradeUserLoginInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTradeUserLoginInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryTradeUserLoginInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginInfo->UserID);
                    Gb2312ToUtf8(pRspQryTradeUserLoginInfo->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginInfo->ParticipantID);
                    Gb2312ToUtf8(pRspQryTradeUserLoginInfo->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> ProtocolInfo = Nan::New<v8::String> ("ProtocolInfo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginInfo->ProtocolInfo);
                    Gb2312ToUtf8(pRspQryTradeUserLoginInfo->ProtocolInfo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ProtocolInfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ProtocolInfo), Local<v8::Value>(ProtocolInfoValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginInfo->IPAddress);
                    Gb2312ToUtf8(pRspQryTradeUserLoginInfo->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                    v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRspQryTradeUserLoginInfo->FrontID);
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                    v8::Local<v8::String> UserType = Nan::New<v8::String> ("UserType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginInfo->UserType);
                    Gb2312ToUtf8(pRspQryTradeUserLoginInfo->UserType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (UserType), Local<v8::Value>(UserTypeValue));

                    v8::Local<v8::String> AccessType = Nan::New<v8::String> ("AccessType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginInfo->AccessType);
                    Gb2312ToUtf8(pRspQryTradeUserLoginInfo->AccessType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AccessTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (AccessType), Local<v8::Value>(AccessTypeValue));

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginInfo->ActionDate);
                    Gb2312ToUtf8(pRspQryTradeUserLoginInfo->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginInfo->ActionTime);
                    Gb2312ToUtf8(pRspQryTradeUserLoginInfo->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ActionFlag = Nan::New<v8::String> ("ActionFlag").ToLocalChecked();
                    v8::Local<v8::Integer> ActionFlagValue = Nan::New<v8::Integer> (pRspQryTradeUserLoginInfo->ActionFlag);
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionFlag), Local<v8::Value>(ActionFlagValue));

                    v8::Local<v8::String> DataCenter = Nan::New<v8::String> ("DataCenter").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginInfo->DataCenter);
                    Gb2312ToUtf8(pRspQryTradeUserLoginInfo->DataCenter, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DataCenterValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value> (DataCenter), Local<v8::Value>(DataCenterValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTradeUserLoginInfo) { 
                    params[0] = Local<v8::Value>(pRspQryTradeUserLoginInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTradeUserLoginInfo) { 
                delete pRspQryTradeUserLoginInfo;
                pRspQryTradeUserLoginInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTradeUserLoginInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTradeUserLoginInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnTradeUserLoginInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnTradeUserLoginInfoTopic_mutex);

    int ioUserNumb = g_RtnTradeUserLoginInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnTradeUserLoginInfoTopic_IOUser_vec.begin();
        it != g_RtnTradeUserLoginInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnTradeUserLoginInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnTradeUserLoginInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnTradeUserLoginInfoTopic_Data_map[*it].front());
            g_RtnTradeUserLoginInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnTradeUserLoginInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnTradeUserLoginInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnTradeUserLoginInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnTradeUserLoginInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnTradeUserLoginInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnTradeUserLoginInfoTopic").ToLocalChecked());
            CShfeFtdcRtnTradeUserLoginInfoField* pRtnTradeUserLoginInfo = (CShfeFtdcRtnTradeUserLoginInfoField*)(paramArray[1]);
            if (OnRtnTradeUserLoginInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnTradeUserLoginInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnTradeUserLoginInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnTradeUserLoginInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeUserLoginInfo->ObjectID);
                    Gb2312ToUtf8(pRtnTradeUserLoginInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeUserLoginInfo->UserID);
                    Gb2312ToUtf8(pRtnTradeUserLoginInfo->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeUserLoginInfo->ParticipantID);
                    Gb2312ToUtf8(pRtnTradeUserLoginInfo->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> ProtocolInfo = Nan::New<v8::String> ("ProtocolInfo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeUserLoginInfo->ProtocolInfo);
                    Gb2312ToUtf8(pRtnTradeUserLoginInfo->ProtocolInfo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ProtocolInfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ProtocolInfo), Local<v8::Value>(ProtocolInfoValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeUserLoginInfo->IPAddress);
                    Gb2312ToUtf8(pRtnTradeUserLoginInfo->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                    v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRtnTradeUserLoginInfo->FrontID);
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                    v8::Local<v8::String> UserType = Nan::New<v8::String> ("UserType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeUserLoginInfo->UserType);
                    Gb2312ToUtf8(pRtnTradeUserLoginInfo->UserType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (UserType), Local<v8::Value>(UserTypeValue));

                    v8::Local<v8::String> AccessType = Nan::New<v8::String> ("AccessType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeUserLoginInfo->AccessType);
                    Gb2312ToUtf8(pRtnTradeUserLoginInfo->AccessType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AccessTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (AccessType), Local<v8::Value>(AccessTypeValue));

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeUserLoginInfo->ActionDate);
                    Gb2312ToUtf8(pRtnTradeUserLoginInfo->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeUserLoginInfo->ActionTime);
                    Gb2312ToUtf8(pRtnTradeUserLoginInfo->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> ActionFlag = Nan::New<v8::String> ("ActionFlag").ToLocalChecked();
                    v8::Local<v8::Integer> ActionFlagValue = Nan::New<v8::Integer> (pRtnTradeUserLoginInfo->ActionFlag);
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (ActionFlag), Local<v8::Value>(ActionFlagValue));

                    v8::Local<v8::String> DataCenter = Nan::New<v8::String> ("DataCenter").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeUserLoginInfo->DataCenter);
                    Gb2312ToUtf8(pRtnTradeUserLoginInfo->DataCenter, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DataCenterValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeUserLoginInfoJS->Set(Local<v8::Value> (DataCenter), Local<v8::Value>(DataCenterValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnTradeUserLoginInfo) { 
                    params[0] = Local<v8::Value>(pRtnTradeUserLoginInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnTradeUserLoginInfo) { 
                delete pRtnTradeUserLoginInfo;
                pRtnTradeUserLoginInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnTradeUserLoginInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPartTradeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryPartTradeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryPartTradeTopic_mutex);

    int ioUserNumb = g_RspQryPartTradeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryPartTradeTopic_IOUser_vec.begin();
        it != g_RspQryPartTradeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryPartTradeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryPartTradeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryPartTradeTopic_Data_map[*it].front());
            g_RspQryPartTradeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryPartTradeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryPartTradeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryPartTradeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryPartTradeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryPartTradeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryPartTradeTopic").ToLocalChecked());
            CShfeFtdcRspQryPartTradeField* pRspQryPartTrade = (CShfeFtdcRspQryPartTradeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryPartTradeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryPartTradeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryPartTradeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryPartTrade) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartTrade->ActionDate);
                    Gb2312ToUtf8(pRspQryPartTrade->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartTradeJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartTrade->ActionTime);
                    Gb2312ToUtf8(pRspQryPartTrade->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartTradeJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartTrade->InstrumentID);
                    Gb2312ToUtf8(pRspQryPartTrade->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartTradeJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPartTrade->ParticipantID);
                    Gb2312ToUtf8(pRspQryPartTrade->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPartTradeJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> TotalPositiveOrder = Nan::New<v8::String> ("TotalPositiveOrder").ToLocalChecked();
                    v8::Local<v8::Integer> TotalPositiveOrderValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalPositiveOrder);
                    pRspQryPartTradeJS->Set(Local<v8::Value> (TotalPositiveOrder), Local<v8::Value>(TotalPositiveOrderValue));

                    v8::Local<v8::String> TotalNegativeOrder = Nan::New<v8::String> ("TotalNegativeOrder").ToLocalChecked();
                    v8::Local<v8::Integer> TotalNegativeOrderValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalNegativeOrder);
                    pRspQryPartTradeJS->Set(Local<v8::Value> (TotalNegativeOrder), Local<v8::Value>(TotalNegativeOrderValue));

                    v8::Local<v8::String> TotalPositiveTrade = Nan::New<v8::String> ("TotalPositiveTrade").ToLocalChecked();
                    v8::Local<v8::Integer> TotalPositiveTradeValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalPositiveTrade);
                    pRspQryPartTradeJS->Set(Local<v8::Value> (TotalPositiveTrade), Local<v8::Value>(TotalPositiveTradeValue));

                    v8::Local<v8::String> TotalNegativeTrade = Nan::New<v8::String> ("TotalNegativeTrade").ToLocalChecked();
                    v8::Local<v8::Integer> TotalNegativeTradeValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalNegativeTrade);
                    pRspQryPartTradeJS->Set(Local<v8::Value> (TotalNegativeTrade), Local<v8::Value>(TotalNegativeTradeValue));

                    v8::Local<v8::String> TotalPositivePosi = Nan::New<v8::String> ("TotalPositivePosi").ToLocalChecked();
                    v8::Local<v8::Integer> TotalPositivePosiValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalPositivePosi);
                    pRspQryPartTradeJS->Set(Local<v8::Value> (TotalPositivePosi), Local<v8::Value>(TotalPositivePosiValue));

                    v8::Local<v8::String> TotalNegativePosi = Nan::New<v8::String> ("TotalNegativePosi").ToLocalChecked();
                    v8::Local<v8::Integer> TotalNegativePosiValue = Nan::New<v8::Integer> (pRspQryPartTrade->TotalNegativePosi);
                    pRspQryPartTradeJS->Set(Local<v8::Value> (TotalNegativePosi), Local<v8::Value>(TotalNegativePosiValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryPartTrade->OperationType);
                    pRspQryPartTradeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryPartTrade) { 
                    params[0] = Local<v8::Value>(pRspQryPartTradeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryPartTrade) { 
                delete pRspQryPartTrade;
                pRspQryPartTrade = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryPartTradeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradepeakTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTradepeakTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTradepeakTopic_mutex);

    int ioUserNumb = g_RspQryTradepeakTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTradepeakTopic_IOUser_vec.begin();
        it != g_RspQryTradepeakTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTradepeakTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTradepeakTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTradepeakTopic_Data_map[*it].front());
            g_RspQryTradepeakTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTradepeakTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTradepeakTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTradepeakTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTradepeakTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTradepeakTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradepeakTopic").ToLocalChecked());
            CShfeFtdcRspQryTradepeakField* pRspQryTradepeak = (CShfeFtdcRspQryTradepeakField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTradepeakTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTradepeakTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTradepeakJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTradepeak) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> TradepeakFlag = Nan::New<v8::String> ("TradepeakFlag").ToLocalChecked();
                    v8::Local<v8::Integer> TradepeakFlagValue = Nan::New<v8::Integer> (pRspQryTradepeak->TradepeakFlag);
                    pRspQryTradepeakJS->Set(Local<v8::Value> (TradepeakFlag), Local<v8::Value>(TradepeakFlagValue));

                    v8::Local<v8::String> PeakTime = Nan::New<v8::String> ("PeakTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradepeak->PeakTime);
                    Gb2312ToUtf8(pRspQryTradepeak->PeakTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PeakTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradepeakJS->Set(Local<v8::Value> (PeakTime), Local<v8::Value>(PeakTimeValue));

                    v8::Local<v8::String> InsertOrder = Nan::New<v8::String> ("InsertOrder").ToLocalChecked();
                    v8::Local<v8::Integer> InsertOrderValue = Nan::New<v8::Integer> (pRspQryTradepeak->InsertOrder);
                    pRspQryTradepeakJS->Set(Local<v8::Value> (InsertOrder), Local<v8::Value>(InsertOrderValue));

                    v8::Local<v8::String> ActionOrder = Nan::New<v8::String> ("ActionOrder").ToLocalChecked();
                    v8::Local<v8::Integer> ActionOrderValue = Nan::New<v8::Integer> (pRspQryTradepeak->ActionOrder);
                    pRspQryTradepeakJS->Set(Local<v8::Value> (ActionOrder), Local<v8::Value>(ActionOrderValue));

                    v8::Local<v8::String> InvalidOrder = Nan::New<v8::String> ("InvalidOrder").ToLocalChecked();
                    v8::Local<v8::Integer> InvalidOrderValue = Nan::New<v8::Integer> (pRspQryTradepeak->InvalidOrder);
                    pRspQryTradepeakJS->Set(Local<v8::Value> (InvalidOrder), Local<v8::Value>(InvalidOrderValue));

                    v8::Local<v8::String> TotalBusiness = Nan::New<v8::String> ("TotalBusiness").ToLocalChecked();
                    v8::Local<v8::Integer> TotalBusinessValue = Nan::New<v8::Integer> (pRspQryTradepeak->TotalBusiness);
                    pRspQryTradepeakJS->Set(Local<v8::Value> (TotalBusiness), Local<v8::Value>(TotalBusinessValue));

                    v8::Local<v8::String> TradeCount = Nan::New<v8::String> ("TradeCount").ToLocalChecked();
                    v8::Local<v8::Integer> TradeCountValue = Nan::New<v8::Integer> (pRspQryTradepeak->TradeCount);
                    pRspQryTradepeakJS->Set(Local<v8::Value> (TradeCount), Local<v8::Value>(TradeCountValue));

                    v8::Local<v8::String> TotalCount = Nan::New<v8::String> ("TotalCount").ToLocalChecked();
                    v8::Local<v8::Integer> TotalCountValue = Nan::New<v8::Integer> (pRspQryTradepeak->TotalCount);
                    pRspQryTradepeakJS->Set(Local<v8::Value> (TotalCount), Local<v8::Value>(TotalCountValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTradepeak) { 
                    params[0] = Local<v8::Value>(pRspQryTradepeakJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTradepeak) { 
                delete pRspQryTradepeak;
                pRspQryTradepeak = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTradepeakTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnUpdateSysConfigTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnUpdateSysConfigTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnUpdateSysConfigTopic_mutex);

    int ioUserNumb = g_RtnUpdateSysConfigTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnUpdateSysConfigTopic_IOUser_vec.begin();
        it != g_RtnUpdateSysConfigTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnUpdateSysConfigTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnUpdateSysConfigTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnUpdateSysConfigTopic_Data_map[*it].front());
            g_RtnUpdateSysConfigTopic_Data_map[*it].pop();
        }
    }
    g_RtnUpdateSysConfigTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnUpdateSysConfigTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnUpdateSysConfigTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnUpdateSysConfigTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnUpdateSysConfigTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnUpdateSysConfigTopic").ToLocalChecked());
            CShfeFtdcRtnUpdateSysConfigField* pRtnUpdateSysConfig = (CShfeFtdcRtnUpdateSysConfigField*)(paramArray[1]);
            if (OnRtnUpdateSysConfigTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnUpdateSysConfigTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnUpdateSysConfigJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnUpdateSysConfig) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> UpdateType = Nan::New<v8::String> ("UpdateType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUpdateSysConfig->UpdateType);
                    Gb2312ToUtf8(pRtnUpdateSysConfig->UpdateType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UpdateTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUpdateSysConfigJS->Set(Local<v8::Value> (UpdateType), Local<v8::Value>(UpdateTypeValue));

                    v8::Local<v8::String> OldValue = Nan::New<v8::String> ("OldValue").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUpdateSysConfig->OldValue);
                    Gb2312ToUtf8(pRtnUpdateSysConfig->OldValue, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OldValueValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUpdateSysConfigJS->Set(Local<v8::Value> (OldValue), Local<v8::Value>(OldValueValue));

                    v8::Local<v8::String> NewValue = Nan::New<v8::String> ("NewValue").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUpdateSysConfig->NewValue);
                    Gb2312ToUtf8(pRtnUpdateSysConfig->NewValue, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NewValueValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUpdateSysConfigJS->Set(Local<v8::Value> (NewValue), Local<v8::Value>(NewValueValue));

                    v8::Local<v8::String> Standby = Nan::New<v8::String> ("Standby").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnUpdateSysConfig->Standby);
                    Gb2312ToUtf8(pRtnUpdateSysConfig->Standby, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StandbyValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnUpdateSysConfigJS->Set(Local<v8::Value> (Standby), Local<v8::Value>(StandbyValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnUpdateSysConfig) { 
                    params[0] = Local<v8::Value>(pRtnUpdateSysConfigJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnUpdateSysConfig) { 
                delete pRtnUpdateSysConfig;
                pRtnUpdateSysConfig = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnUpdateSysConfigTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSysUser (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnSysUser: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnSysUser_mutex);

    int ioUserNumb = g_RtnSysUser_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnSysUser_IOUser_vec.begin();
        it != g_RtnSysUser_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnSysUser_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnSysUser_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnSysUser_Data_map[*it].front());
            g_RtnSysUser_Data_map[*it].pop();
        }
    }
    g_RtnSysUser_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnSysUser_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnSysUser paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnSysUser: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnSysUser = localSpiObj->Get(Nan::New<v8::String>("OnRtnSysUser").ToLocalChecked());
            CShfeFtdcRtnSysUserField* pRtnSysUser = (CShfeFtdcRtnSysUserField*)(paramArray[1]);
            if (OnRtnSysUser->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnSysUser);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnSysUserJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnSysUser) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysUser->UserID);
                    Gb2312ToUtf8(pRtnSysUser->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysUserJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysUser->UserName);
                    Gb2312ToUtf8(pRtnSysUser->UserName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysUserJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                    v8::Local<v8::String> UserInfo = Nan::New<v8::String> ("UserInfo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysUser->UserInfo);
                    Gb2312ToUtf8(pRtnSysUser->UserInfo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserInfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysUserJS->Set(Local<v8::Value> (UserInfo), Local<v8::Value>(UserInfoValue));

                    v8::Local<v8::String> Password = Nan::New<v8::String> ("Password").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysUser->Password);
                    Gb2312ToUtf8(pRtnSysUser->Password, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PasswordValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysUserJS->Set(Local<v8::Value> (Password), Local<v8::Value>(PasswordValue));

                    v8::Local<v8::String> Privilege = Nan::New<v8::String> ("Privilege").ToLocalChecked();
                    v8::Local<v8::Integer> PrivilegeValue = Nan::New<v8::Integer> (pRtnSysUser->Privilege);
                    pRtnSysUserJS->Set(Local<v8::Value> (Privilege), Local<v8::Value>(PrivilegeValue));

                    v8::Local<v8::String> EMail = Nan::New<v8::String> ("EMail").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysUser->EMail);
                    Gb2312ToUtf8(pRtnSysUser->EMail, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EMailValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysUserJS->Set(Local<v8::Value> (EMail), Local<v8::Value>(EMailValue));

                    v8::Local<v8::String> EMailFlag = Nan::New<v8::String> ("EMailFlag").ToLocalChecked();
                    v8::Local<v8::Integer> EMailFlagValue = Nan::New<v8::Integer> (pRtnSysUser->EMailFlag);
                    pRtnSysUserJS->Set(Local<v8::Value> (EMailFlag), Local<v8::Value>(EMailFlagValue));

                    v8::Local<v8::String> HomePhone = Nan::New<v8::String> ("HomePhone").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysUser->HomePhone);
                    Gb2312ToUtf8(pRtnSysUser->HomePhone, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HomePhoneValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysUserJS->Set(Local<v8::Value> (HomePhone), Local<v8::Value>(HomePhoneValue));

                    v8::Local<v8::String> HomePhoneFlag = Nan::New<v8::String> ("HomePhoneFlag").ToLocalChecked();
                    v8::Local<v8::Integer> HomePhoneFlagValue = Nan::New<v8::Integer> (pRtnSysUser->HomePhoneFlag);
                    pRtnSysUserJS->Set(Local<v8::Value> (HomePhoneFlag), Local<v8::Value>(HomePhoneFlagValue));

                    v8::Local<v8::String> MobilePhone = Nan::New<v8::String> ("MobilePhone").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysUser->MobilePhone);
                    Gb2312ToUtf8(pRtnSysUser->MobilePhone, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MobilePhoneValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysUserJS->Set(Local<v8::Value> (MobilePhone), Local<v8::Value>(MobilePhoneValue));

                    v8::Local<v8::String> MobilePhoneFlag = Nan::New<v8::String> ("MobilePhoneFlag").ToLocalChecked();
                    v8::Local<v8::Integer> MobilePhoneFlagValue = Nan::New<v8::Integer> (pRtnSysUser->MobilePhoneFlag);
                    pRtnSysUserJS->Set(Local<v8::Value> (MobilePhoneFlag), Local<v8::Value>(MobilePhoneFlagValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnSysUser) { 
                    params[0] = Local<v8::Value>(pRtnSysUserJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnSysUser) { 
                delete pRtnSysUser;
                pRtnSysUser = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnSysUser: END! ******\n", g_RunningResult_File);
}

void OnRtnPriceLimitChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnPriceLimitChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnPriceLimitChgTopic_mutex);

    int ioUserNumb = g_RtnPriceLimitChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnPriceLimitChgTopic_IOUser_vec.begin();
        it != g_RtnPriceLimitChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnPriceLimitChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnPriceLimitChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnPriceLimitChgTopic_Data_map[*it].front());
            g_RtnPriceLimitChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnPriceLimitChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnPriceLimitChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnPriceLimitChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnPriceLimitChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnPriceLimitChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnPriceLimitChgTopic").ToLocalChecked());
            CShfeFtdcRtnPriceLimitChgField* pRtnPriceLimitChg = (CShfeFtdcRtnPriceLimitChgField*)(paramArray[1]);
            if (OnRtnPriceLimitChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnPriceLimitChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnPriceLimitChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnPriceLimitChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ActionDate = Nan::New<v8::String> ("ActionDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPriceLimitChg->ActionDate);
                    Gb2312ToUtf8(pRtnPriceLimitChg->ActionDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPriceLimitChgJS->Set(Local<v8::Value> (ActionDate), Local<v8::Value>(ActionDateValue));

                    v8::Local<v8::String> ActionTime = Nan::New<v8::String> ("ActionTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPriceLimitChg->ActionTime);
                    Gb2312ToUtf8(pRtnPriceLimitChg->ActionTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPriceLimitChgJS->Set(Local<v8::Value> (ActionTime), Local<v8::Value>(ActionTimeValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPriceLimitChg->InstrumentID);
                    Gb2312ToUtf8(pRtnPriceLimitChg->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPriceLimitChgJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> ValueMode = Nan::New<v8::String> ("ValueMode").ToLocalChecked();
                    v8::Local<v8::Integer> ValueModeValue = Nan::New<v8::Integer> (pRtnPriceLimitChg->ValueMode);
                    pRtnPriceLimitChgJS->Set(Local<v8::Value> (ValueMode), Local<v8::Value>(ValueModeValue));

                    v8::Local<v8::String> RoundingMode = Nan::New<v8::String> ("RoundingMode").ToLocalChecked();
                    v8::Local<v8::Integer> RoundingModeValue = Nan::New<v8::Integer> (pRtnPriceLimitChg->RoundingMode);
                    pRtnPriceLimitChgJS->Set(Local<v8::Value> (RoundingMode), Local<v8::Value>(RoundingModeValue));

                    v8::Local<v8::String> UpperLimitPrice = Nan::New<v8::String> ("UpperLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> UpperLimitPriceValue = Nan::New<v8::Number> (pRtnPriceLimitChg->UpperLimitPrice);
                    pRtnPriceLimitChgJS->Set(Local<v8::Value> (UpperLimitPrice), Local<v8::Value>(UpperLimitPriceValue));

                    v8::Local<v8::String> LowerLimitPrice = Nan::New<v8::String> ("LowerLimitPrice").ToLocalChecked();
                    v8::Local<v8::Number> LowerLimitPriceValue = Nan::New<v8::Number> (pRtnPriceLimitChg->LowerLimitPrice);
                    pRtnPriceLimitChgJS->Set(Local<v8::Value> (LowerLimitPrice), Local<v8::Value>(LowerLimitPriceValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnPriceLimitChg->OperationType);
                    pRtnPriceLimitChgJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnPriceLimitChg) { 
                    params[0] = Local<v8::Value>(pRtnPriceLimitChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnPriceLimitChg) { 
                delete pRtnPriceLimitChg;
                pRtnPriceLimitChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnPriceLimitChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHistoryCpuInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryHistoryCpuInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryHistoryCpuInfoTopic_mutex);

    int ioUserNumb = g_RspQryHistoryCpuInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryHistoryCpuInfoTopic_IOUser_vec.begin();
        it != g_RspQryHistoryCpuInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryHistoryCpuInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryHistoryCpuInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryHistoryCpuInfoTopic_Data_map[*it].front());
            g_RspQryHistoryCpuInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryHistoryCpuInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryHistoryCpuInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryHistoryCpuInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryHistoryCpuInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryHistoryCpuInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryHistoryCpuInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryHistoryCpuInfoField* pRspQryHistoryCpuInfo = (CShfeFtdcRspQryHistoryCpuInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryHistoryCpuInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryHistoryCpuInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryHistoryCpuInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryHistoryCpuInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryCpuInfo->HostName);
                    Gb2312ToUtf8(pRspQryHistoryCpuInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryCpuInfo->MonDate);
                    Gb2312ToUtf8(pRspQryHistoryCpuInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryCpuInfo->MonTime);
                    Gb2312ToUtf8(pRspQryHistoryCpuInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryCpuInfo->CPU);
                    Gb2312ToUtf8(pRspQryHistoryCpuInfo->CPU, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CPUValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                    v8::Local<v8::String> LOAD = Nan::New<v8::String> ("LOAD").ToLocalChecked();
                    v8::Local<v8::Number> LOADValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->LOAD);
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (LOAD), Local<v8::Value>(LOADValue));

                    v8::Local<v8::String> USER = Nan::New<v8::String> ("USER").ToLocalChecked();
                    v8::Local<v8::Number> USERValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->USER);
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (USER), Local<v8::Value>(USERValue));

                    v8::Local<v8::String> NICE = Nan::New<v8::String> ("NICE").ToLocalChecked();
                    v8::Local<v8::Number> NICEValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->NICE);
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (NICE), Local<v8::Value>(NICEValue));

                    v8::Local<v8::String> SYS = Nan::New<v8::String> ("SYS").ToLocalChecked();
                    v8::Local<v8::Number> SYSValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->SYS);
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (SYS), Local<v8::Value>(SYSValue));

                    v8::Local<v8::String> IDLE = Nan::New<v8::String> ("IDLE").ToLocalChecked();
                    v8::Local<v8::Number> IDLEValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->IDLE);
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (IDLE), Local<v8::Value>(IDLEValue));

                    v8::Local<v8::String> BLOCK = Nan::New<v8::String> ("BLOCK").ToLocalChecked();
                    v8::Local<v8::Number> BLOCKValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->BLOCK);
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (BLOCK), Local<v8::Value>(BLOCKValue));

                    v8::Local<v8::String> SWAIT = Nan::New<v8::String> ("SWAIT").ToLocalChecked();
                    v8::Local<v8::Number> SWAITValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->SWAIT);
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (SWAIT), Local<v8::Value>(SWAITValue));

                    v8::Local<v8::String> INTR = Nan::New<v8::String> ("INTR").ToLocalChecked();
                    v8::Local<v8::Number> INTRValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->INTR);
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (INTR), Local<v8::Value>(INTRValue));

                    v8::Local<v8::String> SSYS = Nan::New<v8::String> ("SSYS").ToLocalChecked();
                    v8::Local<v8::Number> SSYSValue = Nan::New<v8::Number> (pRspQryHistoryCpuInfo->SSYS);
                    pRspQryHistoryCpuInfoJS->Set(Local<v8::Value> (SSYS), Local<v8::Value>(SSYSValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryHistoryCpuInfo) { 
                    params[0] = Local<v8::Value>(pRspQryHistoryCpuInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryHistoryCpuInfo) { 
                delete pRspQryHistoryCpuInfo;
                pRspQryHistoryCpuInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryHistoryCpuInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHistoryMemInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryHistoryMemInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryHistoryMemInfoTopic_mutex);

    int ioUserNumb = g_RspQryHistoryMemInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryHistoryMemInfoTopic_IOUser_vec.begin();
        it != g_RspQryHistoryMemInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryHistoryMemInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryHistoryMemInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryHistoryMemInfoTopic_Data_map[*it].front());
            g_RspQryHistoryMemInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryHistoryMemInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryHistoryMemInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryHistoryMemInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryHistoryMemInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryHistoryMemInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryHistoryMemInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryHistoryMemInfoField* pRspQryHistoryMemInfo = (CShfeFtdcRspQryHistoryMemInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryHistoryMemInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryHistoryMemInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryHistoryMemInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryHistoryMemInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryMemInfo->HostName);
                    Gb2312ToUtf8(pRspQryHistoryMemInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryMemInfo->MonDate);
                    Gb2312ToUtf8(pRspQryHistoryMemInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryMemInfo->MonTime);
                    Gb2312ToUtf8(pRspQryHistoryMemInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> TOTALREAL = Nan::New<v8::String> ("TOTALREAL").ToLocalChecked();
                    v8::Local<v8::Integer> TOTALREALValue = Nan::New<v8::Integer> (pRspQryHistoryMemInfo->TOTALREAL);
                    pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (TOTALREAL), Local<v8::Value>(TOTALREALValue));

                    v8::Local<v8::String> ACTIVEREAL = Nan::New<v8::String> ("ACTIVEREAL").ToLocalChecked();
                    v8::Local<v8::Integer> ACTIVEREALValue = Nan::New<v8::Integer> (pRspQryHistoryMemInfo->ACTIVEREAL);
                    pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (ACTIVEREAL), Local<v8::Value>(ACTIVEREALValue));

                    v8::Local<v8::String> TOTALVIRTUAL = Nan::New<v8::String> ("TOTALVIRTUAL").ToLocalChecked();
                    v8::Local<v8::Integer> TOTALVIRTUALValue = Nan::New<v8::Integer> (pRspQryHistoryMemInfo->TOTALVIRTUAL);
                    pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (TOTALVIRTUAL), Local<v8::Value>(TOTALVIRTUALValue));

                    v8::Local<v8::String> ACTIVEVIRTUAL = Nan::New<v8::String> ("ACTIVEVIRTUAL").ToLocalChecked();
                    v8::Local<v8::Integer> ACTIVEVIRTUALValue = Nan::New<v8::Integer> (pRspQryHistoryMemInfo->ACTIVEVIRTUAL);
                    pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (ACTIVEVIRTUAL), Local<v8::Value>(ACTIVEVIRTUALValue));

                    v8::Local<v8::String> FREE = Nan::New<v8::String> ("FREE").ToLocalChecked();
                    v8::Local<v8::Integer> FREEValue = Nan::New<v8::Integer> (pRspQryHistoryMemInfo->FREE);
                    pRspQryHistoryMemInfoJS->Set(Local<v8::Value> (FREE), Local<v8::Value>(FREEValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryHistoryMemInfo) { 
                    params[0] = Local<v8::Value>(pRspQryHistoryMemInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryHistoryMemInfo) { 
                delete pRspQryHistoryMemInfo;
                pRspQryHistoryMemInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryHistoryMemInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHistoryNetworkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryHistoryNetworkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryHistoryNetworkInfoTopic_mutex);

    int ioUserNumb = g_RspQryHistoryNetworkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryHistoryNetworkInfoTopic_IOUser_vec.begin();
        it != g_RspQryHistoryNetworkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryHistoryNetworkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryHistoryNetworkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryHistoryNetworkInfoTopic_Data_map[*it].front());
            g_RspQryHistoryNetworkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryHistoryNetworkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryHistoryNetworkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryHistoryNetworkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryHistoryNetworkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryHistoryNetworkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryHistoryNetworkInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryHistoryNetworkInfoField* pRspQryHistoryNetworkInfo = (CShfeFtdcRspQryHistoryNetworkInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryHistoryNetworkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryHistoryNetworkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryHistoryNetworkInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryHistoryNetworkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryNetworkInfo->HostName);
                    Gb2312ToUtf8(pRspQryHistoryNetworkInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryNetworkInfo->MonDate);
                    Gb2312ToUtf8(pRspQryHistoryNetworkInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryNetworkInfo->MonTime);
                    Gb2312ToUtf8(pRspQryHistoryNetworkInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> LANNAME = Nan::New<v8::String> ("LANNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryNetworkInfo->LANNAME);
                    Gb2312ToUtf8(pRspQryHistoryNetworkInfo->LANNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LANNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (LANNAME), Local<v8::Value>(LANNAMEValue));

                    v8::Local<v8::String> LANSTATUS = Nan::New<v8::String> ("LANSTATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryNetworkInfo->LANSTATUS);
                    Gb2312ToUtf8(pRspQryHistoryNetworkInfo->LANSTATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LANSTATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (LANSTATUS), Local<v8::Value>(LANSTATUSValue));

                    v8::Local<v8::String> IPADDRESS = Nan::New<v8::String> ("IPADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryNetworkInfo->IPADDRESS);
                    Gb2312ToUtf8(pRspQryHistoryNetworkInfo->IPADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (IPADDRESS), Local<v8::Value>(IPADDRESSValue));

                    v8::Local<v8::String> RECVBYTES = Nan::New<v8::String> ("RECVBYTES").ToLocalChecked();
                    v8::Local<v8::Number> RECVBYTESValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->RECVBYTES);
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (RECVBYTES), Local<v8::Value>(RECVBYTESValue));

                    v8::Local<v8::String> RECVPACKETS = Nan::New<v8::String> ("RECVPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> RECVPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->RECVPACKETS);
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (RECVPACKETS), Local<v8::Value>(RECVPACKETSValue));

                    v8::Local<v8::String> RECVERRORPACKETS = Nan::New<v8::String> ("RECVERRORPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> RECVERRORPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->RECVERRORPACKETS);
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (RECVERRORPACKETS), Local<v8::Value>(RECVERRORPACKETSValue));

                    v8::Local<v8::String> RECVDROPPACKETS = Nan::New<v8::String> ("RECVDROPPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> RECVDROPPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->RECVDROPPACKETS);
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (RECVDROPPACKETS), Local<v8::Value>(RECVDROPPACKETSValue));

                    v8::Local<v8::String> SENDBYTES = Nan::New<v8::String> ("SENDBYTES").ToLocalChecked();
                    v8::Local<v8::Number> SENDBYTESValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->SENDBYTES);
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (SENDBYTES), Local<v8::Value>(SENDBYTESValue));

                    v8::Local<v8::String> SENDPACKETS = Nan::New<v8::String> ("SENDPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> SENDPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->SENDPACKETS);
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (SENDPACKETS), Local<v8::Value>(SENDPACKETSValue));

                    v8::Local<v8::String> SENDERRORPACKETS = Nan::New<v8::String> ("SENDERRORPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> SENDERRORPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->SENDERRORPACKETS);
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (SENDERRORPACKETS), Local<v8::Value>(SENDERRORPACKETSValue));

                    v8::Local<v8::String> SENDDROPPACKETS = Nan::New<v8::String> ("SENDDROPPACKETS").ToLocalChecked();
                    v8::Local<v8::Number> SENDDROPPACKETSValue = Nan::New<v8::Number> (pRspQryHistoryNetworkInfo->SENDDROPPACKETS);
                    pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value> (SENDDROPPACKETS), Local<v8::Value>(SENDDROPPACKETSValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryHistoryNetworkInfo) { 
                    params[0] = Local<v8::Value>(pRspQryHistoryNetworkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryHistoryNetworkInfo) { 
                delete pRspQryHistoryNetworkInfo;
                pRspQryHistoryNetworkInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryHistoryNetworkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMonitorOnlineUser (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryMonitorOnlineUser: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryMonitorOnlineUser_mutex);

    int ioUserNumb = g_RspQryMonitorOnlineUser_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryMonitorOnlineUser_IOUser_vec.begin();
        it != g_RspQryMonitorOnlineUser_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryMonitorOnlineUser_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryMonitorOnlineUser_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryMonitorOnlineUser_Data_map[*it].front());
            g_RspQryMonitorOnlineUser_Data_map[*it].pop();
        }
    }
    g_RspQryMonitorOnlineUser_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryMonitorOnlineUser_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryMonitorOnlineUser paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryMonitorOnlineUser: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryMonitorOnlineUser = localSpiObj->Get(Nan::New<v8::String>("OnRspQryMonitorOnlineUser").ToLocalChecked());
            CShfeFtdcRspQryMonitorOnlineUserField* pRspQryMonitorOnlineUser = (CShfeFtdcRspQryMonitorOnlineUserField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryMonitorOnlineUser->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryMonitorOnlineUser);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryMonitorOnlineUserJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryMonitorOnlineUser) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMonitorOnlineUser->UserID);
                    Gb2312ToUtf8(pRspQryMonitorOnlineUser->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMonitorOnlineUserJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMonitorOnlineUser->IPAddress);
                    Gb2312ToUtf8(pRspQryMonitorOnlineUser->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMonitorOnlineUserJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryMonitorOnlineUser) { 
                    params[0] = Local<v8::Value>(pRspQryMonitorOnlineUserJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryMonitorOnlineUser) { 
                delete pRspQryMonitorOnlineUser;
                pRspQryMonitorOnlineUser = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryMonitorOnlineUser: END! ******\n", g_RunningResult_File);
}

void OnRspQryFrontStat (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryFrontStat: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryFrontStat_mutex);

    int ioUserNumb = g_RspQryFrontStat_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryFrontStat_IOUser_vec.begin();
        it != g_RspQryFrontStat_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryFrontStat_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryFrontStat_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryFrontStat_Data_map[*it].front());
            g_RspQryFrontStat_Data_map[*it].pop();
        }
    }
    g_RspQryFrontStat_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryFrontStat_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryFrontStat paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryFrontStat: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryFrontStat = localSpiObj->Get(Nan::New<v8::String>("OnRspQryFrontStat").ToLocalChecked());
            CShfeFtdcRspQryFrontStatField* pRspQryFrontStat = (CShfeFtdcRspQryFrontStatField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryFrontStat->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryFrontStat);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryFrontStatJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryFrontStat) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                    v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRspQryFrontStat->FrontID);
                    pRspQryFrontStatJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                    v8::Local<v8::String> PositiveOrder = Nan::New<v8::String> ("PositiveOrder").ToLocalChecked();
                    v8::Local<v8::Integer> PositiveOrderValue = Nan::New<v8::Integer> (pRspQryFrontStat->PositiveOrder);
                    pRspQryFrontStatJS->Set(Local<v8::Value> (PositiveOrder), Local<v8::Value>(PositiveOrderValue));

                    v8::Local<v8::String> NegativeOrder = Nan::New<v8::String> ("NegativeOrder").ToLocalChecked();
                    v8::Local<v8::Integer> NegativeOrderValue = Nan::New<v8::Integer> (pRspQryFrontStat->NegativeOrder);
                    pRspQryFrontStatJS->Set(Local<v8::Value> (NegativeOrder), Local<v8::Value>(NegativeOrderValue));

                    v8::Local<v8::String> TotalPositiveOrder = Nan::New<v8::String> ("TotalPositiveOrder").ToLocalChecked();
                    v8::Local<v8::Integer> TotalPositiveOrderValue = Nan::New<v8::Integer> (pRspQryFrontStat->TotalPositiveOrder);
                    pRspQryFrontStatJS->Set(Local<v8::Value> (TotalPositiveOrder), Local<v8::Value>(TotalPositiveOrderValue));

                    v8::Local<v8::String> TotalNegativeOrder = Nan::New<v8::String> ("TotalNegativeOrder").ToLocalChecked();
                    v8::Local<v8::Integer> TotalNegativeOrderValue = Nan::New<v8::Integer> (pRspQryFrontStat->TotalNegativeOrder);
                    pRspQryFrontStatJS->Set(Local<v8::Value> (TotalNegativeOrder), Local<v8::Value>(TotalNegativeOrderValue));

                    v8::Local<v8::String> OrderAction = Nan::New<v8::String> ("OrderAction").ToLocalChecked();
                    v8::Local<v8::Integer> OrderActionValue = Nan::New<v8::Integer> (pRspQryFrontStat->OrderAction);
                    pRspQryFrontStatJS->Set(Local<v8::Value> (OrderAction), Local<v8::Value>(OrderActionValue));

                    v8::Local<v8::String> TotalOrderAction = Nan::New<v8::String> ("TotalOrderAction").ToLocalChecked();
                    v8::Local<v8::Integer> TotalOrderActionValue = Nan::New<v8::Integer> (pRspQryFrontStat->TotalOrderAction);
                    pRspQryFrontStatJS->Set(Local<v8::Value> (TotalOrderAction), Local<v8::Value>(TotalOrderActionValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryFrontStat) { 
                    params[0] = Local<v8::Value>(pRspQryFrontStatJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryFrontStat) { 
                delete pRspQryFrontStat;
                pRspQryFrontStat = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryFrontStat: END! ******\n", g_RunningResult_File);
}

void OnRtnSysTimeSyncTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnSysTimeSyncTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnSysTimeSyncTopic_mutex);

    int ioUserNumb = g_RtnSysTimeSyncTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnSysTimeSyncTopic_IOUser_vec.begin();
        it != g_RtnSysTimeSyncTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnSysTimeSyncTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnSysTimeSyncTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnSysTimeSyncTopic_Data_map[*it].front());
            g_RtnSysTimeSyncTopic_Data_map[*it].pop();
        }
    }
    g_RtnSysTimeSyncTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnSysTimeSyncTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnSysTimeSyncTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnSysTimeSyncTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnSysTimeSyncTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnSysTimeSyncTopic").ToLocalChecked());
            CShfeFtdcRtnSysTimeSyncField* pRtnSysTimeSync = (CShfeFtdcRtnSysTimeSyncField*)(paramArray[1]);
            if (OnRtnSysTimeSyncTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnSysTimeSyncTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnSysTimeSyncJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnSysTimeSync) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysTimeSync->MonDate);
                    Gb2312ToUtf8(pRtnSysTimeSync->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysTimeSyncJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysTimeSync->MonTime);
                    Gb2312ToUtf8(pRtnSysTimeSync->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysTimeSyncJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnSysTimeSync) { 
                    params[0] = Local<v8::Value>(pRtnSysTimeSyncJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnSysTimeSync) { 
                delete pRtnSysTimeSync;
                pRtnSysTimeSync = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnSysTimeSyncTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnDataCenterChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnDataCenterChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnDataCenterChgTopic_mutex);

    int ioUserNumb = g_RtnDataCenterChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnDataCenterChgTopic_IOUser_vec.begin();
        it != g_RtnDataCenterChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnDataCenterChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnDataCenterChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnDataCenterChgTopic_Data_map[*it].front());
            g_RtnDataCenterChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnDataCenterChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnDataCenterChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnDataCenterChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnDataCenterChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnDataCenterChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnDataCenterChgTopic").ToLocalChecked());
            CShfeFtdcRtnDataCenterChgField* pRtnDataCenterChg = (CShfeFtdcRtnDataCenterChgField*)(paramArray[1]);
            if (OnRtnDataCenterChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnDataCenterChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnDataCenterChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnDataCenterChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> DataCenterID = Nan::New<v8::String> ("DataCenterID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDataCenterChg->DataCenterID);
                    Gb2312ToUtf8(pRtnDataCenterChg->DataCenterID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DataCenterIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDataCenterChgJS->Set(Local<v8::Value> (DataCenterID), Local<v8::Value>(DataCenterIDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnDataCenterChg) { 
                    params[0] = Local<v8::Value>(pRtnDataCenterChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnDataCenterChg) { 
                delete pRtnDataCenterChg;
                pRtnDataCenterChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnDataCenterChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryHistoryTradePeakTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryHistoryTradePeakTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryHistoryTradePeakTopic_mutex);

    int ioUserNumb = g_RspQryHistoryTradePeakTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryHistoryTradePeakTopic_IOUser_vec.begin();
        it != g_RspQryHistoryTradePeakTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryHistoryTradePeakTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryHistoryTradePeakTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryHistoryTradePeakTopic_Data_map[*it].front());
            g_RspQryHistoryTradePeakTopic_Data_map[*it].pop();
        }
    }
    g_RspQryHistoryTradePeakTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryHistoryTradePeakTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryHistoryTradePeakTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryHistoryTradePeakTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryHistoryTradePeakTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryHistoryTradePeakTopic").ToLocalChecked());
            CShfeFtdcRspQryHistoryTradePeakField* pRspQryHistoryTradePeak = (CShfeFtdcRspQryHistoryTradePeakField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryHistoryTradePeakTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryHistoryTradePeakTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryHistoryTradePeakJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryHistoryTradePeak) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryTradePeak->ObjectID);
                    Gb2312ToUtf8(pRspQryHistoryTradePeak->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryTradePeak->MonDate);
                    Gb2312ToUtf8(pRspQryHistoryTradePeak->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryTradePeak->MonTime);
                    Gb2312ToUtf8(pRspQryHistoryTradePeak->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryTradePeak->AttrType);
                    Gb2312ToUtf8(pRspQryHistoryTradePeak->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> AttrValue = Nan::New<v8::String> ("AttrValue").ToLocalChecked();
                    v8::Local<v8::Number> AttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->AttrValue);
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (AttrValue), Local<v8::Value>(AttrValueValue));

                    v8::Local<v8::String> RltAttrType = Nan::New<v8::String> ("RltAttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryTradePeak->RltAttrType);
                    Gb2312ToUtf8(pRspQryHistoryTradePeak->RltAttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RltAttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (RltAttrType), Local<v8::Value>(RltAttrTypeValue));

                    v8::Local<v8::String> RltAttrValue = Nan::New<v8::String> ("RltAttrValue").ToLocalChecked();
                    v8::Local<v8::Number> RltAttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->RltAttrValue);
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (RltAttrValue), Local<v8::Value>(RltAttrValueValue));

                    v8::Local<v8::String> MaxMonDate = Nan::New<v8::String> ("MaxMonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryTradePeak->MaxMonDate);
                    Gb2312ToUtf8(pRspQryHistoryTradePeak->MaxMonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxMonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MaxMonDate), Local<v8::Value>(MaxMonDateValue));

                    v8::Local<v8::String> MaxMonTime = Nan::New<v8::String> ("MaxMonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryTradePeak->MaxMonTime);
                    Gb2312ToUtf8(pRspQryHistoryTradePeak->MaxMonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxMonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MaxMonTime), Local<v8::Value>(MaxMonTimeValue));

                    v8::Local<v8::String> MaxAttrValue = Nan::New<v8::String> ("MaxAttrValue").ToLocalChecked();
                    v8::Local<v8::Number> MaxAttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->MaxAttrValue);
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MaxAttrValue), Local<v8::Value>(MaxAttrValueValue));

                    v8::Local<v8::String> MaxRltAttrValue = Nan::New<v8::String> ("MaxRltAttrValue").ToLocalChecked();
                    v8::Local<v8::Number> MaxRltAttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->MaxRltAttrValue);
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (MaxRltAttrValue), Local<v8::Value>(MaxRltAttrValueValue));

                    v8::Local<v8::String> OldMonDate = Nan::New<v8::String> ("OldMonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryTradePeak->OldMonDate);
                    Gb2312ToUtf8(pRspQryHistoryTradePeak->OldMonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OldMonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (OldMonDate), Local<v8::Value>(OldMonDateValue));

                    v8::Local<v8::String> OldMonTime = Nan::New<v8::String> ("OldMonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryHistoryTradePeak->OldMonTime);
                    Gb2312ToUtf8(pRspQryHistoryTradePeak->OldMonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OldMonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (OldMonTime), Local<v8::Value>(OldMonTimeValue));

                    v8::Local<v8::String> OldAttrValue = Nan::New<v8::String> ("OldAttrValue").ToLocalChecked();
                    v8::Local<v8::Number> OldAttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->OldAttrValue);
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (OldAttrValue), Local<v8::Value>(OldAttrValueValue));

                    v8::Local<v8::String> OldRltAttrValue = Nan::New<v8::String> ("OldRltAttrValue").ToLocalChecked();
                    v8::Local<v8::Number> OldRltAttrValueValue = Nan::New<v8::Number> (pRspQryHistoryTradePeak->OldRltAttrValue);
                    pRspQryHistoryTradePeakJS->Set(Local<v8::Value> (OldRltAttrValue), Local<v8::Value>(OldRltAttrValueValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryHistoryTradePeak) { 
                    params[0] = Local<v8::Value>(pRspQryHistoryTradePeakJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryHistoryTradePeak) { 
                delete pRspQryHistoryTradePeak;
                pRspQryHistoryTradePeak = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryHistoryTradePeakTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnHistoryTradePeakTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnHistoryTradePeakTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnHistoryTradePeakTopic_mutex);

    int ioUserNumb = g_RtnHistoryTradePeakTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnHistoryTradePeakTopic_IOUser_vec.begin();
        it != g_RtnHistoryTradePeakTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnHistoryTradePeakTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnHistoryTradePeakTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnHistoryTradePeakTopic_Data_map[*it].front());
            g_RtnHistoryTradePeakTopic_Data_map[*it].pop();
        }
    }
    g_RtnHistoryTradePeakTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnHistoryTradePeakTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnHistoryTradePeakTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnHistoryTradePeakTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnHistoryTradePeakTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnHistoryTradePeakTopic").ToLocalChecked());
            CShfeFtdcRtnHistoryTradePeakField* pRtnHistoryTradePeak = (CShfeFtdcRtnHistoryTradePeakField*)(paramArray[1]);
            if (OnRtnHistoryTradePeakTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnHistoryTradePeakTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnHistoryTradePeakJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnHistoryTradePeak) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryTradePeak->ObjectID);
                    Gb2312ToUtf8(pRtnHistoryTradePeak->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryTradePeak->MonDate);
                    Gb2312ToUtf8(pRtnHistoryTradePeak->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryTradePeak->MonTime);
                    Gb2312ToUtf8(pRtnHistoryTradePeak->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryTradePeak->AttrType);
                    Gb2312ToUtf8(pRtnHistoryTradePeak->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> AttrValue = Nan::New<v8::String> ("AttrValue").ToLocalChecked();
                    v8::Local<v8::Number> AttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->AttrValue);
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (AttrValue), Local<v8::Value>(AttrValueValue));

                    v8::Local<v8::String> RltAttrType = Nan::New<v8::String> ("RltAttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryTradePeak->RltAttrType);
                    Gb2312ToUtf8(pRtnHistoryTradePeak->RltAttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RltAttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (RltAttrType), Local<v8::Value>(RltAttrTypeValue));

                    v8::Local<v8::String> RltAttrValue = Nan::New<v8::String> ("RltAttrValue").ToLocalChecked();
                    v8::Local<v8::Number> RltAttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->RltAttrValue);
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (RltAttrValue), Local<v8::Value>(RltAttrValueValue));

                    v8::Local<v8::String> MaxMonDate = Nan::New<v8::String> ("MaxMonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryTradePeak->MaxMonDate);
                    Gb2312ToUtf8(pRtnHistoryTradePeak->MaxMonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxMonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MaxMonDate), Local<v8::Value>(MaxMonDateValue));

                    v8::Local<v8::String> MaxMonTime = Nan::New<v8::String> ("MaxMonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryTradePeak->MaxMonTime);
                    Gb2312ToUtf8(pRtnHistoryTradePeak->MaxMonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxMonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MaxMonTime), Local<v8::Value>(MaxMonTimeValue));

                    v8::Local<v8::String> MaxAttrValue = Nan::New<v8::String> ("MaxAttrValue").ToLocalChecked();
                    v8::Local<v8::Number> MaxAttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->MaxAttrValue);
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MaxAttrValue), Local<v8::Value>(MaxAttrValueValue));

                    v8::Local<v8::String> MaxRltAttrValue = Nan::New<v8::String> ("MaxRltAttrValue").ToLocalChecked();
                    v8::Local<v8::Number> MaxRltAttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->MaxRltAttrValue);
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (MaxRltAttrValue), Local<v8::Value>(MaxRltAttrValueValue));

                    v8::Local<v8::String> OldMonDate = Nan::New<v8::String> ("OldMonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryTradePeak->OldMonDate);
                    Gb2312ToUtf8(pRtnHistoryTradePeak->OldMonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OldMonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (OldMonDate), Local<v8::Value>(OldMonDateValue));

                    v8::Local<v8::String> OldMonTime = Nan::New<v8::String> ("OldMonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHistoryTradePeak->OldMonTime);
                    Gb2312ToUtf8(pRtnHistoryTradePeak->OldMonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OldMonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (OldMonTime), Local<v8::Value>(OldMonTimeValue));

                    v8::Local<v8::String> OldAttrValue = Nan::New<v8::String> ("OldAttrValue").ToLocalChecked();
                    v8::Local<v8::Number> OldAttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->OldAttrValue);
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (OldAttrValue), Local<v8::Value>(OldAttrValueValue));

                    v8::Local<v8::String> OldRltAttrValue = Nan::New<v8::String> ("OldRltAttrValue").ToLocalChecked();
                    v8::Local<v8::Number> OldRltAttrValueValue = Nan::New<v8::Number> (pRtnHistoryTradePeak->OldRltAttrValue);
                    pRtnHistoryTradePeakJS->Set(Local<v8::Value> (OldRltAttrValue), Local<v8::Value>(OldRltAttrValueValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnHistoryTradePeak) { 
                    params[0] = Local<v8::Value>(pRtnHistoryTradePeakJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnHistoryTradePeak) { 
                delete pRtnHistoryTradePeak;
                pRtnHistoryTradePeak = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnHistoryTradePeakTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySyslogEventTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySyslogEventTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySyslogEventTopic_mutex);

    int ioUserNumb = g_RspQrySyslogEventTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySyslogEventTopic_IOUser_vec.begin();
        it != g_RspQrySyslogEventTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySyslogEventTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySyslogEventTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySyslogEventTopic_Data_map[*it].front());
            g_RspQrySyslogEventTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySyslogEventTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySyslogEventTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySyslogEventTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySyslogEventTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySyslogEventTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySyslogEventTopic").ToLocalChecked());
            CShfeFtdcRspQrySyslogEventField* pRspQrySyslogEvent = (CShfeFtdcRspQrySyslogEventField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySyslogEventTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySyslogEventTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySyslogEventJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySyslogEvent) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->MonDate);
                    Gb2312ToUtf8(pRspQrySyslogEvent->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->MonTime);
                    Gb2312ToUtf8(pRspQrySyslogEvent->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> OccurDate = Nan::New<v8::String> ("OccurDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->OccurDate);
                    Gb2312ToUtf8(pRspQrySyslogEvent->OccurDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OccurDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (OccurDate), Local<v8::Value>(OccurDateValue));

                    v8::Local<v8::String> OccurTime = Nan::New<v8::String> ("OccurTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->OccurTime);
                    Gb2312ToUtf8(pRspQrySyslogEvent->OccurTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OccurTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (OccurTime), Local<v8::Value>(OccurTimeValue));

                    v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                    v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRspQrySyslogEvent->EvendID);
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->ObjectID);
                    Gb2312ToUtf8(pRspQrySyslogEvent->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->IPAddress);
                    Gb2312ToUtf8(pRspQrySyslogEvent->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> EventName = Nan::New<v8::String> ("EventName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->EventName);
                    Gb2312ToUtf8(pRspQrySyslogEvent->EventName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (EventName), Local<v8::Value>(EventNameValue));

                    v8::Local<v8::String> EventNum = Nan::New<v8::String> ("EventNum").ToLocalChecked();
                    v8::Local<v8::Integer> EventNumValue = Nan::New<v8::Integer> (pRspQrySyslogEvent->EventNum);
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (EventNum), Local<v8::Value>(EventNumValue));

                    v8::Local<v8::String> EventType = Nan::New<v8::String> ("EventType").ToLocalChecked();
                    v8::Local<v8::Integer> EventTypeValue = Nan::New<v8::Integer> (pRspQrySyslogEvent->EventType);
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (EventType), Local<v8::Value>(EventTypeValue));

                    v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->EventDes);
                    Gb2312ToUtf8(pRspQrySyslogEvent->EventDes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

                    v8::Local<v8::String> ProcessFlag = Nan::New<v8::String> ("ProcessFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->ProcessFlag);
                    Gb2312ToUtf8(pRspQrySyslogEvent->ProcessFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ProcessFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (ProcessFlag), Local<v8::Value>(ProcessFlagValue));

                    v8::Local<v8::String> WarningLevel = Nan::New<v8::String> ("WarningLevel").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->WarningLevel);
                    Gb2312ToUtf8(pRspQrySyslogEvent->WarningLevel, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> WarningLevelValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (WarningLevel), Local<v8::Value>(WarningLevelValue));

                    v8::Local<v8::String> EventDealDes = Nan::New<v8::String> ("EventDealDes").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->EventDealDes);
                    Gb2312ToUtf8(pRspQrySyslogEvent->EventDealDes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDealDesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (EventDealDes), Local<v8::Value>(EventDealDesValue));

                    v8::Local<v8::String> FullEventName = Nan::New<v8::String> ("FullEventName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySyslogEvent->FullEventName);
                    Gb2312ToUtf8(pRspQrySyslogEvent->FullEventName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FullEventNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (FullEventName), Local<v8::Value>(FullEventNameValue));

                    v8::Local<v8::String> EventCount = Nan::New<v8::String> ("EventCount").ToLocalChecked();
                    v8::Local<v8::Integer> EventCountValue = Nan::New<v8::Integer> (pRspQrySyslogEvent->EventCount);
                    pRspQrySyslogEventJS->Set(Local<v8::Value> (EventCount), Local<v8::Value>(EventCountValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySyslogEvent) { 
                    params[0] = Local<v8::Value>(pRspQrySyslogEventJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySyslogEvent) { 
                delete pRspQrySyslogEvent;
                pRspQrySyslogEvent = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySyslogEventTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSyslogEventTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnSyslogEventTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnSyslogEventTopic_mutex);

    int ioUserNumb = g_RtnSyslogEventTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnSyslogEventTopic_IOUser_vec.begin();
        it != g_RtnSyslogEventTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnSyslogEventTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnSyslogEventTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnSyslogEventTopic_Data_map[*it].front());
            g_RtnSyslogEventTopic_Data_map[*it].pop();
        }
    }
    g_RtnSyslogEventTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnSyslogEventTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnSyslogEventTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnSyslogEventTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnSyslogEventTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnSyslogEventTopic").ToLocalChecked());
            CShfeFtdcRtnSyslogEventField* pRtnSyslogEvent = (CShfeFtdcRtnSyslogEventField*)(paramArray[1]);
            if (OnRtnSyslogEventTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnSyslogEventTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnSyslogEventJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnSyslogEvent) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->MonDate);
                    Gb2312ToUtf8(pRtnSyslogEvent->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->MonTime);
                    Gb2312ToUtf8(pRtnSyslogEvent->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> OccurDate = Nan::New<v8::String> ("OccurDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->OccurDate);
                    Gb2312ToUtf8(pRtnSyslogEvent->OccurDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OccurDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (OccurDate), Local<v8::Value>(OccurDateValue));

                    v8::Local<v8::String> OccurTime = Nan::New<v8::String> ("OccurTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->OccurTime);
                    Gb2312ToUtf8(pRtnSyslogEvent->OccurTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OccurTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (OccurTime), Local<v8::Value>(OccurTimeValue));

                    v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                    v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRtnSyslogEvent->EvendID);
                    pRtnSyslogEventJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->ObjectID);
                    Gb2312ToUtf8(pRtnSyslogEvent->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->IPAddress);
                    Gb2312ToUtf8(pRtnSyslogEvent->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> EventName = Nan::New<v8::String> ("EventName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->EventName);
                    Gb2312ToUtf8(pRtnSyslogEvent->EventName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (EventName), Local<v8::Value>(EventNameValue));

                    v8::Local<v8::String> EventNum = Nan::New<v8::String> ("EventNum").ToLocalChecked();
                    v8::Local<v8::Integer> EventNumValue = Nan::New<v8::Integer> (pRtnSyslogEvent->EventNum);
                    pRtnSyslogEventJS->Set(Local<v8::Value> (EventNum), Local<v8::Value>(EventNumValue));

                    v8::Local<v8::String> EventType = Nan::New<v8::String> ("EventType").ToLocalChecked();
                    v8::Local<v8::Integer> EventTypeValue = Nan::New<v8::Integer> (pRtnSyslogEvent->EventType);
                    pRtnSyslogEventJS->Set(Local<v8::Value> (EventType), Local<v8::Value>(EventTypeValue));

                    v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->EventDes);
                    Gb2312ToUtf8(pRtnSyslogEvent->EventDes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

                    v8::Local<v8::String> ProcessFlag = Nan::New<v8::String> ("ProcessFlag").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->ProcessFlag);
                    Gb2312ToUtf8(pRtnSyslogEvent->ProcessFlag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ProcessFlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (ProcessFlag), Local<v8::Value>(ProcessFlagValue));

                    v8::Local<v8::String> WarningLevel = Nan::New<v8::String> ("WarningLevel").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->WarningLevel);
                    Gb2312ToUtf8(pRtnSyslogEvent->WarningLevel, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> WarningLevelValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (WarningLevel), Local<v8::Value>(WarningLevelValue));

                    v8::Local<v8::String> EventDealDes = Nan::New<v8::String> ("EventDealDes").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->EventDealDes);
                    Gb2312ToUtf8(pRtnSyslogEvent->EventDealDes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDealDesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (EventDealDes), Local<v8::Value>(EventDealDesValue));

                    v8::Local<v8::String> FullEventName = Nan::New<v8::String> ("FullEventName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSyslogEvent->FullEventName);
                    Gb2312ToUtf8(pRtnSyslogEvent->FullEventName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FullEventNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSyslogEventJS->Set(Local<v8::Value> (FullEventName), Local<v8::Value>(FullEventNameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnSyslogEvent) { 
                    params[0] = Local<v8::Value>(pRtnSyslogEventJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnSyslogEvent) { 
                delete pRtnSyslogEvent;
                pRtnSyslogEvent = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnSyslogEventTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeDayChangeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTradeDayChangeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTradeDayChangeTopic_mutex);

    int ioUserNumb = g_RspQryTradeDayChangeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTradeDayChangeTopic_IOUser_vec.begin();
        it != g_RspQryTradeDayChangeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTradeDayChangeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTradeDayChangeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTradeDayChangeTopic_Data_map[*it].front());
            g_RspQryTradeDayChangeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTradeDayChangeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTradeDayChangeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTradeDayChangeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTradeDayChangeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTradeDayChangeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeDayChangeTopic").ToLocalChecked());
            CShfeFtdcRspQryTradeDayChangeField* pRspQryTradeDayChange = (CShfeFtdcRspQryTradeDayChangeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTradeDayChangeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTradeDayChangeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTradeDayChangeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTradeDayChange) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ChangeType = Nan::New<v8::String> ("ChangeType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeDayChange->ChangeType);
                    Gb2312ToUtf8(pRspQryTradeDayChange->ChangeType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ChangeTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeDayChangeJS->Set(Local<v8::Value> (ChangeType), Local<v8::Value>(ChangeTypeValue));

                    v8::Local<v8::String> OldDate = Nan::New<v8::String> ("OldDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeDayChange->OldDate);
                    Gb2312ToUtf8(pRspQryTradeDayChange->OldDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OldDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeDayChangeJS->Set(Local<v8::Value> (OldDate), Local<v8::Value>(OldDateValue));

                    v8::Local<v8::String> NewDate = Nan::New<v8::String> ("NewDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeDayChange->NewDate);
                    Gb2312ToUtf8(pRspQryTradeDayChange->NewDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NewDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeDayChangeJS->Set(Local<v8::Value> (NewDate), Local<v8::Value>(NewDateValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTradeDayChange) { 
                    params[0] = Local<v8::Value>(pRspQryTradeDayChangeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTradeDayChange) { 
                delete pRspQryTradeDayChange;
                pRspQryTradeDayChange = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTradeDayChangeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryWebAppInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryWebAppInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryWebAppInfoTopic_mutex);

    int ioUserNumb = g_RspQryWebAppInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryWebAppInfoTopic_IOUser_vec.begin();
        it != g_RspQryWebAppInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryWebAppInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryWebAppInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryWebAppInfoTopic_Data_map[*it].front());
            g_RspQryWebAppInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryWebAppInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryWebAppInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryWebAppInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryWebAppInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryWebAppInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryWebAppInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryWebAppInfoField* pRspQryWebAppInfo = (CShfeFtdcRspQryWebAppInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryWebAppInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryWebAppInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryWebAppInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryWebAppInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryWebAppInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->MonDate);
                    Gb2312ToUtf8(pRspQryWebAppInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->MonTime);
                    Gb2312ToUtf8(pRspQryWebAppInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> AppName = Nan::New<v8::String> ("AppName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->AppName);
                    Gb2312ToUtf8(pRspQryWebAppInfo->AppName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AppNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (AppName), Local<v8::Value>(AppNameValue));

                    v8::Local<v8::String> Status = Nan::New<v8::String> ("Status").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->Status);
                    Gb2312ToUtf8(pRspQryWebAppInfo->Status, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StatusValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (Status), Local<v8::Value>(StatusValue));

                    v8::Local<v8::String> Desc = Nan::New<v8::String> ("Desc").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->Desc);
                    Gb2312ToUtf8(pRspQryWebAppInfo->Desc, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DescValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (Desc), Local<v8::Value>(DescValue));

                    v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->StartTime);
                    Gb2312ToUtf8(pRspQryWebAppInfo->StartTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                    v8::Local<v8::String> ServletNum = Nan::New<v8::String> ("ServletNum").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->ServletNum);
                    Gb2312ToUtf8(pRspQryWebAppInfo->ServletNum, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ServletNumValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (ServletNum), Local<v8::Value>(ServletNumValue));

                    v8::Local<v8::String> ProcessTime = Nan::New<v8::String> ("ProcessTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->ProcessTime);
                    Gb2312ToUtf8(pRspQryWebAppInfo->ProcessTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ProcessTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (ProcessTime), Local<v8::Value>(ProcessTimeValue));

                    v8::Local<v8::String> RequestNum = Nan::New<v8::String> ("RequestNum").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->RequestNum);
                    Gb2312ToUtf8(pRspQryWebAppInfo->RequestNum, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RequestNumValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (RequestNum), Local<v8::Value>(RequestNumValue));

                    v8::Local<v8::String> ErrorNum = Nan::New<v8::String> ("ErrorNum").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->ErrorNum);
                    Gb2312ToUtf8(pRspQryWebAppInfo->ErrorNum, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ErrorNumValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (ErrorNum), Local<v8::Value>(ErrorNumValue));

                    v8::Local<v8::String> SessionSize = Nan::New<v8::String> ("SessionSize").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->SessionSize);
                    Gb2312ToUtf8(pRspQryWebAppInfo->SessionSize, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SessionSizeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (SessionSize), Local<v8::Value>(SessionSizeValue));

                    v8::Local<v8::String> TimeOut = Nan::New<v8::String> ("TimeOut").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->TimeOut);
                    Gb2312ToUtf8(pRspQryWebAppInfo->TimeOut, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimeOutValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (TimeOut), Local<v8::Value>(TimeOutValue));

                    v8::Local<v8::String> JDBCUsage = Nan::New<v8::String> ("JDBCUsage").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->JDBCUsage);
                    Gb2312ToUtf8(pRspQryWebAppInfo->JDBCUsage, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> JDBCUsageValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (JDBCUsage), Local<v8::Value>(JDBCUsageValue));

                    v8::Local<v8::String> JSPNum = Nan::New<v8::String> ("JSPNum").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWebAppInfo->JSPNum);
                    Gb2312ToUtf8(pRspQryWebAppInfo->JSPNum, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> JSPNumValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWebAppInfoJS->Set(Local<v8::Value> (JSPNum), Local<v8::Value>(JSPNumValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryWebAppInfo) { 
                    params[0] = Local<v8::Value>(pRspQryWebAppInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryWebAppInfo) { 
                delete pRspQryWebAppInfo;
                pRspQryWebAppInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryWebAppInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnWebAppInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnWebAppInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnWebAppInfoTopic_mutex);

    int ioUserNumb = g_RtnWebAppInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnWebAppInfoTopic_IOUser_vec.begin();
        it != g_RtnWebAppInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnWebAppInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnWebAppInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnWebAppInfoTopic_Data_map[*it].front());
            g_RtnWebAppInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnWebAppInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnWebAppInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnWebAppInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnWebAppInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnWebAppInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnWebAppInfoTopic").ToLocalChecked());
            CShfeFtdcRtnWebAppInfoField* pRtnWebAppInfo = (CShfeFtdcRtnWebAppInfoField*)(paramArray[1]);
            if (OnRtnWebAppInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnWebAppInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnWebAppInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnWebAppInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->ObjectID);
                    Gb2312ToUtf8(pRtnWebAppInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->MonDate);
                    Gb2312ToUtf8(pRtnWebAppInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->MonTime);
                    Gb2312ToUtf8(pRtnWebAppInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> AppName = Nan::New<v8::String> ("AppName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->AppName);
                    Gb2312ToUtf8(pRtnWebAppInfo->AppName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AppNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (AppName), Local<v8::Value>(AppNameValue));

                    v8::Local<v8::String> Status = Nan::New<v8::String> ("Status").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->Status);
                    Gb2312ToUtf8(pRtnWebAppInfo->Status, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StatusValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (Status), Local<v8::Value>(StatusValue));

                    v8::Local<v8::String> Desc = Nan::New<v8::String> ("Desc").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->Desc);
                    Gb2312ToUtf8(pRtnWebAppInfo->Desc, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DescValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (Desc), Local<v8::Value>(DescValue));

                    v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->StartTime);
                    Gb2312ToUtf8(pRtnWebAppInfo->StartTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                    v8::Local<v8::String> ServletNum = Nan::New<v8::String> ("ServletNum").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->ServletNum);
                    Gb2312ToUtf8(pRtnWebAppInfo->ServletNum, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ServletNumValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (ServletNum), Local<v8::Value>(ServletNumValue));

                    v8::Local<v8::String> ProcessTime = Nan::New<v8::String> ("ProcessTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->ProcessTime);
                    Gb2312ToUtf8(pRtnWebAppInfo->ProcessTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ProcessTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (ProcessTime), Local<v8::Value>(ProcessTimeValue));

                    v8::Local<v8::String> RequestNum = Nan::New<v8::String> ("RequestNum").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->RequestNum);
                    Gb2312ToUtf8(pRtnWebAppInfo->RequestNum, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RequestNumValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (RequestNum), Local<v8::Value>(RequestNumValue));

                    v8::Local<v8::String> ErrorNum = Nan::New<v8::String> ("ErrorNum").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->ErrorNum);
                    Gb2312ToUtf8(pRtnWebAppInfo->ErrorNum, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ErrorNumValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (ErrorNum), Local<v8::Value>(ErrorNumValue));

                    v8::Local<v8::String> SessionSize = Nan::New<v8::String> ("SessionSize").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->SessionSize);
                    Gb2312ToUtf8(pRtnWebAppInfo->SessionSize, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SessionSizeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (SessionSize), Local<v8::Value>(SessionSizeValue));

                    v8::Local<v8::String> TimeOut = Nan::New<v8::String> ("TimeOut").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->TimeOut);
                    Gb2312ToUtf8(pRtnWebAppInfo->TimeOut, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimeOutValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (TimeOut), Local<v8::Value>(TimeOutValue));

                    v8::Local<v8::String> JDBCUsage = Nan::New<v8::String> ("JDBCUsage").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->JDBCUsage);
                    Gb2312ToUtf8(pRtnWebAppInfo->JDBCUsage, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> JDBCUsageValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (JDBCUsage), Local<v8::Value>(JDBCUsageValue));

                    v8::Local<v8::String> JSPNum = Nan::New<v8::String> ("JSPNum").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWebAppInfo->JSPNum);
                    Gb2312ToUtf8(pRtnWebAppInfo->JSPNum, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> JSPNumValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWebAppInfoJS->Set(Local<v8::Value> (JSPNum), Local<v8::Value>(JSPNumValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnWebAppInfo) { 
                    params[0] = Local<v8::Value>(pRtnWebAppInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnWebAppInfo) { 
                delete pRtnWebAppInfo;
                pRtnWebAppInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnWebAppInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryServletInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryServletInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryServletInfoTopic_mutex);

    int ioUserNumb = g_RspQryServletInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryServletInfoTopic_IOUser_vec.begin();
        it != g_RspQryServletInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryServletInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryServletInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryServletInfoTopic_Data_map[*it].front());
            g_RspQryServletInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryServletInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryServletInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryServletInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryServletInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryServletInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryServletInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryServletInfoField* pRspQryServletInfo = (CShfeFtdcRspQryServletInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryServletInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryServletInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryServletInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryServletInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryServletInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryServletInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryServletInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryServletInfo->MonDate);
                    Gb2312ToUtf8(pRspQryServletInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryServletInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryServletInfo->MonTime);
                    Gb2312ToUtf8(pRspQryServletInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryServletInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryServletInfo->Name);
                    Gb2312ToUtf8(pRspQryServletInfo->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryServletInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> LoadTime = Nan::New<v8::String> ("LoadTime").ToLocalChecked();
                    v8::Local<v8::Integer> LoadTimeValue = Nan::New<v8::Integer> (pRspQryServletInfo->LoadTime);
                    pRspQryServletInfoJS->Set(Local<v8::Value> (LoadTime), Local<v8::Value>(LoadTimeValue));

                    v8::Local<v8::String> RequestNum = Nan::New<v8::String> ("RequestNum").ToLocalChecked();
                    v8::Local<v8::Number> RequestNumValue = Nan::New<v8::Number> (pRspQryServletInfo->RequestNum);
                    pRspQryServletInfoJS->Set(Local<v8::Value> (RequestNum), Local<v8::Value>(RequestNumValue));

                    v8::Local<v8::String> RequestErrNum = Nan::New<v8::String> ("RequestErrNum").ToLocalChecked();
                    v8::Local<v8::Number> RequestErrNumValue = Nan::New<v8::Number> (pRspQryServletInfo->RequestErrNum);
                    pRspQryServletInfoJS->Set(Local<v8::Value> (RequestErrNum), Local<v8::Value>(RequestErrNumValue));

                    v8::Local<v8::String> ProcessTime = Nan::New<v8::String> ("ProcessTime").ToLocalChecked();
                    v8::Local<v8::Number> ProcessTimeValue = Nan::New<v8::Number> (pRspQryServletInfo->ProcessTime);
                    pRspQryServletInfoJS->Set(Local<v8::Value> (ProcessTime), Local<v8::Value>(ProcessTimeValue));

                    v8::Local<v8::String> MixTime = Nan::New<v8::String> ("MixTime").ToLocalChecked();
                    v8::Local<v8::Integer> MixTimeValue = Nan::New<v8::Integer> (pRspQryServletInfo->MixTime);
                    pRspQryServletInfoJS->Set(Local<v8::Value> (MixTime), Local<v8::Value>(MixTimeValue));

                    v8::Local<v8::String> MaxTime = Nan::New<v8::String> ("MaxTime").ToLocalChecked();
                    v8::Local<v8::Integer> MaxTimeValue = Nan::New<v8::Integer> (pRspQryServletInfo->MaxTime);
                    pRspQryServletInfoJS->Set(Local<v8::Value> (MaxTime), Local<v8::Value>(MaxTimeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryServletInfo) { 
                    params[0] = Local<v8::Value>(pRspQryServletInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryServletInfo) { 
                delete pRspQryServletInfo;
                pRspQryServletInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryServletInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnServletInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnServletInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnServletInfoTopic_mutex);

    int ioUserNumb = g_RtnServletInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnServletInfoTopic_IOUser_vec.begin();
        it != g_RtnServletInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnServletInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnServletInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnServletInfoTopic_Data_map[*it].front());
            g_RtnServletInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnServletInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnServletInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnServletInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnServletInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnServletInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnServletInfoTopic").ToLocalChecked());
            CShfeFtdcRtnServletInfoField* pRtnServletInfo = (CShfeFtdcRtnServletInfoField*)(paramArray[1]);
            if (OnRtnServletInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnServletInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnServletInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnServletInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnServletInfo->ObjectID);
                    Gb2312ToUtf8(pRtnServletInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnServletInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnServletInfo->MonDate);
                    Gb2312ToUtf8(pRtnServletInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnServletInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnServletInfo->MonTime);
                    Gb2312ToUtf8(pRtnServletInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnServletInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnServletInfo->Name);
                    Gb2312ToUtf8(pRtnServletInfo->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnServletInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> LoadTime = Nan::New<v8::String> ("LoadTime").ToLocalChecked();
                    v8::Local<v8::Integer> LoadTimeValue = Nan::New<v8::Integer> (pRtnServletInfo->LoadTime);
                    pRtnServletInfoJS->Set(Local<v8::Value> (LoadTime), Local<v8::Value>(LoadTimeValue));

                    v8::Local<v8::String> RequestNum = Nan::New<v8::String> ("RequestNum").ToLocalChecked();
                    v8::Local<v8::Number> RequestNumValue = Nan::New<v8::Number> (pRtnServletInfo->RequestNum);
                    pRtnServletInfoJS->Set(Local<v8::Value> (RequestNum), Local<v8::Value>(RequestNumValue));

                    v8::Local<v8::String> RequestErrNum = Nan::New<v8::String> ("RequestErrNum").ToLocalChecked();
                    v8::Local<v8::Number> RequestErrNumValue = Nan::New<v8::Number> (pRtnServletInfo->RequestErrNum);
                    pRtnServletInfoJS->Set(Local<v8::Value> (RequestErrNum), Local<v8::Value>(RequestErrNumValue));

                    v8::Local<v8::String> ProcessTime = Nan::New<v8::String> ("ProcessTime").ToLocalChecked();
                    v8::Local<v8::Number> ProcessTimeValue = Nan::New<v8::Number> (pRtnServletInfo->ProcessTime);
                    pRtnServletInfoJS->Set(Local<v8::Value> (ProcessTime), Local<v8::Value>(ProcessTimeValue));

                    v8::Local<v8::String> MixTime = Nan::New<v8::String> ("MixTime").ToLocalChecked();
                    v8::Local<v8::Integer> MixTimeValue = Nan::New<v8::Integer> (pRtnServletInfo->MixTime);
                    pRtnServletInfoJS->Set(Local<v8::Value> (MixTime), Local<v8::Value>(MixTimeValue));

                    v8::Local<v8::String> MaxTime = Nan::New<v8::String> ("MaxTime").ToLocalChecked();
                    v8::Local<v8::Integer> MaxTimeValue = Nan::New<v8::Integer> (pRtnServletInfo->MaxTime);
                    pRtnServletInfoJS->Set(Local<v8::Value> (MaxTime), Local<v8::Value>(MaxTimeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnServletInfo) { 
                    params[0] = Local<v8::Value>(pRtnServletInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnServletInfo) { 
                delete pRtnServletInfo;
                pRtnServletInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnServletInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFileInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryFileInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryFileInfoTopic_mutex);

    int ioUserNumb = g_RspQryFileInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryFileInfoTopic_IOUser_vec.begin();
        it != g_RspQryFileInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryFileInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryFileInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryFileInfoTopic_Data_map[*it].front());
            g_RspQryFileInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryFileInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryFileInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryFileInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryFileInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryFileInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryFileInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryFileInfoField* pRspQryFileInfo = (CShfeFtdcRspQryFileInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryFileInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryFileInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryFileInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryFileInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryFileInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileInfo->MonDate);
                    Gb2312ToUtf8(pRspQryFileInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileInfo->MonTime);
                    Gb2312ToUtf8(pRspQryFileInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> PathName = Nan::New<v8::String> ("PathName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileInfo->PathName);
                    Gb2312ToUtf8(pRspQryFileInfo->PathName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PathNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileInfoJS->Set(Local<v8::Value> (PathName), Local<v8::Value>(PathNameValue));

                    v8::Local<v8::String> FileSize = Nan::New<v8::String> ("FileSize").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileInfo->FileSize);
                    Gb2312ToUtf8(pRspQryFileInfo->FileSize, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileSizeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileInfoJS->Set(Local<v8::Value> (FileSize), Local<v8::Value>(FileSizeValue));

                    v8::Local<v8::String> LastModDate = Nan::New<v8::String> ("LastModDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileInfo->LastModDate);
                    Gb2312ToUtf8(pRspQryFileInfo->LastModDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LastModDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileInfoJS->Set(Local<v8::Value> (LastModDate), Local<v8::Value>(LastModDateValue));

                    v8::Local<v8::String> FileType = Nan::New<v8::String> ("FileType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileInfo->FileType);
                    Gb2312ToUtf8(pRspQryFileInfo->FileType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileInfoJS->Set(Local<v8::Value> (FileType), Local<v8::Value>(FileTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryFileInfo) { 
                    params[0] = Local<v8::Value>(pRspQryFileInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryFileInfo) { 
                delete pRspQryFileInfo;
                pRspQryFileInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryFileInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFileInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnFileInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnFileInfoTopic_mutex);

    int ioUserNumb = g_RtnFileInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnFileInfoTopic_IOUser_vec.begin();
        it != g_RtnFileInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnFileInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnFileInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnFileInfoTopic_Data_map[*it].front());
            g_RtnFileInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnFileInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnFileInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnFileInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnFileInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnFileInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnFileInfoTopic").ToLocalChecked());
            CShfeFtdcRtnFileInfoField* pRtnFileInfo = (CShfeFtdcRtnFileInfoField*)(paramArray[1]);
            if (OnRtnFileInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnFileInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnFileInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnFileInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileInfo->ObjectID);
                    Gb2312ToUtf8(pRtnFileInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileInfo->MonDate);
                    Gb2312ToUtf8(pRtnFileInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileInfo->MonTime);
                    Gb2312ToUtf8(pRtnFileInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> PathName = Nan::New<v8::String> ("PathName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileInfo->PathName);
                    Gb2312ToUtf8(pRtnFileInfo->PathName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PathNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileInfoJS->Set(Local<v8::Value> (PathName), Local<v8::Value>(PathNameValue));

                    v8::Local<v8::String> FileSize = Nan::New<v8::String> ("FileSize").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileInfo->FileSize);
                    Gb2312ToUtf8(pRtnFileInfo->FileSize, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileSizeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileInfoJS->Set(Local<v8::Value> (FileSize), Local<v8::Value>(FileSizeValue));

                    v8::Local<v8::String> LastModDate = Nan::New<v8::String> ("LastModDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileInfo->LastModDate);
                    Gb2312ToUtf8(pRtnFileInfo->LastModDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LastModDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileInfoJS->Set(Local<v8::Value> (LastModDate), Local<v8::Value>(LastModDateValue));

                    v8::Local<v8::String> FileType = Nan::New<v8::String> ("FileType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileInfo->FileType);
                    Gb2312ToUtf8(pRtnFileInfo->FileType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileInfoJS->Set(Local<v8::Value> (FileType), Local<v8::Value>(FileTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnFileInfo) { 
                    params[0] = Local<v8::Value>(pRtnFileInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnFileInfo) { 
                delete pRtnFileInfo;
                pRtnFileInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnFileInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQrySessionInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySessionInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySessionInfoTopic_mutex);

    int ioUserNumb = g_RspQrySessionInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySessionInfoTopic_IOUser_vec.begin();
        it != g_RspQrySessionInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySessionInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySessionInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySessionInfoTopic_Data_map[*it].front());
            g_RspQrySessionInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySessionInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySessionInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySessionInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySessionInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySessionInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySessionInfoTopic").ToLocalChecked());
            CShfeFtdcRspQrySessionInfoField* pRspQrySessionInfo = (CShfeFtdcRspQrySessionInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySessionInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySessionInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySessionInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySessionInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySessionInfo->ObjectID);
                    Gb2312ToUtf8(pRspQrySessionInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySessionInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySessionInfo->MonDate);
                    Gb2312ToUtf8(pRspQrySessionInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySessionInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySessionInfo->MonTime);
                    Gb2312ToUtf8(pRspQrySessionInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySessionInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> SessionID = Nan::New<v8::String> ("SessionID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySessionInfo->SessionID);
                    Gb2312ToUtf8(pRspQrySessionInfo->SessionID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SessionIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySessionInfoJS->Set(Local<v8::Value> (SessionID), Local<v8::Value>(SessionIDValue));

                    v8::Local<v8::String> SessionName = Nan::New<v8::String> ("SessionName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySessionInfo->SessionName);
                    Gb2312ToUtf8(pRspQrySessionInfo->SessionName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SessionNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySessionInfoJS->Set(Local<v8::Value> (SessionName), Local<v8::Value>(SessionNameValue));

                    v8::Local<v8::String> RemoteIP = Nan::New<v8::String> ("RemoteIP").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySessionInfo->RemoteIP);
                    Gb2312ToUtf8(pRspQrySessionInfo->RemoteIP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemoteIPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySessionInfoJS->Set(Local<v8::Value> (RemoteIP), Local<v8::Value>(RemoteIPValue));

                    v8::Local<v8::String> BeginTime = Nan::New<v8::String> ("BeginTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySessionInfo->BeginTime);
                    Gb2312ToUtf8(pRspQrySessionInfo->BeginTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BeginTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySessionInfoJS->Set(Local<v8::Value> (BeginTime), Local<v8::Value>(BeginTimeValue));

                    v8::Local<v8::String> LatestTime = Nan::New<v8::String> ("LatestTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySessionInfo->LatestTime);
                    Gb2312ToUtf8(pRspQrySessionInfo->LatestTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LatestTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySessionInfoJS->Set(Local<v8::Value> (LatestTime), Local<v8::Value>(LatestTimeValue));

                    v8::Local<v8::String> MaxIdleTime = Nan::New<v8::String> ("MaxIdleTime").ToLocalChecked();
                    v8::Local<v8::Integer> MaxIdleTimeValue = Nan::New<v8::Integer> (pRspQrySessionInfo->MaxIdleTime);
                    pRspQrySessionInfoJS->Set(Local<v8::Value> (MaxIdleTime), Local<v8::Value>(MaxIdleTimeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySessionInfo) { 
                    params[0] = Local<v8::Value>(pRspQrySessionInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySessionInfo) { 
                delete pRspQrySessionInfo;
                pRspQrySessionInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySessionInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSessionInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnSessionInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnSessionInfoTopic_mutex);

    int ioUserNumb = g_RtnSessionInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnSessionInfoTopic_IOUser_vec.begin();
        it != g_RtnSessionInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnSessionInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnSessionInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnSessionInfoTopic_Data_map[*it].front());
            g_RtnSessionInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnSessionInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnSessionInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnSessionInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnSessionInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnSessionInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnSessionInfoTopic").ToLocalChecked());
            CShfeFtdcRtnSessionInfoField* pRtnSessionInfo = (CShfeFtdcRtnSessionInfoField*)(paramArray[1]);
            if (OnRtnSessionInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnSessionInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnSessionInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnSessionInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSessionInfo->ObjectID);
                    Gb2312ToUtf8(pRtnSessionInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSessionInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSessionInfo->MonDate);
                    Gb2312ToUtf8(pRtnSessionInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSessionInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSessionInfo->MonTime);
                    Gb2312ToUtf8(pRtnSessionInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSessionInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> SessionID = Nan::New<v8::String> ("SessionID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSessionInfo->SessionID);
                    Gb2312ToUtf8(pRtnSessionInfo->SessionID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SessionIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSessionInfoJS->Set(Local<v8::Value> (SessionID), Local<v8::Value>(SessionIDValue));

                    v8::Local<v8::String> SessionName = Nan::New<v8::String> ("SessionName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSessionInfo->SessionName);
                    Gb2312ToUtf8(pRtnSessionInfo->SessionName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SessionNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSessionInfoJS->Set(Local<v8::Value> (SessionName), Local<v8::Value>(SessionNameValue));

                    v8::Local<v8::String> RemoteIP = Nan::New<v8::String> ("RemoteIP").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSessionInfo->RemoteIP);
                    Gb2312ToUtf8(pRtnSessionInfo->RemoteIP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemoteIPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSessionInfoJS->Set(Local<v8::Value> (RemoteIP), Local<v8::Value>(RemoteIPValue));

                    v8::Local<v8::String> BeginTime = Nan::New<v8::String> ("BeginTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSessionInfo->BeginTime);
                    Gb2312ToUtf8(pRtnSessionInfo->BeginTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BeginTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSessionInfoJS->Set(Local<v8::Value> (BeginTime), Local<v8::Value>(BeginTimeValue));

                    v8::Local<v8::String> LatestTime = Nan::New<v8::String> ("LatestTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSessionInfo->LatestTime);
                    Gb2312ToUtf8(pRtnSessionInfo->LatestTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LatestTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSessionInfoJS->Set(Local<v8::Value> (LatestTime), Local<v8::Value>(LatestTimeValue));

                    v8::Local<v8::String> MaxIdleTime = Nan::New<v8::String> ("MaxIdleTime").ToLocalChecked();
                    v8::Local<v8::Integer> MaxIdleTimeValue = Nan::New<v8::Integer> (pRtnSessionInfo->MaxIdleTime);
                    pRtnSessionInfoJS->Set(Local<v8::Value> (MaxIdleTime), Local<v8::Value>(MaxIdleTimeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnSessionInfo) { 
                    params[0] = Local<v8::Value>(pRtnSessionInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnSessionInfo) { 
                delete pRtnSessionInfo;
                pRtnSessionInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnSessionInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryJDBCInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryJDBCInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryJDBCInfoTopic_mutex);

    int ioUserNumb = g_RspQryJDBCInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryJDBCInfoTopic_IOUser_vec.begin();
        it != g_RspQryJDBCInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryJDBCInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryJDBCInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryJDBCInfoTopic_Data_map[*it].front());
            g_RspQryJDBCInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryJDBCInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryJDBCInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryJDBCInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryJDBCInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryJDBCInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryJDBCInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryJDBCInfoField* pRspQryJDBCInfo = (CShfeFtdcRspQryJDBCInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryJDBCInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryJDBCInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryJDBCInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryJDBCInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryJDBCInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryJDBCInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryJDBCInfo->MonDate);
                    Gb2312ToUtf8(pRspQryJDBCInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryJDBCInfo->MonTime);
                    Gb2312ToUtf8(pRspQryJDBCInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> AppName = Nan::New<v8::String> ("AppName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryJDBCInfo->AppName);
                    Gb2312ToUtf8(pRspQryJDBCInfo->AppName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AppNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (AppName), Local<v8::Value>(AppNameValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryJDBCInfo->Name);
                    Gb2312ToUtf8(pRspQryJDBCInfo->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> Usage = Nan::New<v8::String> ("Usage").ToLocalChecked();
                    v8::Local<v8::Number> UsageValue = Nan::New<v8::Number> (pRspQryJDBCInfo->Usage);
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (Usage), Local<v8::Value>(UsageValue));

                    v8::Local<v8::String> ConnNumMax = Nan::New<v8::String> ("ConnNumMax").ToLocalChecked();
                    v8::Local<v8::Integer> ConnNumMaxValue = Nan::New<v8::Integer> (pRspQryJDBCInfo->ConnNumMax);
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (ConnNumMax), Local<v8::Value>(ConnNumMaxValue));

                    v8::Local<v8::String> ConnNumFree = Nan::New<v8::String> ("ConnNumFree").ToLocalChecked();
                    v8::Local<v8::Integer> ConnNumFreeValue = Nan::New<v8::Integer> (pRspQryJDBCInfo->ConnNumFree);
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (ConnNumFree), Local<v8::Value>(ConnNumFreeValue));

                    v8::Local<v8::String> ConnNumUnRU = Nan::New<v8::String> ("ConnNumUnRU").ToLocalChecked();
                    v8::Local<v8::Integer> ConnNumUnRUValue = Nan::New<v8::Integer> (pRspQryJDBCInfo->ConnNumUnRU);
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (ConnNumUnRU), Local<v8::Value>(ConnNumUnRUValue));

                    v8::Local<v8::String> ConnNumRU = Nan::New<v8::String> ("ConnNumRU").ToLocalChecked();
                    v8::Local<v8::Integer> ConnNumRUValue = Nan::New<v8::Integer> (pRspQryJDBCInfo->ConnNumRU);
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (ConnNumRU), Local<v8::Value>(ConnNumRUValue));

                    v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryJDBCInfo->UserName);
                    Gb2312ToUtf8(pRspQryJDBCInfo->UserName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                    v8::Local<v8::String> Type = Nan::New<v8::String> ("Type").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryJDBCInfo->Type);
                    Gb2312ToUtf8(pRspQryJDBCInfo->Type, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (Type), Local<v8::Value>(TypeValue));

                    v8::Local<v8::String> URL = Nan::New<v8::String> ("URL").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryJDBCInfo->URL);
                    Gb2312ToUtf8(pRspQryJDBCInfo->URL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> URLValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryJDBCInfoJS->Set(Local<v8::Value> (URL), Local<v8::Value>(URLValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryJDBCInfo) { 
                    params[0] = Local<v8::Value>(pRspQryJDBCInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryJDBCInfo) { 
                delete pRspQryJDBCInfo;
                pRspQryJDBCInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryJDBCInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnJDBCInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnJDBCInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnJDBCInfoTopic_mutex);

    int ioUserNumb = g_RtnJDBCInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnJDBCInfoTopic_IOUser_vec.begin();
        it != g_RtnJDBCInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnJDBCInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnJDBCInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnJDBCInfoTopic_Data_map[*it].front());
            g_RtnJDBCInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnJDBCInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnJDBCInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnJDBCInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnJDBCInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnJDBCInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnJDBCInfoTopic").ToLocalChecked());
            CShfeFtdcRtnJDBCInfoField* pRtnJDBCInfo = (CShfeFtdcRtnJDBCInfoField*)(paramArray[1]);
            if (OnRtnJDBCInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnJDBCInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnJDBCInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnJDBCInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnJDBCInfo->ObjectID);
                    Gb2312ToUtf8(pRtnJDBCInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnJDBCInfo->MonDate);
                    Gb2312ToUtf8(pRtnJDBCInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnJDBCInfo->MonTime);
                    Gb2312ToUtf8(pRtnJDBCInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> AppName = Nan::New<v8::String> ("AppName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnJDBCInfo->AppName);
                    Gb2312ToUtf8(pRtnJDBCInfo->AppName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AppNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (AppName), Local<v8::Value>(AppNameValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnJDBCInfo->Name);
                    Gb2312ToUtf8(pRtnJDBCInfo->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> Usage = Nan::New<v8::String> ("Usage").ToLocalChecked();
                    v8::Local<v8::Number> UsageValue = Nan::New<v8::Number> (pRtnJDBCInfo->Usage);
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (Usage), Local<v8::Value>(UsageValue));

                    v8::Local<v8::String> ConnNumMax = Nan::New<v8::String> ("ConnNumMax").ToLocalChecked();
                    v8::Local<v8::Integer> ConnNumMaxValue = Nan::New<v8::Integer> (pRtnJDBCInfo->ConnNumMax);
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (ConnNumMax), Local<v8::Value>(ConnNumMaxValue));

                    v8::Local<v8::String> ConnNumFree = Nan::New<v8::String> ("ConnNumFree").ToLocalChecked();
                    v8::Local<v8::Integer> ConnNumFreeValue = Nan::New<v8::Integer> (pRtnJDBCInfo->ConnNumFree);
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (ConnNumFree), Local<v8::Value>(ConnNumFreeValue));

                    v8::Local<v8::String> ConnNumUnRU = Nan::New<v8::String> ("ConnNumUnRU").ToLocalChecked();
                    v8::Local<v8::Integer> ConnNumUnRUValue = Nan::New<v8::Integer> (pRtnJDBCInfo->ConnNumUnRU);
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (ConnNumUnRU), Local<v8::Value>(ConnNumUnRUValue));

                    v8::Local<v8::String> ConnNumRU = Nan::New<v8::String> ("ConnNumRU").ToLocalChecked();
                    v8::Local<v8::Integer> ConnNumRUValue = Nan::New<v8::Integer> (pRtnJDBCInfo->ConnNumRU);
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (ConnNumRU), Local<v8::Value>(ConnNumRUValue));

                    v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnJDBCInfo->UserName);
                    Gb2312ToUtf8(pRtnJDBCInfo->UserName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                    v8::Local<v8::String> Type = Nan::New<v8::String> ("Type").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnJDBCInfo->Type);
                    Gb2312ToUtf8(pRtnJDBCInfo->Type, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (Type), Local<v8::Value>(TypeValue));

                    v8::Local<v8::String> URL = Nan::New<v8::String> ("URL").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnJDBCInfo->URL);
                    Gb2312ToUtf8(pRtnJDBCInfo->URL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> URLValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnJDBCInfoJS->Set(Local<v8::Value> (URL), Local<v8::Value>(URLValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnJDBCInfo) { 
                    params[0] = Local<v8::Value>(pRtnJDBCInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnJDBCInfo) { 
                delete pRtnJDBCInfo;
                pRtnJDBCInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnJDBCInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryThreadInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryThreadInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryThreadInfoTopic_mutex);

    int ioUserNumb = g_RspQryThreadInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryThreadInfoTopic_IOUser_vec.begin();
        it != g_RspQryThreadInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryThreadInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryThreadInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryThreadInfoTopic_Data_map[*it].front());
            g_RspQryThreadInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryThreadInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryThreadInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryThreadInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryThreadInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryThreadInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryThreadInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryThreadInfoField* pRspQryThreadInfo = (CShfeFtdcRspQryThreadInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryThreadInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryThreadInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryThreadInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryThreadInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryThreadInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryThreadInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryThreadInfo->MonDate);
                    Gb2312ToUtf8(pRspQryThreadInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryThreadInfo->MonTime);
                    Gb2312ToUtf8(pRspQryThreadInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryThreadInfo->Name);
                    Gb2312ToUtf8(pRspQryThreadInfo->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> ThreadNum = Nan::New<v8::String> ("ThreadNum").ToLocalChecked();
                    v8::Local<v8::Integer> ThreadNumValue = Nan::New<v8::Integer> (pRspQryThreadInfo->ThreadNum);
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (ThreadNum), Local<v8::Value>(ThreadNumValue));

                    v8::Local<v8::String> ThreadStatus = Nan::New<v8::String> ("ThreadStatus").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryThreadInfo->ThreadStatus);
                    Gb2312ToUtf8(pRspQryThreadInfo->ThreadStatus, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ThreadStatusValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (ThreadStatus), Local<v8::Value>(ThreadStatusValue));

                    v8::Local<v8::String> InNative = Nan::New<v8::String> ("InNative").ToLocalChecked();
                    v8::Local<v8::Integer> InNativeValue = Nan::New<v8::Integer> (pRspQryThreadInfo->InNative);
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (InNative), Local<v8::Value>(InNativeValue));

                    v8::Local<v8::String> Suspended = Nan::New<v8::String> ("Suspended").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryThreadInfo->Suspended);
                    Gb2312ToUtf8(pRspQryThreadInfo->Suspended, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SuspendedValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (Suspended), Local<v8::Value>(SuspendedValue));

                    v8::Local<v8::String> BlockCount = Nan::New<v8::String> ("BlockCount").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryThreadInfo->BlockCount);
                    Gb2312ToUtf8(pRspQryThreadInfo->BlockCount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BlockCountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (BlockCount), Local<v8::Value>(BlockCountValue));

                    v8::Local<v8::String> WaitCount = Nan::New<v8::String> ("WaitCount").ToLocalChecked();
                    v8::Local<v8::Integer> WaitCountValue = Nan::New<v8::Integer> (pRspQryThreadInfo->WaitCount);
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (WaitCount), Local<v8::Value>(WaitCountValue));

                    v8::Local<v8::String> CpuTime = Nan::New<v8::String> ("CpuTime").ToLocalChecked();
                    v8::Local<v8::Number> CpuTimeValue = Nan::New<v8::Number> (pRspQryThreadInfo->CpuTime);
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (CpuTime), Local<v8::Value>(CpuTimeValue));

                    v8::Local<v8::String> UserTime = Nan::New<v8::String> ("UserTime").ToLocalChecked();
                    v8::Local<v8::Number> UserTimeValue = Nan::New<v8::Number> (pRspQryThreadInfo->UserTime);
                    pRspQryThreadInfoJS->Set(Local<v8::Value> (UserTime), Local<v8::Value>(UserTimeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryThreadInfo) { 
                    params[0] = Local<v8::Value>(pRspQryThreadInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryThreadInfo) { 
                delete pRspQryThreadInfo;
                pRspQryThreadInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryThreadInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnThreadInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnThreadInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnThreadInfoTopic_mutex);

    int ioUserNumb = g_RtnThreadInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnThreadInfoTopic_IOUser_vec.begin();
        it != g_RtnThreadInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnThreadInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnThreadInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnThreadInfoTopic_Data_map[*it].front());
            g_RtnThreadInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnThreadInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnThreadInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnThreadInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnThreadInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnThreadInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnThreadInfoTopic").ToLocalChecked());
            CShfeFtdcRtnThreadInfoField* pRtnThreadInfo = (CShfeFtdcRtnThreadInfoField*)(paramArray[1]);
            if (OnRtnThreadInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnThreadInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnThreadInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnThreadInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnThreadInfo->ObjectID);
                    Gb2312ToUtf8(pRtnThreadInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnThreadInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnThreadInfo->MonDate);
                    Gb2312ToUtf8(pRtnThreadInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnThreadInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnThreadInfo->MonTime);
                    Gb2312ToUtf8(pRtnThreadInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnThreadInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnThreadInfo->Name);
                    Gb2312ToUtf8(pRtnThreadInfo->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnThreadInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> ThreadNum = Nan::New<v8::String> ("ThreadNum").ToLocalChecked();
                    v8::Local<v8::Integer> ThreadNumValue = Nan::New<v8::Integer> (pRtnThreadInfo->ThreadNum);
                    pRtnThreadInfoJS->Set(Local<v8::Value> (ThreadNum), Local<v8::Value>(ThreadNumValue));

                    v8::Local<v8::String> ThreadStatus = Nan::New<v8::String> ("ThreadStatus").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnThreadInfo->ThreadStatus);
                    Gb2312ToUtf8(pRtnThreadInfo->ThreadStatus, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ThreadStatusValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnThreadInfoJS->Set(Local<v8::Value> (ThreadStatus), Local<v8::Value>(ThreadStatusValue));

                    v8::Local<v8::String> InNative = Nan::New<v8::String> ("InNative").ToLocalChecked();
                    v8::Local<v8::Integer> InNativeValue = Nan::New<v8::Integer> (pRtnThreadInfo->InNative);
                    pRtnThreadInfoJS->Set(Local<v8::Value> (InNative), Local<v8::Value>(InNativeValue));

                    v8::Local<v8::String> Suspended = Nan::New<v8::String> ("Suspended").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnThreadInfo->Suspended);
                    Gb2312ToUtf8(pRtnThreadInfo->Suspended, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SuspendedValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnThreadInfoJS->Set(Local<v8::Value> (Suspended), Local<v8::Value>(SuspendedValue));

                    v8::Local<v8::String> BlockCount = Nan::New<v8::String> ("BlockCount").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnThreadInfo->BlockCount);
                    Gb2312ToUtf8(pRtnThreadInfo->BlockCount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BlockCountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnThreadInfoJS->Set(Local<v8::Value> (BlockCount), Local<v8::Value>(BlockCountValue));

                    v8::Local<v8::String> WaitCount = Nan::New<v8::String> ("WaitCount").ToLocalChecked();
                    v8::Local<v8::Integer> WaitCountValue = Nan::New<v8::Integer> (pRtnThreadInfo->WaitCount);
                    pRtnThreadInfoJS->Set(Local<v8::Value> (WaitCount), Local<v8::Value>(WaitCountValue));

                    v8::Local<v8::String> CpuTime = Nan::New<v8::String> ("CpuTime").ToLocalChecked();
                    v8::Local<v8::Number> CpuTimeValue = Nan::New<v8::Number> (pRtnThreadInfo->CpuTime);
                    pRtnThreadInfoJS->Set(Local<v8::Value> (CpuTime), Local<v8::Value>(CpuTimeValue));

                    v8::Local<v8::String> UserTime = Nan::New<v8::String> ("UserTime").ToLocalChecked();
                    v8::Local<v8::Number> UserTimeValue = Nan::New<v8::Number> (pRtnThreadInfo->UserTime);
                    pRtnThreadInfoJS->Set(Local<v8::Value> (UserTime), Local<v8::Value>(UserTimeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnThreadInfo) { 
                    params[0] = Local<v8::Value>(pRtnThreadInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnThreadInfo) { 
                delete pRtnThreadInfo;
                pRtnThreadInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnThreadInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryVMInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryVMInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryVMInfoTopic_mutex);

    int ioUserNumb = g_RspQryVMInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryVMInfoTopic_IOUser_vec.begin();
        it != g_RspQryVMInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryVMInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryVMInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryVMInfoTopic_Data_map[*it].front());
            g_RspQryVMInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryVMInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryVMInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryVMInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryVMInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryVMInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryVMInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryVMInfoField* pRspQryVMInfo = (CShfeFtdcRspQryVMInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryVMInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryVMInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryVMInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryVMInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryVMInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->MonDate);
                    Gb2312ToUtf8(pRspQryVMInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->MonTime);
                    Gb2312ToUtf8(pRspQryVMInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->Name);
                    Gb2312ToUtf8(pRspQryVMInfo->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> VmName = Nan::New<v8::String> ("VmName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->VmName);
                    Gb2312ToUtf8(pRspQryVMInfo->VmName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> VmNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (VmName), Local<v8::Value>(VmNameValue));

                    v8::Local<v8::String> VmVendor = Nan::New<v8::String> ("VmVendor").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->VmVendor);
                    Gb2312ToUtf8(pRspQryVMInfo->VmVendor, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> VmVendorValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (VmVendor), Local<v8::Value>(VmVendorValue));

                    v8::Local<v8::String> VmVersion = Nan::New<v8::String> ("VmVersion").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->VmVersion);
                    Gb2312ToUtf8(pRspQryVMInfo->VmVersion, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> VmVersionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (VmVersion), Local<v8::Value>(VmVersionValue));

                    v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->StartTime);
                    Gb2312ToUtf8(pRspQryVMInfo->StartTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                    v8::Local<v8::String> BootClassPath = Nan::New<v8::String> ("BootClassPath").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->BootClassPath);
                    Gb2312ToUtf8(pRspQryVMInfo->BootClassPath, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BootClassPathValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (BootClassPath), Local<v8::Value>(BootClassPathValue));

                    v8::Local<v8::String> ClassPath = Nan::New<v8::String> ("ClassPath").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->ClassPath);
                    Gb2312ToUtf8(pRspQryVMInfo->ClassPath, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClassPathValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (ClassPath), Local<v8::Value>(ClassPathValue));

                    v8::Local<v8::String> LibraryPath = Nan::New<v8::String> ("LibraryPath").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->LibraryPath);
                    Gb2312ToUtf8(pRspQryVMInfo->LibraryPath, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LibraryPathValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (LibraryPath), Local<v8::Value>(LibraryPathValue));

                    v8::Local<v8::String> Arguments = Nan::New<v8::String> ("Arguments").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryVMInfo->Arguments);
                    Gb2312ToUtf8(pRspQryVMInfo->Arguments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ArgumentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryVMInfoJS->Set(Local<v8::Value> (Arguments), Local<v8::Value>(ArgumentsValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryVMInfo) { 
                    params[0] = Local<v8::Value>(pRspQryVMInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryVMInfo) { 
                delete pRspQryVMInfo;
                pRspQryVMInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryVMInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnVMInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnVMInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnVMInfoTopic_mutex);

    int ioUserNumb = g_RtnVMInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnVMInfoTopic_IOUser_vec.begin();
        it != g_RtnVMInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnVMInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnVMInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnVMInfoTopic_Data_map[*it].front());
            g_RtnVMInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnVMInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnVMInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnVMInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnVMInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnVMInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnVMInfoTopic").ToLocalChecked());
            CShfeFtdcRtnVMInfoField* pRtnVMInfo = (CShfeFtdcRtnVMInfoField*)(paramArray[1]);
            if (OnRtnVMInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnVMInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnVMInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnVMInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->ObjectID);
                    Gb2312ToUtf8(pRtnVMInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->MonDate);
                    Gb2312ToUtf8(pRtnVMInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->MonTime);
                    Gb2312ToUtf8(pRtnVMInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->Name);
                    Gb2312ToUtf8(pRtnVMInfo->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> VmName = Nan::New<v8::String> ("VmName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->VmName);
                    Gb2312ToUtf8(pRtnVMInfo->VmName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> VmNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (VmName), Local<v8::Value>(VmNameValue));

                    v8::Local<v8::String> VmVendor = Nan::New<v8::String> ("VmVendor").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->VmVendor);
                    Gb2312ToUtf8(pRtnVMInfo->VmVendor, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> VmVendorValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (VmVendor), Local<v8::Value>(VmVendorValue));

                    v8::Local<v8::String> VmVersion = Nan::New<v8::String> ("VmVersion").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->VmVersion);
                    Gb2312ToUtf8(pRtnVMInfo->VmVersion, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> VmVersionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (VmVersion), Local<v8::Value>(VmVersionValue));

                    v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->StartTime);
                    Gb2312ToUtf8(pRtnVMInfo->StartTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                    v8::Local<v8::String> BootClassPath = Nan::New<v8::String> ("BootClassPath").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->BootClassPath);
                    Gb2312ToUtf8(pRtnVMInfo->BootClassPath, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BootClassPathValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (BootClassPath), Local<v8::Value>(BootClassPathValue));

                    v8::Local<v8::String> ClassPath = Nan::New<v8::String> ("ClassPath").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->ClassPath);
                    Gb2312ToUtf8(pRtnVMInfo->ClassPath, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClassPathValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (ClassPath), Local<v8::Value>(ClassPathValue));

                    v8::Local<v8::String> LibraryPath = Nan::New<v8::String> ("LibraryPath").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->LibraryPath);
                    Gb2312ToUtf8(pRtnVMInfo->LibraryPath, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LibraryPathValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (LibraryPath), Local<v8::Value>(LibraryPathValue));

                    v8::Local<v8::String> Arguments = Nan::New<v8::String> ("Arguments").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnVMInfo->Arguments);
                    Gb2312ToUtf8(pRtnVMInfo->Arguments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ArgumentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnVMInfoJS->Set(Local<v8::Value> (Arguments), Local<v8::Value>(ArgumentsValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnVMInfo) { 
                    params[0] = Local<v8::Value>(pRtnVMInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnVMInfo) { 
                delete pRtnVMInfo;
                pRtnVMInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnVMInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPropertyInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryPropertyInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryPropertyInfoTopic_mutex);

    int ioUserNumb = g_RspQryPropertyInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryPropertyInfoTopic_IOUser_vec.begin();
        it != g_RspQryPropertyInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryPropertyInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryPropertyInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryPropertyInfoTopic_Data_map[*it].front());
            g_RspQryPropertyInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryPropertyInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryPropertyInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryPropertyInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryPropertyInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryPropertyInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryPropertyInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryPropertyInfoField* pRspQryPropertyInfo = (CShfeFtdcRspQryPropertyInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryPropertyInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryPropertyInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryPropertyInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryPropertyInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPropertyInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryPropertyInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPropertyInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPropertyInfo->MonDate);
                    Gb2312ToUtf8(pRspQryPropertyInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPropertyInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPropertyInfo->MonTime);
                    Gb2312ToUtf8(pRspQryPropertyInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPropertyInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Property = Nan::New<v8::String> ("Property").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPropertyInfo->Property);
                    Gb2312ToUtf8(pRspQryPropertyInfo->Property, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PropertyValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPropertyInfoJS->Set(Local<v8::Value> (Property), Local<v8::Value>(PropertyValue));

                    v8::Local<v8::String> ClipFlag = Nan::New<v8::String> ("ClipFlag").ToLocalChecked();
                    v8::Local<v8::Integer> ClipFlagValue = Nan::New<v8::Integer> (pRspQryPropertyInfo->ClipFlag);
                    pRspQryPropertyInfoJS->Set(Local<v8::Value> (ClipFlag), Local<v8::Value>(ClipFlagValue));

                    v8::Local<v8::String> Value = Nan::New<v8::String> ("Value").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPropertyInfo->Value);
                    Gb2312ToUtf8(pRspQryPropertyInfo->Value, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ValueValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPropertyInfoJS->Set(Local<v8::Value> (Value), Local<v8::Value>(ValueValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryPropertyInfo) { 
                    params[0] = Local<v8::Value>(pRspQryPropertyInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryPropertyInfo) { 
                delete pRspQryPropertyInfo;
                pRspQryPropertyInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryPropertyInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPropertyInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnPropertyInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnPropertyInfoTopic_mutex);

    int ioUserNumb = g_RtnPropertyInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnPropertyInfoTopic_IOUser_vec.begin();
        it != g_RtnPropertyInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnPropertyInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnPropertyInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnPropertyInfoTopic_Data_map[*it].front());
            g_RtnPropertyInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnPropertyInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnPropertyInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnPropertyInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnPropertyInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnPropertyInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnPropertyInfoTopic").ToLocalChecked());
            CShfeFtdcRtnPropertyInfoField* pRtnPropertyInfo = (CShfeFtdcRtnPropertyInfoField*)(paramArray[1]);
            if (OnRtnPropertyInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnPropertyInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnPropertyInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnPropertyInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPropertyInfo->ObjectID);
                    Gb2312ToUtf8(pRtnPropertyInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPropertyInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPropertyInfo->MonDate);
                    Gb2312ToUtf8(pRtnPropertyInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPropertyInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPropertyInfo->MonTime);
                    Gb2312ToUtf8(pRtnPropertyInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPropertyInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Property = Nan::New<v8::String> ("Property").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPropertyInfo->Property);
                    Gb2312ToUtf8(pRtnPropertyInfo->Property, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PropertyValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPropertyInfoJS->Set(Local<v8::Value> (Property), Local<v8::Value>(PropertyValue));

                    v8::Local<v8::String> ClipFlag = Nan::New<v8::String> ("ClipFlag").ToLocalChecked();
                    v8::Local<v8::Integer> ClipFlagValue = Nan::New<v8::Integer> (pRtnPropertyInfo->ClipFlag);
                    pRtnPropertyInfoJS->Set(Local<v8::Value> (ClipFlag), Local<v8::Value>(ClipFlagValue));

                    v8::Local<v8::String> Value = Nan::New<v8::String> ("Value").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPropertyInfo->Value);
                    Gb2312ToUtf8(pRtnPropertyInfo->Value, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ValueValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPropertyInfoJS->Set(Local<v8::Value> (Value), Local<v8::Value>(ValueValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnPropertyInfo) { 
                    params[0] = Local<v8::Value>(pRtnPropertyInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnPropertyInfo) { 
                delete pRtnPropertyInfo;
                pRtnPropertyInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnPropertyInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMemPoolInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryMemPoolInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryMemPoolInfoTopic_mutex);

    int ioUserNumb = g_RspQryMemPoolInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryMemPoolInfoTopic_IOUser_vec.begin();
        it != g_RspQryMemPoolInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryMemPoolInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryMemPoolInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryMemPoolInfoTopic_Data_map[*it].front());
            g_RspQryMemPoolInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryMemPoolInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryMemPoolInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryMemPoolInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryMemPoolInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryMemPoolInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryMemPoolInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryMemPoolInfoField* pRspQryMemPoolInfo = (CShfeFtdcRspQryMemPoolInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryMemPoolInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryMemPoolInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryMemPoolInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryMemPoolInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemPoolInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryMemPoolInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemPoolInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemPoolInfo->MonDate);
                    Gb2312ToUtf8(pRspQryMemPoolInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemPoolInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemPoolInfo->MonTime);
                    Gb2312ToUtf8(pRspQryMemPoolInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemPoolInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> PoolName = Nan::New<v8::String> ("PoolName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemPoolInfo->PoolName);
                    Gb2312ToUtf8(pRspQryMemPoolInfo->PoolName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PoolNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemPoolInfoJS->Set(Local<v8::Value> (PoolName), Local<v8::Value>(PoolNameValue));

                    v8::Local<v8::String> Usage = Nan::New<v8::String> ("Usage").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemPoolInfo->Usage);
                    Gb2312ToUtf8(pRspQryMemPoolInfo->Usage, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UsageValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemPoolInfoJS->Set(Local<v8::Value> (Usage), Local<v8::Value>(UsageValue));

                    v8::Local<v8::String> committedbytes = Nan::New<v8::String> ("committedbytes").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemPoolInfo->committedbytes);
                    Gb2312ToUtf8(pRspQryMemPoolInfo->committedbytes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> committedbytesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemPoolInfoJS->Set(Local<v8::Value> (committedbytes), Local<v8::Value>(committedbytesValue));

                    v8::Local<v8::String> initbytes = Nan::New<v8::String> ("initbytes").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemPoolInfo->initbytes);
                    Gb2312ToUtf8(pRspQryMemPoolInfo->initbytes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> initbytesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemPoolInfoJS->Set(Local<v8::Value> (initbytes), Local<v8::Value>(initbytesValue));

                    v8::Local<v8::String> maxbytes = Nan::New<v8::String> ("maxbytes").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemPoolInfo->maxbytes);
                    Gb2312ToUtf8(pRspQryMemPoolInfo->maxbytes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> maxbytesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemPoolInfoJS->Set(Local<v8::Value> (maxbytes), Local<v8::Value>(maxbytesValue));

                    v8::Local<v8::String> usedbytes = Nan::New<v8::String> ("usedbytes").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemPoolInfo->usedbytes);
                    Gb2312ToUtf8(pRspQryMemPoolInfo->usedbytes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> usedbytesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemPoolInfoJS->Set(Local<v8::Value> (usedbytes), Local<v8::Value>(usedbytesValue));

                    v8::Local<v8::String> Type = Nan::New<v8::String> ("Type").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemPoolInfo->Type);
                    Gb2312ToUtf8(pRspQryMemPoolInfo->Type, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemPoolInfoJS->Set(Local<v8::Value> (Type), Local<v8::Value>(TypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryMemPoolInfo) { 
                    params[0] = Local<v8::Value>(pRspQryMemPoolInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryMemPoolInfo) { 
                delete pRspQryMemPoolInfo;
                pRspQryMemPoolInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryMemPoolInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMemPoolInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnMemPoolInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnMemPoolInfoTopic_mutex);

    int ioUserNumb = g_RtnMemPoolInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnMemPoolInfoTopic_IOUser_vec.begin();
        it != g_RtnMemPoolInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnMemPoolInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnMemPoolInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnMemPoolInfoTopic_Data_map[*it].front());
            g_RtnMemPoolInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnMemPoolInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnMemPoolInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnMemPoolInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnMemPoolInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnMemPoolInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnMemPoolInfoTopic").ToLocalChecked());
            CShfeFtdcRtnMemPoolInfoField* pRtnMemPoolInfo = (CShfeFtdcRtnMemPoolInfoField*)(paramArray[1]);
            if (OnRtnMemPoolInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnMemPoolInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnMemPoolInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnMemPoolInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemPoolInfo->ObjectID);
                    Gb2312ToUtf8(pRtnMemPoolInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemPoolInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemPoolInfo->MonDate);
                    Gb2312ToUtf8(pRtnMemPoolInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemPoolInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemPoolInfo->MonTime);
                    Gb2312ToUtf8(pRtnMemPoolInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemPoolInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> PoolName = Nan::New<v8::String> ("PoolName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemPoolInfo->PoolName);
                    Gb2312ToUtf8(pRtnMemPoolInfo->PoolName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PoolNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemPoolInfoJS->Set(Local<v8::Value> (PoolName), Local<v8::Value>(PoolNameValue));

                    v8::Local<v8::String> Usage = Nan::New<v8::String> ("Usage").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemPoolInfo->Usage);
                    Gb2312ToUtf8(pRtnMemPoolInfo->Usage, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UsageValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemPoolInfoJS->Set(Local<v8::Value> (Usage), Local<v8::Value>(UsageValue));

                    v8::Local<v8::String> committedbytes = Nan::New<v8::String> ("committedbytes").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemPoolInfo->committedbytes);
                    Gb2312ToUtf8(pRtnMemPoolInfo->committedbytes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> committedbytesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemPoolInfoJS->Set(Local<v8::Value> (committedbytes), Local<v8::Value>(committedbytesValue));

                    v8::Local<v8::String> initbytes = Nan::New<v8::String> ("initbytes").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemPoolInfo->initbytes);
                    Gb2312ToUtf8(pRtnMemPoolInfo->initbytes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> initbytesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemPoolInfoJS->Set(Local<v8::Value> (initbytes), Local<v8::Value>(initbytesValue));

                    v8::Local<v8::String> maxbytes = Nan::New<v8::String> ("maxbytes").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemPoolInfo->maxbytes);
                    Gb2312ToUtf8(pRtnMemPoolInfo->maxbytes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> maxbytesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemPoolInfoJS->Set(Local<v8::Value> (maxbytes), Local<v8::Value>(maxbytesValue));

                    v8::Local<v8::String> usedbytes = Nan::New<v8::String> ("usedbytes").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemPoolInfo->usedbytes);
                    Gb2312ToUtf8(pRtnMemPoolInfo->usedbytes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> usedbytesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemPoolInfoJS->Set(Local<v8::Value> (usedbytes), Local<v8::Value>(usedbytesValue));

                    v8::Local<v8::String> Type = Nan::New<v8::String> ("Type").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemPoolInfo->Type);
                    Gb2312ToUtf8(pRtnMemPoolInfo->Type, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemPoolInfoJS->Set(Local<v8::Value> (Type), Local<v8::Value>(TypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnMemPoolInfo) { 
                    params[0] = Local<v8::Value>(pRtnMemPoolInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnMemPoolInfo) { 
                delete pRtnMemPoolInfo;
                pRtnMemPoolInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnMemPoolInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFileContentInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryFileContentInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryFileContentInfoTopic_mutex);

    int ioUserNumb = g_RspQryFileContentInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryFileContentInfoTopic_IOUser_vec.begin();
        it != g_RspQryFileContentInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryFileContentInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryFileContentInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryFileContentInfoTopic_Data_map[*it].front());
            g_RspQryFileContentInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryFileContentInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryFileContentInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryFileContentInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryFileContentInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryFileContentInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryFileContentInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryFileContentInfoField* pRspQryFileContentInfo = (CShfeFtdcRspQryFileContentInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryFileContentInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryFileContentInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryFileContentInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryFileContentInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileContentInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryFileContentInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileContentInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileContentInfo->MonDate);
                    Gb2312ToUtf8(pRspQryFileContentInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileContentInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileContentInfo->MonTime);
                    Gb2312ToUtf8(pRspQryFileContentInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileContentInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> FileName = Nan::New<v8::String> ("FileName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileContentInfo->FileName);
                    Gb2312ToUtf8(pRspQryFileContentInfo->FileName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileContentInfoJS->Set(Local<v8::Value> (FileName), Local<v8::Value>(FileNameValue));

                    v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileContentInfo->FileContent);
                    Gb2312ToUtf8(pRspQryFileContentInfo->FileContent, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileContentInfoJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryFileContentInfo) { 
                    params[0] = Local<v8::Value>(pRspQryFileContentInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryFileContentInfo) { 
                delete pRspQryFileContentInfo;
                pRspQryFileContentInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryFileContentInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFileContentInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnFileContentInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnFileContentInfoTopic_mutex);

    int ioUserNumb = g_RtnFileContentInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnFileContentInfoTopic_IOUser_vec.begin();
        it != g_RtnFileContentInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnFileContentInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnFileContentInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnFileContentInfoTopic_Data_map[*it].front());
            g_RtnFileContentInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnFileContentInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnFileContentInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnFileContentInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnFileContentInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnFileContentInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnFileContentInfoTopic").ToLocalChecked());
            CShfeFtdcRtnFileContentInfoField* pRtnFileContentInfo = (CShfeFtdcRtnFileContentInfoField*)(paramArray[1]);
            if (OnRtnFileContentInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnFileContentInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnFileContentInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnFileContentInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileContentInfo->ObjectID);
                    Gb2312ToUtf8(pRtnFileContentInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileContentInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileContentInfo->MonDate);
                    Gb2312ToUtf8(pRtnFileContentInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileContentInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileContentInfo->MonTime);
                    Gb2312ToUtf8(pRtnFileContentInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileContentInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> FileName = Nan::New<v8::String> ("FileName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileContentInfo->FileName);
                    Gb2312ToUtf8(pRtnFileContentInfo->FileName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileContentInfoJS->Set(Local<v8::Value> (FileName), Local<v8::Value>(FileNameValue));

                    v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileContentInfo->FileContent);
                    Gb2312ToUtf8(pRtnFileContentInfo->FileContent, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileContentInfoJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnFileContentInfo) { 
                    params[0] = Local<v8::Value>(pRtnFileContentInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnFileContentInfo) { 
                delete pRtnFileContentInfo;
                pRtnFileContentInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnFileContentInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryConnectionInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryConnectionInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryConnectionInfoTopic_mutex);

    int ioUserNumb = g_RspQryConnectionInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryConnectionInfoTopic_IOUser_vec.begin();
        it != g_RspQryConnectionInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryConnectionInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryConnectionInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryConnectionInfoTopic_Data_map[*it].front());
            g_RspQryConnectionInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryConnectionInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryConnectionInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryConnectionInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryConnectionInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryConnectionInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryConnectionInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryConnectionInfoField* pRspQryConnectionInfo = (CShfeFtdcRspQryConnectionInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryConnectionInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryConnectionInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryConnectionInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryConnectionInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectionInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryConnectionInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectionInfo->MonDate);
                    Gb2312ToUtf8(pRspQryConnectionInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectionInfo->MonTime);
                    Gb2312ToUtf8(pRspQryConnectionInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ServiceName = Nan::New<v8::String> ("ServiceName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectionInfo->ServiceName);
                    Gb2312ToUtf8(pRspQryConnectionInfo->ServiceName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ServiceNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (ServiceName), Local<v8::Value>(ServiceNameValue));

                    v8::Local<v8::String> Stage = Nan::New<v8::String> ("Stage").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectionInfo->Stage);
                    Gb2312ToUtf8(pRspQryConnectionInfo->Stage, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StageValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (Stage), Local<v8::Value>(StageValue));

                    v8::Local<v8::String> RequestCount = Nan::New<v8::String> ("RequestCount").ToLocalChecked();
                    v8::Local<v8::Number> RequestCountValue = Nan::New<v8::Number> (pRspQryConnectionInfo->RequestCount);
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (RequestCount), Local<v8::Value>(RequestCountValue));

                    v8::Local<v8::String> ErrorCount = Nan::New<v8::String> ("ErrorCount").ToLocalChecked();
                    v8::Local<v8::Number> ErrorCountValue = Nan::New<v8::Number> (pRspQryConnectionInfo->ErrorCount);
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (ErrorCount), Local<v8::Value>(ErrorCountValue));

                    v8::Local<v8::String> ProcTime = Nan::New<v8::String> ("ProcTime").ToLocalChecked();
                    v8::Local<v8::Number> ProcTimeValue = Nan::New<v8::Number> (pRspQryConnectionInfo->ProcTime);
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (ProcTime), Local<v8::Value>(ProcTimeValue));

                    v8::Local<v8::String> BytesReceived = Nan::New<v8::String> ("BytesReceived").ToLocalChecked();
                    v8::Local<v8::Number> BytesReceivedValue = Nan::New<v8::Number> (pRspQryConnectionInfo->BytesReceived);
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (BytesReceived), Local<v8::Value>(BytesReceivedValue));

                    v8::Local<v8::String> BytesSent = Nan::New<v8::String> ("BytesSent").ToLocalChecked();
                    v8::Local<v8::Number> BytesSentValue = Nan::New<v8::Number> (pRspQryConnectionInfo->BytesSent);
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (BytesSent), Local<v8::Value>(BytesSentValue));

                    v8::Local<v8::String> RemoteIP = Nan::New<v8::String> ("RemoteIP").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectionInfo->RemoteIP);
                    Gb2312ToUtf8(pRspQryConnectionInfo->RemoteIP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemoteIPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (RemoteIP), Local<v8::Value>(RemoteIPValue));

                    v8::Local<v8::String> MaxAccessURI = Nan::New<v8::String> ("MaxAccessURI").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectionInfo->MaxAccessURI);
                    Gb2312ToUtf8(pRspQryConnectionInfo->MaxAccessURI, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxAccessURIValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectionInfoJS->Set(Local<v8::Value> (MaxAccessURI), Local<v8::Value>(MaxAccessURIValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryConnectionInfo) { 
                    params[0] = Local<v8::Value>(pRspQryConnectionInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryConnectionInfo) { 
                delete pRspQryConnectionInfo;
                pRspQryConnectionInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryConnectionInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnConnectionInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnConnectionInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnConnectionInfoTopic_mutex);

    int ioUserNumb = g_RtnConnectionInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnConnectionInfoTopic_IOUser_vec.begin();
        it != g_RtnConnectionInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnConnectionInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnConnectionInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnConnectionInfoTopic_Data_map[*it].front());
            g_RtnConnectionInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnConnectionInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnConnectionInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnConnectionInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnConnectionInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnConnectionInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnConnectionInfoTopic").ToLocalChecked());
            CShfeFtdcRtnConnectionInfoField* pRtnConnectionInfo = (CShfeFtdcRtnConnectionInfoField*)(paramArray[1]);
            if (OnRtnConnectionInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnConnectionInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnConnectionInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnConnectionInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectionInfo->ObjectID);
                    Gb2312ToUtf8(pRtnConnectionInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectionInfo->MonDate);
                    Gb2312ToUtf8(pRtnConnectionInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectionInfo->MonTime);
                    Gb2312ToUtf8(pRtnConnectionInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ServiceName = Nan::New<v8::String> ("ServiceName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectionInfo->ServiceName);
                    Gb2312ToUtf8(pRtnConnectionInfo->ServiceName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ServiceNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (ServiceName), Local<v8::Value>(ServiceNameValue));

                    v8::Local<v8::String> Stage = Nan::New<v8::String> ("Stage").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectionInfo->Stage);
                    Gb2312ToUtf8(pRtnConnectionInfo->Stage, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StageValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (Stage), Local<v8::Value>(StageValue));

                    v8::Local<v8::String> RequestCount = Nan::New<v8::String> ("RequestCount").ToLocalChecked();
                    v8::Local<v8::Number> RequestCountValue = Nan::New<v8::Number> (pRtnConnectionInfo->RequestCount);
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (RequestCount), Local<v8::Value>(RequestCountValue));

                    v8::Local<v8::String> ErrorCount = Nan::New<v8::String> ("ErrorCount").ToLocalChecked();
                    v8::Local<v8::Number> ErrorCountValue = Nan::New<v8::Number> (pRtnConnectionInfo->ErrorCount);
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (ErrorCount), Local<v8::Value>(ErrorCountValue));

                    v8::Local<v8::String> ProcTime = Nan::New<v8::String> ("ProcTime").ToLocalChecked();
                    v8::Local<v8::Number> ProcTimeValue = Nan::New<v8::Number> (pRtnConnectionInfo->ProcTime);
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (ProcTime), Local<v8::Value>(ProcTimeValue));

                    v8::Local<v8::String> BytesReceived = Nan::New<v8::String> ("BytesReceived").ToLocalChecked();
                    v8::Local<v8::Number> BytesReceivedValue = Nan::New<v8::Number> (pRtnConnectionInfo->BytesReceived);
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (BytesReceived), Local<v8::Value>(BytesReceivedValue));

                    v8::Local<v8::String> BytesSent = Nan::New<v8::String> ("BytesSent").ToLocalChecked();
                    v8::Local<v8::Number> BytesSentValue = Nan::New<v8::Number> (pRtnConnectionInfo->BytesSent);
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (BytesSent), Local<v8::Value>(BytesSentValue));

                    v8::Local<v8::String> RemoteIP = Nan::New<v8::String> ("RemoteIP").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectionInfo->RemoteIP);
                    Gb2312ToUtf8(pRtnConnectionInfo->RemoteIP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemoteIPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (RemoteIP), Local<v8::Value>(RemoteIPValue));

                    v8::Local<v8::String> MaxAccessURI = Nan::New<v8::String> ("MaxAccessURI").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectionInfo->MaxAccessURI);
                    Gb2312ToUtf8(pRtnConnectionInfo->MaxAccessURI, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxAccessURIValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectionInfoJS->Set(Local<v8::Value> (MaxAccessURI), Local<v8::Value>(MaxAccessURIValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnConnectionInfo) { 
                    params[0] = Local<v8::Value>(pRtnConnectionInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnConnectionInfo) { 
                delete pRtnConnectionInfo;
                pRtnConnectionInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnConnectionInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryConnectorInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryConnectorInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryConnectorInfoTopic_mutex);

    int ioUserNumb = g_RspQryConnectorInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryConnectorInfoTopic_IOUser_vec.begin();
        it != g_RspQryConnectorInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryConnectorInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryConnectorInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryConnectorInfoTopic_Data_map[*it].front());
            g_RspQryConnectorInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryConnectorInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryConnectorInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryConnectorInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryConnectorInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryConnectorInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryConnectorInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryConnectorInfoField* pRspQryConnectorInfo = (CShfeFtdcRspQryConnectorInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryConnectorInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryConnectorInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryConnectorInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryConnectorInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->ObjectID);
                    Gb2312ToUtf8(pRspQryConnectorInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->MonDate);
                    Gb2312ToUtf8(pRspQryConnectorInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->MonTime);
                    Gb2312ToUtf8(pRspQryConnectorInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->Name);
                    Gb2312ToUtf8(pRspQryConnectorInfo->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> ThreadsCount = Nan::New<v8::String> ("ThreadsCount").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->ThreadsCount);
                    Gb2312ToUtf8(pRspQryConnectorInfo->ThreadsCount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ThreadsCountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (ThreadsCount), Local<v8::Value>(ThreadsCountValue));

                    v8::Local<v8::String> BusyThreadsCount = Nan::New<v8::String> ("BusyThreadsCount").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->BusyThreadsCount);
                    Gb2312ToUtf8(pRspQryConnectorInfo->BusyThreadsCount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BusyThreadsCountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (BusyThreadsCount), Local<v8::Value>(BusyThreadsCountValue));

                    v8::Local<v8::String> MaxThreads = Nan::New<v8::String> ("MaxThreads").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->MaxThreads);
                    Gb2312ToUtf8(pRspQryConnectorInfo->MaxThreads, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxThreadsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (MaxThreads), Local<v8::Value>(MaxThreadsValue));

                    v8::Local<v8::String> MaxSpareThreads = Nan::New<v8::String> ("MaxSpareThreads").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->MaxSpareThreads);
                    Gb2312ToUtf8(pRspQryConnectorInfo->MaxSpareThreads, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxSpareThreadsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (MaxSpareThreads), Local<v8::Value>(MaxSpareThreadsValue));

                    v8::Local<v8::String> MinSpareThreads = Nan::New<v8::String> ("MinSpareThreads").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->MinSpareThreads);
                    Gb2312ToUtf8(pRspQryConnectorInfo->MinSpareThreads, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MinSpareThreadsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (MinSpareThreads), Local<v8::Value>(MinSpareThreadsValue));

                    v8::Local<v8::String> MaxTime = Nan::New<v8::String> ("MaxTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->MaxTime);
                    Gb2312ToUtf8(pRspQryConnectorInfo->MaxTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (MaxTime), Local<v8::Value>(MaxTimeValue));

                    v8::Local<v8::String> MaxProcTime = Nan::New<v8::String> ("MaxProcTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->MaxProcTime);
                    Gb2312ToUtf8(pRspQryConnectorInfo->MaxProcTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxProcTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (MaxProcTime), Local<v8::Value>(MaxProcTimeValue));

                    v8::Local<v8::String> RequestCount = Nan::New<v8::String> ("RequestCount").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->RequestCount);
                    Gb2312ToUtf8(pRspQryConnectorInfo->RequestCount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RequestCountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (RequestCount), Local<v8::Value>(RequestCountValue));

                    v8::Local<v8::String> ErrorCount = Nan::New<v8::String> ("ErrorCount").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->ErrorCount);
                    Gb2312ToUtf8(pRspQryConnectorInfo->ErrorCount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ErrorCountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (ErrorCount), Local<v8::Value>(ErrorCountValue));

                    v8::Local<v8::String> BytesReceived = Nan::New<v8::String> ("BytesReceived").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->BytesReceived);
                    Gb2312ToUtf8(pRspQryConnectorInfo->BytesReceived, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BytesReceivedValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (BytesReceived), Local<v8::Value>(BytesReceivedValue));

                    v8::Local<v8::String> BytesSent = Nan::New<v8::String> ("BytesSent").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryConnectorInfo->BytesSent);
                    Gb2312ToUtf8(pRspQryConnectorInfo->BytesSent, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BytesSentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryConnectorInfoJS->Set(Local<v8::Value> (BytesSent), Local<v8::Value>(BytesSentValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryConnectorInfo) { 
                    params[0] = Local<v8::Value>(pRspQryConnectorInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryConnectorInfo) { 
                delete pRspQryConnectorInfo;
                pRspQryConnectorInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryConnectorInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnConnectorInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnConnectorInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnConnectorInfoTopic_mutex);

    int ioUserNumb = g_RtnConnectorInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnConnectorInfoTopic_IOUser_vec.begin();
        it != g_RtnConnectorInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnConnectorInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnConnectorInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnConnectorInfoTopic_Data_map[*it].front());
            g_RtnConnectorInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnConnectorInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnConnectorInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnConnectorInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnConnectorInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnConnectorInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnConnectorInfoTopic").ToLocalChecked());
            CShfeFtdcRtnConnectorInfoField* pRtnConnectorInfo = (CShfeFtdcRtnConnectorInfoField*)(paramArray[1]);
            if (OnRtnConnectorInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnConnectorInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnConnectorInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnConnectorInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->ObjectID);
                    Gb2312ToUtf8(pRtnConnectorInfo->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->MonDate);
                    Gb2312ToUtf8(pRtnConnectorInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->MonTime);
                    Gb2312ToUtf8(pRtnConnectorInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->Name);
                    Gb2312ToUtf8(pRtnConnectorInfo->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> ThreadsCount = Nan::New<v8::String> ("ThreadsCount").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->ThreadsCount);
                    Gb2312ToUtf8(pRtnConnectorInfo->ThreadsCount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ThreadsCountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (ThreadsCount), Local<v8::Value>(ThreadsCountValue));

                    v8::Local<v8::String> BusyThreadsCount = Nan::New<v8::String> ("BusyThreadsCount").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->BusyThreadsCount);
                    Gb2312ToUtf8(pRtnConnectorInfo->BusyThreadsCount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BusyThreadsCountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (BusyThreadsCount), Local<v8::Value>(BusyThreadsCountValue));

                    v8::Local<v8::String> MaxThreads = Nan::New<v8::String> ("MaxThreads").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->MaxThreads);
                    Gb2312ToUtf8(pRtnConnectorInfo->MaxThreads, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxThreadsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (MaxThreads), Local<v8::Value>(MaxThreadsValue));

                    v8::Local<v8::String> MaxSpareThreads = Nan::New<v8::String> ("MaxSpareThreads").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->MaxSpareThreads);
                    Gb2312ToUtf8(pRtnConnectorInfo->MaxSpareThreads, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxSpareThreadsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (MaxSpareThreads), Local<v8::Value>(MaxSpareThreadsValue));

                    v8::Local<v8::String> MinSpareThreads = Nan::New<v8::String> ("MinSpareThreads").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->MinSpareThreads);
                    Gb2312ToUtf8(pRtnConnectorInfo->MinSpareThreads, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MinSpareThreadsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (MinSpareThreads), Local<v8::Value>(MinSpareThreadsValue));

                    v8::Local<v8::String> MaxTime = Nan::New<v8::String> ("MaxTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->MaxTime);
                    Gb2312ToUtf8(pRtnConnectorInfo->MaxTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (MaxTime), Local<v8::Value>(MaxTimeValue));

                    v8::Local<v8::String> MaxProcTime = Nan::New<v8::String> ("MaxProcTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->MaxProcTime);
                    Gb2312ToUtf8(pRtnConnectorInfo->MaxProcTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaxProcTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (MaxProcTime), Local<v8::Value>(MaxProcTimeValue));

                    v8::Local<v8::String> RequestCount = Nan::New<v8::String> ("RequestCount").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->RequestCount);
                    Gb2312ToUtf8(pRtnConnectorInfo->RequestCount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RequestCountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (RequestCount), Local<v8::Value>(RequestCountValue));

                    v8::Local<v8::String> ErrorCount = Nan::New<v8::String> ("ErrorCount").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->ErrorCount);
                    Gb2312ToUtf8(pRtnConnectorInfo->ErrorCount, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ErrorCountValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (ErrorCount), Local<v8::Value>(ErrorCountValue));

                    v8::Local<v8::String> BytesReceived = Nan::New<v8::String> ("BytesReceived").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->BytesReceived);
                    Gb2312ToUtf8(pRtnConnectorInfo->BytesReceived, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BytesReceivedValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (BytesReceived), Local<v8::Value>(BytesReceivedValue));

                    v8::Local<v8::String> BytesSent = Nan::New<v8::String> ("BytesSent").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnConnectorInfo->BytesSent);
                    Gb2312ToUtf8(pRtnConnectorInfo->BytesSent, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BytesSentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnConnectorInfoJS->Set(Local<v8::Value> (BytesSent), Local<v8::Value>(BytesSentValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnConnectorInfo) { 
                    params[0] = Local<v8::Value>(pRtnConnectorInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnConnectorInfo) { 
                delete pRtnConnectorInfo;
                pRtnConnectorInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnConnectorInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryDBQueryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryDBQueryTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryDBQueryTopic_mutex);

    int ioUserNumb = g_RspQryDBQueryTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryDBQueryTopic_IOUser_vec.begin();
        it != g_RspQryDBQueryTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryDBQueryTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryDBQueryTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryDBQueryTopic_Data_map[*it].front());
            g_RspQryDBQueryTopic_Data_map[*it].pop();
        }
    }
    g_RspQryDBQueryTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryDBQueryTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryDBQueryTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryDBQueryTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryDBQueryTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryDBQueryTopic").ToLocalChecked());
            CShfeFtdcRspQryDBQueryField* pRspQryDBQuery = (CShfeFtdcRspQryDBQueryField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryDBQueryTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryDBQueryTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryDBQueryJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryDBQuery) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDBQuery->ObjectID);
                    Gb2312ToUtf8(pRspQryDBQuery->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDBQueryJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDBQuery->AttrType);
                    Gb2312ToUtf8(pRspQryDBQuery->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDBQueryJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDBQuery->MonDate);
                    Gb2312ToUtf8(pRspQryDBQuery->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDBQueryJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDBQuery->MonTime);
                    Gb2312ToUtf8(pRspQryDBQuery->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDBQueryJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> DBQueryResult = Nan::New<v8::String> ("DBQueryResult").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDBQuery->DBQueryResult);
                    Gb2312ToUtf8(pRspQryDBQuery->DBQueryResult, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DBQueryResultValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDBQueryJS->Set(Local<v8::Value> (DBQueryResult), Local<v8::Value>(DBQueryResultValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryDBQuery) { 
                    params[0] = Local<v8::Value>(pRspQryDBQueryJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryDBQuery) { 
                delete pRspQryDBQuery;
                pRspQryDBQuery = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryDBQueryTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnDBQueryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnDBQueryTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnDBQueryTopic_mutex);

    int ioUserNumb = g_RtnDBQueryTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnDBQueryTopic_IOUser_vec.begin();
        it != g_RtnDBQueryTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnDBQueryTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnDBQueryTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnDBQueryTopic_Data_map[*it].front());
            g_RtnDBQueryTopic_Data_map[*it].pop();
        }
    }
    g_RtnDBQueryTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnDBQueryTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnDBQueryTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnDBQueryTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnDBQueryTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnDBQueryTopic").ToLocalChecked());
            CShfeFtdcRtnDBQueryField* pRtnDBQuery = (CShfeFtdcRtnDBQueryField*)(paramArray[1]);
            if (OnRtnDBQueryTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnDBQueryTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnDBQueryJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnDBQuery) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDBQuery->ObjectID);
                    Gb2312ToUtf8(pRtnDBQuery->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDBQueryJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDBQuery->AttrType);
                    Gb2312ToUtf8(pRtnDBQuery->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDBQueryJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDBQuery->MonDate);
                    Gb2312ToUtf8(pRtnDBQuery->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDBQueryJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDBQuery->MonTime);
                    Gb2312ToUtf8(pRtnDBQuery->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDBQueryJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> DBQueryResult = Nan::New<v8::String> ("DBQueryResult").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDBQuery->DBQueryResult);
                    Gb2312ToUtf8(pRtnDBQuery->DBQueryResult, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DBQueryResultValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDBQueryJS->Set(Local<v8::Value> (DBQueryResult), Local<v8::Value>(DBQueryResultValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnDBQuery) { 
                    params[0] = Local<v8::Value>(pRtnDBQueryJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnDBQuery) { 
                delete pRtnDBQuery;
                pRtnDBQuery = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnDBQueryTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryGeneralFieldTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryGeneralFieldTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryGeneralFieldTopic_mutex);

    int ioUserNumb = g_RspQryGeneralFieldTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryGeneralFieldTopic_IOUser_vec.begin();
        it != g_RspQryGeneralFieldTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryGeneralFieldTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryGeneralFieldTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryGeneralFieldTopic_Data_map[*it].front());
            g_RspQryGeneralFieldTopic_Data_map[*it].pop();
        }
    }
    g_RspQryGeneralFieldTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryGeneralFieldTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryGeneralFieldTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryGeneralFieldTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryGeneralFieldTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryGeneralFieldTopic").ToLocalChecked());
            CShfeFtdcSysGeneralFieldField* pSysGeneralField = (CShfeFtdcSysGeneralFieldField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryGeneralFieldTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryGeneralFieldTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pSysGeneralFieldJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pSysGeneralField) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->MonDate);
                    Gb2312ToUtf8(pSysGeneralField->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->MonTime);
                    Gb2312ToUtf8(pSysGeneralField->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->ObjectID);
                    Gb2312ToUtf8(pSysGeneralField->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> SubObjectID = Nan::New<v8::String> ("SubObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->SubObjectID);
                    Gb2312ToUtf8(pSysGeneralField->SubObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SubObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (SubObjectID), Local<v8::Value>(SubObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->AttrType);
                    Gb2312ToUtf8(pSysGeneralField->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> Content = Nan::New<v8::String> ("Content").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->Content);
                    Gb2312ToUtf8(pSysGeneralField->Content, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ContentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (Content), Local<v8::Value>(ContentValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pSysGeneralField) { 
                    params[0] = Local<v8::Value>(pSysGeneralFieldJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pSysGeneralField) { 
                delete pSysGeneralField;
                pSysGeneralField = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryGeneralFieldTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnGeneralFieldTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnGeneralFieldTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnGeneralFieldTopic_mutex);

    int ioUserNumb = g_RtnGeneralFieldTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnGeneralFieldTopic_IOUser_vec.begin();
        it != g_RtnGeneralFieldTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnGeneralFieldTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnGeneralFieldTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnGeneralFieldTopic_Data_map[*it].front());
            g_RtnGeneralFieldTopic_Data_map[*it].pop();
        }
    }
    g_RtnGeneralFieldTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnGeneralFieldTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnGeneralFieldTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnGeneralFieldTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnGeneralFieldTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnGeneralFieldTopic").ToLocalChecked());
            CShfeFtdcSysGeneralFieldField* pSysGeneralField = (CShfeFtdcSysGeneralFieldField*)(paramArray[1]);
            if (OnRtnGeneralFieldTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnGeneralFieldTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pSysGeneralFieldJS = Nan::New<v8::Object>();
                
                if (NULL != pSysGeneralField) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->MonDate);
                    Gb2312ToUtf8(pSysGeneralField->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->MonTime);
                    Gb2312ToUtf8(pSysGeneralField->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->ObjectID);
                    Gb2312ToUtf8(pSysGeneralField->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> SubObjectID = Nan::New<v8::String> ("SubObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->SubObjectID);
                    Gb2312ToUtf8(pSysGeneralField->SubObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SubObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (SubObjectID), Local<v8::Value>(SubObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->AttrType);
                    Gb2312ToUtf8(pSysGeneralField->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> Content = Nan::New<v8::String> ("Content").ToLocalChecked();
                    gb2312dataLen = strlen(pSysGeneralField->Content);
                    Gb2312ToUtf8(pSysGeneralField->Content, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ContentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pSysGeneralFieldJS->Set(Local<v8::Value> (Content), Local<v8::Value>(ContentValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pSysGeneralField) { 
                    params[0] = Local<v8::Value>(pSysGeneralFieldJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pSysGeneralField) { 
                delete pSysGeneralField;
                pSysGeneralField = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnGeneralFieldTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryGetFileTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryGetFileTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryGetFileTopic_mutex);

    int ioUserNumb = g_RspQryGetFileTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryGetFileTopic_IOUser_vec.begin();
        it != g_RspQryGetFileTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryGetFileTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryGetFileTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryGetFileTopic_Data_map[*it].front());
            g_RspQryGetFileTopic_Data_map[*it].pop();
        }
    }
    g_RspQryGetFileTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryGetFileTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryGetFileTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryGetFileTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryGetFileTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryGetFileTopic").ToLocalChecked());
            CShfeFtdcRspQryGetFileField* pRspQryGetFile = (CShfeFtdcRspQryGetFileField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryGetFileTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryGetFileTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryGetFileJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryGetFile) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> FileName = Nan::New<v8::String> ("FileName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryGetFile->FileName);
                    Gb2312ToUtf8(pRspQryGetFile->FileName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryGetFileJS->Set(Local<v8::Value> (FileName), Local<v8::Value>(FileNameValue));

                    v8::Local<v8::String> Version = Nan::New<v8::String> ("Version").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryGetFile->Version);
                    Gb2312ToUtf8(pRspQryGetFile->Version, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> VersionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryGetFileJS->Set(Local<v8::Value> (Version), Local<v8::Value>(VersionValue));

                    v8::Local<v8::String> Offset = Nan::New<v8::String> ("Offset").ToLocalChecked();
                    v8::Local<v8::Integer> OffsetValue = Nan::New<v8::Integer> (pRspQryGetFile->Offset);
                    pRspQryGetFileJS->Set(Local<v8::Value> (Offset), Local<v8::Value>(OffsetValue));

                    v8::Local<v8::String> Length = Nan::New<v8::String> ("Length").ToLocalChecked();
                    v8::Local<v8::Integer> LengthValue = Nan::New<v8::Integer> (pRspQryGetFile->Length);
                    pRspQryGetFileJS->Set(Local<v8::Value> (Length), Local<v8::Value>(LengthValue));

                    v8::Local<v8::String> Comment = Nan::New<v8::String> ("Comment").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryGetFile->Comment);
                    Gb2312ToUtf8(pRspQryGetFile->Comment, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryGetFileJS->Set(Local<v8::Value> (Comment), Local<v8::Value>(CommentValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryGetFile) { 
                    params[0] = Local<v8::Value>(pRspQryGetFileJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryGetFile) { 
                delete pRspQryGetFile;
                pRspQryGetFile = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryGetFileTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryWarningQueryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryWarningQueryTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryWarningQueryTopic_mutex);

    int ioUserNumb = g_RspQryWarningQueryTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryWarningQueryTopic_IOUser_vec.begin();
        it != g_RspQryWarningQueryTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryWarningQueryTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryWarningQueryTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryWarningQueryTopic_Data_map[*it].front());
            g_RspQryWarningQueryTopic_Data_map[*it].pop();
        }
    }
    g_RspQryWarningQueryTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryWarningQueryTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryWarningQueryTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryWarningQueryTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryWarningQueryTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryWarningQueryTopic").ToLocalChecked());
            CShfeFtdcRspQryWarningQueryField* pRspQryWarningQuery = (CShfeFtdcRspQryWarningQueryField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryWarningQueryTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryWarningQueryTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryWarningQueryJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryWarningQuery) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningQuery->MonDate);
                    Gb2312ToUtf8(pRspQryWarningQuery->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningQueryJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningQuery->MonTime);
                    Gb2312ToUtf8(pRspQryWarningQuery->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningQueryJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                    v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRspQryWarningQuery->EvendID);
                    pRspQryWarningQueryJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                    v8::Local<v8::String> DBQueryResult = Nan::New<v8::String> ("DBQueryResult").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryWarningQuery->DBQueryResult);
                    Gb2312ToUtf8(pRspQryWarningQuery->DBQueryResult, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DBQueryResultValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryWarningQueryJS->Set(Local<v8::Value> (DBQueryResult), Local<v8::Value>(DBQueryResultValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryWarningQuery) { 
                    params[0] = Local<v8::Value>(pRspQryWarningQueryJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryWarningQuery) { 
                delete pRspQryWarningQuery;
                pRspQryWarningQuery = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryWarningQueryTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnWarningQueryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnWarningQueryTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnWarningQueryTopic_mutex);

    int ioUserNumb = g_RtnWarningQueryTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnWarningQueryTopic_IOUser_vec.begin();
        it != g_RtnWarningQueryTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnWarningQueryTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnWarningQueryTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnWarningQueryTopic_Data_map[*it].front());
            g_RtnWarningQueryTopic_Data_map[*it].pop();
        }
    }
    g_RtnWarningQueryTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnWarningQueryTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnWarningQueryTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnWarningQueryTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnWarningQueryTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnWarningQueryTopic").ToLocalChecked());
            CShfeFtdcRtnWarningQueryField* pRtnWarningQuery = (CShfeFtdcRtnWarningQueryField*)(paramArray[1]);
            if (OnRtnWarningQueryTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnWarningQueryTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnWarningQueryJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnWarningQuery) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningQuery->MonDate);
                    Gb2312ToUtf8(pRtnWarningQuery->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningQueryJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningQuery->MonTime);
                    Gb2312ToUtf8(pRtnWarningQuery->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningQueryJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> EvendID = Nan::New<v8::String> ("EvendID").ToLocalChecked();
                    v8::Local<v8::Integer> EvendIDValue = Nan::New<v8::Integer> (pRtnWarningQuery->EvendID);
                    pRtnWarningQueryJS->Set(Local<v8::Value> (EvendID), Local<v8::Value>(EvendIDValue));

                    v8::Local<v8::String> DBQueryResult = Nan::New<v8::String> ("DBQueryResult").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnWarningQuery->DBQueryResult);
                    Gb2312ToUtf8(pRtnWarningQuery->DBQueryResult, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DBQueryResultValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnWarningQueryJS->Set(Local<v8::Value> (DBQueryResult), Local<v8::Value>(DBQueryResultValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnWarningQuery) { 
                    params[0] = Local<v8::Value>(pRtnWarningQueryJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnWarningQuery) { 
                delete pRtnWarningQuery;
                pRtnWarningQuery = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnWarningQueryTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnHostConfig (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnHostConfig: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnHostConfig_mutex);

    int ioUserNumb = g_RtnHostConfig_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnHostConfig_IOUser_vec.begin();
        it != g_RtnHostConfig_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnHostConfig_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnHostConfig_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnHostConfig_Data_map[*it].front());
            g_RtnHostConfig_Data_map[*it].pop();
        }
    }
    g_RtnHostConfig_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnHostConfig_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnHostConfig paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnHostConfig: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnHostConfig = localSpiObj->Get(Nan::New<v8::String>("OnRtnHostConfig").ToLocalChecked());
            CShfeFtdcRtnHostConfigField* pRtnHostConfig = (CShfeFtdcRtnHostConfigField*)(paramArray[1]);
            if (OnRtnHostConfig->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnHostConfig);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnHostConfigJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnHostConfig) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> CfgType = Nan::New<v8::String> ("CfgType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHostConfig->CfgType);
                    Gb2312ToUtf8(pRtnHostConfig->CfgType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CfgTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHostConfigJS->Set(Local<v8::Value> (CfgType), Local<v8::Value>(CfgTypeValue));

                    v8::Local<v8::String> CfgDataCenter = Nan::New<v8::String> ("CfgDataCenter").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHostConfig->CfgDataCenter);
                    Gb2312ToUtf8(pRtnHostConfig->CfgDataCenter, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CfgDataCenterValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHostConfigJS->Set(Local<v8::Value> (CfgDataCenter), Local<v8::Value>(CfgDataCenterValue));

                    v8::Local<v8::String> CfgName = Nan::New<v8::String> ("CfgName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHostConfig->CfgName);
                    Gb2312ToUtf8(pRtnHostConfig->CfgName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CfgNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHostConfigJS->Set(Local<v8::Value> (CfgName), Local<v8::Value>(CfgNameValue));

                    v8::Local<v8::String> CfgLocation = Nan::New<v8::String> ("CfgLocation").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHostConfig->CfgLocation);
                    Gb2312ToUtf8(pRtnHostConfig->CfgLocation, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CfgLocationValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHostConfigJS->Set(Local<v8::Value> (CfgLocation), Local<v8::Value>(CfgLocationValue));

                    v8::Local<v8::String> CfgHostName = Nan::New<v8::String> ("CfgHostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHostConfig->CfgHostName);
                    Gb2312ToUtf8(pRtnHostConfig->CfgHostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CfgHostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHostConfigJS->Set(Local<v8::Value> (CfgHostName), Local<v8::Value>(CfgHostNameValue));

                    v8::Local<v8::String> CfgAttend = Nan::New<v8::String> ("CfgAttend").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnHostConfig->CfgAttend);
                    Gb2312ToUtf8(pRtnHostConfig->CfgAttend, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CfgAttendValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnHostConfigJS->Set(Local<v8::Value> (CfgAttend), Local<v8::Value>(CfgAttendValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnHostConfig) { 
                    params[0] = Local<v8::Value>(pRtnHostConfigJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnHostConfig) { 
                delete pRtnHostConfig;
                pRtnHostConfig = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnHostConfig: END! ******\n", g_RunningResult_File);
}

void OnRspQryGeneralOperateTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryGeneralOperateTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryGeneralOperateTopic_mutex);

    int ioUserNumb = g_RspQryGeneralOperateTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryGeneralOperateTopic_IOUser_vec.begin();
        it != g_RspQryGeneralOperateTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryGeneralOperateTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryGeneralOperateTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryGeneralOperateTopic_Data_map[*it].front());
            g_RspQryGeneralOperateTopic_Data_map[*it].pop();
        }
    }
    g_RspQryGeneralOperateTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryGeneralOperateTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryGeneralOperateTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryGeneralOperateTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryGeneralOperateTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryGeneralOperateTopic").ToLocalChecked());
            CShfeFtdcRspQryGeneralOperateField* pRspQryGeneralOperate = (CShfeFtdcRspQryGeneralOperateField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryGeneralOperateTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryGeneralOperateTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryGeneralOperateJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryGeneralOperate) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> GeneralOperateType = Nan::New<v8::String> ("GeneralOperateType").ToLocalChecked();
                    v8::Local<v8::Integer> GeneralOperateTypeValue = Nan::New<v8::Integer> (pRspQryGeneralOperate->GeneralOperateType);
                    pRspQryGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateType), Local<v8::Value>(GeneralOperateTypeValue));

                    v8::Local<v8::String> GeneralOperateTable = Nan::New<v8::String> ("GeneralOperateTable").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryGeneralOperate->GeneralOperateTable);
                    Gb2312ToUtf8(pRspQryGeneralOperate->GeneralOperateTable, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GeneralOperateTableValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateTable), Local<v8::Value>(GeneralOperateTableValue));

                    v8::Local<v8::String> GeneralOperateOption = Nan::New<v8::String> ("GeneralOperateOption").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryGeneralOperate->GeneralOperateOption);
                    Gb2312ToUtf8(pRspQryGeneralOperate->GeneralOperateOption, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GeneralOperateOptionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateOption), Local<v8::Value>(GeneralOperateOptionValue));

                    v8::Local<v8::String> GeneralOperateSet = Nan::New<v8::String> ("GeneralOperateSet").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryGeneralOperate->GeneralOperateSet);
                    Gb2312ToUtf8(pRspQryGeneralOperate->GeneralOperateSet, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GeneralOperateSetValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateSet), Local<v8::Value>(GeneralOperateSetValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryGeneralOperate) { 
                    params[0] = Local<v8::Value>(pRspQryGeneralOperateJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryGeneralOperate) { 
                delete pRspQryGeneralOperate;
                pRspQryGeneralOperate = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryGeneralOperateTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnGeneralOperateTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnGeneralOperateTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnGeneralOperateTopic_mutex);

    int ioUserNumb = g_RtnGeneralOperateTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnGeneralOperateTopic_IOUser_vec.begin();
        it != g_RtnGeneralOperateTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnGeneralOperateTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnGeneralOperateTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnGeneralOperateTopic_Data_map[*it].front());
            g_RtnGeneralOperateTopic_Data_map[*it].pop();
        }
    }
    g_RtnGeneralOperateTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnGeneralOperateTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnGeneralOperateTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnGeneralOperateTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnGeneralOperateTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnGeneralOperateTopic").ToLocalChecked());
            CShfeFtdcRtnGeneralOperateField* pRtnGeneralOperate = (CShfeFtdcRtnGeneralOperateField*)(paramArray[1]);
            if (OnRtnGeneralOperateTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnGeneralOperateTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnGeneralOperateJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnGeneralOperate) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> GeneralOperateType = Nan::New<v8::String> ("GeneralOperateType").ToLocalChecked();
                    v8::Local<v8::Integer> GeneralOperateTypeValue = Nan::New<v8::Integer> (pRtnGeneralOperate->GeneralOperateType);
                    pRtnGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateType), Local<v8::Value>(GeneralOperateTypeValue));

                    v8::Local<v8::String> GeneralOperateTable = Nan::New<v8::String> ("GeneralOperateTable").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnGeneralOperate->GeneralOperateTable);
                    Gb2312ToUtf8(pRtnGeneralOperate->GeneralOperateTable, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GeneralOperateTableValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateTable), Local<v8::Value>(GeneralOperateTableValue));

                    v8::Local<v8::String> GeneralOperateOption = Nan::New<v8::String> ("GeneralOperateOption").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnGeneralOperate->GeneralOperateOption);
                    Gb2312ToUtf8(pRtnGeneralOperate->GeneralOperateOption, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GeneralOperateOptionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateOption), Local<v8::Value>(GeneralOperateOptionValue));

                    v8::Local<v8::String> GeneralOperateSet = Nan::New<v8::String> ("GeneralOperateSet").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnGeneralOperate->GeneralOperateSet);
                    Gb2312ToUtf8(pRtnGeneralOperate->GeneralOperateSet, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GeneralOperateSetValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnGeneralOperateJS->Set(Local<v8::Value> (GeneralOperateSet), Local<v8::Value>(GeneralOperateSetValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnGeneralOperate) { 
                    params[0] = Local<v8::Value>(pRtnGeneralOperateJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnGeneralOperate) { 
                delete pRtnGeneralOperate;
                pRtnGeneralOperate = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnGeneralOperateTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceLinkedTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetDeviceLinkedTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetDeviceLinkedTopic_mutex);

    int ioUserNumb = g_RspQryNetDeviceLinkedTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetDeviceLinkedTopic_IOUser_vec.begin();
        it != g_RspQryNetDeviceLinkedTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetDeviceLinkedTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetDeviceLinkedTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetDeviceLinkedTopic_Data_map[*it].front());
            g_RspQryNetDeviceLinkedTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetDeviceLinkedTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetDeviceLinkedTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetDeviceLinkedTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetDeviceLinkedTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetDeviceLinkedTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceLinkedTopic").ToLocalChecked());
            CShfeFtdcRspQryNetDeviceLinkedField* pRspQryNetDeviceLinked = (CShfeFtdcRspQryNetDeviceLinkedField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetDeviceLinkedTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetDeviceLinkedTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetDeviceLinkedJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetDeviceLinked) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->OperationType);
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->ID);
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> NetDeviceID = Nan::New<v8::String> ("NetDeviceID").ToLocalChecked();
                    v8::Local<v8::Integer> NetDeviceIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->NetDeviceID);
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (NetDeviceID), Local<v8::Value>(NetDeviceIDValue));

                    v8::Local<v8::String> NetPortID = Nan::New<v8::String> ("NetPortID").ToLocalChecked();
                    v8::Local<v8::Integer> NetPortIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->NetPortID);
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (NetPortID), Local<v8::Value>(NetPortIDValue));

                    v8::Local<v8::String> NetObjectID = Nan::New<v8::String> ("NetObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceLinked->NetObjectID);
                    Gb2312ToUtf8(pRspQryNetDeviceLinked->NetObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NetObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (NetObjectID), Local<v8::Value>(NetObjectIDValue));

                    v8::Local<v8::String> NetPortType = Nan::New<v8::String> ("NetPortType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceLinked->NetPortType);
                    Gb2312ToUtf8(pRspQryNetDeviceLinked->NetPortType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NetPortTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (NetPortType), Local<v8::Value>(NetPortTypeValue));

                    v8::Local<v8::String> LinkNetDeviceID = Nan::New<v8::String> ("LinkNetDeviceID").ToLocalChecked();
                    v8::Local<v8::Integer> LinkNetDeviceIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->LinkNetDeviceID);
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetDeviceID), Local<v8::Value>(LinkNetDeviceIDValue));

                    v8::Local<v8::String> LinkNetPortID = Nan::New<v8::String> ("LinkNetPortID").ToLocalChecked();
                    v8::Local<v8::Integer> LinkNetPortIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->LinkNetPortID);
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetPortID), Local<v8::Value>(LinkNetPortIDValue));

                    v8::Local<v8::String> LinkNetObjectID = Nan::New<v8::String> ("LinkNetObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceLinked->LinkNetObjectID);
                    Gb2312ToUtf8(pRspQryNetDeviceLinked->LinkNetObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LinkNetObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetObjectID), Local<v8::Value>(LinkNetObjectIDValue));

                    v8::Local<v8::String> LinkNetPortType = Nan::New<v8::String> ("LinkNetPortType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceLinked->LinkNetPortType);
                    Gb2312ToUtf8(pRspQryNetDeviceLinked->LinkNetPortType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LinkNetPortTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetPortType), Local<v8::Value>(LinkNetPortTypeValue));

                    v8::Local<v8::String> LinkSource = Nan::New<v8::String> ("LinkSource").ToLocalChecked();
                    v8::Local<v8::Integer> LinkSourceValue = Nan::New<v8::Integer> (pRspQryNetDeviceLinked->LinkSource);
                    pRspQryNetDeviceLinkedJS->Set(Local<v8::Value> (LinkSource), Local<v8::Value>(LinkSourceValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetDeviceLinked) { 
                    params[0] = Local<v8::Value>(pRspQryNetDeviceLinkedJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetDeviceLinked) { 
                delete pRspQryNetDeviceLinked;
                pRspQryNetDeviceLinked = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetDeviceLinkedTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDeviceLinkedTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetDeviceLinkedTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetDeviceLinkedTopic_mutex);

    int ioUserNumb = g_RtnNetDeviceLinkedTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetDeviceLinkedTopic_IOUser_vec.begin();
        it != g_RtnNetDeviceLinkedTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetDeviceLinkedTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetDeviceLinkedTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetDeviceLinkedTopic_Data_map[*it].front());
            g_RtnNetDeviceLinkedTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetDeviceLinkedTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetDeviceLinkedTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetDeviceLinkedTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetDeviceLinkedTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetDeviceLinkedTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDeviceLinkedTopic").ToLocalChecked());
            CShfeFtdcRtnNetDeviceLinkedField* pRtnNetDeviceLinked = (CShfeFtdcRtnNetDeviceLinkedField*)(paramArray[1]);
            if (OnRtnNetDeviceLinkedTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetDeviceLinkedTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetDeviceLinkedJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetDeviceLinked) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->OperationType);
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->ID);
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> NetDeviceID = Nan::New<v8::String> ("NetDeviceID").ToLocalChecked();
                    v8::Local<v8::Integer> NetDeviceIDValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->NetDeviceID);
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (NetDeviceID), Local<v8::Value>(NetDeviceIDValue));

                    v8::Local<v8::String> NetPortID = Nan::New<v8::String> ("NetPortID").ToLocalChecked();
                    v8::Local<v8::Integer> NetPortIDValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->NetPortID);
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (NetPortID), Local<v8::Value>(NetPortIDValue));

                    v8::Local<v8::String> NetObjectID = Nan::New<v8::String> ("NetObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDeviceLinked->NetObjectID);
                    Gb2312ToUtf8(pRtnNetDeviceLinked->NetObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NetObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (NetObjectID), Local<v8::Value>(NetObjectIDValue));

                    v8::Local<v8::String> NetPortType = Nan::New<v8::String> ("NetPortType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDeviceLinked->NetPortType);
                    Gb2312ToUtf8(pRtnNetDeviceLinked->NetPortType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NetPortTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (NetPortType), Local<v8::Value>(NetPortTypeValue));

                    v8::Local<v8::String> LinkNetDeviceID = Nan::New<v8::String> ("LinkNetDeviceID").ToLocalChecked();
                    v8::Local<v8::Integer> LinkNetDeviceIDValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->LinkNetDeviceID);
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetDeviceID), Local<v8::Value>(LinkNetDeviceIDValue));

                    v8::Local<v8::String> LinkNetPortID = Nan::New<v8::String> ("LinkNetPortID").ToLocalChecked();
                    v8::Local<v8::Integer> LinkNetPortIDValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->LinkNetPortID);
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetPortID), Local<v8::Value>(LinkNetPortIDValue));

                    v8::Local<v8::String> LinkNetObjectID = Nan::New<v8::String> ("LinkNetObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDeviceLinked->LinkNetObjectID);
                    Gb2312ToUtf8(pRtnNetDeviceLinked->LinkNetObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LinkNetObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetObjectID), Local<v8::Value>(LinkNetObjectIDValue));

                    v8::Local<v8::String> LinkNetPortType = Nan::New<v8::String> ("LinkNetPortType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDeviceLinked->LinkNetPortType);
                    Gb2312ToUtf8(pRtnNetDeviceLinked->LinkNetPortType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LinkNetPortTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (LinkNetPortType), Local<v8::Value>(LinkNetPortTypeValue));

                    v8::Local<v8::String> LinkSource = Nan::New<v8::String> ("LinkSource").ToLocalChecked();
                    v8::Local<v8::Integer> LinkSourceValue = Nan::New<v8::Integer> (pRtnNetDeviceLinked->LinkSource);
                    pRtnNetDeviceLinkedJS->Set(Local<v8::Value> (LinkSource), Local<v8::Value>(LinkSourceValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetDeviceLinked) { 
                    params[0] = Local<v8::Value>(pRtnNetDeviceLinkedJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetDeviceLinked) { 
                delete pRtnNetDeviceLinked;
                pRtnNetDeviceLinked = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetDeviceLinkedTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeUserLoginStatTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTradeUserLoginStatTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTradeUserLoginStatTopic_mutex);

    int ioUserNumb = g_RspQryTradeUserLoginStatTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTradeUserLoginStatTopic_IOUser_vec.begin();
        it != g_RspQryTradeUserLoginStatTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTradeUserLoginStatTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTradeUserLoginStatTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTradeUserLoginStatTopic_Data_map[*it].front());
            g_RspQryTradeUserLoginStatTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTradeUserLoginStatTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTradeUserLoginStatTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTradeUserLoginStatTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTradeUserLoginStatTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTradeUserLoginStatTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeUserLoginStatTopic").ToLocalChecked());
            CShfeFtdcRspQryTradeUserLoginStatField* pRspQryTradeUserLoginStat = (CShfeFtdcRspQryTradeUserLoginStatField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTradeUserLoginStatTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTradeUserLoginStatTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTradeUserLoginStatJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTradeUserLoginStat) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginStat->MonDate);
                    Gb2312ToUtf8(pRspQryTradeUserLoginStat->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginStat->MonTime);
                    Gb2312ToUtf8(pRspQryTradeUserLoginStat->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginStat->ObjectID);
                    Gb2312ToUtf8(pRspQryTradeUserLoginStat->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginStat->IPAddress);
                    Gb2312ToUtf8(pRspQryTradeUserLoginStat->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginStat->ParticipantID);
                    Gb2312ToUtf8(pRspQryTradeUserLoginStat->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginStat->UserID);
                    Gb2312ToUtf8(pRspQryTradeUserLoginStat->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> FrontId = Nan::New<v8::String> ("FrontId").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeUserLoginStat->FrontId);
                    Gb2312ToUtf8(pRspQryTradeUserLoginStat->FrontId, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FrontIdValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeUserLoginStatJS->Set(Local<v8::Value> (FrontId), Local<v8::Value>(FrontIdValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTradeUserLoginStat) { 
                    params[0] = Local<v8::Value>(pRspQryTradeUserLoginStatJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTradeUserLoginStat) { 
                delete pRspQryTradeUserLoginStat;
                pRspQryTradeUserLoginStat = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTradeUserLoginStatTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeFrontOrderRttStatTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTradeFrontOrderRttStatTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTradeFrontOrderRttStatTopic_mutex);

    int ioUserNumb = g_RspQryTradeFrontOrderRttStatTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTradeFrontOrderRttStatTopic_IOUser_vec.begin();
        it != g_RspQryTradeFrontOrderRttStatTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTradeFrontOrderRttStatTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTradeFrontOrderRttStatTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTradeFrontOrderRttStatTopic_Data_map[*it].front());
            g_RspQryTradeFrontOrderRttStatTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTradeFrontOrderRttStatTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTradeFrontOrderRttStatTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTradeFrontOrderRttStatTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTradeFrontOrderRttStatTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTradeFrontOrderRttStatTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeFrontOrderRttStatTopic").ToLocalChecked());
            CShfeFtdcRspQryTradeFrontOrderRttStatField* pRspQryTradeFrontOrderRttStat = (CShfeFtdcRspQryTradeFrontOrderRttStatField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTradeFrontOrderRttStatTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTradeFrontOrderRttStatTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTradeFrontOrderRttStatJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTradeFrontOrderRttStat) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeFrontOrderRttStat->MonDate);
                    Gb2312ToUtf8(pRspQryTradeFrontOrderRttStat->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeFrontOrderRttStat->MonTime);
                    Gb2312ToUtf8(pRspQryTradeFrontOrderRttStat->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeFrontOrderRttStat->ObjectID);
                    Gb2312ToUtf8(pRspQryTradeFrontOrderRttStat->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> OrderCount = Nan::New<v8::String> ("OrderCount").ToLocalChecked();
                    v8::Local<v8::Number> OrderCountValue = Nan::New<v8::Number> (pRspQryTradeFrontOrderRttStat->OrderCount);
                    pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderCount), Local<v8::Value>(OrderCountValue));

                    v8::Local<v8::String> OrderRttSum = Nan::New<v8::String> ("OrderRttSum").ToLocalChecked();
                    v8::Local<v8::Number> OrderRttSumValue = Nan::New<v8::Number> (pRspQryTradeFrontOrderRttStat->OrderRttSum);
                    pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttSum), Local<v8::Value>(OrderRttSumValue));

                    v8::Local<v8::String> OrderMaxRtt = Nan::New<v8::String> ("OrderMaxRtt").ToLocalChecked();
                    v8::Local<v8::Integer> OrderMaxRttValue = Nan::New<v8::Integer> (pRspQryTradeFrontOrderRttStat->OrderMaxRtt);
                    pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderMaxRtt), Local<v8::Value>(OrderMaxRttValue));

                    v8::Local<v8::String> OrderMinRtt = Nan::New<v8::String> ("OrderMinRtt").ToLocalChecked();
                    v8::Local<v8::Integer> OrderMinRttValue = Nan::New<v8::Integer> (pRspQryTradeFrontOrderRttStat->OrderMinRtt);
                    pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderMinRtt), Local<v8::Value>(OrderMinRttValue));

                    v8::Local<v8::String> OrderRttSqu = Nan::New<v8::String> ("OrderRttSqu").ToLocalChecked();
                    v8::Local<v8::Integer> OrderRttSquValue = Nan::New<v8::Integer> (pRspQryTradeFrontOrderRttStat->OrderRttSqu);
                    pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttSqu), Local<v8::Value>(OrderRttSquValue));

                    v8::Local<v8::String> OrderRttCutDistrib = Nan::New<v8::String> ("OrderRttCutDistrib").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeFrontOrderRttStat->OrderRttCutDistrib);
                    Gb2312ToUtf8(pRspQryTradeFrontOrderRttStat->OrderRttCutDistrib, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderRttCutDistribValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttCutDistrib), Local<v8::Value>(OrderRttCutDistribValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTradeFrontOrderRttStat) { 
                    params[0] = Local<v8::Value>(pRspQryTradeFrontOrderRttStatJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTradeFrontOrderRttStat) { 
                delete pRspQryTradeFrontOrderRttStat;
                pRspQryTradeFrontOrderRttStat = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTradeFrontOrderRttStatTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTradeFrontOrderRttStatTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnTradeFrontOrderRttStatTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnTradeFrontOrderRttStatTopic_mutex);

    int ioUserNumb = g_RtnTradeFrontOrderRttStatTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnTradeFrontOrderRttStatTopic_IOUser_vec.begin();
        it != g_RtnTradeFrontOrderRttStatTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnTradeFrontOrderRttStatTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnTradeFrontOrderRttStatTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnTradeFrontOrderRttStatTopic_Data_map[*it].front());
            g_RtnTradeFrontOrderRttStatTopic_Data_map[*it].pop();
        }
    }
    g_RtnTradeFrontOrderRttStatTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnTradeFrontOrderRttStatTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnTradeFrontOrderRttStatTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnTradeFrontOrderRttStatTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnTradeFrontOrderRttStatTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnTradeFrontOrderRttStatTopic").ToLocalChecked());
            CShfeFtdcRtnTradeFrontOrderRttStatField* pRtnTradeFrontOrderRttStat = (CShfeFtdcRtnTradeFrontOrderRttStatField*)(paramArray[1]);
            if (OnRtnTradeFrontOrderRttStatTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnTradeFrontOrderRttStatTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnTradeFrontOrderRttStatJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnTradeFrontOrderRttStat) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeFrontOrderRttStat->MonDate);
                    Gb2312ToUtf8(pRtnTradeFrontOrderRttStat->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeFrontOrderRttStat->MonTime);
                    Gb2312ToUtf8(pRtnTradeFrontOrderRttStat->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeFrontOrderRttStat->ObjectID);
                    Gb2312ToUtf8(pRtnTradeFrontOrderRttStat->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> OrderCount = Nan::New<v8::String> ("OrderCount").ToLocalChecked();
                    v8::Local<v8::Number> OrderCountValue = Nan::New<v8::Number> (pRtnTradeFrontOrderRttStat->OrderCount);
                    pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderCount), Local<v8::Value>(OrderCountValue));

                    v8::Local<v8::String> OrderRttSum = Nan::New<v8::String> ("OrderRttSum").ToLocalChecked();
                    v8::Local<v8::Number> OrderRttSumValue = Nan::New<v8::Number> (pRtnTradeFrontOrderRttStat->OrderRttSum);
                    pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttSum), Local<v8::Value>(OrderRttSumValue));

                    v8::Local<v8::String> OrderMaxRtt = Nan::New<v8::String> ("OrderMaxRtt").ToLocalChecked();
                    v8::Local<v8::Integer> OrderMaxRttValue = Nan::New<v8::Integer> (pRtnTradeFrontOrderRttStat->OrderMaxRtt);
                    pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderMaxRtt), Local<v8::Value>(OrderMaxRttValue));

                    v8::Local<v8::String> OrderMinRtt = Nan::New<v8::String> ("OrderMinRtt").ToLocalChecked();
                    v8::Local<v8::Integer> OrderMinRttValue = Nan::New<v8::Integer> (pRtnTradeFrontOrderRttStat->OrderMinRtt);
                    pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderMinRtt), Local<v8::Value>(OrderMinRttValue));

                    v8::Local<v8::String> OrderRttSqu = Nan::New<v8::String> ("OrderRttSqu").ToLocalChecked();
                    v8::Local<v8::Integer> OrderRttSquValue = Nan::New<v8::Integer> (pRtnTradeFrontOrderRttStat->OrderRttSqu);
                    pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttSqu), Local<v8::Value>(OrderRttSquValue));

                    v8::Local<v8::String> OrderRttCutDistrib = Nan::New<v8::String> ("OrderRttCutDistrib").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeFrontOrderRttStat->OrderRttCutDistrib);
                    Gb2312ToUtf8(pRtnTradeFrontOrderRttStat->OrderRttCutDistrib, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderRttCutDistribValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value> (OrderRttCutDistrib), Local<v8::Value>(OrderRttCutDistribValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnTradeFrontOrderRttStat) { 
                    params[0] = Local<v8::Value>(pRtnTradeFrontOrderRttStatJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnTradeFrontOrderRttStat) { 
                delete pRtnTradeFrontOrderRttStat;
                pRtnTradeFrontOrderRttStat = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnTradeFrontOrderRttStatTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryParticTradeOrderStatesTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryParticTradeOrderStatesTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryParticTradeOrderStatesTopic_mutex);

    int ioUserNumb = g_RspQryParticTradeOrderStatesTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryParticTradeOrderStatesTopic_IOUser_vec.begin();
        it != g_RspQryParticTradeOrderStatesTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryParticTradeOrderStatesTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryParticTradeOrderStatesTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryParticTradeOrderStatesTopic_Data_map[*it].front());
            g_RspQryParticTradeOrderStatesTopic_Data_map[*it].pop();
        }
    }
    g_RspQryParticTradeOrderStatesTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryParticTradeOrderStatesTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryParticTradeOrderStatesTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryParticTradeOrderStatesTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryParticTradeOrderStatesTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryParticTradeOrderStatesTopic").ToLocalChecked());
            CShfeFtdcRspQryParticTradeOrderStatesField* pRspQryParticTradeOrderStates = (CShfeFtdcRspQryParticTradeOrderStatesField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryParticTradeOrderStatesTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryParticTradeOrderStatesTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryParticTradeOrderStatesJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryParticTradeOrderStates) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticTradeOrderStates->ParticipantID);
                    Gb2312ToUtf8(pRspQryParticTradeOrderStates->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticTradeOrderStates->UserID);
                    Gb2312ToUtf8(pRspQryParticTradeOrderStates->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticTradeOrderStates->MonDate);
                    Gb2312ToUtf8(pRspQryParticTradeOrderStates->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryParticTradeOrderStates->MonTime);
                    Gb2312ToUtf8(pRspQryParticTradeOrderStates->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> StaticWidth = Nan::New<v8::String> ("StaticWidth").ToLocalChecked();
                    v8::Local<v8::Integer> StaticWidthValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->StaticWidth);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (StaticWidth), Local<v8::Value>(StaticWidthValue));

                    v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                    v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->FrontID);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                    v8::Local<v8::String> OrderCount = Nan::New<v8::String> ("OrderCount").ToLocalChecked();
                    v8::Local<v8::Integer> OrderCountValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->OrderCount);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (OrderCount), Local<v8::Value>(OrderCountValue));

                    v8::Local<v8::String> CancleCount = Nan::New<v8::String> ("CancleCount").ToLocalChecked();
                    v8::Local<v8::Integer> CancleCountValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->CancleCount);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (CancleCount), Local<v8::Value>(CancleCountValue));

                    v8::Local<v8::String> QueryCount = Nan::New<v8::String> ("QueryCount").ToLocalChecked();
                    v8::Local<v8::Integer> QueryCountValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->QueryCount);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (QueryCount), Local<v8::Value>(QueryCountValue));

                    v8::Local<v8::String> TradeCount = Nan::New<v8::String> ("TradeCount").ToLocalChecked();
                    v8::Local<v8::Integer> TradeCountValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->TradeCount);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeCount), Local<v8::Value>(TradeCountValue));

                    v8::Local<v8::String> TradeMoney = Nan::New<v8::String> ("TradeMoney").ToLocalChecked();
                    v8::Local<v8::Integer> TradeMoneyValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->TradeMoney);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeMoney), Local<v8::Value>(TradeMoneyValue));

                    v8::Local<v8::String> OrderCntMax = Nan::New<v8::String> ("OrderCntMax").ToLocalChecked();
                    v8::Local<v8::Integer> OrderCntMaxValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->OrderCntMax);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (OrderCntMax), Local<v8::Value>(OrderCntMaxValue));

                    v8::Local<v8::String> CancleCntMax = Nan::New<v8::String> ("CancleCntMax").ToLocalChecked();
                    v8::Local<v8::Integer> CancleCntMaxValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->CancleCntMax);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (CancleCntMax), Local<v8::Value>(CancleCntMaxValue));

                    v8::Local<v8::String> QueryCntMax = Nan::New<v8::String> ("QueryCntMax").ToLocalChecked();
                    v8::Local<v8::Integer> QueryCntMaxValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->QueryCntMax);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (QueryCntMax), Local<v8::Value>(QueryCntMaxValue));

                    v8::Local<v8::String> TradeCntMax = Nan::New<v8::String> ("TradeCntMax").ToLocalChecked();
                    v8::Local<v8::Integer> TradeCntMaxValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->TradeCntMax);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeCntMax), Local<v8::Value>(TradeCntMaxValue));

                    v8::Local<v8::String> TradeMoneyMax = Nan::New<v8::String> ("TradeMoneyMax").ToLocalChecked();
                    v8::Local<v8::Integer> TradeMoneyMaxValue = Nan::New<v8::Integer> (pRspQryParticTradeOrderStates->TradeMoneyMax);
                    pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeMoneyMax), Local<v8::Value>(TradeMoneyMaxValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryParticTradeOrderStates) { 
                    params[0] = Local<v8::Value>(pRspQryParticTradeOrderStatesJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryParticTradeOrderStates) { 
                delete pRspQryParticTradeOrderStates;
                pRspQryParticTradeOrderStates = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryParticTradeOrderStatesTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnParticTradeOrderStatesTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnParticTradeOrderStatesTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnParticTradeOrderStatesTopic_mutex);

    int ioUserNumb = g_RtnParticTradeOrderStatesTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnParticTradeOrderStatesTopic_IOUser_vec.begin();
        it != g_RtnParticTradeOrderStatesTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnParticTradeOrderStatesTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnParticTradeOrderStatesTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnParticTradeOrderStatesTopic_Data_map[*it].front());
            g_RtnParticTradeOrderStatesTopic_Data_map[*it].pop();
        }
    }
    g_RtnParticTradeOrderStatesTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnParticTradeOrderStatesTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnParticTradeOrderStatesTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnParticTradeOrderStatesTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnParticTradeOrderStatesTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnParticTradeOrderStatesTopic").ToLocalChecked());
            CShfeFtdcRtnParticTradeOrderStatesField* pRtnParticTradeOrderStates = (CShfeFtdcRtnParticTradeOrderStatesField*)(paramArray[1]);
            if (OnRtnParticTradeOrderStatesTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnParticTradeOrderStatesTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnParticTradeOrderStatesJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnParticTradeOrderStates) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ParticipantID = Nan::New<v8::String> ("ParticipantID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticTradeOrderStates->ParticipantID);
                    Gb2312ToUtf8(pRtnParticTradeOrderStates->ParticipantID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (ParticipantID), Local<v8::Value>(ParticipantIDValue));

                    v8::Local<v8::String> UserID = Nan::New<v8::String> ("UserID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticTradeOrderStates->UserID);
                    Gb2312ToUtf8(pRtnParticTradeOrderStates->UserID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (UserID), Local<v8::Value>(UserIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticTradeOrderStates->MonDate);
                    Gb2312ToUtf8(pRtnParticTradeOrderStates->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnParticTradeOrderStates->MonTime);
                    Gb2312ToUtf8(pRtnParticTradeOrderStates->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> StaticWidth = Nan::New<v8::String> ("StaticWidth").ToLocalChecked();
                    v8::Local<v8::Integer> StaticWidthValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->StaticWidth);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (StaticWidth), Local<v8::Value>(StaticWidthValue));

                    v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                    v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->FrontID);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                    v8::Local<v8::String> OrderCount = Nan::New<v8::String> ("OrderCount").ToLocalChecked();
                    v8::Local<v8::Integer> OrderCountValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->OrderCount);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (OrderCount), Local<v8::Value>(OrderCountValue));

                    v8::Local<v8::String> CancleCount = Nan::New<v8::String> ("CancleCount").ToLocalChecked();
                    v8::Local<v8::Integer> CancleCountValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->CancleCount);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (CancleCount), Local<v8::Value>(CancleCountValue));

                    v8::Local<v8::String> QueryCount = Nan::New<v8::String> ("QueryCount").ToLocalChecked();
                    v8::Local<v8::Integer> QueryCountValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->QueryCount);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (QueryCount), Local<v8::Value>(QueryCountValue));

                    v8::Local<v8::String> TradeCount = Nan::New<v8::String> ("TradeCount").ToLocalChecked();
                    v8::Local<v8::Integer> TradeCountValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->TradeCount);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeCount), Local<v8::Value>(TradeCountValue));

                    v8::Local<v8::String> TradeMoney = Nan::New<v8::String> ("TradeMoney").ToLocalChecked();
                    v8::Local<v8::Integer> TradeMoneyValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->TradeMoney);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeMoney), Local<v8::Value>(TradeMoneyValue));

                    v8::Local<v8::String> OrderCntMax = Nan::New<v8::String> ("OrderCntMax").ToLocalChecked();
                    v8::Local<v8::Integer> OrderCntMaxValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->OrderCntMax);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (OrderCntMax), Local<v8::Value>(OrderCntMaxValue));

                    v8::Local<v8::String> CancleCntMax = Nan::New<v8::String> ("CancleCntMax").ToLocalChecked();
                    v8::Local<v8::Integer> CancleCntMaxValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->CancleCntMax);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (CancleCntMax), Local<v8::Value>(CancleCntMaxValue));

                    v8::Local<v8::String> QueryCntMax = Nan::New<v8::String> ("QueryCntMax").ToLocalChecked();
                    v8::Local<v8::Integer> QueryCntMaxValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->QueryCntMax);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (QueryCntMax), Local<v8::Value>(QueryCntMaxValue));

                    v8::Local<v8::String> TradeCntMax = Nan::New<v8::String> ("TradeCntMax").ToLocalChecked();
                    v8::Local<v8::Integer> TradeCntMaxValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->TradeCntMax);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeCntMax), Local<v8::Value>(TradeCntMaxValue));

                    v8::Local<v8::String> TradeMoneyMax = Nan::New<v8::String> ("TradeMoneyMax").ToLocalChecked();
                    v8::Local<v8::Integer> TradeMoneyMaxValue = Nan::New<v8::Integer> (pRtnParticTradeOrderStates->TradeMoneyMax);
                    pRtnParticTradeOrderStatesJS->Set(Local<v8::Value> (TradeMoneyMax), Local<v8::Value>(TradeMoneyMaxValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnParticTradeOrderStates) { 
                    params[0] = Local<v8::Value>(pRtnParticTradeOrderStatesJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnParticTradeOrderStates) { 
                delete pRtnParticTradeOrderStates;
                pRtnParticTradeOrderStates = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnParticTradeOrderStatesTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryRouterInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryRouterInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryRouterInfoTopic_mutex);

    int ioUserNumb = g_RspQryRouterInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryRouterInfoTopic_IOUser_vec.begin();
        it != g_RspQryRouterInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryRouterInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryRouterInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryRouterInfoTopic_Data_map[*it].front());
            g_RspQryRouterInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryRouterInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryRouterInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryRouterInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryRouterInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryRouterInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryRouterInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryRouterInfoField* pRspQryRouterInfo = (CShfeFtdcRspQryRouterInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryRouterInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryRouterInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryRouterInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryRouterInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryRouterInfo->HostName);
                    Gb2312ToUtf8(pRspQryRouterInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryRouterInfo->MonDate);
                    Gb2312ToUtf8(pRspQryRouterInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryRouterInfo->MonTime);
                    Gb2312ToUtf8(pRspQryRouterInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Dev = Nan::New<v8::String> ("Dev").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryRouterInfo->Dev);
                    Gb2312ToUtf8(pRspQryRouterInfo->Dev, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DevValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (Dev), Local<v8::Value>(DevValue));

                    v8::Local<v8::String> Destination = Nan::New<v8::String> ("Destination").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryRouterInfo->Destination);
                    Gb2312ToUtf8(pRspQryRouterInfo->Destination, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DestinationValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (Destination), Local<v8::Value>(DestinationValue));

                    v8::Local<v8::String> Gateway = Nan::New<v8::String> ("Gateway").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryRouterInfo->Gateway);
                    Gb2312ToUtf8(pRspQryRouterInfo->Gateway, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GatewayValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (Gateway), Local<v8::Value>(GatewayValue));

                    v8::Local<v8::String> Mask = Nan::New<v8::String> ("Mask").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryRouterInfo->Mask);
                    Gb2312ToUtf8(pRspQryRouterInfo->Mask, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaskValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (Mask), Local<v8::Value>(MaskValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryRouterInfo->Flag);
                    Gb2312ToUtf8(pRspQryRouterInfo->Flag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                    v8::Local<v8::String> RefCnt = Nan::New<v8::String> ("RefCnt").ToLocalChecked();
                    v8::Local<v8::Integer> RefCntValue = Nan::New<v8::Integer> (pRspQryRouterInfo->RefCnt);
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (RefCnt), Local<v8::Value>(RefCntValue));

                    v8::Local<v8::String> Use = Nan::New<v8::String> ("Use").ToLocalChecked();
                    v8::Local<v8::Integer> UseValue = Nan::New<v8::Integer> (pRspQryRouterInfo->Use);
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (Use), Local<v8::Value>(UseValue));

                    v8::Local<v8::String> Metric = Nan::New<v8::String> ("Metric").ToLocalChecked();
                    v8::Local<v8::Integer> MetricValue = Nan::New<v8::Integer> (pRspQryRouterInfo->Metric);
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (Metric), Local<v8::Value>(MetricValue));

                    v8::Local<v8::String> Mtu = Nan::New<v8::String> ("Mtu").ToLocalChecked();
                    v8::Local<v8::Integer> MtuValue = Nan::New<v8::Integer> (pRspQryRouterInfo->Mtu);
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (Mtu), Local<v8::Value>(MtuValue));

                    v8::Local<v8::String> Win = Nan::New<v8::String> ("Win").ToLocalChecked();
                    v8::Local<v8::Integer> WinValue = Nan::New<v8::Integer> (pRspQryRouterInfo->Win);
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (Win), Local<v8::Value>(WinValue));

                    v8::Local<v8::String> Rtt = Nan::New<v8::String> ("Rtt").ToLocalChecked();
                    v8::Local<v8::Integer> RttValue = Nan::New<v8::Integer> (pRspQryRouterInfo->Rtt);
                    pRspQryRouterInfoJS->Set(Local<v8::Value> (Rtt), Local<v8::Value>(RttValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryRouterInfo) { 
                    params[0] = Local<v8::Value>(pRspQryRouterInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryRouterInfo) { 
                delete pRspQryRouterInfo;
                pRspQryRouterInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryRouterInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnRouterInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnRouterInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnRouterInfoTopic_mutex);

    int ioUserNumb = g_RtnRouterInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnRouterInfoTopic_IOUser_vec.begin();
        it != g_RtnRouterInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnRouterInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnRouterInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnRouterInfoTopic_Data_map[*it].front());
            g_RtnRouterInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnRouterInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnRouterInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnRouterInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnRouterInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnRouterInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnRouterInfoTopic").ToLocalChecked());
            CShfeFtdcRtnRouterInfoField* pRtnRouterInfo = (CShfeFtdcRtnRouterInfoField*)(paramArray[1]);
            if (OnRtnRouterInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnRouterInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnRouterInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnRouterInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnRouterInfo->HostName);
                    Gb2312ToUtf8(pRtnRouterInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnRouterInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnRouterInfo->MonDate);
                    Gb2312ToUtf8(pRtnRouterInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnRouterInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnRouterInfo->MonTime);
                    Gb2312ToUtf8(pRtnRouterInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnRouterInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Dev = Nan::New<v8::String> ("Dev").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnRouterInfo->Dev);
                    Gb2312ToUtf8(pRtnRouterInfo->Dev, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DevValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnRouterInfoJS->Set(Local<v8::Value> (Dev), Local<v8::Value>(DevValue));

                    v8::Local<v8::String> Destination = Nan::New<v8::String> ("Destination").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnRouterInfo->Destination);
                    Gb2312ToUtf8(pRtnRouterInfo->Destination, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DestinationValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnRouterInfoJS->Set(Local<v8::Value> (Destination), Local<v8::Value>(DestinationValue));

                    v8::Local<v8::String> Gateway = Nan::New<v8::String> ("Gateway").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnRouterInfo->Gateway);
                    Gb2312ToUtf8(pRtnRouterInfo->Gateway, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GatewayValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnRouterInfoJS->Set(Local<v8::Value> (Gateway), Local<v8::Value>(GatewayValue));

                    v8::Local<v8::String> Mask = Nan::New<v8::String> ("Mask").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnRouterInfo->Mask);
                    Gb2312ToUtf8(pRtnRouterInfo->Mask, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaskValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnRouterInfoJS->Set(Local<v8::Value> (Mask), Local<v8::Value>(MaskValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnRouterInfo->Flag);
                    Gb2312ToUtf8(pRtnRouterInfo->Flag, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FlagValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnRouterInfoJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                    v8::Local<v8::String> RefCnt = Nan::New<v8::String> ("RefCnt").ToLocalChecked();
                    v8::Local<v8::Integer> RefCntValue = Nan::New<v8::Integer> (pRtnRouterInfo->RefCnt);
                    pRtnRouterInfoJS->Set(Local<v8::Value> (RefCnt), Local<v8::Value>(RefCntValue));

                    v8::Local<v8::String> Use = Nan::New<v8::String> ("Use").ToLocalChecked();
                    v8::Local<v8::Integer> UseValue = Nan::New<v8::Integer> (pRtnRouterInfo->Use);
                    pRtnRouterInfoJS->Set(Local<v8::Value> (Use), Local<v8::Value>(UseValue));

                    v8::Local<v8::String> Metric = Nan::New<v8::String> ("Metric").ToLocalChecked();
                    v8::Local<v8::Integer> MetricValue = Nan::New<v8::Integer> (pRtnRouterInfo->Metric);
                    pRtnRouterInfoJS->Set(Local<v8::Value> (Metric), Local<v8::Value>(MetricValue));

                    v8::Local<v8::String> Mtu = Nan::New<v8::String> ("Mtu").ToLocalChecked();
                    v8::Local<v8::Integer> MtuValue = Nan::New<v8::Integer> (pRtnRouterInfo->Mtu);
                    pRtnRouterInfoJS->Set(Local<v8::Value> (Mtu), Local<v8::Value>(MtuValue));

                    v8::Local<v8::String> Win = Nan::New<v8::String> ("Win").ToLocalChecked();
                    v8::Local<v8::Integer> WinValue = Nan::New<v8::Integer> (pRtnRouterInfo->Win);
                    pRtnRouterInfoJS->Set(Local<v8::Value> (Win), Local<v8::Value>(WinValue));

                    v8::Local<v8::String> Rtt = Nan::New<v8::String> ("Rtt").ToLocalChecked();
                    v8::Local<v8::Integer> RttValue = Nan::New<v8::Integer> (pRtnRouterInfo->Rtt);
                    pRtnRouterInfoJS->Set(Local<v8::Value> (Rtt), Local<v8::Value>(RttValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnRouterInfo) { 
                    params[0] = Local<v8::Value>(pRtnRouterInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnRouterInfo) { 
                delete pRtnRouterInfo;
                pRtnRouterInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnRouterInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryDiskIOTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryDiskIOTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryDiskIOTopic_mutex);

    int ioUserNumb = g_RspQryDiskIOTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryDiskIOTopic_IOUser_vec.begin();
        it != g_RspQryDiskIOTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryDiskIOTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryDiskIOTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryDiskIOTopic_Data_map[*it].front());
            g_RspQryDiskIOTopic_Data_map[*it].pop();
        }
    }
    g_RspQryDiskIOTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryDiskIOTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryDiskIOTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryDiskIOTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryDiskIOTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryDiskIOTopic").ToLocalChecked());
            CShfeFtdcRspQryDiskIOField* pRspQryDiskIO = (CShfeFtdcRspQryDiskIOField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryDiskIOTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryDiskIOTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryDiskIOJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryDiskIO) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDiskIO->HostName);
                    Gb2312ToUtf8(pRspQryDiskIO->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDiskIOJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDiskIO->MonDate);
                    Gb2312ToUtf8(pRspQryDiskIO->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDiskIOJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDiskIO->MonTime);
                    Gb2312ToUtf8(pRspQryDiskIO->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDiskIOJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> PartName = Nan::New<v8::String> ("PartName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryDiskIO->PartName);
                    Gb2312ToUtf8(pRspQryDiskIO->PartName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PartNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryDiskIOJS->Set(Local<v8::Value> (PartName), Local<v8::Value>(PartNameValue));

                    v8::Local<v8::String> ReadMerges = Nan::New<v8::String> ("ReadMerges").ToLocalChecked();
                    v8::Local<v8::Number> ReadMergesValue = Nan::New<v8::Number> (pRspQryDiskIO->ReadMerges);
                    pRspQryDiskIOJS->Set(Local<v8::Value> (ReadMerges), Local<v8::Value>(ReadMergesValue));

                    v8::Local<v8::String> WriteMerges = Nan::New<v8::String> ("WriteMerges").ToLocalChecked();
                    v8::Local<v8::Number> WriteMergesValue = Nan::New<v8::Number> (pRspQryDiskIO->WriteMerges);
                    pRspQryDiskIOJS->Set(Local<v8::Value> (WriteMerges), Local<v8::Value>(WriteMergesValue));

                    v8::Local<v8::String> ReadIOs = Nan::New<v8::String> ("ReadIOs").ToLocalChecked();
                    v8::Local<v8::Number> ReadIOsValue = Nan::New<v8::Number> (pRspQryDiskIO->ReadIOs);
                    pRspQryDiskIOJS->Set(Local<v8::Value> (ReadIOs), Local<v8::Value>(ReadIOsValue));

                    v8::Local<v8::String> WriteIOs = Nan::New<v8::String> ("WriteIOs").ToLocalChecked();
                    v8::Local<v8::Number> WriteIOsValue = Nan::New<v8::Number> (pRspQryDiskIO->WriteIOs);
                    pRspQryDiskIOJS->Set(Local<v8::Value> (WriteIOs), Local<v8::Value>(WriteIOsValue));

                    v8::Local<v8::String> ReadKBs = Nan::New<v8::String> ("ReadKBs").ToLocalChecked();
                    v8::Local<v8::Number> ReadKBsValue = Nan::New<v8::Number> (pRspQryDiskIO->ReadKBs);
                    pRspQryDiskIOJS->Set(Local<v8::Value> (ReadKBs), Local<v8::Value>(ReadKBsValue));

                    v8::Local<v8::String> WriteKBs = Nan::New<v8::String> ("WriteKBs").ToLocalChecked();
                    v8::Local<v8::Number> WriteKBsValue = Nan::New<v8::Number> (pRspQryDiskIO->WriteKBs);
                    pRspQryDiskIOJS->Set(Local<v8::Value> (WriteKBs), Local<v8::Value>(WriteKBsValue));

                    v8::Local<v8::String> SizeVal = Nan::New<v8::String> ("SizeVal").ToLocalChecked();
                    v8::Local<v8::Number> SizeValValue = Nan::New<v8::Number> (pRspQryDiskIO->SizeVal);
                    pRspQryDiskIOJS->Set(Local<v8::Value> (SizeVal), Local<v8::Value>(SizeValValue));

                    v8::Local<v8::String> QueueVal = Nan::New<v8::String> ("QueueVal").ToLocalChecked();
                    v8::Local<v8::Number> QueueValValue = Nan::New<v8::Number> (pRspQryDiskIO->QueueVal);
                    pRspQryDiskIOJS->Set(Local<v8::Value> (QueueVal), Local<v8::Value>(QueueValValue));

                    v8::Local<v8::String> Svc_t = Nan::New<v8::String> ("Svc_t").ToLocalChecked();
                    v8::Local<v8::Number> Svc_tValue = Nan::New<v8::Number> (pRspQryDiskIO->Svc_t);
                    pRspQryDiskIOJS->Set(Local<v8::Value> (Svc_t), Local<v8::Value>(Svc_tValue));

                    v8::Local<v8::String> Busy = Nan::New<v8::String> ("Busy").ToLocalChecked();
                    v8::Local<v8::Number> BusyValue = Nan::New<v8::Number> (pRspQryDiskIO->Busy);
                    pRspQryDiskIOJS->Set(Local<v8::Value> (Busy), Local<v8::Value>(BusyValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryDiskIO) { 
                    params[0] = Local<v8::Value>(pRspQryDiskIOJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryDiskIO) { 
                delete pRspQryDiskIO;
                pRspQryDiskIO = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryDiskIOTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnDiskIOTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnDiskIOTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnDiskIOTopic_mutex);

    int ioUserNumb = g_RtnDiskIOTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnDiskIOTopic_IOUser_vec.begin();
        it != g_RtnDiskIOTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnDiskIOTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnDiskIOTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnDiskIOTopic_Data_map[*it].front());
            g_RtnDiskIOTopic_Data_map[*it].pop();
        }
    }
    g_RtnDiskIOTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnDiskIOTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnDiskIOTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnDiskIOTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnDiskIOTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnDiskIOTopic").ToLocalChecked());
            CShfeFtdcRtnDiskIOField* pRtnDiskIO = (CShfeFtdcRtnDiskIOField*)(paramArray[1]);
            if (OnRtnDiskIOTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnDiskIOTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnDiskIOJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnDiskIO) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDiskIO->HostName);
                    Gb2312ToUtf8(pRtnDiskIO->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDiskIOJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDiskIO->MonDate);
                    Gb2312ToUtf8(pRtnDiskIO->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDiskIOJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDiskIO->MonTime);
                    Gb2312ToUtf8(pRtnDiskIO->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDiskIOJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> PartName = Nan::New<v8::String> ("PartName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnDiskIO->PartName);
                    Gb2312ToUtf8(pRtnDiskIO->PartName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PartNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnDiskIOJS->Set(Local<v8::Value> (PartName), Local<v8::Value>(PartNameValue));

                    v8::Local<v8::String> ReadMerges = Nan::New<v8::String> ("ReadMerges").ToLocalChecked();
                    v8::Local<v8::Number> ReadMergesValue = Nan::New<v8::Number> (pRtnDiskIO->ReadMerges);
                    pRtnDiskIOJS->Set(Local<v8::Value> (ReadMerges), Local<v8::Value>(ReadMergesValue));

                    v8::Local<v8::String> WriteMerges = Nan::New<v8::String> ("WriteMerges").ToLocalChecked();
                    v8::Local<v8::Number> WriteMergesValue = Nan::New<v8::Number> (pRtnDiskIO->WriteMerges);
                    pRtnDiskIOJS->Set(Local<v8::Value> (WriteMerges), Local<v8::Value>(WriteMergesValue));

                    v8::Local<v8::String> ReadIOs = Nan::New<v8::String> ("ReadIOs").ToLocalChecked();
                    v8::Local<v8::Number> ReadIOsValue = Nan::New<v8::Number> (pRtnDiskIO->ReadIOs);
                    pRtnDiskIOJS->Set(Local<v8::Value> (ReadIOs), Local<v8::Value>(ReadIOsValue));

                    v8::Local<v8::String> WriteIOs = Nan::New<v8::String> ("WriteIOs").ToLocalChecked();
                    v8::Local<v8::Number> WriteIOsValue = Nan::New<v8::Number> (pRtnDiskIO->WriteIOs);
                    pRtnDiskIOJS->Set(Local<v8::Value> (WriteIOs), Local<v8::Value>(WriteIOsValue));

                    v8::Local<v8::String> ReadKBs = Nan::New<v8::String> ("ReadKBs").ToLocalChecked();
                    v8::Local<v8::Number> ReadKBsValue = Nan::New<v8::Number> (pRtnDiskIO->ReadKBs);
                    pRtnDiskIOJS->Set(Local<v8::Value> (ReadKBs), Local<v8::Value>(ReadKBsValue));

                    v8::Local<v8::String> WriteKBs = Nan::New<v8::String> ("WriteKBs").ToLocalChecked();
                    v8::Local<v8::Number> WriteKBsValue = Nan::New<v8::Number> (pRtnDiskIO->WriteKBs);
                    pRtnDiskIOJS->Set(Local<v8::Value> (WriteKBs), Local<v8::Value>(WriteKBsValue));

                    v8::Local<v8::String> SizeVal = Nan::New<v8::String> ("SizeVal").ToLocalChecked();
                    v8::Local<v8::Number> SizeValValue = Nan::New<v8::Number> (pRtnDiskIO->SizeVal);
                    pRtnDiskIOJS->Set(Local<v8::Value> (SizeVal), Local<v8::Value>(SizeValValue));

                    v8::Local<v8::String> QueueVal = Nan::New<v8::String> ("QueueVal").ToLocalChecked();
                    v8::Local<v8::Number> QueueValValue = Nan::New<v8::Number> (pRtnDiskIO->QueueVal);
                    pRtnDiskIOJS->Set(Local<v8::Value> (QueueVal), Local<v8::Value>(QueueValValue));

                    v8::Local<v8::String> Svc_t = Nan::New<v8::String> ("Svc_t").ToLocalChecked();
                    v8::Local<v8::Number> Svc_tValue = Nan::New<v8::Number> (pRtnDiskIO->Svc_t);
                    pRtnDiskIOJS->Set(Local<v8::Value> (Svc_t), Local<v8::Value>(Svc_tValue));

                    v8::Local<v8::String> Busy = Nan::New<v8::String> ("Busy").ToLocalChecked();
                    v8::Local<v8::Number> BusyValue = Nan::New<v8::Number> (pRtnDiskIO->Busy);
                    pRtnDiskIOJS->Set(Local<v8::Value> (Busy), Local<v8::Value>(BusyValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnDiskIO) { 
                    params[0] = Local<v8::Value>(pRtnDiskIOJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnDiskIO) { 
                delete pRtnDiskIO;
                pRtnDiskIO = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnDiskIOTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryStatInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryStatInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryStatInfoTopic_mutex);

    int ioUserNumb = g_RspQryStatInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryStatInfoTopic_IOUser_vec.begin();
        it != g_RspQryStatInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryStatInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryStatInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryStatInfoTopic_Data_map[*it].front());
            g_RspQryStatInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryStatInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryStatInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryStatInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryStatInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryStatInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryStatInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryStatInfoField* pRspQryStatInfo = (CShfeFtdcRspQryStatInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryStatInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryStatInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryStatInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryStatInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryStatInfo->HostName);
                    Gb2312ToUtf8(pRspQryStatInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryStatInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryStatInfo->MonDate);
                    Gb2312ToUtf8(pRspQryStatInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryStatInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryStatInfo->MonTime);
                    Gb2312ToUtf8(pRspQryStatInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryStatInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ProcRun = Nan::New<v8::String> ("ProcRun").ToLocalChecked();
                    v8::Local<v8::Integer> ProcRunValue = Nan::New<v8::Integer> (pRspQryStatInfo->ProcRun);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (ProcRun), Local<v8::Value>(ProcRunValue));

                    v8::Local<v8::String> ProcBlk = Nan::New<v8::String> ("ProcBlk").ToLocalChecked();
                    v8::Local<v8::Integer> ProcBlkValue = Nan::New<v8::Integer> (pRspQryStatInfo->ProcBlk);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (ProcBlk), Local<v8::Value>(ProcBlkValue));

                    v8::Local<v8::String> SwapIn = Nan::New<v8::String> ("SwapIn").ToLocalChecked();
                    v8::Local<v8::Integer> SwapInValue = Nan::New<v8::Integer> (pRspQryStatInfo->SwapIn);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (SwapIn), Local<v8::Value>(SwapInValue));

                    v8::Local<v8::String> SwapOut = Nan::New<v8::String> ("SwapOut").ToLocalChecked();
                    v8::Local<v8::Integer> SwapOutValue = Nan::New<v8::Integer> (pRspQryStatInfo->SwapOut);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (SwapOut), Local<v8::Value>(SwapOutValue));

                    v8::Local<v8::String> BlockIn = Nan::New<v8::String> ("BlockIn").ToLocalChecked();
                    v8::Local<v8::Integer> BlockInValue = Nan::New<v8::Integer> (pRspQryStatInfo->BlockIn);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (BlockIn), Local<v8::Value>(BlockInValue));

                    v8::Local<v8::String> BlockOut = Nan::New<v8::String> ("BlockOut").ToLocalChecked();
                    v8::Local<v8::Integer> BlockOutValue = Nan::New<v8::Integer> (pRspQryStatInfo->BlockOut);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (BlockOut), Local<v8::Value>(BlockOutValue));

                    v8::Local<v8::String> Inter = Nan::New<v8::String> ("Inter").ToLocalChecked();
                    v8::Local<v8::Integer> InterValue = Nan::New<v8::Integer> (pRspQryStatInfo->Inter);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (Inter), Local<v8::Value>(InterValue));

                    v8::Local<v8::String> Context = Nan::New<v8::String> ("Context").ToLocalChecked();
                    v8::Local<v8::Integer> ContextValue = Nan::New<v8::Integer> (pRspQryStatInfo->Context);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (Context), Local<v8::Value>(ContextValue));

                    v8::Local<v8::String> CPUUser = Nan::New<v8::String> ("CPUUser").ToLocalChecked();
                    v8::Local<v8::Number> CPUUserValue = Nan::New<v8::Number> (pRspQryStatInfo->CPUUser);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (CPUUser), Local<v8::Value>(CPUUserValue));

                    v8::Local<v8::String> CPUSys = Nan::New<v8::String> ("CPUSys").ToLocalChecked();
                    v8::Local<v8::Number> CPUSysValue = Nan::New<v8::Number> (pRspQryStatInfo->CPUSys);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (CPUSys), Local<v8::Value>(CPUSysValue));

                    v8::Local<v8::String> CPUIdle = Nan::New<v8::String> ("CPUIdle").ToLocalChecked();
                    v8::Local<v8::Number> CPUIdleValue = Nan::New<v8::Number> (pRspQryStatInfo->CPUIdle);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (CPUIdle), Local<v8::Value>(CPUIdleValue));

                    v8::Local<v8::String> CPUIOWait = Nan::New<v8::String> ("CPUIOWait").ToLocalChecked();
                    v8::Local<v8::Number> CPUIOWaitValue = Nan::New<v8::Number> (pRspQryStatInfo->CPUIOWait);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (CPUIOWait), Local<v8::Value>(CPUIOWaitValue));

                    v8::Local<v8::String> CPUSteal = Nan::New<v8::String> ("CPUSteal").ToLocalChecked();
                    v8::Local<v8::Number> CPUStealValue = Nan::New<v8::Number> (pRspQryStatInfo->CPUSteal);
                    pRspQryStatInfoJS->Set(Local<v8::Value> (CPUSteal), Local<v8::Value>(CPUStealValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryStatInfo) { 
                    params[0] = Local<v8::Value>(pRspQryStatInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryStatInfo) { 
                delete pRspQryStatInfo;
                pRspQryStatInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryStatInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnStatInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnStatInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnStatInfoTopic_mutex);

    int ioUserNumb = g_RtnStatInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnStatInfoTopic_IOUser_vec.begin();
        it != g_RtnStatInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnStatInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnStatInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnStatInfoTopic_Data_map[*it].front());
            g_RtnStatInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnStatInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnStatInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnStatInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnStatInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnStatInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnStatInfoTopic").ToLocalChecked());
            CShfeFtdcRtnStatInfoField* pRtnStatInfo = (CShfeFtdcRtnStatInfoField*)(paramArray[1]);
            if (OnRtnStatInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnStatInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnStatInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnStatInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnStatInfo->HostName);
                    Gb2312ToUtf8(pRtnStatInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnStatInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnStatInfo->MonDate);
                    Gb2312ToUtf8(pRtnStatInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnStatInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnStatInfo->MonTime);
                    Gb2312ToUtf8(pRtnStatInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnStatInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> ProcRun = Nan::New<v8::String> ("ProcRun").ToLocalChecked();
                    v8::Local<v8::Integer> ProcRunValue = Nan::New<v8::Integer> (pRtnStatInfo->ProcRun);
                    pRtnStatInfoJS->Set(Local<v8::Value> (ProcRun), Local<v8::Value>(ProcRunValue));

                    v8::Local<v8::String> ProcBlk = Nan::New<v8::String> ("ProcBlk").ToLocalChecked();
                    v8::Local<v8::Integer> ProcBlkValue = Nan::New<v8::Integer> (pRtnStatInfo->ProcBlk);
                    pRtnStatInfoJS->Set(Local<v8::Value> (ProcBlk), Local<v8::Value>(ProcBlkValue));

                    v8::Local<v8::String> SwapIn = Nan::New<v8::String> ("SwapIn").ToLocalChecked();
                    v8::Local<v8::Integer> SwapInValue = Nan::New<v8::Integer> (pRtnStatInfo->SwapIn);
                    pRtnStatInfoJS->Set(Local<v8::Value> (SwapIn), Local<v8::Value>(SwapInValue));

                    v8::Local<v8::String> SwapOut = Nan::New<v8::String> ("SwapOut").ToLocalChecked();
                    v8::Local<v8::Integer> SwapOutValue = Nan::New<v8::Integer> (pRtnStatInfo->SwapOut);
                    pRtnStatInfoJS->Set(Local<v8::Value> (SwapOut), Local<v8::Value>(SwapOutValue));

                    v8::Local<v8::String> BlockIn = Nan::New<v8::String> ("BlockIn").ToLocalChecked();
                    v8::Local<v8::Integer> BlockInValue = Nan::New<v8::Integer> (pRtnStatInfo->BlockIn);
                    pRtnStatInfoJS->Set(Local<v8::Value> (BlockIn), Local<v8::Value>(BlockInValue));

                    v8::Local<v8::String> BlockOut = Nan::New<v8::String> ("BlockOut").ToLocalChecked();
                    v8::Local<v8::Integer> BlockOutValue = Nan::New<v8::Integer> (pRtnStatInfo->BlockOut);
                    pRtnStatInfoJS->Set(Local<v8::Value> (BlockOut), Local<v8::Value>(BlockOutValue));

                    v8::Local<v8::String> Inter = Nan::New<v8::String> ("Inter").ToLocalChecked();
                    v8::Local<v8::Integer> InterValue = Nan::New<v8::Integer> (pRtnStatInfo->Inter);
                    pRtnStatInfoJS->Set(Local<v8::Value> (Inter), Local<v8::Value>(InterValue));

                    v8::Local<v8::String> Context = Nan::New<v8::String> ("Context").ToLocalChecked();
                    v8::Local<v8::Integer> ContextValue = Nan::New<v8::Integer> (pRtnStatInfo->Context);
                    pRtnStatInfoJS->Set(Local<v8::Value> (Context), Local<v8::Value>(ContextValue));

                    v8::Local<v8::String> CPUUser = Nan::New<v8::String> ("CPUUser").ToLocalChecked();
                    v8::Local<v8::Number> CPUUserValue = Nan::New<v8::Number> (pRtnStatInfo->CPUUser);
                    pRtnStatInfoJS->Set(Local<v8::Value> (CPUUser), Local<v8::Value>(CPUUserValue));

                    v8::Local<v8::String> CPUSys = Nan::New<v8::String> ("CPUSys").ToLocalChecked();
                    v8::Local<v8::Number> CPUSysValue = Nan::New<v8::Number> (pRtnStatInfo->CPUSys);
                    pRtnStatInfoJS->Set(Local<v8::Value> (CPUSys), Local<v8::Value>(CPUSysValue));

                    v8::Local<v8::String> CPUIdle = Nan::New<v8::String> ("CPUIdle").ToLocalChecked();
                    v8::Local<v8::Number> CPUIdleValue = Nan::New<v8::Number> (pRtnStatInfo->CPUIdle);
                    pRtnStatInfoJS->Set(Local<v8::Value> (CPUIdle), Local<v8::Value>(CPUIdleValue));

                    v8::Local<v8::String> CPUIOWait = Nan::New<v8::String> ("CPUIOWait").ToLocalChecked();
                    v8::Local<v8::Number> CPUIOWaitValue = Nan::New<v8::Number> (pRtnStatInfo->CPUIOWait);
                    pRtnStatInfoJS->Set(Local<v8::Value> (CPUIOWait), Local<v8::Value>(CPUIOWaitValue));

                    v8::Local<v8::String> CPUSteal = Nan::New<v8::String> ("CPUSteal").ToLocalChecked();
                    v8::Local<v8::Number> CPUStealValue = Nan::New<v8::Number> (pRtnStatInfo->CPUSteal);
                    pRtnStatInfoJS->Set(Local<v8::Value> (CPUSteal), Local<v8::Value>(CPUStealValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnStatInfo) { 
                    params[0] = Local<v8::Value>(pRtnStatInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnStatInfo) { 
                delete pRtnStatInfo;
                pRtnStatInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnStatInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryTradeOrderRttCutLineTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryTradeOrderRttCutLineTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryTradeOrderRttCutLineTopic_mutex);

    int ioUserNumb = g_RspQryTradeOrderRttCutLineTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryTradeOrderRttCutLineTopic_IOUser_vec.begin();
        it != g_RspQryTradeOrderRttCutLineTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryTradeOrderRttCutLineTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryTradeOrderRttCutLineTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryTradeOrderRttCutLineTopic_Data_map[*it].front());
            g_RspQryTradeOrderRttCutLineTopic_Data_map[*it].pop();
        }
    }
    g_RspQryTradeOrderRttCutLineTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryTradeOrderRttCutLineTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryTradeOrderRttCutLineTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryTradeOrderRttCutLineTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryTradeOrderRttCutLineTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeOrderRttCutLineTopic").ToLocalChecked());
            CShfeFtdcRspQryTradeOrderRttCutLineField* pRspQryTradeOrderRttCutLine = (CShfeFtdcRspQryTradeOrderRttCutLineField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryTradeOrderRttCutLineTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryTradeOrderRttCutLineTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryTradeOrderRttCutLineJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryTradeOrderRttCutLine) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeOrderRttCutLine->MonDate);
                    Gb2312ToUtf8(pRspQryTradeOrderRttCutLine->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeOrderRttCutLine->MonTime);
                    Gb2312ToUtf8(pRspQryTradeOrderRttCutLine->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeOrderRttCutLine->UserName);
                    Gb2312ToUtf8(pRspQryTradeOrderRttCutLine->UserName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                    v8::Local<v8::String> OrderRttCutLine = Nan::New<v8::String> ("OrderRttCutLine").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryTradeOrderRttCutLine->OrderRttCutLine);
                    Gb2312ToUtf8(pRspQryTradeOrderRttCutLine->OrderRttCutLine, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderRttCutLineValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value> (OrderRttCutLine), Local<v8::Value>(OrderRttCutLineValue));

                    v8::Local<v8::String> OrderRttWidth = Nan::New<v8::String> ("OrderRttWidth").ToLocalChecked();
                    v8::Local<v8::Integer> OrderRttWidthValue = Nan::New<v8::Integer> (pRspQryTradeOrderRttCutLine->OrderRttWidth);
                    pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value> (OrderRttWidth), Local<v8::Value>(OrderRttWidthValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryTradeOrderRttCutLine) { 
                    params[0] = Local<v8::Value>(pRspQryTradeOrderRttCutLineJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryTradeOrderRttCutLine) { 
                delete pRspQryTradeOrderRttCutLine;
                pRspQryTradeOrderRttCutLine = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryTradeOrderRttCutLineTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnTradeOrderRttCutLineTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnTradeOrderRttCutLineTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnTradeOrderRttCutLineTopic_mutex);

    int ioUserNumb = g_RtnTradeOrderRttCutLineTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnTradeOrderRttCutLineTopic_IOUser_vec.begin();
        it != g_RtnTradeOrderRttCutLineTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnTradeOrderRttCutLineTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnTradeOrderRttCutLineTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnTradeOrderRttCutLineTopic_Data_map[*it].front());
            g_RtnTradeOrderRttCutLineTopic_Data_map[*it].pop();
        }
    }
    g_RtnTradeOrderRttCutLineTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnTradeOrderRttCutLineTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnTradeOrderRttCutLineTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnTradeOrderRttCutLineTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnTradeOrderRttCutLineTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnTradeOrderRttCutLineTopic").ToLocalChecked());
            CShfeFtdcRtnTradeOrderRttCutLineField* pRtnTradeOrderRttCutLine = (CShfeFtdcRtnTradeOrderRttCutLineField*)(paramArray[1]);
            if (OnRtnTradeOrderRttCutLineTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnTradeOrderRttCutLineTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnTradeOrderRttCutLineJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnTradeOrderRttCutLine) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeOrderRttCutLine->MonDate);
                    Gb2312ToUtf8(pRtnTradeOrderRttCutLine->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeOrderRttCutLineJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> OrderRttCutLine = Nan::New<v8::String> ("OrderRttCutLine").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnTradeOrderRttCutLine->OrderRttCutLine);
                    Gb2312ToUtf8(pRtnTradeOrderRttCutLine->OrderRttCutLine, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OrderRttCutLineValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnTradeOrderRttCutLineJS->Set(Local<v8::Value> (OrderRttCutLine), Local<v8::Value>(OrderRttCutLineValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnTradeOrderRttCutLine) { 
                    params[0] = Local<v8::Value>(pRtnTradeOrderRttCutLineJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnTradeOrderRttCutLine) { 
                delete pRtnTradeOrderRttCutLine;
                pRtnTradeOrderRttCutLine = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnTradeOrderRttCutLineTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryClientInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryClientInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryClientInfoTopic_mutex);

    int ioUserNumb = g_RspQryClientInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryClientInfoTopic_IOUser_vec.begin();
        it != g_RspQryClientInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryClientInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryClientInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryClientInfoTopic_Data_map[*it].front());
            g_RspQryClientInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryClientInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryClientInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryClientInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryClientInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryClientInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryClientInfoField* pRspQryClientInfo = (CShfeFtdcRspQryClientInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryClientInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryClientInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryClientInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryClientInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientInfo->ClientID);
                    Gb2312ToUtf8(pRspQryClientInfo->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientInfoJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientInfo->ClientName);
                    Gb2312ToUtf8(pRspQryClientInfo->ClientName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientInfoJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                    v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientInfo->IdentifiedCardType);
                    Gb2312ToUtf8(pRspQryClientInfo->IdentifiedCardType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientInfoJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                    v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryClientInfo->IdentifiedCardNo);
                    Gb2312ToUtf8(pRspQryClientInfo->IdentifiedCardNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryClientInfoJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRspQryClientInfo->TradingRole);
                    pRspQryClientInfoJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                    v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRspQryClientInfo->ClientType);
                    pRspQryClientInfoJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRspQryClientInfo->IsActive);
                    pRspQryClientInfoJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryClientInfo->OperationType);
                    pRspQryClientInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryClientInfo) { 
                    params[0] = Local<v8::Value>(pRspQryClientInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryClientInfo) { 
                delete pRspQryClientInfo;
                pRspQryClientInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryClientInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnClientInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnClientInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnClientInfoTopic_mutex);

    int ioUserNumb = g_RtnClientInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnClientInfoTopic_IOUser_vec.begin();
        it != g_RtnClientInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnClientInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnClientInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnClientInfoTopic_Data_map[*it].front());
            g_RtnClientInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnClientInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnClientInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnClientInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnClientInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnClientInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnClientInfoTopic").ToLocalChecked());
            CShfeFtdcRtnClientInfoField* pRtnClientInfo = (CShfeFtdcRtnClientInfoField*)(paramArray[1]);
            if (OnRtnClientInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnClientInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnClientInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnClientInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> ClientID = Nan::New<v8::String> ("ClientID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientInfo->ClientID);
                    Gb2312ToUtf8(pRtnClientInfo->ClientID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientInfoJS->Set(Local<v8::Value> (ClientID), Local<v8::Value>(ClientIDValue));

                    v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientInfo->ClientName);
                    Gb2312ToUtf8(pRtnClientInfo->ClientName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientInfoJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                    v8::Local<v8::String> IdentifiedCardType = Nan::New<v8::String> ("IdentifiedCardType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientInfo->IdentifiedCardType);
                    Gb2312ToUtf8(pRtnClientInfo->IdentifiedCardType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientInfoJS->Set(Local<v8::Value> (IdentifiedCardType), Local<v8::Value>(IdentifiedCardTypeValue));

                    v8::Local<v8::String> IdentifiedCardNo = Nan::New<v8::String> ("IdentifiedCardNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnClientInfo->IdentifiedCardNo);
                    Gb2312ToUtf8(pRtnClientInfo->IdentifiedCardNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IdentifiedCardNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnClientInfoJS->Set(Local<v8::Value> (IdentifiedCardNo), Local<v8::Value>(IdentifiedCardNoValue));

                    v8::Local<v8::String> TradingRole = Nan::New<v8::String> ("TradingRole").ToLocalChecked();
                    v8::Local<v8::Integer> TradingRoleValue = Nan::New<v8::Integer> (pRtnClientInfo->TradingRole);
                    pRtnClientInfoJS->Set(Local<v8::Value> (TradingRole), Local<v8::Value>(TradingRoleValue));

                    v8::Local<v8::String> ClientType = Nan::New<v8::String> ("ClientType").ToLocalChecked();
                    v8::Local<v8::Integer> ClientTypeValue = Nan::New<v8::Integer> (pRtnClientInfo->ClientType);
                    pRtnClientInfoJS->Set(Local<v8::Value> (ClientType), Local<v8::Value>(ClientTypeValue));

                    v8::Local<v8::String> IsActive = Nan::New<v8::String> ("IsActive").ToLocalChecked();
                    v8::Local<v8::Integer> IsActiveValue = Nan::New<v8::Integer> (pRtnClientInfo->IsActive);
                    pRtnClientInfoJS->Set(Local<v8::Value> (IsActive), Local<v8::Value>(IsActiveValue));

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnClientInfo->OperationType);
                    pRtnClientInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnClientInfo) { 
                    params[0] = Local<v8::Value>(pRtnClientInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnClientInfo) { 
                delete pRtnClientInfo;
                pRtnClientInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnClientInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryEventDescriptionTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryEventDescriptionTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryEventDescriptionTopic_mutex);

    int ioUserNumb = g_RspQryEventDescriptionTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryEventDescriptionTopic_IOUser_vec.begin();
        it != g_RspQryEventDescriptionTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryEventDescriptionTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryEventDescriptionTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryEventDescriptionTopic_Data_map[*it].front());
            g_RspQryEventDescriptionTopic_Data_map[*it].pop();
        }
    }
    g_RspQryEventDescriptionTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryEventDescriptionTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryEventDescriptionTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryEventDescriptionTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryEventDescriptionTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryEventDescriptionTopic").ToLocalChecked());
            CShfeFtdcRspQryEventDescriptionField* pRspQryEventDescription = (CShfeFtdcRspQryEventDescriptionField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryEventDescriptionTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryEventDescriptionTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryEventDescriptionJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryEventDescription) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> EventDesID = Nan::New<v8::String> ("EventDesID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryEventDescription->EventDesID);
                    Gb2312ToUtf8(pRspQryEventDescription->EventDesID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDesIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryEventDescriptionJS->Set(Local<v8::Value> (EventDesID), Local<v8::Value>(EventDesIDValue));

                    v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryEventDescription->UserName);
                    Gb2312ToUtf8(pRspQryEventDescription->UserName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryEventDescriptionJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryEventDescription->MonDate);
                    Gb2312ToUtf8(pRspQryEventDescription->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryEventDescriptionJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryEventDescription->MonTime);
                    Gb2312ToUtf8(pRspQryEventDescription->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryEventDescriptionJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryEventDescription->EventDes);
                    Gb2312ToUtf8(pRspQryEventDescription->EventDes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryEventDescriptionJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryEventDescription) { 
                    params[0] = Local<v8::Value>(pRspQryEventDescriptionJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryEventDescription) { 
                delete pRspQryEventDescription;
                pRspQryEventDescription = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryEventDescriptionTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnEventDescriptionTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnEventDescriptionTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnEventDescriptionTopic_mutex);

    int ioUserNumb = g_RtnEventDescriptionTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnEventDescriptionTopic_IOUser_vec.begin();
        it != g_RtnEventDescriptionTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnEventDescriptionTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnEventDescriptionTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnEventDescriptionTopic_Data_map[*it].front());
            g_RtnEventDescriptionTopic_Data_map[*it].pop();
        }
    }
    g_RtnEventDescriptionTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnEventDescriptionTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnEventDescriptionTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnEventDescriptionTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnEventDescriptionTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnEventDescriptionTopic").ToLocalChecked());
            CShfeFtdcRtnEventDescriptionField* pRtnEventDescription = (CShfeFtdcRtnEventDescriptionField*)(paramArray[1]);
            if (OnRtnEventDescriptionTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnEventDescriptionTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnEventDescriptionJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnEventDescription) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> EventDesID = Nan::New<v8::String> ("EventDesID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnEventDescription->EventDesID);
                    Gb2312ToUtf8(pRtnEventDescription->EventDesID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDesIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnEventDescriptionJS->Set(Local<v8::Value> (EventDesID), Local<v8::Value>(EventDesIDValue));

                    v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnEventDescription->UserName);
                    Gb2312ToUtf8(pRtnEventDescription->UserName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnEventDescriptionJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnEventDescription->MonDate);
                    Gb2312ToUtf8(pRtnEventDescription->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnEventDescriptionJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnEventDescription->MonTime);
                    Gb2312ToUtf8(pRtnEventDescription->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnEventDescriptionJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> EventDes = Nan::New<v8::String> ("EventDes").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnEventDescription->EventDes);
                    Gb2312ToUtf8(pRtnEventDescription->EventDes, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventDesValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnEventDescriptionJS->Set(Local<v8::Value> (EventDes), Local<v8::Value>(EventDesValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnEventDescription) { 
                    params[0] = Local<v8::Value>(pRtnEventDescriptionJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnEventDescription) { 
                delete pRtnEventDescription;
                pRtnEventDescription = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnEventDescriptionTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFrontUniqueIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryFrontUniqueIDTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryFrontUniqueIDTopic_mutex);

    int ioUserNumb = g_RspQryFrontUniqueIDTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryFrontUniqueIDTopic_IOUser_vec.begin();
        it != g_RspQryFrontUniqueIDTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryFrontUniqueIDTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryFrontUniqueIDTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryFrontUniqueIDTopic_Data_map[*it].front());
            g_RspQryFrontUniqueIDTopic_Data_map[*it].pop();
        }
    }
    g_RspQryFrontUniqueIDTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryFrontUniqueIDTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryFrontUniqueIDTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryFrontUniqueIDTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryFrontUniqueIDTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryFrontUniqueIDTopic").ToLocalChecked());
            CShfeFtdcRspQryFrontUniqueIDField* pRspQryFrontUniqueID = (CShfeFtdcRspQryFrontUniqueIDField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryFrontUniqueIDTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryFrontUniqueIDTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryFrontUniqueIDJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryFrontUniqueID) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                    v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRspQryFrontUniqueID->FrontID);
                    pRspQryFrontUniqueIDJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                    v8::Local<v8::String> FrontName = Nan::New<v8::String> ("FrontName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFrontUniqueID->FrontName);
                    Gb2312ToUtf8(pRspQryFrontUniqueID->FrontName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FrontNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFrontUniqueIDJS->Set(Local<v8::Value> (FrontName), Local<v8::Value>(FrontNameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryFrontUniqueID) { 
                    params[0] = Local<v8::Value>(pRspQryFrontUniqueIDJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryFrontUniqueID) { 
                delete pRspQryFrontUniqueID;
                pRspQryFrontUniqueID = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryFrontUniqueIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFrontUniqueIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnFrontUniqueIDTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnFrontUniqueIDTopic_mutex);

    int ioUserNumb = g_RtnFrontUniqueIDTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnFrontUniqueIDTopic_IOUser_vec.begin();
        it != g_RtnFrontUniqueIDTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnFrontUniqueIDTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnFrontUniqueIDTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnFrontUniqueIDTopic_Data_map[*it].front());
            g_RtnFrontUniqueIDTopic_Data_map[*it].pop();
        }
    }
    g_RtnFrontUniqueIDTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnFrontUniqueIDTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnFrontUniqueIDTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnFrontUniqueIDTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnFrontUniqueIDTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnFrontUniqueIDTopic").ToLocalChecked());
            CShfeFtdcRtnFrontUniqueIDField* pRtnFrontUniqueID = (CShfeFtdcRtnFrontUniqueIDField*)(paramArray[1]);
            if (OnRtnFrontUniqueIDTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnFrontUniqueIDTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnFrontUniqueIDJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnFrontUniqueID) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> FrontID = Nan::New<v8::String> ("FrontID").ToLocalChecked();
                    v8::Local<v8::Integer> FrontIDValue = Nan::New<v8::Integer> (pRtnFrontUniqueID->FrontID);
                    pRtnFrontUniqueIDJS->Set(Local<v8::Value> (FrontID), Local<v8::Value>(FrontIDValue));

                    v8::Local<v8::String> FrontName = Nan::New<v8::String> ("FrontName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFrontUniqueID->FrontName);
                    Gb2312ToUtf8(pRtnFrontUniqueID->FrontName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FrontNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFrontUniqueIDJS->Set(Local<v8::Value> (FrontName), Local<v8::Value>(FrontNameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnFrontUniqueID) { 
                    params[0] = Local<v8::Value>(pRtnFrontUniqueIDJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnFrontUniqueID) { 
                delete pRtnFrontUniqueID;
                pRtnFrontUniqueID = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnFrontUniqueIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPartyLinkAddrChangeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetPartyLinkAddrChangeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetPartyLinkAddrChangeTopic_mutex);

    int ioUserNumb = g_RspQryNetPartyLinkAddrChangeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetPartyLinkAddrChangeTopic_IOUser_vec.begin();
        it != g_RspQryNetPartyLinkAddrChangeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetPartyLinkAddrChangeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetPartyLinkAddrChangeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetPartyLinkAddrChangeTopic_Data_map[*it].front());
            g_RspQryNetPartyLinkAddrChangeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetPartyLinkAddrChangeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetPartyLinkAddrChangeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetPartyLinkAddrChangeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetPartyLinkAddrChangeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetPartyLinkAddrChangeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPartyLinkAddrChangeTopic").ToLocalChecked());
            CShfeFtdcRspQryNetPartyLinkAddrChangeField* pRspQryNetPartyLinkAddrChange = (CShfeFtdcRspQryNetPartyLinkAddrChangeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetPartyLinkAddrChangeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetPartyLinkAddrChangeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetPartyLinkAddrChangeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetPartyLinkAddrChange) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkAddrChange->OperationType);
                    pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkAddrChange->ID);
                    pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> RelationID = Nan::New<v8::String> ("RelationID").ToLocalChecked();
                    v8::Local<v8::Integer> RelationIDValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkAddrChange->RelationID);
                    pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (RelationID), Local<v8::Value>(RelationIDValue));

                    v8::Local<v8::String> OLDADDRESS = Nan::New<v8::String> ("OLDADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkAddrChange->OLDADDRESS);
                    Gb2312ToUtf8(pRspQryNetPartyLinkAddrChange->OLDADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OLDADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OLDADDRESS), Local<v8::Value>(OLDADDRESSValue));

                    v8::Local<v8::String> NEWADDRESS = Nan::New<v8::String> ("NEWADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkAddrChange->NEWADDRESS);
                    Gb2312ToUtf8(pRspQryNetPartyLinkAddrChange->NEWADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NEWADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (NEWADDRESS), Local<v8::Value>(NEWADDRESSValue));

                    v8::Local<v8::String> OPERATOR = Nan::New<v8::String> ("OPERATOR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkAddrChange->OPERATOR);
                    Gb2312ToUtf8(pRspQryNetPartyLinkAddrChange->OPERATOR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OPERATORValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OPERATOR), Local<v8::Value>(OPERATORValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkAddrChange->MonDate);
                    Gb2312ToUtf8(pRspQryNetPartyLinkAddrChange->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkAddrChange->MonTime);
                    Gb2312ToUtf8(pRspQryNetPartyLinkAddrChange->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetPartyLinkAddrChange) { 
                    params[0] = Local<v8::Value>(pRspQryNetPartyLinkAddrChangeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetPartyLinkAddrChange) { 
                delete pRspQryNetPartyLinkAddrChange;
                pRspQryNetPartyLinkAddrChange = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetPartyLinkAddrChangeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPartyLinkAddrChangeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetPartyLinkAddrChangeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetPartyLinkAddrChangeTopic_mutex);

    int ioUserNumb = g_RtnNetPartyLinkAddrChangeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetPartyLinkAddrChangeTopic_IOUser_vec.begin();
        it != g_RtnNetPartyLinkAddrChangeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetPartyLinkAddrChangeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetPartyLinkAddrChangeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetPartyLinkAddrChangeTopic_Data_map[*it].front());
            g_RtnNetPartyLinkAddrChangeTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetPartyLinkAddrChangeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetPartyLinkAddrChangeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetPartyLinkAddrChangeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetPartyLinkAddrChangeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetPartyLinkAddrChangeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPartyLinkAddrChangeTopic").ToLocalChecked());
            CShfeFtdcRtnNetPartyLinkAddrChangeField* pRtnNetPartyLinkAddrChange = (CShfeFtdcRtnNetPartyLinkAddrChangeField*)(paramArray[1]);
            if (OnRtnNetPartyLinkAddrChangeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetPartyLinkAddrChangeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetPartyLinkAddrChangeJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetPartyLinkAddrChange) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPartyLinkAddrChange->OperationType);
                    pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPartyLinkAddrChange->ID);
                    pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> RelationID = Nan::New<v8::String> ("RelationID").ToLocalChecked();
                    v8::Local<v8::Integer> RelationIDValue = Nan::New<v8::Integer> (pRtnNetPartyLinkAddrChange->RelationID);
                    pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (RelationID), Local<v8::Value>(RelationIDValue));

                    v8::Local<v8::String> OLDADDRESS = Nan::New<v8::String> ("OLDADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkAddrChange->OLDADDRESS);
                    Gb2312ToUtf8(pRtnNetPartyLinkAddrChange->OLDADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OLDADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OLDADDRESS), Local<v8::Value>(OLDADDRESSValue));

                    v8::Local<v8::String> NEWADDRESS = Nan::New<v8::String> ("NEWADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkAddrChange->NEWADDRESS);
                    Gb2312ToUtf8(pRtnNetPartyLinkAddrChange->NEWADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NEWADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (NEWADDRESS), Local<v8::Value>(NEWADDRESSValue));

                    v8::Local<v8::String> OPERATOR = Nan::New<v8::String> ("OPERATOR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkAddrChange->OPERATOR);
                    Gb2312ToUtf8(pRtnNetPartyLinkAddrChange->OPERATOR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OPERATORValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (OPERATOR), Local<v8::Value>(OPERATORValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkAddrChange->MonDate);
                    Gb2312ToUtf8(pRtnNetPartyLinkAddrChange->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkAddrChange->MonTime);
                    Gb2312ToUtf8(pRtnNetPartyLinkAddrChange->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetPartyLinkAddrChange) { 
                    params[0] = Local<v8::Value>(pRtnNetPartyLinkAddrChangeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetPartyLinkAddrChange) { 
                delete pRtnNetPartyLinkAddrChange;
                pRtnNetPartyLinkAddrChange = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetPartyLinkAddrChangeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDelPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetDelPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetDelPartyLinkInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetDelPartyLinkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetDelPartyLinkInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetDelPartyLinkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetDelPartyLinkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetDelPartyLinkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetDelPartyLinkInfoTopic_Data_map[*it].front());
            g_RspQryNetDelPartyLinkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetDelPartyLinkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetDelPartyLinkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetDelPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetDelPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetDelPartyLinkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDelPartyLinkInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetDelPartyLinkInfoField* pRspQryNetDelPartyLinkInfo = (CShfeFtdcRspQryNetDelPartyLinkInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetDelPartyLinkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetDelPartyLinkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetDelPartyLinkInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetDelPartyLinkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDelPartyLinkInfo->OperationType);
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDelPartyLinkInfo->ID);
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->MEMBER_NO);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->MEMBER_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                    v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->MEMBER_NAME);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->MEMBER_NAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                    v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->REMOTE_ADDR);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->REMOTE_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                    v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->LOCAL_ADDR);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->LOCAL_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                    v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->ADDRESS);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->ADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                    v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->LINE_STATUS);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->LINE_STATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                    v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->CONTACT);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->CONTACT, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                    v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->TELEPHONE);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->TELEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                    v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->MOBILEPHONE);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->MOBILEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                    v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->EMAIL);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->EMAIL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                    v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->FAX);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->FAX, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FAXValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                    v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->PROVINCE);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->PROVINCE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->DDN_NO);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->IN_MODE);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IN_MODE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                    v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->IP_WAN);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IP_WAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                    v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->IP_LAN);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IP_LAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->IPADDR);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->Interface);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->Interface, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                    v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->INTERFACE_DATE);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->INTERFACE_DATE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                    v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->SOFTWARE);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->SOFTWARE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                    v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->FEE_TYPE);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->FEE_TYPE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                    v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->SERVICEPROVIDER);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->SERVICEPROVIDER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                    v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->IF_ZIYING);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IF_ZIYING, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                    v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->IF_TUOGUAN);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->IF_TUOGUAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                    v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->HASOTHER);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->HASOTHER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                    v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->SEAT_NO);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->SEAT_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                    v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDelPartyLinkInfo->PRO);
                    Gb2312ToUtf8(pRspQryNetDelPartyLinkInfo->PRO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetDelPartyLinkInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetDelPartyLinkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetDelPartyLinkInfo) { 
                delete pRspQryNetDelPartyLinkInfo;
                pRspQryNetDelPartyLinkInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetDelPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDelPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetDelPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetDelPartyLinkInfoTopic_mutex);

    int ioUserNumb = g_RtnNetDelPartyLinkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetDelPartyLinkInfoTopic_IOUser_vec.begin();
        it != g_RtnNetDelPartyLinkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetDelPartyLinkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetDelPartyLinkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetDelPartyLinkInfoTopic_Data_map[*it].front());
            g_RtnNetDelPartyLinkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetDelPartyLinkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetDelPartyLinkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetDelPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetDelPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetDelPartyLinkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDelPartyLinkInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetDelPartyLinkInfoField* pRtnNetDelPartyLinkInfo = (CShfeFtdcRtnNetDelPartyLinkInfoField*)(paramArray[1]);
            if (OnRtnNetDelPartyLinkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetDelPartyLinkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetDelPartyLinkInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetDelPartyLinkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDelPartyLinkInfo->OperationType);
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDelPartyLinkInfo->ID);
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->MEMBER_NO);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->MEMBER_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                    v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->MEMBER_NAME);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->MEMBER_NAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                    v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->REMOTE_ADDR);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->REMOTE_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                    v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->LOCAL_ADDR);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->LOCAL_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                    v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->ADDRESS);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->ADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                    v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->LINE_STATUS);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->LINE_STATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                    v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->CONTACT);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->CONTACT, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                    v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->TELEPHONE);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->TELEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                    v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->MOBILEPHONE);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->MOBILEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                    v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->EMAIL);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->EMAIL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                    v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->FAX);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->FAX, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FAXValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                    v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->PROVINCE);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->PROVINCE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->DDN_NO);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->IN_MODE);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IN_MODE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                    v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->IP_WAN);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IP_WAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                    v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->IP_LAN);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IP_LAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->IPADDR);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->Interface);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->Interface, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                    v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->INTERFACE_DATE);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->INTERFACE_DATE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                    v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->SOFTWARE);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->SOFTWARE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                    v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->FEE_TYPE);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->FEE_TYPE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                    v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->SERVICEPROVIDER);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->SERVICEPROVIDER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                    v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->IF_ZIYING);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IF_ZIYING, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                    v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->IF_TUOGUAN);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->IF_TUOGUAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                    v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->HASOTHER);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->HASOTHER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                    v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->SEAT_NO);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->SEAT_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                    v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDelPartyLinkInfo->PRO);
                    Gb2312ToUtf8(pRtnNetDelPartyLinkInfo->PRO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetDelPartyLinkInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetDelPartyLinkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetDelPartyLinkInfo) { 
                delete pRtnNetDelPartyLinkInfo;
                pRtnNetDelPartyLinkInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetDelPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryPerformanceTopTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryPerformanceTopTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryPerformanceTopTopic_mutex);

    int ioUserNumb = g_RspQryPerformanceTopTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryPerformanceTopTopic_IOUser_vec.begin();
        it != g_RspQryPerformanceTopTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryPerformanceTopTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryPerformanceTopTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryPerformanceTopTopic_Data_map[*it].front());
            g_RspQryPerformanceTopTopic_Data_map[*it].pop();
        }
    }
    g_RspQryPerformanceTopTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryPerformanceTopTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryPerformanceTopTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryPerformanceTopTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryPerformanceTopTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryPerformanceTopTopic").ToLocalChecked());
            CShfeFtdcRspQryPerformanceTopField* pRspQryPerformanceTop = (CShfeFtdcRspQryPerformanceTopField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryPerformanceTopTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryPerformanceTopTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryPerformanceTopJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryPerformanceTop) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->OperationType);
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPerformanceTop->AttrType);
                    Gb2312ToUtf8(pRspQryPerformanceTop->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> NetArea = Nan::New<v8::String> ("NetArea").ToLocalChecked();
                    v8::Local<v8::Integer> NetAreaValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->NetArea);
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (NetArea), Local<v8::Value>(NetAreaValue));

                    v8::Local<v8::String> NetSubArea = Nan::New<v8::String> ("NetSubArea").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPerformanceTop->NetSubArea);
                    Gb2312ToUtf8(pRspQryPerformanceTop->NetSubArea, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NetSubAreaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (NetSubArea), Local<v8::Value>(NetSubAreaValue));

                    v8::Local<v8::String> KeyWord = Nan::New<v8::String> ("KeyWord").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPerformanceTop->KeyWord);
                    Gb2312ToUtf8(pRspQryPerformanceTop->KeyWord, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> KeyWordValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (KeyWord), Local<v8::Value>(KeyWordValue));

                    v8::Local<v8::String> SortValue = Nan::New<v8::String> ("SortValue").ToLocalChecked();
                    v8::Local<v8::Integer> SortValueValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->SortValue);
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (SortValue), Local<v8::Value>(SortValueValue));

                    v8::Local<v8::String> SortType = Nan::New<v8::String> ("SortType").ToLocalChecked();
                    v8::Local<v8::Integer> SortTypeValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->SortType);
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (SortType), Local<v8::Value>(SortTypeValue));

                    v8::Local<v8::String> DuringTimeType = Nan::New<v8::String> ("DuringTimeType").ToLocalChecked();
                    v8::Local<v8::Integer> DuringTimeTypeValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->DuringTimeType);
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (DuringTimeType), Local<v8::Value>(DuringTimeTypeValue));

                    v8::Local<v8::String> DuringTimeValue = Nan::New<v8::String> ("DuringTimeValue").ToLocalChecked();
                    v8::Local<v8::Integer> DuringTimeValueValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->DuringTimeValue);
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (DuringTimeValue), Local<v8::Value>(DuringTimeValueValue));

                    v8::Local<v8::String> TopN = Nan::New<v8::String> ("TopN").ToLocalChecked();
                    v8::Local<v8::Integer> TopNValue = Nan::New<v8::Integer> (pRspQryPerformanceTop->TopN);
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (TopN), Local<v8::Value>(TopNValue));

                    v8::Local<v8::String> TopResult = Nan::New<v8::String> ("TopResult").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryPerformanceTop->TopResult);
                    Gb2312ToUtf8(pRspQryPerformanceTop->TopResult, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TopResultValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryPerformanceTopJS->Set(Local<v8::Value> (TopResult), Local<v8::Value>(TopResultValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryPerformanceTop) { 
                    params[0] = Local<v8::Value>(pRspQryPerformanceTopJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryPerformanceTop) { 
                delete pRspQryPerformanceTop;
                pRspQryPerformanceTop = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryPerformanceTopTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnPerformanceTopTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnPerformanceTopTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnPerformanceTopTopic_mutex);

    int ioUserNumb = g_RtnPerformanceTopTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnPerformanceTopTopic_IOUser_vec.begin();
        it != g_RtnPerformanceTopTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnPerformanceTopTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnPerformanceTopTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnPerformanceTopTopic_Data_map[*it].front());
            g_RtnPerformanceTopTopic_Data_map[*it].pop();
        }
    }
    g_RtnPerformanceTopTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnPerformanceTopTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnPerformanceTopTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnPerformanceTopTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnPerformanceTopTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnPerformanceTopTopic").ToLocalChecked());
            CShfeFtdcRtnPerformanceTopField* pRtnPerformanceTop = (CShfeFtdcRtnPerformanceTopField*)(paramArray[1]);
            if (OnRtnPerformanceTopTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnPerformanceTopTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnPerformanceTopJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnPerformanceTop) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnPerformanceTop->OperationType);
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPerformanceTop->AttrType);
                    Gb2312ToUtf8(pRtnPerformanceTop->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> NetArea = Nan::New<v8::String> ("NetArea").ToLocalChecked();
                    v8::Local<v8::Integer> NetAreaValue = Nan::New<v8::Integer> (pRtnPerformanceTop->NetArea);
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (NetArea), Local<v8::Value>(NetAreaValue));

                    v8::Local<v8::String> NetSubArea = Nan::New<v8::String> ("NetSubArea").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPerformanceTop->NetSubArea);
                    Gb2312ToUtf8(pRtnPerformanceTop->NetSubArea, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NetSubAreaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (NetSubArea), Local<v8::Value>(NetSubAreaValue));

                    v8::Local<v8::String> KeyWord = Nan::New<v8::String> ("KeyWord").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPerformanceTop->KeyWord);
                    Gb2312ToUtf8(pRtnPerformanceTop->KeyWord, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> KeyWordValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (KeyWord), Local<v8::Value>(KeyWordValue));

                    v8::Local<v8::String> SortValue = Nan::New<v8::String> ("SortValue").ToLocalChecked();
                    v8::Local<v8::Integer> SortValueValue = Nan::New<v8::Integer> (pRtnPerformanceTop->SortValue);
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (SortValue), Local<v8::Value>(SortValueValue));

                    v8::Local<v8::String> SortType = Nan::New<v8::String> ("SortType").ToLocalChecked();
                    v8::Local<v8::Integer> SortTypeValue = Nan::New<v8::Integer> (pRtnPerformanceTop->SortType);
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (SortType), Local<v8::Value>(SortTypeValue));

                    v8::Local<v8::String> DuringTimeType = Nan::New<v8::String> ("DuringTimeType").ToLocalChecked();
                    v8::Local<v8::Integer> DuringTimeTypeValue = Nan::New<v8::Integer> (pRtnPerformanceTop->DuringTimeType);
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (DuringTimeType), Local<v8::Value>(DuringTimeTypeValue));

                    v8::Local<v8::String> DuringTimeValue = Nan::New<v8::String> ("DuringTimeValue").ToLocalChecked();
                    v8::Local<v8::Integer> DuringTimeValueValue = Nan::New<v8::Integer> (pRtnPerformanceTop->DuringTimeValue);
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (DuringTimeValue), Local<v8::Value>(DuringTimeValueValue));

                    v8::Local<v8::String> TopN = Nan::New<v8::String> ("TopN").ToLocalChecked();
                    v8::Local<v8::Integer> TopNValue = Nan::New<v8::Integer> (pRtnPerformanceTop->TopN);
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (TopN), Local<v8::Value>(TopNValue));

                    v8::Local<v8::String> TopResult = Nan::New<v8::String> ("TopResult").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnPerformanceTop->TopResult);
                    Gb2312ToUtf8(pRtnPerformanceTop->TopResult, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TopResultValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnPerformanceTopJS->Set(Local<v8::Value> (TopResult), Local<v8::Value>(TopResultValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnPerformanceTop) { 
                    params[0] = Local<v8::Value>(pRtnPerformanceTopJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnPerformanceTop) { 
                delete pRtnPerformanceTop;
                pRtnPerformanceTop = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnPerformanceTopTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryInstrumentStatusTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryInstrumentStatusTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryInstrumentStatusTopic_mutex);

    int ioUserNumb = g_RspQryInstrumentStatusTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryInstrumentStatusTopic_IOUser_vec.begin();
        it != g_RspQryInstrumentStatusTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryInstrumentStatusTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryInstrumentStatusTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryInstrumentStatusTopic_Data_map[*it].front());
            g_RspQryInstrumentStatusTopic_Data_map[*it].pop();
        }
    }
    g_RspQryInstrumentStatusTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryInstrumentStatusTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryInstrumentStatusTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryInstrumentStatusTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryInstrumentStatusTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryInstrumentStatusTopic").ToLocalChecked());
            CShfeFtdcRspQryInstrumentStatusField* pRspQryInstrumentStatus = (CShfeFtdcRspQryInstrumentStatusField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryInstrumentStatusTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryInstrumentStatusTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryInstrumentStatusJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryInstrumentStatus) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstrumentStatus->SettlementGroupID);
                    Gb2312ToUtf8(pRspQryInstrumentStatus->SettlementGroupID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstrumentStatusJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstrumentStatus->InstrumentID);
                    Gb2312ToUtf8(pRspQryInstrumentStatus->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstrumentStatusJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> InstrumentStatus = Nan::New<v8::String> ("InstrumentStatus").ToLocalChecked();
                    v8::Local<v8::Integer> InstrumentStatusValue = Nan::New<v8::Integer> (pRspQryInstrumentStatus->InstrumentStatus);
                    pRspQryInstrumentStatusJS->Set(Local<v8::Value> (InstrumentStatus), Local<v8::Value>(InstrumentStatusValue));

                    v8::Local<v8::String> TradingSegmentSN = Nan::New<v8::String> ("TradingSegmentSN").ToLocalChecked();
                    v8::Local<v8::Integer> TradingSegmentSNValue = Nan::New<v8::Integer> (pRspQryInstrumentStatus->TradingSegmentSN);
                    pRspQryInstrumentStatusJS->Set(Local<v8::Value> (TradingSegmentSN), Local<v8::Value>(TradingSegmentSNValue));

                    v8::Local<v8::String> EnterTime = Nan::New<v8::String> ("EnterTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstrumentStatus->EnterTime);
                    Gb2312ToUtf8(pRspQryInstrumentStatus->EnterTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EnterTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstrumentStatusJS->Set(Local<v8::Value> (EnterTime), Local<v8::Value>(EnterTimeValue));

                    v8::Local<v8::String> EnterReason = Nan::New<v8::String> ("EnterReason").ToLocalChecked();
                    v8::Local<v8::Integer> EnterReasonValue = Nan::New<v8::Integer> (pRspQryInstrumentStatus->EnterReason);
                    pRspQryInstrumentStatusJS->Set(Local<v8::Value> (EnterReason), Local<v8::Value>(EnterReasonValue));

                    v8::Local<v8::String> EnterDate = Nan::New<v8::String> ("EnterDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryInstrumentStatus->EnterDate);
                    Gb2312ToUtf8(pRspQryInstrumentStatus->EnterDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EnterDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryInstrumentStatusJS->Set(Local<v8::Value> (EnterDate), Local<v8::Value>(EnterDateValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryInstrumentStatus) { 
                    params[0] = Local<v8::Value>(pRspQryInstrumentStatusJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryInstrumentStatus) { 
                delete pRspQryInstrumentStatus;
                pRspQryInstrumentStatus = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryInstrumentStatusTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnInstrumentStatusTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnInstrumentStatusTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnInstrumentStatusTopic_mutex);

    int ioUserNumb = g_RtnInstrumentStatusTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnInstrumentStatusTopic_IOUser_vec.begin();
        it != g_RtnInstrumentStatusTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnInstrumentStatusTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnInstrumentStatusTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnInstrumentStatusTopic_Data_map[*it].front());
            g_RtnInstrumentStatusTopic_Data_map[*it].pop();
        }
    }
    g_RtnInstrumentStatusTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnInstrumentStatusTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnInstrumentStatusTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnInstrumentStatusTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnInstrumentStatusTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnInstrumentStatusTopic").ToLocalChecked());
            CShfeFtdcRtnInstrumentStatusField* pRtnInstrumentStatus = (CShfeFtdcRtnInstrumentStatusField*)(paramArray[1]);
            if (OnRtnInstrumentStatusTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnInstrumentStatusTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnInstrumentStatusJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnInstrumentStatus) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstrumentStatus->SettlementGroupID);
                    Gb2312ToUtf8(pRtnInstrumentStatus->SettlementGroupID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstrumentStatusJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstrumentStatus->InstrumentID);
                    Gb2312ToUtf8(pRtnInstrumentStatus->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstrumentStatusJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> InstrumentStatus = Nan::New<v8::String> ("InstrumentStatus").ToLocalChecked();
                    v8::Local<v8::Integer> InstrumentStatusValue = Nan::New<v8::Integer> (pRtnInstrumentStatus->InstrumentStatus);
                    pRtnInstrumentStatusJS->Set(Local<v8::Value> (InstrumentStatus), Local<v8::Value>(InstrumentStatusValue));

                    v8::Local<v8::String> TradingSegmentSN = Nan::New<v8::String> ("TradingSegmentSN").ToLocalChecked();
                    v8::Local<v8::Integer> TradingSegmentSNValue = Nan::New<v8::Integer> (pRtnInstrumentStatus->TradingSegmentSN);
                    pRtnInstrumentStatusJS->Set(Local<v8::Value> (TradingSegmentSN), Local<v8::Value>(TradingSegmentSNValue));

                    v8::Local<v8::String> EnterTime = Nan::New<v8::String> ("EnterTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstrumentStatus->EnterTime);
                    Gb2312ToUtf8(pRtnInstrumentStatus->EnterTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EnterTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstrumentStatusJS->Set(Local<v8::Value> (EnterTime), Local<v8::Value>(EnterTimeValue));

                    v8::Local<v8::String> EnterReason = Nan::New<v8::String> ("EnterReason").ToLocalChecked();
                    v8::Local<v8::Integer> EnterReasonValue = Nan::New<v8::Integer> (pRtnInstrumentStatus->EnterReason);
                    pRtnInstrumentStatusJS->Set(Local<v8::Value> (EnterReason), Local<v8::Value>(EnterReasonValue));

                    v8::Local<v8::String> EnterDate = Nan::New<v8::String> ("EnterDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnInstrumentStatus->EnterDate);
                    Gb2312ToUtf8(pRtnInstrumentStatus->EnterDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EnterDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnInstrumentStatusJS->Set(Local<v8::Value> (EnterDate), Local<v8::Value>(EnterDateValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnInstrumentStatus) { 
                    params[0] = Local<v8::Value>(pRtnInstrumentStatusJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnInstrumentStatus) { 
                delete pRtnInstrumentStatus;
                pRtnInstrumentStatus = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnInstrumentStatusTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryCurrTradingSegmentAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryCurrTradingSegmentAttrTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryCurrTradingSegmentAttrTopic_mutex);

    int ioUserNumb = g_RspQryCurrTradingSegmentAttrTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryCurrTradingSegmentAttrTopic_IOUser_vec.begin();
        it != g_RspQryCurrTradingSegmentAttrTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryCurrTradingSegmentAttrTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryCurrTradingSegmentAttrTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryCurrTradingSegmentAttrTopic_Data_map[*it].front());
            g_RspQryCurrTradingSegmentAttrTopic_Data_map[*it].pop();
        }
    }
    g_RspQryCurrTradingSegmentAttrTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryCurrTradingSegmentAttrTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryCurrTradingSegmentAttrTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryCurrTradingSegmentAttrTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryCurrTradingSegmentAttrTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryCurrTradingSegmentAttrTopic").ToLocalChecked());
            CShfeFtdcRspQryCurrTradingSegmentAttrField* pRspQryCurrTradingSegmentAttr = (CShfeFtdcRspQryCurrTradingSegmentAttrField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryCurrTradingSegmentAttrTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryCurrTradingSegmentAttrTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryCurrTradingSegmentAttrJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryCurrTradingSegmentAttr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryCurrTradingSegmentAttr->SettlementGroupID);
                    Gb2312ToUtf8(pRspQryCurrTradingSegmentAttr->SettlementGroupID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                    v8::Local<v8::String> TradingSegmentSN = Nan::New<v8::String> ("TradingSegmentSN").ToLocalChecked();
                    v8::Local<v8::Integer> TradingSegmentSNValue = Nan::New<v8::Integer> (pRspQryCurrTradingSegmentAttr->TradingSegmentSN);
                    pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (TradingSegmentSN), Local<v8::Value>(TradingSegmentSNValue));

                    v8::Local<v8::String> TradingSegmentName = Nan::New<v8::String> ("TradingSegmentName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryCurrTradingSegmentAttr->TradingSegmentName);
                    Gb2312ToUtf8(pRspQryCurrTradingSegmentAttr->TradingSegmentName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TradingSegmentNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (TradingSegmentName), Local<v8::Value>(TradingSegmentNameValue));

                    v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryCurrTradingSegmentAttr->StartTime);
                    Gb2312ToUtf8(pRspQryCurrTradingSegmentAttr->StartTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                    v8::Local<v8::String> InstrumentStatus = Nan::New<v8::String> ("InstrumentStatus").ToLocalChecked();
                    v8::Local<v8::Integer> InstrumentStatusValue = Nan::New<v8::Integer> (pRspQryCurrTradingSegmentAttr->InstrumentStatus);
                    pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (InstrumentStatus), Local<v8::Value>(InstrumentStatusValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryCurrTradingSegmentAttr->InstrumentID);
                    Gb2312ToUtf8(pRspQryCurrTradingSegmentAttr->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> AdvanceDays = Nan::New<v8::String> ("AdvanceDays").ToLocalChecked();
                    v8::Local<v8::Integer> AdvanceDaysValue = Nan::New<v8::Integer> (pRspQryCurrTradingSegmentAttr->AdvanceDays);
                    pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value> (AdvanceDays), Local<v8::Value>(AdvanceDaysValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryCurrTradingSegmentAttr) { 
                    params[0] = Local<v8::Value>(pRspQryCurrTradingSegmentAttrJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryCurrTradingSegmentAttr) { 
                delete pRspQryCurrTradingSegmentAttr;
                pRspQryCurrTradingSegmentAttr = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryCurrTradingSegmentAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnCurrTradingSegmentAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnCurrTradingSegmentAttrTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnCurrTradingSegmentAttrTopic_mutex);

    int ioUserNumb = g_RtnCurrTradingSegmentAttrTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnCurrTradingSegmentAttrTopic_IOUser_vec.begin();
        it != g_RtnCurrTradingSegmentAttrTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnCurrTradingSegmentAttrTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnCurrTradingSegmentAttrTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnCurrTradingSegmentAttrTopic_Data_map[*it].front());
            g_RtnCurrTradingSegmentAttrTopic_Data_map[*it].pop();
        }
    }
    g_RtnCurrTradingSegmentAttrTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnCurrTradingSegmentAttrTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnCurrTradingSegmentAttrTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnCurrTradingSegmentAttrTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnCurrTradingSegmentAttrTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnCurrTradingSegmentAttrTopic").ToLocalChecked());
            CShfeFtdcRtnCurrTradingSegmentAttrField* pRtnCurrTradingSegmentAttr = (CShfeFtdcRtnCurrTradingSegmentAttrField*)(paramArray[1]);
            if (OnRtnCurrTradingSegmentAttrTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnCurrTradingSegmentAttrTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnCurrTradingSegmentAttrJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnCurrTradingSegmentAttr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> SettlementGroupID = Nan::New<v8::String> ("SettlementGroupID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnCurrTradingSegmentAttr->SettlementGroupID);
                    Gb2312ToUtf8(pRtnCurrTradingSegmentAttr->SettlementGroupID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SettlementGroupIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (SettlementGroupID), Local<v8::Value>(SettlementGroupIDValue));

                    v8::Local<v8::String> TradingSegmentSN = Nan::New<v8::String> ("TradingSegmentSN").ToLocalChecked();
                    v8::Local<v8::Integer> TradingSegmentSNValue = Nan::New<v8::Integer> (pRtnCurrTradingSegmentAttr->TradingSegmentSN);
                    pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (TradingSegmentSN), Local<v8::Value>(TradingSegmentSNValue));

                    v8::Local<v8::String> TradingSegmentName = Nan::New<v8::String> ("TradingSegmentName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnCurrTradingSegmentAttr->TradingSegmentName);
                    Gb2312ToUtf8(pRtnCurrTradingSegmentAttr->TradingSegmentName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TradingSegmentNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (TradingSegmentName), Local<v8::Value>(TradingSegmentNameValue));

                    v8::Local<v8::String> StartTime = Nan::New<v8::String> ("StartTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnCurrTradingSegmentAttr->StartTime);
                    Gb2312ToUtf8(pRtnCurrTradingSegmentAttr->StartTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (StartTime), Local<v8::Value>(StartTimeValue));

                    v8::Local<v8::String> InstrumentStatus = Nan::New<v8::String> ("InstrumentStatus").ToLocalChecked();
                    v8::Local<v8::Integer> InstrumentStatusValue = Nan::New<v8::Integer> (pRtnCurrTradingSegmentAttr->InstrumentStatus);
                    pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (InstrumentStatus), Local<v8::Value>(InstrumentStatusValue));

                    v8::Local<v8::String> InstrumentID = Nan::New<v8::String> ("InstrumentID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnCurrTradingSegmentAttr->InstrumentID);
                    Gb2312ToUtf8(pRtnCurrTradingSegmentAttr->InstrumentID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstrumentIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (InstrumentID), Local<v8::Value>(InstrumentIDValue));

                    v8::Local<v8::String> AdvanceDays = Nan::New<v8::String> ("AdvanceDays").ToLocalChecked();
                    v8::Local<v8::Integer> AdvanceDaysValue = Nan::New<v8::Integer> (pRtnCurrTradingSegmentAttr->AdvanceDays);
                    pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value> (AdvanceDays), Local<v8::Value>(AdvanceDaysValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnCurrTradingSegmentAttr) { 
                    params[0] = Local<v8::Value>(pRtnCurrTradingSegmentAttrJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnCurrTradingSegmentAttr) { 
                delete pRtnCurrTradingSegmentAttr;
                pRtnCurrTradingSegmentAttr = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnCurrTradingSegmentAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetAreaTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetAreaTopic_mutex);

    int ioUserNumb = g_RspQryNetAreaTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetAreaTopic_IOUser_vec.begin();
        it != g_RspQryNetAreaTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetAreaTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetAreaTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetAreaTopic_Data_map[*it].front());
            g_RspQryNetAreaTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetAreaTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetAreaTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetAreaTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetAreaTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetAreaTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetAreaTopic").ToLocalChecked());
            CShfeFtdcRspQryNetAreaField* pRspQryNetArea = (CShfeFtdcRspQryNetAreaField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetAreaTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetAreaTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetAreaJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetArea) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetArea->OperationType);
                    pRspQryNetAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetArea->ID);
                    pRspQryNetAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetArea->CName);
                    Gb2312ToUtf8(pRspQryNetArea->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetArea->EName);
                    Gb2312ToUtf8(pRspQryNetArea->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetArea) { 
                    params[0] = Local<v8::Value>(pRspQryNetAreaJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetArea) { 
                delete pRspQryNetArea;
                pRspQryNetArea = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetAreaTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetAreaTopic_mutex);

    int ioUserNumb = g_RtnNetAreaTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetAreaTopic_IOUser_vec.begin();
        it != g_RtnNetAreaTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetAreaTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetAreaTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetAreaTopic_Data_map[*it].front());
            g_RtnNetAreaTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetAreaTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetAreaTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetAreaTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetAreaTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetAreaTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetAreaTopic").ToLocalChecked());
            CShfeFtdcRtnNetAreaField* pRtnNetArea = (CShfeFtdcRtnNetAreaField*)(paramArray[1]);
            if (OnRtnNetAreaTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetAreaTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetAreaJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetArea) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetArea->OperationType);
                    pRtnNetAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetArea->ID);
                    pRtnNetAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetArea->CName);
                    Gb2312ToUtf8(pRtnNetArea->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetArea->EName);
                    Gb2312ToUtf8(pRtnNetArea->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetArea) { 
                    params[0] = Local<v8::Value>(pRtnNetAreaJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetArea) { 
                delete pRtnNetArea;
                pRtnNetArea = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetSubAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetSubAreaTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetSubAreaTopic_mutex);

    int ioUserNumb = g_RspQryNetSubAreaTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetSubAreaTopic_IOUser_vec.begin();
        it != g_RspQryNetSubAreaTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetSubAreaTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetSubAreaTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetSubAreaTopic_Data_map[*it].front());
            g_RspQryNetSubAreaTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetSubAreaTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetSubAreaTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetSubAreaTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetSubAreaTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetSubAreaTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetSubAreaTopic").ToLocalChecked());
            CShfeFtdcRspQryNetSubAreaField* pRspQryNetSubArea = (CShfeFtdcRspQryNetSubAreaField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetSubAreaTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetSubAreaTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetSubAreaJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetSubArea) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetSubArea->OperationType);
                    pRspQryNetSubAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetSubArea->ID);
                    pRspQryNetSubAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SysNetAreaID = Nan::New<v8::String> ("SysNetAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetAreaIDValue = Nan::New<v8::Integer> (pRspQryNetSubArea->SysNetAreaID);
                    pRspQryNetSubAreaJS->Set(Local<v8::Value> (SysNetAreaID), Local<v8::Value>(SysNetAreaIDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetSubArea->CName);
                    Gb2312ToUtf8(pRspQryNetSubArea->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetSubAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetSubArea->EName);
                    Gb2312ToUtf8(pRspQryNetSubArea->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetSubAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetSubArea) { 
                    params[0] = Local<v8::Value>(pRspQryNetSubAreaJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetSubArea) { 
                delete pRspQryNetSubArea;
                pRspQryNetSubArea = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetSubAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetSubAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetSubAreaTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetSubAreaTopic_mutex);

    int ioUserNumb = g_RtnNetSubAreaTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetSubAreaTopic_IOUser_vec.begin();
        it != g_RtnNetSubAreaTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetSubAreaTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetSubAreaTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetSubAreaTopic_Data_map[*it].front());
            g_RtnNetSubAreaTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetSubAreaTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetSubAreaTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetSubAreaTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetSubAreaTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetSubAreaTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetSubAreaTopic").ToLocalChecked());
            CShfeFtdcRtnNetSubAreaField* pRtnNetSubArea = (CShfeFtdcRtnNetSubAreaField*)(paramArray[1]);
            if (OnRtnNetSubAreaTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetSubAreaTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetSubAreaJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetSubArea) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetSubArea->OperationType);
                    pRtnNetSubAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetSubArea->ID);
                    pRtnNetSubAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SysNetAreaID = Nan::New<v8::String> ("SysNetAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetAreaIDValue = Nan::New<v8::Integer> (pRtnNetSubArea->SysNetAreaID);
                    pRtnNetSubAreaJS->Set(Local<v8::Value> (SysNetAreaID), Local<v8::Value>(SysNetAreaIDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetSubArea->CName);
                    Gb2312ToUtf8(pRtnNetSubArea->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetSubAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetSubArea->EName);
                    Gb2312ToUtf8(pRtnNetSubArea->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetSubAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetSubArea) { 
                    params[0] = Local<v8::Value>(pRtnNetSubAreaJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetSubArea) { 
                delete pRtnNetSubArea;
                pRtnNetSubArea = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetSubAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetSubAreaIPTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetSubAreaIPTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetSubAreaIPTopic_mutex);

    int ioUserNumb = g_RspQryNetSubAreaIPTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetSubAreaIPTopic_IOUser_vec.begin();
        it != g_RspQryNetSubAreaIPTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetSubAreaIPTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetSubAreaIPTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetSubAreaIPTopic_Data_map[*it].front());
            g_RspQryNetSubAreaIPTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetSubAreaIPTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetSubAreaIPTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetSubAreaIPTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetSubAreaIPTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetSubAreaIPTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetSubAreaIPTopic").ToLocalChecked());
            CShfeFtdcRspQryNetSubAreaIPField* pRspQryNetSubAreaIP = (CShfeFtdcRspQryNetSubAreaIPField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetSubAreaIPTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetSubAreaIPTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetSubAreaIPJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetSubAreaIP) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetSubAreaIP->OperationType);
                    pRspQryNetSubAreaIPJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetSubAreaIP->ID);
                    pRspQryNetSubAreaIPJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRspQryNetSubAreaIP->SysNetSubAreaID);
                    pRspQryNetSubAreaIPJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                    v8::Local<v8::String> IP = Nan::New<v8::String> ("IP").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetSubAreaIP->IP);
                    Gb2312ToUtf8(pRspQryNetSubAreaIP->IP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetSubAreaIPJS->Set(Local<v8::Value> (IP), Local<v8::Value>(IPValue));

                    v8::Local<v8::String> Mask = Nan::New<v8::String> ("Mask").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetSubAreaIP->Mask);
                    Gb2312ToUtf8(pRspQryNetSubAreaIP->Mask, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaskValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetSubAreaIPJS->Set(Local<v8::Value> (Mask), Local<v8::Value>(MaskValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetSubAreaIP) { 
                    params[0] = Local<v8::Value>(pRspQryNetSubAreaIPJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetSubAreaIP) { 
                delete pRspQryNetSubAreaIP;
                pRspQryNetSubAreaIP = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetSubAreaIPTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetSubAreaIPTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetSubAreaIPTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetSubAreaIPTopic_mutex);

    int ioUserNumb = g_RtnNetSubAreaIPTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetSubAreaIPTopic_IOUser_vec.begin();
        it != g_RtnNetSubAreaIPTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetSubAreaIPTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetSubAreaIPTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetSubAreaIPTopic_Data_map[*it].front());
            g_RtnNetSubAreaIPTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetSubAreaIPTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetSubAreaIPTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetSubAreaIPTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetSubAreaIPTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetSubAreaIPTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetSubAreaIPTopic").ToLocalChecked());
            CShfeFtdcRtnNetSubAreaIPField* pRtnNetSubAreaIP = (CShfeFtdcRtnNetSubAreaIPField*)(paramArray[1]);
            if (OnRtnNetSubAreaIPTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetSubAreaIPTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetSubAreaIPJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetSubAreaIP) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetSubAreaIP->OperationType);
                    pRtnNetSubAreaIPJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetSubAreaIP->ID);
                    pRtnNetSubAreaIPJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRtnNetSubAreaIP->SysNetSubAreaID);
                    pRtnNetSubAreaIPJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                    v8::Local<v8::String> IP = Nan::New<v8::String> ("IP").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetSubAreaIP->IP);
                    Gb2312ToUtf8(pRtnNetSubAreaIP->IP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetSubAreaIPJS->Set(Local<v8::Value> (IP), Local<v8::Value>(IPValue));

                    v8::Local<v8::String> Mask = Nan::New<v8::String> ("Mask").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetSubAreaIP->Mask);
                    Gb2312ToUtf8(pRtnNetSubAreaIP->Mask, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaskValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetSubAreaIPJS->Set(Local<v8::Value> (Mask), Local<v8::Value>(MaskValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetSubAreaIP) { 
                    params[0] = Local<v8::Value>(pRtnNetSubAreaIPJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetSubAreaIP) { 
                delete pRtnNetSubAreaIP;
                pRtnNetSubAreaIP = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetSubAreaIPTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetDeviceTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetDeviceTopic_mutex);

    int ioUserNumb = g_RspQryNetDeviceTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetDeviceTopic_IOUser_vec.begin();
        it != g_RspQryNetDeviceTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetDeviceTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetDeviceTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetDeviceTopic_Data_map[*it].front());
            g_RspQryNetDeviceTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetDeviceTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetDeviceTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetDeviceTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetDeviceTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetDeviceTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceTopic").ToLocalChecked());
            CShfeFtdcRspQryNetDeviceField* pRspQryNetDevice = (CShfeFtdcRspQryNetDeviceField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetDeviceTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetDeviceTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetDeviceJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetDevice) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDevice->OperationType);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->ID);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->ObjectID);
                    Gb2312ToUtf8(pRspQryNetDevice->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->MonitorType_ID);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                    v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRspQryNetDevice->SysNetSubAreaID);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                    v8::Local<v8::String> CATEGORY_ID = Nan::New<v8::String> ("CATEGORY_ID").ToLocalChecked();
                    v8::Local<v8::Integer> CATEGORY_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->CATEGORY_ID);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (CATEGORY_ID), Local<v8::Value>(CATEGORY_IDValue));

                    v8::Local<v8::String> FuctionArea = Nan::New<v8::String> ("FuctionArea").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->FuctionArea);
                    Gb2312ToUtf8(pRspQryNetDevice->FuctionArea, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FuctionAreaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (FuctionArea), Local<v8::Value>(FuctionAreaValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->IPADDR);
                    Gb2312ToUtf8(pRspQryNetDevice->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> IPDECODE = Nan::New<v8::String> ("IPDECODE").ToLocalChecked();
                    v8::Local<v8::Integer> IPDECODEValue = Nan::New<v8::Integer> (pRspQryNetDevice->IPDECODE);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (IPDECODE), Local<v8::Value>(IPDECODEValue));

                    v8::Local<v8::String> NAME = Nan::New<v8::String> ("NAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->NAME);
                    Gb2312ToUtf8(pRspQryNetDevice->NAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (NAME), Local<v8::Value>(NAMEValue));

                    v8::Local<v8::String> PORTNUMBER = Nan::New<v8::String> ("PORTNUMBER").ToLocalChecked();
                    v8::Local<v8::Integer> PORTNUMBERValue = Nan::New<v8::Integer> (pRspQryNetDevice->PORTNUMBER);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (PORTNUMBER), Local<v8::Value>(PORTNUMBERValue));

                    v8::Local<v8::String> CONFIGFILE = Nan::New<v8::String> ("CONFIGFILE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->CONFIGFILE);
                    Gb2312ToUtf8(pRspQryNetDevice->CONFIGFILE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONFIGFILEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (CONFIGFILE), Local<v8::Value>(CONFIGFILEValue));

                    v8::Local<v8::String> RCOMMUNITY = Nan::New<v8::String> ("RCOMMUNITY").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->RCOMMUNITY);
                    Gb2312ToUtf8(pRspQryNetDevice->RCOMMUNITY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RCOMMUNITYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (RCOMMUNITY), Local<v8::Value>(RCOMMUNITYValue));

                    v8::Local<v8::String> SNMPVERSION = Nan::New<v8::String> ("SNMPVERSION").ToLocalChecked();
                    v8::Local<v8::Integer> SNMPVERSIONValue = Nan::New<v8::Integer> (pRspQryNetDevice->SNMPVERSION);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (SNMPVERSION), Local<v8::Value>(SNMPVERSIONValue));

                    v8::Local<v8::String> RAMSIZE = Nan::New<v8::String> ("RAMSIZE").ToLocalChecked();
                    v8::Local<v8::Integer> RAMSIZEValue = Nan::New<v8::Integer> (pRspQryNetDevice->RAMSIZE);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (RAMSIZE), Local<v8::Value>(RAMSIZEValue));

                    v8::Local<v8::String> FLASHSIZE = Nan::New<v8::String> ("FLASHSIZE").ToLocalChecked();
                    v8::Local<v8::Integer> FLASHSIZEValue = Nan::New<v8::Integer> (pRspQryNetDevice->FLASHSIZE);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (FLASHSIZE), Local<v8::Value>(FLASHSIZEValue));

                    v8::Local<v8::String> NVRAMSIZE = Nan::New<v8::String> ("NVRAMSIZE").ToLocalChecked();
                    v8::Local<v8::Integer> NVRAMSIZEValue = Nan::New<v8::Integer> (pRspQryNetDevice->NVRAMSIZE);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (NVRAMSIZE), Local<v8::Value>(NVRAMSIZEValue));

                    v8::Local<v8::String> CABINET_ID = Nan::New<v8::String> ("CABINET_ID").ToLocalChecked();
                    v8::Local<v8::Integer> CABINET_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->CABINET_ID);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (CABINET_ID), Local<v8::Value>(CABINET_IDValue));

                    v8::Local<v8::String> ROOM_ID = Nan::New<v8::String> ("ROOM_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ROOM_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->ROOM_ID);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (ROOM_ID), Local<v8::Value>(ROOM_IDValue));

                    v8::Local<v8::String> IOSVERSION_ID = Nan::New<v8::String> ("IOSVERSION_ID").ToLocalChecked();
                    v8::Local<v8::Integer> IOSVERSION_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->IOSVERSION_ID);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (IOSVERSION_ID), Local<v8::Value>(IOSVERSION_IDValue));

                    v8::Local<v8::String> DESCRIPTION = Nan::New<v8::String> ("DESCRIPTION").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->DESCRIPTION);
                    Gb2312ToUtf8(pRspQryNetDevice->DESCRIPTION, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DESCRIPTIONValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (DESCRIPTION), Local<v8::Value>(DESCRIPTIONValue));

                    v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->USERNAME);
                    Gb2312ToUtf8(pRspQryNetDevice->USERNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                    v8::Local<v8::String> PASSWD = Nan::New<v8::String> ("PASSWD").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->PASSWD);
                    Gb2312ToUtf8(pRspQryNetDevice->PASSWD, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PASSWDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (PASSWD), Local<v8::Value>(PASSWDValue));

                    v8::Local<v8::String> ENPASSWD = Nan::New<v8::String> ("ENPASSWD").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->ENPASSWD);
                    Gb2312ToUtf8(pRspQryNetDevice->ENPASSWD, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENPASSWDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (ENPASSWD), Local<v8::Value>(ENPASSWDValue));

                    v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->MANUFACTORY_ID);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                    v8::Local<v8::String> CFGSAVETYPE = Nan::New<v8::String> ("CFGSAVETYPE").ToLocalChecked();
                    v8::Local<v8::Integer> CFGSAVETYPEValue = Nan::New<v8::Integer> (pRspQryNetDevice->CFGSAVETYPE);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (CFGSAVETYPE), Local<v8::Value>(CFGSAVETYPEValue));

                    v8::Local<v8::String> DEVICETYPE = Nan::New<v8::String> ("DEVICETYPE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDevice->DEVICETYPE);
                    Gb2312ToUtf8(pRspQryNetDevice->DEVICETYPE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DEVICETYPEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (DEVICETYPE), Local<v8::Value>(DEVICETYPEValue));

                    v8::Local<v8::String> SENDSMS = Nan::New<v8::String> ("SENDSMS").ToLocalChecked();
                    v8::Local<v8::Integer> SENDSMSValue = Nan::New<v8::Integer> (pRspQryNetDevice->SENDSMS);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (SENDSMS), Local<v8::Value>(SENDSMSValue));

                    v8::Local<v8::String> ISSNMP = Nan::New<v8::String> ("ISSNMP").ToLocalChecked();
                    v8::Local<v8::Integer> ISSNMPValue = Nan::New<v8::Integer> (pRspQryNetDevice->ISSNMP);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (ISSNMP), Local<v8::Value>(ISSNMPValue));

                    v8::Local<v8::String> SLOTNUM = Nan::New<v8::String> ("SLOTNUM").ToLocalChecked();
                    v8::Local<v8::Integer> SLOTNUMValue = Nan::New<v8::Integer> (pRspQryNetDevice->SLOTNUM);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (SLOTNUM), Local<v8::Value>(SLOTNUMValue));

                    v8::Local<v8::String> ISPING = Nan::New<v8::String> ("ISPING").ToLocalChecked();
                    v8::Local<v8::Integer> ISPINGValue = Nan::New<v8::Integer> (pRspQryNetDevice->ISPING);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (ISPING), Local<v8::Value>(ISPINGValue));

                    v8::Local<v8::String> IFNUM = Nan::New<v8::String> ("IFNUM").ToLocalChecked();
                    v8::Local<v8::Integer> IFNUMValue = Nan::New<v8::Integer> (pRspQryNetDevice->IFNUM);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (IFNUM), Local<v8::Value>(IFNUMValue));

                    v8::Local<v8::String> APPLICATION_ID = Nan::New<v8::String> ("APPLICATION_ID").ToLocalChecked();
                    v8::Local<v8::Integer> APPLICATION_IDValue = Nan::New<v8::Integer> (pRspQryNetDevice->APPLICATION_ID);
                    pRspQryNetDeviceJS->Set(Local<v8::Value> (APPLICATION_ID), Local<v8::Value>(APPLICATION_IDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetDevice) { 
                    params[0] = Local<v8::Value>(pRspQryNetDeviceJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetDevice) { 
                delete pRspQryNetDevice;
                pRspQryNetDevice = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetDeviceTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDeviceTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetDeviceTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetDeviceTopic_mutex);

    int ioUserNumb = g_RtnNetDeviceTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetDeviceTopic_IOUser_vec.begin();
        it != g_RtnNetDeviceTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetDeviceTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetDeviceTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetDeviceTopic_Data_map[*it].front());
            g_RtnNetDeviceTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetDeviceTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetDeviceTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetDeviceTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetDeviceTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetDeviceTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDeviceTopic").ToLocalChecked());
            CShfeFtdcRtnNetDeviceField* pRtnNetDevice = (CShfeFtdcRtnNetDeviceField*)(paramArray[1]);
            if (OnRtnNetDeviceTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetDeviceTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetDeviceJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetDevice) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDevice->OperationType);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDevice->ID);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->ObjectID);
                    Gb2312ToUtf8(pRtnNetDevice->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->MonitorType_ID);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                    v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRtnNetDevice->SysNetSubAreaID);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                    v8::Local<v8::String> CATEGORY_ID = Nan::New<v8::String> ("CATEGORY_ID").ToLocalChecked();
                    v8::Local<v8::Integer> CATEGORY_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->CATEGORY_ID);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (CATEGORY_ID), Local<v8::Value>(CATEGORY_IDValue));

                    v8::Local<v8::String> FuctionArea = Nan::New<v8::String> ("FuctionArea").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->FuctionArea);
                    Gb2312ToUtf8(pRtnNetDevice->FuctionArea, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FuctionAreaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (FuctionArea), Local<v8::Value>(FuctionAreaValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->IPADDR);
                    Gb2312ToUtf8(pRtnNetDevice->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> IPDECODE = Nan::New<v8::String> ("IPDECODE").ToLocalChecked();
                    v8::Local<v8::Integer> IPDECODEValue = Nan::New<v8::Integer> (pRtnNetDevice->IPDECODE);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (IPDECODE), Local<v8::Value>(IPDECODEValue));

                    v8::Local<v8::String> NAME = Nan::New<v8::String> ("NAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->NAME);
                    Gb2312ToUtf8(pRtnNetDevice->NAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (NAME), Local<v8::Value>(NAMEValue));

                    v8::Local<v8::String> PORTNUMBER = Nan::New<v8::String> ("PORTNUMBER").ToLocalChecked();
                    v8::Local<v8::Integer> PORTNUMBERValue = Nan::New<v8::Integer> (pRtnNetDevice->PORTNUMBER);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (PORTNUMBER), Local<v8::Value>(PORTNUMBERValue));

                    v8::Local<v8::String> CONFIGFILE = Nan::New<v8::String> ("CONFIGFILE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->CONFIGFILE);
                    Gb2312ToUtf8(pRtnNetDevice->CONFIGFILE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONFIGFILEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (CONFIGFILE), Local<v8::Value>(CONFIGFILEValue));

                    v8::Local<v8::String> RCOMMUNITY = Nan::New<v8::String> ("RCOMMUNITY").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->RCOMMUNITY);
                    Gb2312ToUtf8(pRtnNetDevice->RCOMMUNITY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RCOMMUNITYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (RCOMMUNITY), Local<v8::Value>(RCOMMUNITYValue));

                    v8::Local<v8::String> SNMPVERSION = Nan::New<v8::String> ("SNMPVERSION").ToLocalChecked();
                    v8::Local<v8::Integer> SNMPVERSIONValue = Nan::New<v8::Integer> (pRtnNetDevice->SNMPVERSION);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (SNMPVERSION), Local<v8::Value>(SNMPVERSIONValue));

                    v8::Local<v8::String> RAMSIZE = Nan::New<v8::String> ("RAMSIZE").ToLocalChecked();
                    v8::Local<v8::Integer> RAMSIZEValue = Nan::New<v8::Integer> (pRtnNetDevice->RAMSIZE);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (RAMSIZE), Local<v8::Value>(RAMSIZEValue));

                    v8::Local<v8::String> FLASHSIZE = Nan::New<v8::String> ("FLASHSIZE").ToLocalChecked();
                    v8::Local<v8::Integer> FLASHSIZEValue = Nan::New<v8::Integer> (pRtnNetDevice->FLASHSIZE);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (FLASHSIZE), Local<v8::Value>(FLASHSIZEValue));

                    v8::Local<v8::String> NVRAMSIZE = Nan::New<v8::String> ("NVRAMSIZE").ToLocalChecked();
                    v8::Local<v8::Integer> NVRAMSIZEValue = Nan::New<v8::Integer> (pRtnNetDevice->NVRAMSIZE);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (NVRAMSIZE), Local<v8::Value>(NVRAMSIZEValue));

                    v8::Local<v8::String> CABINET_ID = Nan::New<v8::String> ("CABINET_ID").ToLocalChecked();
                    v8::Local<v8::Integer> CABINET_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->CABINET_ID);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (CABINET_ID), Local<v8::Value>(CABINET_IDValue));

                    v8::Local<v8::String> ROOM_ID = Nan::New<v8::String> ("ROOM_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ROOM_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->ROOM_ID);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (ROOM_ID), Local<v8::Value>(ROOM_IDValue));

                    v8::Local<v8::String> IOSVERSION_ID = Nan::New<v8::String> ("IOSVERSION_ID").ToLocalChecked();
                    v8::Local<v8::Integer> IOSVERSION_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->IOSVERSION_ID);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (IOSVERSION_ID), Local<v8::Value>(IOSVERSION_IDValue));

                    v8::Local<v8::String> DESCRIPTION = Nan::New<v8::String> ("DESCRIPTION").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->DESCRIPTION);
                    Gb2312ToUtf8(pRtnNetDevice->DESCRIPTION, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DESCRIPTIONValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (DESCRIPTION), Local<v8::Value>(DESCRIPTIONValue));

                    v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->USERNAME);
                    Gb2312ToUtf8(pRtnNetDevice->USERNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                    v8::Local<v8::String> PASSWD = Nan::New<v8::String> ("PASSWD").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->PASSWD);
                    Gb2312ToUtf8(pRtnNetDevice->PASSWD, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PASSWDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (PASSWD), Local<v8::Value>(PASSWDValue));

                    v8::Local<v8::String> ENPASSWD = Nan::New<v8::String> ("ENPASSWD").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->ENPASSWD);
                    Gb2312ToUtf8(pRtnNetDevice->ENPASSWD, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENPASSWDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (ENPASSWD), Local<v8::Value>(ENPASSWDValue));

                    v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->MANUFACTORY_ID);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                    v8::Local<v8::String> CFGSAVETYPE = Nan::New<v8::String> ("CFGSAVETYPE").ToLocalChecked();
                    v8::Local<v8::Integer> CFGSAVETYPEValue = Nan::New<v8::Integer> (pRtnNetDevice->CFGSAVETYPE);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (CFGSAVETYPE), Local<v8::Value>(CFGSAVETYPEValue));

                    v8::Local<v8::String> DEVICETYPE = Nan::New<v8::String> ("DEVICETYPE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDevice->DEVICETYPE);
                    Gb2312ToUtf8(pRtnNetDevice->DEVICETYPE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DEVICETYPEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceJS->Set(Local<v8::Value> (DEVICETYPE), Local<v8::Value>(DEVICETYPEValue));

                    v8::Local<v8::String> SENDSMS = Nan::New<v8::String> ("SENDSMS").ToLocalChecked();
                    v8::Local<v8::Integer> SENDSMSValue = Nan::New<v8::Integer> (pRtnNetDevice->SENDSMS);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (SENDSMS), Local<v8::Value>(SENDSMSValue));

                    v8::Local<v8::String> ISSNMP = Nan::New<v8::String> ("ISSNMP").ToLocalChecked();
                    v8::Local<v8::Integer> ISSNMPValue = Nan::New<v8::Integer> (pRtnNetDevice->ISSNMP);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (ISSNMP), Local<v8::Value>(ISSNMPValue));

                    v8::Local<v8::String> SLOTNUM = Nan::New<v8::String> ("SLOTNUM").ToLocalChecked();
                    v8::Local<v8::Integer> SLOTNUMValue = Nan::New<v8::Integer> (pRtnNetDevice->SLOTNUM);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (SLOTNUM), Local<v8::Value>(SLOTNUMValue));

                    v8::Local<v8::String> ISPING = Nan::New<v8::String> ("ISPING").ToLocalChecked();
                    v8::Local<v8::Integer> ISPINGValue = Nan::New<v8::Integer> (pRtnNetDevice->ISPING);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (ISPING), Local<v8::Value>(ISPINGValue));

                    v8::Local<v8::String> IFNUM = Nan::New<v8::String> ("IFNUM").ToLocalChecked();
                    v8::Local<v8::Integer> IFNUMValue = Nan::New<v8::Integer> (pRtnNetDevice->IFNUM);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (IFNUM), Local<v8::Value>(IFNUMValue));

                    v8::Local<v8::String> APPLICATION_ID = Nan::New<v8::String> ("APPLICATION_ID").ToLocalChecked();
                    v8::Local<v8::Integer> APPLICATION_IDValue = Nan::New<v8::Integer> (pRtnNetDevice->APPLICATION_ID);
                    pRtnNetDeviceJS->Set(Local<v8::Value> (APPLICATION_ID), Local<v8::Value>(APPLICATION_IDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetDevice) { 
                    params[0] = Local<v8::Value>(pRtnNetDeviceJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetDevice) { 
                delete pRtnNetDevice;
                pRtnNetDevice = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetDeviceTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceDetectTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetDeviceDetectTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetDeviceDetectTopic_mutex);

    int ioUserNumb = g_RspQryNetDeviceDetectTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetDeviceDetectTopic_IOUser_vec.begin();
        it != g_RspQryNetDeviceDetectTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetDeviceDetectTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetDeviceDetectTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetDeviceDetectTopic_Data_map[*it].front());
            g_RspQryNetDeviceDetectTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetDeviceDetectTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetDeviceDetectTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetDeviceDetectTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetDeviceDetectTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetDeviceDetectTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceDetectTopic").ToLocalChecked());
            CShfeFtdcRspQryNetDeviceDetectField* pRspQryNetDeviceDetect = (CShfeFtdcRspQryNetDeviceDetectField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetDeviceDetectTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetDeviceDetectTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetDeviceDetectJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetDeviceDetect) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> SysNetAreaID = Nan::New<v8::String> ("SysNetAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetAreaIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceDetect->SysNetAreaID);
                    pRspQryNetDeviceDetectJS->Set(Local<v8::Value> (SysNetAreaID), Local<v8::Value>(SysNetAreaIDValue));

                    v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceDetect->SysNetSubAreaID);
                    pRspQryNetDeviceDetectJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                    v8::Local<v8::String> IP = Nan::New<v8::String> ("IP").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceDetect->IP);
                    Gb2312ToUtf8(pRspQryNetDeviceDetect->IP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceDetectJS->Set(Local<v8::Value> (IP), Local<v8::Value>(IPValue));

                    v8::Local<v8::String> Mask = Nan::New<v8::String> ("Mask").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceDetect->Mask);
                    Gb2312ToUtf8(pRspQryNetDeviceDetect->Mask, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MaskValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceDetectJS->Set(Local<v8::Value> (Mask), Local<v8::Value>(MaskValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetDeviceDetect) { 
                    params[0] = Local<v8::Value>(pRspQryNetDeviceDetectJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetDeviceDetect) { 
                delete pRspQryNetDeviceDetect;
                pRspQryNetDeviceDetect = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetDeviceDetectTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetBuildingTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetBuildingTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetBuildingTopic_mutex);

    int ioUserNumb = g_RspQryNetBuildingTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetBuildingTopic_IOUser_vec.begin();
        it != g_RspQryNetBuildingTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetBuildingTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetBuildingTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetBuildingTopic_Data_map[*it].front());
            g_RspQryNetBuildingTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetBuildingTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetBuildingTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetBuildingTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetBuildingTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetBuildingTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetBuildingTopic").ToLocalChecked());
            CShfeFtdcRspQryNetBuildingField* pRspQryNetBuilding = (CShfeFtdcRspQryNetBuildingField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetBuildingTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetBuildingTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetBuildingJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetBuilding) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetBuilding->OperationType);
                    pRspQryNetBuildingJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetBuilding->ID);
                    pRspQryNetBuildingJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBuilding->CName);
                    Gb2312ToUtf8(pRspQryNetBuilding->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBuildingJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBuilding->EName);
                    Gb2312ToUtf8(pRspQryNetBuilding->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBuildingJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetBuilding) { 
                    params[0] = Local<v8::Value>(pRspQryNetBuildingJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetBuilding) { 
                delete pRspQryNetBuilding;
                pRspQryNetBuilding = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetBuildingTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetBuildingTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetBuildingTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetBuildingTopic_mutex);

    int ioUserNumb = g_RtnNetBuildingTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetBuildingTopic_IOUser_vec.begin();
        it != g_RtnNetBuildingTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetBuildingTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetBuildingTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetBuildingTopic_Data_map[*it].front());
            g_RtnNetBuildingTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetBuildingTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetBuildingTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetBuildingTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetBuildingTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetBuildingTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetBuildingTopic").ToLocalChecked());
            CShfeFtdcRtnNetBuildingField* pRtnNetBuilding = (CShfeFtdcRtnNetBuildingField*)(paramArray[1]);
            if (OnRtnNetBuildingTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetBuildingTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetBuildingJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetBuilding) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetBuilding->OperationType);
                    pRtnNetBuildingJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetBuilding->ID);
                    pRtnNetBuildingJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBuilding->CName);
                    Gb2312ToUtf8(pRtnNetBuilding->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBuildingJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBuilding->EName);
                    Gb2312ToUtf8(pRtnNetBuilding->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBuildingJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetBuilding) { 
                    params[0] = Local<v8::Value>(pRtnNetBuildingJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetBuilding) { 
                delete pRtnNetBuilding;
                pRtnNetBuilding = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetBuildingTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetRoomTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetRoomTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetRoomTopic_mutex);

    int ioUserNumb = g_RspQryNetRoomTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetRoomTopic_IOUser_vec.begin();
        it != g_RspQryNetRoomTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetRoomTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetRoomTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetRoomTopic_Data_map[*it].front());
            g_RspQryNetRoomTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetRoomTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetRoomTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetRoomTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetRoomTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetRoomTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetRoomTopic").ToLocalChecked());
            CShfeFtdcRspQryNetRoomField* pRspQryNetRoom = (CShfeFtdcRspQryNetRoomField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetRoomTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetRoomTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetRoomJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetRoom) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetRoom->OperationType);
                    pRspQryNetRoomJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetRoom->ID);
                    pRspQryNetRoomJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SysNetBuildingID = Nan::New<v8::String> ("SysNetBuildingID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetBuildingIDValue = Nan::New<v8::Integer> (pRspQryNetRoom->SysNetBuildingID);
                    pRspQryNetRoomJS->Set(Local<v8::Value> (SysNetBuildingID), Local<v8::Value>(SysNetBuildingIDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRoom->CName);
                    Gb2312ToUtf8(pRspQryNetRoom->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRoomJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRoom->EName);
                    Gb2312ToUtf8(pRspQryNetRoom->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRoomJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetRoom) { 
                    params[0] = Local<v8::Value>(pRspQryNetRoomJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetRoom) { 
                delete pRspQryNetRoom;
                pRspQryNetRoom = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetRoomTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetRoomTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetRoomTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetRoomTopic_mutex);

    int ioUserNumb = g_RtnNetRoomTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetRoomTopic_IOUser_vec.begin();
        it != g_RtnNetRoomTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetRoomTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetRoomTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetRoomTopic_Data_map[*it].front());
            g_RtnNetRoomTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetRoomTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetRoomTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetRoomTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetRoomTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetRoomTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetRoomTopic").ToLocalChecked());
            CShfeFtdcRtnNetRoomField* pRtnNetRoom = (CShfeFtdcRtnNetRoomField*)(paramArray[1]);
            if (OnRtnNetRoomTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetRoomTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetRoomJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetRoom) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetRoom->OperationType);
                    pRtnNetRoomJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetRoom->ID);
                    pRtnNetRoomJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SysNetBuildingID = Nan::New<v8::String> ("SysNetBuildingID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetBuildingIDValue = Nan::New<v8::Integer> (pRtnNetRoom->SysNetBuildingID);
                    pRtnNetRoomJS->Set(Local<v8::Value> (SysNetBuildingID), Local<v8::Value>(SysNetBuildingIDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRoom->CName);
                    Gb2312ToUtf8(pRtnNetRoom->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRoomJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRoom->EName);
                    Gb2312ToUtf8(pRtnNetRoom->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRoomJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetRoom) { 
                    params[0] = Local<v8::Value>(pRtnNetRoomJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetRoom) { 
                delete pRtnNetRoom;
                pRtnNetRoom = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetRoomTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetCabinetsTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetCabinetsTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetCabinetsTopic_mutex);

    int ioUserNumb = g_RspQryNetCabinetsTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetCabinetsTopic_IOUser_vec.begin();
        it != g_RspQryNetCabinetsTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetCabinetsTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetCabinetsTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetCabinetsTopic_Data_map[*it].front());
            g_RspQryNetCabinetsTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetCabinetsTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetCabinetsTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetCabinetsTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetCabinetsTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetCabinetsTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetCabinetsTopic").ToLocalChecked());
            CShfeFtdcRspQryNetCabinetsField* pRspQryNetCabinets = (CShfeFtdcRspQryNetCabinetsField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetCabinetsTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetCabinetsTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetCabinetsJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetCabinets) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetCabinets->OperationType);
                    pRspQryNetCabinetsJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetCabinets->ID);
                    pRspQryNetCabinetsJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SysNetRoomID = Nan::New<v8::String> ("SysNetRoomID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetRoomIDValue = Nan::New<v8::Integer> (pRspQryNetCabinets->SysNetRoomID);
                    pRspQryNetCabinetsJS->Set(Local<v8::Value> (SysNetRoomID), Local<v8::Value>(SysNetRoomIDValue));

                    v8::Local<v8::String> SysNetBuildingID = Nan::New<v8::String> ("SysNetBuildingID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetBuildingIDValue = Nan::New<v8::Integer> (pRspQryNetCabinets->SysNetBuildingID);
                    pRspQryNetCabinetsJS->Set(Local<v8::Value> (SysNetBuildingID), Local<v8::Value>(SysNetBuildingIDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetCabinets->CName);
                    Gb2312ToUtf8(pRspQryNetCabinets->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetCabinetsJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetCabinets->EName);
                    Gb2312ToUtf8(pRspQryNetCabinets->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetCabinetsJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> CabinetsType = Nan::New<v8::String> ("CabinetsType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetCabinets->CabinetsType);
                    Gb2312ToUtf8(pRspQryNetCabinets->CabinetsType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CabinetsTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetCabinetsJS->Set(Local<v8::Value> (CabinetsType), Local<v8::Value>(CabinetsTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetCabinets) { 
                    params[0] = Local<v8::Value>(pRspQryNetCabinetsJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetCabinets) { 
                delete pRspQryNetCabinets;
                pRspQryNetCabinets = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetCabinetsTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetCabinetsTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetCabinetsTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetCabinetsTopic_mutex);

    int ioUserNumb = g_RtnNetCabinetsTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetCabinetsTopic_IOUser_vec.begin();
        it != g_RtnNetCabinetsTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetCabinetsTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetCabinetsTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetCabinetsTopic_Data_map[*it].front());
            g_RtnNetCabinetsTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetCabinetsTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetCabinetsTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetCabinetsTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetCabinetsTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetCabinetsTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetCabinetsTopic").ToLocalChecked());
            CShfeFtdcRtnNetCabinetsField* pRtnNetCabinets = (CShfeFtdcRtnNetCabinetsField*)(paramArray[1]);
            if (OnRtnNetCabinetsTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetCabinetsTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetCabinetsJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetCabinets) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetCabinets->OperationType);
                    pRtnNetCabinetsJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetCabinets->ID);
                    pRtnNetCabinetsJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SysNetRoomID = Nan::New<v8::String> ("SysNetRoomID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetRoomIDValue = Nan::New<v8::Integer> (pRtnNetCabinets->SysNetRoomID);
                    pRtnNetCabinetsJS->Set(Local<v8::Value> (SysNetRoomID), Local<v8::Value>(SysNetRoomIDValue));

                    v8::Local<v8::String> SysNetBuildingID = Nan::New<v8::String> ("SysNetBuildingID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetBuildingIDValue = Nan::New<v8::Integer> (pRtnNetCabinets->SysNetBuildingID);
                    pRtnNetCabinetsJS->Set(Local<v8::Value> (SysNetBuildingID), Local<v8::Value>(SysNetBuildingIDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetCabinets->CName);
                    Gb2312ToUtf8(pRtnNetCabinets->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetCabinetsJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetCabinets->EName);
                    Gb2312ToUtf8(pRtnNetCabinets->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetCabinetsJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> CabinetsType = Nan::New<v8::String> ("CabinetsType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetCabinets->CabinetsType);
                    Gb2312ToUtf8(pRtnNetCabinets->CabinetsType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CabinetsTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetCabinetsJS->Set(Local<v8::Value> (CabinetsType), Local<v8::Value>(CabinetsTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetCabinets) { 
                    params[0] = Local<v8::Value>(pRtnNetCabinetsJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetCabinets) { 
                delete pRtnNetCabinets;
                pRtnNetCabinets = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetCabinetsTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetOIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetOIDTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetOIDTopic_mutex);

    int ioUserNumb = g_RspQryNetOIDTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetOIDTopic_IOUser_vec.begin();
        it != g_RspQryNetOIDTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetOIDTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetOIDTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetOIDTopic_Data_map[*it].front());
            g_RspQryNetOIDTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetOIDTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetOIDTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetOIDTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetOIDTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetOIDTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetOIDTopic").ToLocalChecked());
            CShfeFtdcRspQryNetOIDField* pRspQryNetOID = (CShfeFtdcRspQryNetOIDField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetOIDTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetOIDTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetOIDJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetOID) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetOID->OperationType);
                    pRspQryNetOIDJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetOID->ID);
                    pRspQryNetOIDJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetOID->Manufactory);
                    Gb2312ToUtf8(pRspQryNetOID->Manufactory, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetOIDJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                    v8::Local<v8::String> DeviceType = Nan::New<v8::String> ("DeviceType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetOID->DeviceType);
                    Gb2312ToUtf8(pRspQryNetOID->DeviceType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetOIDJS->Set(Local<v8::Value> (DeviceType), Local<v8::Value>(DeviceTypeValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetOID->CName);
                    Gb2312ToUtf8(pRspQryNetOID->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetOIDJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetOID->EName);
                    Gb2312ToUtf8(pRspQryNetOID->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetOIDJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> OID = Nan::New<v8::String> ("OID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetOID->OID);
                    Gb2312ToUtf8(pRspQryNetOID->OID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetOIDJS->Set(Local<v8::Value> (OID), Local<v8::Value>(OIDValue));

                    v8::Local<v8::String> Unit = Nan::New<v8::String> ("Unit").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetOID->Unit);
                    Gb2312ToUtf8(pRspQryNetOID->Unit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UnitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetOIDJS->Set(Local<v8::Value> (Unit), Local<v8::Value>(UnitValue));

                    v8::Local<v8::String> isTheTable = Nan::New<v8::String> ("isTheTable").ToLocalChecked();
                    v8::Local<v8::Integer> isTheTableValue = Nan::New<v8::Integer> (pRspQryNetOID->isTheTable);
                    pRspQryNetOIDJS->Set(Local<v8::Value> (isTheTable), Local<v8::Value>(isTheTableValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetOID) { 
                    params[0] = Local<v8::Value>(pRspQryNetOIDJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetOID) { 
                delete pRspQryNetOID;
                pRspQryNetOID = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetOIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetOIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetOIDTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetOIDTopic_mutex);

    int ioUserNumb = g_RtnNetOIDTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetOIDTopic_IOUser_vec.begin();
        it != g_RtnNetOIDTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetOIDTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetOIDTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetOIDTopic_Data_map[*it].front());
            g_RtnNetOIDTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetOIDTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetOIDTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetOIDTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetOIDTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetOIDTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetOIDTopic").ToLocalChecked());
            CShfeFtdcRtnNetOIDField* pRtnNetOID = (CShfeFtdcRtnNetOIDField*)(paramArray[1]);
            if (OnRtnNetOIDTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetOIDTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetOIDJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetOID) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetOID->OperationType);
                    pRtnNetOIDJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetOID->ID);
                    pRtnNetOIDJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetOID->Manufactory);
                    Gb2312ToUtf8(pRtnNetOID->Manufactory, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetOIDJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                    v8::Local<v8::String> DeviceType = Nan::New<v8::String> ("DeviceType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetOID->DeviceType);
                    Gb2312ToUtf8(pRtnNetOID->DeviceType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetOIDJS->Set(Local<v8::Value> (DeviceType), Local<v8::Value>(DeviceTypeValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetOID->CName);
                    Gb2312ToUtf8(pRtnNetOID->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetOIDJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetOID->EName);
                    Gb2312ToUtf8(pRtnNetOID->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetOIDJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> OID = Nan::New<v8::String> ("OID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetOID->OID);
                    Gb2312ToUtf8(pRtnNetOID->OID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetOIDJS->Set(Local<v8::Value> (OID), Local<v8::Value>(OIDValue));

                    v8::Local<v8::String> Unit = Nan::New<v8::String> ("Unit").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetOID->Unit);
                    Gb2312ToUtf8(pRtnNetOID->Unit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UnitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetOIDJS->Set(Local<v8::Value> (Unit), Local<v8::Value>(UnitValue));

                    v8::Local<v8::String> isTheTable = Nan::New<v8::String> ("isTheTable").ToLocalChecked();
                    v8::Local<v8::Integer> isTheTableValue = Nan::New<v8::Integer> (pRtnNetOID->isTheTable);
                    pRtnNetOIDJS->Set(Local<v8::Value> (isTheTable), Local<v8::Value>(isTheTableValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetOID) { 
                    params[0] = Local<v8::Value>(pRtnNetOIDJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetOID) { 
                delete pRtnNetOID;
                pRtnNetOID = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetOIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetTimePolicyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetTimePolicyTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetTimePolicyTopic_mutex);

    int ioUserNumb = g_RspQryNetTimePolicyTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetTimePolicyTopic_IOUser_vec.begin();
        it != g_RspQryNetTimePolicyTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetTimePolicyTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetTimePolicyTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetTimePolicyTopic_Data_map[*it].front());
            g_RspQryNetTimePolicyTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetTimePolicyTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetTimePolicyTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetTimePolicyTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetTimePolicyTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetTimePolicyTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetTimePolicyTopic").ToLocalChecked());
            CShfeFtdcRspQryNetTimePolicyField* pRspQryNetTimePolicy = (CShfeFtdcRspQryNetTimePolicyField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetTimePolicyTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetTimePolicyTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetTimePolicyJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetTimePolicy) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetTimePolicy->OperationType);
                    pRspQryNetTimePolicyJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetTimePolicy->ID);
                    pRspQryNetTimePolicyJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetTimePolicy->CName);
                    Gb2312ToUtf8(pRspQryNetTimePolicy->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetTimePolicyJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetTimePolicy->EName);
                    Gb2312ToUtf8(pRspQryNetTimePolicy->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetTimePolicyJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> PolicyType = Nan::New<v8::String> ("PolicyType").ToLocalChecked();
                    v8::Local<v8::Integer> PolicyTypeValue = Nan::New<v8::Integer> (pRspQryNetTimePolicy->PolicyType);
                    pRspQryNetTimePolicyJS->Set(Local<v8::Value> (PolicyType), Local<v8::Value>(PolicyTypeValue));

                    v8::Local<v8::String> PolicyString = Nan::New<v8::String> ("PolicyString").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetTimePolicy->PolicyString);
                    Gb2312ToUtf8(pRspQryNetTimePolicy->PolicyString, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PolicyStringValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetTimePolicyJS->Set(Local<v8::Value> (PolicyString), Local<v8::Value>(PolicyStringValue));

                    v8::Local<v8::String> TradingDay = Nan::New<v8::String> ("TradingDay").ToLocalChecked();
                    v8::Local<v8::Integer> TradingDayValue = Nan::New<v8::Integer> (pRspQryNetTimePolicy->TradingDay);
                    pRspQryNetTimePolicyJS->Set(Local<v8::Value> (TradingDay), Local<v8::Value>(TradingDayValue));

                    v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetTimePolicy->Description);
                    Gb2312ToUtf8(pRspQryNetTimePolicy->Description, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetTimePolicyJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                    v8::Local<v8::String> Operation = Nan::New<v8::String> ("Operation").ToLocalChecked();
                    v8::Local<v8::Integer> OperationValue = Nan::New<v8::Integer> (pRspQryNetTimePolicy->Operation);
                    pRspQryNetTimePolicyJS->Set(Local<v8::Value> (Operation), Local<v8::Value>(OperationValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetTimePolicy) { 
                    params[0] = Local<v8::Value>(pRspQryNetTimePolicyJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetTimePolicy) { 
                delete pRspQryNetTimePolicy;
                pRspQryNetTimePolicy = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetTimePolicyTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetTimePolicyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetTimePolicyTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetTimePolicyTopic_mutex);

    int ioUserNumb = g_RtnNetTimePolicyTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetTimePolicyTopic_IOUser_vec.begin();
        it != g_RtnNetTimePolicyTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetTimePolicyTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetTimePolicyTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetTimePolicyTopic_Data_map[*it].front());
            g_RtnNetTimePolicyTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetTimePolicyTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetTimePolicyTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetTimePolicyTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetTimePolicyTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetTimePolicyTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetTimePolicyTopic").ToLocalChecked());
            CShfeFtdcRtnNetTimePolicyField* pRtnNetTimePolicy = (CShfeFtdcRtnNetTimePolicyField*)(paramArray[1]);
            if (OnRtnNetTimePolicyTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetTimePolicyTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetTimePolicyJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetTimePolicy) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetTimePolicy->OperationType);
                    pRtnNetTimePolicyJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetTimePolicy->ID);
                    pRtnNetTimePolicyJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetTimePolicy->CName);
                    Gb2312ToUtf8(pRtnNetTimePolicy->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetTimePolicyJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetTimePolicy->EName);
                    Gb2312ToUtf8(pRtnNetTimePolicy->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetTimePolicyJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> PolicyType = Nan::New<v8::String> ("PolicyType").ToLocalChecked();
                    v8::Local<v8::Integer> PolicyTypeValue = Nan::New<v8::Integer> (pRtnNetTimePolicy->PolicyType);
                    pRtnNetTimePolicyJS->Set(Local<v8::Value> (PolicyType), Local<v8::Value>(PolicyTypeValue));

                    v8::Local<v8::String> PolicyString = Nan::New<v8::String> ("PolicyString").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetTimePolicy->PolicyString);
                    Gb2312ToUtf8(pRtnNetTimePolicy->PolicyString, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PolicyStringValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetTimePolicyJS->Set(Local<v8::Value> (PolicyString), Local<v8::Value>(PolicyStringValue));

                    v8::Local<v8::String> TradingDay = Nan::New<v8::String> ("TradingDay").ToLocalChecked();
                    v8::Local<v8::Integer> TradingDayValue = Nan::New<v8::Integer> (pRtnNetTimePolicy->TradingDay);
                    pRtnNetTimePolicyJS->Set(Local<v8::Value> (TradingDay), Local<v8::Value>(TradingDayValue));

                    v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetTimePolicy->Description);
                    Gb2312ToUtf8(pRtnNetTimePolicy->Description, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetTimePolicyJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                    v8::Local<v8::String> Operation = Nan::New<v8::String> ("Operation").ToLocalChecked();
                    v8::Local<v8::Integer> OperationValue = Nan::New<v8::Integer> (pRtnNetTimePolicy->Operation);
                    pRtnNetTimePolicyJS->Set(Local<v8::Value> (Operation), Local<v8::Value>(OperationValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetTimePolicy) { 
                    params[0] = Local<v8::Value>(pRtnNetTimePolicyJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetTimePolicy) { 
                delete pRtnNetTimePolicy;
                pRtnNetTimePolicy = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetTimePolicyTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetGatherTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetGatherTaskTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetGatherTaskTopic_mutex);

    int ioUserNumb = g_RspQryNetGatherTaskTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetGatherTaskTopic_IOUser_vec.begin();
        it != g_RspQryNetGatherTaskTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetGatherTaskTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetGatherTaskTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetGatherTaskTopic_Data_map[*it].front());
            g_RspQryNetGatherTaskTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetGatherTaskTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetGatherTaskTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetGatherTaskTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetGatherTaskTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetGatherTaskTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetGatherTaskTopic").ToLocalChecked());
            CShfeFtdcRspQryNetGatherTaskField* pRspQryNetGatherTask = (CShfeFtdcRspQryNetGatherTaskField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetGatherTaskTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetGatherTaskTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetGatherTaskJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetGatherTask) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetGatherTask->OperationType);
                    pRspQryNetGatherTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetGatherTask->ID);
                    pRspQryNetGatherTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetGatherTask->ObjectID);
                    Gb2312ToUtf8(pRspQryNetGatherTask->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetGatherTaskJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetGatherTask->AttrType);
                    Gb2312ToUtf8(pRspQryNetGatherTask->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetGatherTaskJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> PolicyTypeID = Nan::New<v8::String> ("PolicyTypeID").ToLocalChecked();
                    v8::Local<v8::Integer> PolicyTypeIDValue = Nan::New<v8::Integer> (pRspQryNetGatherTask->PolicyTypeID);
                    pRspQryNetGatherTaskJS->Set(Local<v8::Value> (PolicyTypeID), Local<v8::Value>(PolicyTypeIDValue));

                    v8::Local<v8::String> DataType = Nan::New<v8::String> ("DataType").ToLocalChecked();
                    v8::Local<v8::Integer> DataTypeValue = Nan::New<v8::Integer> (pRspQryNetGatherTask->DataType);
                    pRspQryNetGatherTaskJS->Set(Local<v8::Value> (DataType), Local<v8::Value>(DataTypeValue));

                    v8::Local<v8::String> TypeFlag = Nan::New<v8::String> ("TypeFlag").ToLocalChecked();
                    v8::Local<v8::Integer> TypeFlagValue = Nan::New<v8::Integer> (pRspQryNetGatherTask->TypeFlag);
                    pRspQryNetGatherTaskJS->Set(Local<v8::Value> (TypeFlag), Local<v8::Value>(TypeFlagValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetGatherTask) { 
                    params[0] = Local<v8::Value>(pRspQryNetGatherTaskJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetGatherTask) { 
                delete pRspQryNetGatherTask;
                pRspQryNetGatherTask = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetGatherTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetGatherTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetGatherTaskTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetGatherTaskTopic_mutex);

    int ioUserNumb = g_RtnNetGatherTaskTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetGatherTaskTopic_IOUser_vec.begin();
        it != g_RtnNetGatherTaskTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetGatherTaskTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetGatherTaskTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetGatherTaskTopic_Data_map[*it].front());
            g_RtnNetGatherTaskTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetGatherTaskTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetGatherTaskTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetGatherTaskTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetGatherTaskTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetGatherTaskTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetGatherTaskTopic").ToLocalChecked());
            CShfeFtdcRtnNetGatherTaskField* pRtnNetGatherTask = (CShfeFtdcRtnNetGatherTaskField*)(paramArray[1]);
            if (OnRtnNetGatherTaskTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetGatherTaskTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetGatherTaskJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetGatherTask) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetGatherTask->OperationType);
                    pRtnNetGatherTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetGatherTask->ID);
                    pRtnNetGatherTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetGatherTask->ObjectID);
                    Gb2312ToUtf8(pRtnNetGatherTask->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetGatherTaskJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetGatherTask->AttrType);
                    Gb2312ToUtf8(pRtnNetGatherTask->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetGatherTaskJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> PolicyTypeID = Nan::New<v8::String> ("PolicyTypeID").ToLocalChecked();
                    v8::Local<v8::Integer> PolicyTypeIDValue = Nan::New<v8::Integer> (pRtnNetGatherTask->PolicyTypeID);
                    pRtnNetGatherTaskJS->Set(Local<v8::Value> (PolicyTypeID), Local<v8::Value>(PolicyTypeIDValue));

                    v8::Local<v8::String> DataType = Nan::New<v8::String> ("DataType").ToLocalChecked();
                    v8::Local<v8::Integer> DataTypeValue = Nan::New<v8::Integer> (pRtnNetGatherTask->DataType);
                    pRtnNetGatherTaskJS->Set(Local<v8::Value> (DataType), Local<v8::Value>(DataTypeValue));

                    v8::Local<v8::String> TypeFlag = Nan::New<v8::String> ("TypeFlag").ToLocalChecked();
                    v8::Local<v8::Integer> TypeFlagValue = Nan::New<v8::Integer> (pRtnNetGatherTask->TypeFlag);
                    pRtnNetGatherTaskJS->Set(Local<v8::Value> (TypeFlag), Local<v8::Value>(TypeFlagValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetGatherTask) { 
                    params[0] = Local<v8::Value>(pRtnNetGatherTaskJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetGatherTask) { 
                delete pRtnNetGatherTask;
                pRtnNetGatherTask = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetGatherTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetDeviceChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetDeviceChgTopic_mutex);

    int ioUserNumb = g_RspQryNetDeviceChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetDeviceChgTopic_IOUser_vec.begin();
        it != g_RspQryNetDeviceChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetDeviceChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetDeviceChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetDeviceChgTopic_Data_map[*it].front());
            g_RspQryNetDeviceChgTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetDeviceChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetDeviceChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetDeviceChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetDeviceChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetDeviceChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceChgTopic").ToLocalChecked());
            CShfeFtdcRspQryNetDeviceChgField* pRspQryNetDeviceChg = (CShfeFtdcRspQryNetDeviceChgField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetDeviceChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetDeviceChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetDeviceChgJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetDeviceChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceChg->DeviceID);
                    pRspQryNetDeviceChgJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                    v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRspQryNetDeviceChg->SysNetSubAreaID);
                    pRspQryNetDeviceChgJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                    v8::Local<v8::String> OldObjectID = Nan::New<v8::String> ("OldObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceChg->OldObjectID);
                    Gb2312ToUtf8(pRspQryNetDeviceChg->OldObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OldObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceChgJS->Set(Local<v8::Value> (OldObjectID), Local<v8::Value>(OldObjectIDValue));

                    v8::Local<v8::String> NewObjectID = Nan::New<v8::String> ("NewObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceChg->NewObjectID);
                    Gb2312ToUtf8(pRspQryNetDeviceChg->NewObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NewObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceChgJS->Set(Local<v8::Value> (NewObjectID), Local<v8::Value>(NewObjectIDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetDeviceChg) { 
                    params[0] = Local<v8::Value>(pRspQryNetDeviceChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetDeviceChg) { 
                delete pRspQryNetDeviceChg;
                pRspQryNetDeviceChg = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetDeviceChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDeviceChgTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetDeviceChgTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetDeviceChgTopic_mutex);

    int ioUserNumb = g_RtnNetDeviceChgTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetDeviceChgTopic_IOUser_vec.begin();
        it != g_RtnNetDeviceChgTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetDeviceChgTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetDeviceChgTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetDeviceChgTopic_Data_map[*it].front());
            g_RtnNetDeviceChgTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetDeviceChgTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetDeviceChgTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetDeviceChgTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetDeviceChgTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetDeviceChgTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDeviceChgTopic").ToLocalChecked());
            CShfeFtdcRtnNetDeviceChgField* pRtnNetDeviceChg = (CShfeFtdcRtnNetDeviceChgField*)(paramArray[1]);
            if (OnRtnNetDeviceChgTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetDeviceChgTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetDeviceChgJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetDeviceChg) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRtnNetDeviceChg->DeviceID);
                    pRtnNetDeviceChgJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                    v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRtnNetDeviceChg->SysNetSubAreaID);
                    pRtnNetDeviceChgJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                    v8::Local<v8::String> OldObjectID = Nan::New<v8::String> ("OldObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDeviceChg->OldObjectID);
                    Gb2312ToUtf8(pRtnNetDeviceChg->OldObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OldObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceChgJS->Set(Local<v8::Value> (OldObjectID), Local<v8::Value>(OldObjectIDValue));

                    v8::Local<v8::String> NewObjectID = Nan::New<v8::String> ("NewObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDeviceChg->NewObjectID);
                    Gb2312ToUtf8(pRtnNetDeviceChg->NewObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NewObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceChgJS->Set(Local<v8::Value> (NewObjectID), Local<v8::Value>(NewObjectIDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetDeviceChg) { 
                    params[0] = Local<v8::Value>(pRtnNetDeviceChgJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetDeviceChg) { 
                delete pRtnNetDeviceChg;
                pRtnNetDeviceChg = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetDeviceChgTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetDeviceTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetDeviceTypeTopic_mutex);

    int ioUserNumb = g_RspQryNetDeviceTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetDeviceTypeTopic_IOUser_vec.begin();
        it != g_RspQryNetDeviceTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetDeviceTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetDeviceTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetDeviceTypeTopic_Data_map[*it].front());
            g_RspQryNetDeviceTypeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetDeviceTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetDeviceTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetDeviceTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetDeviceTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetDeviceTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceTypeTopic").ToLocalChecked());
            CShfeFtdcRspQryNetDeviceTypeField* pRspQryNetDeviceType = (CShfeFtdcRspQryNetDeviceTypeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetDeviceTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetDeviceTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetDeviceTypeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetDeviceType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDeviceType->OperationType);
                    pRspQryNetDeviceTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDeviceType->ID);
                    pRspQryNetDeviceTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceType->Manufactory);
                    Gb2312ToUtf8(pRspQryNetDeviceType->Manufactory, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceTypeJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                    v8::Local<v8::String> DeviceType = Nan::New<v8::String> ("DeviceType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceType->DeviceType);
                    Gb2312ToUtf8(pRspQryNetDeviceType->DeviceType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceTypeJS->Set(Local<v8::Value> (DeviceType), Local<v8::Value>(DeviceTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetDeviceType) { 
                    params[0] = Local<v8::Value>(pRspQryNetDeviceTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetDeviceType) { 
                delete pRspQryNetDeviceType;
                pRspQryNetDeviceType = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetDeviceTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDeviceTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetDeviceTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetDeviceTypeTopic_mutex);

    int ioUserNumb = g_RtnNetDeviceTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetDeviceTypeTopic_IOUser_vec.begin();
        it != g_RtnNetDeviceTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetDeviceTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetDeviceTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetDeviceTypeTopic_Data_map[*it].front());
            g_RtnNetDeviceTypeTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetDeviceTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetDeviceTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetDeviceTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetDeviceTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetDeviceTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDeviceTypeTopic").ToLocalChecked());
            CShfeFtdcRtnNetDeviceTypeField* pRtnNetDeviceType = (CShfeFtdcRtnNetDeviceTypeField*)(paramArray[1]);
            if (OnRtnNetDeviceTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetDeviceTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetDeviceTypeJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetDeviceType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDeviceType->OperationType);
                    pRtnNetDeviceTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDeviceType->ID);
                    pRtnNetDeviceTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDeviceType->Manufactory);
                    Gb2312ToUtf8(pRtnNetDeviceType->Manufactory, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceTypeJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                    v8::Local<v8::String> DeviceType = Nan::New<v8::String> ("DeviceType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDeviceType->DeviceType);
                    Gb2312ToUtf8(pRtnNetDeviceType->DeviceType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceTypeJS->Set(Local<v8::Value> (DeviceType), Local<v8::Value>(DeviceTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetDeviceType) { 
                    params[0] = Local<v8::Value>(pRtnNetDeviceTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetDeviceType) { 
                delete pRtnNetDeviceType;
                pRtnNetDeviceType = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetDeviceTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDeviceCategoryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetDeviceCategoryTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetDeviceCategoryTopic_mutex);

    int ioUserNumb = g_RspQryNetDeviceCategoryTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetDeviceCategoryTopic_IOUser_vec.begin();
        it != g_RspQryNetDeviceCategoryTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetDeviceCategoryTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetDeviceCategoryTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetDeviceCategoryTopic_Data_map[*it].front());
            g_RspQryNetDeviceCategoryTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetDeviceCategoryTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetDeviceCategoryTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetDeviceCategoryTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetDeviceCategoryTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetDeviceCategoryTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceCategoryTopic").ToLocalChecked());
            CShfeFtdcRspQryNetDeviceCategoryField* pRspQryNetDeviceCategory = (CShfeFtdcRspQryNetDeviceCategoryField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetDeviceCategoryTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetDeviceCategoryTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetDeviceCategoryJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetDeviceCategory) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDeviceCategory->OperationType);
                    pRspQryNetDeviceCategoryJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDeviceCategory->ID);
                    pRspQryNetDeviceCategoryJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceCategory->CName);
                    Gb2312ToUtf8(pRspQryNetDeviceCategory->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceCategoryJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDeviceCategory->EName);
                    Gb2312ToUtf8(pRspQryNetDeviceCategory->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDeviceCategoryJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetDeviceCategory) { 
                    params[0] = Local<v8::Value>(pRspQryNetDeviceCategoryJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetDeviceCategory) { 
                delete pRspQryNetDeviceCategory;
                pRspQryNetDeviceCategory = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetDeviceCategoryTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDeviceCategoryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetDeviceCategoryTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetDeviceCategoryTopic_mutex);

    int ioUserNumb = g_RtnNetDeviceCategoryTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetDeviceCategoryTopic_IOUser_vec.begin();
        it != g_RtnNetDeviceCategoryTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetDeviceCategoryTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetDeviceCategoryTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetDeviceCategoryTopic_Data_map[*it].front());
            g_RtnNetDeviceCategoryTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetDeviceCategoryTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetDeviceCategoryTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetDeviceCategoryTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetDeviceCategoryTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetDeviceCategoryTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDeviceCategoryTopic").ToLocalChecked());
            CShfeFtdcRtnNetDeviceCategoryField* pRtnNetDeviceCategory = (CShfeFtdcRtnNetDeviceCategoryField*)(paramArray[1]);
            if (OnRtnNetDeviceCategoryTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetDeviceCategoryTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetDeviceCategoryJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetDeviceCategory) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDeviceCategory->OperationType);
                    pRtnNetDeviceCategoryJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDeviceCategory->ID);
                    pRtnNetDeviceCategoryJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDeviceCategory->CName);
                    Gb2312ToUtf8(pRtnNetDeviceCategory->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceCategoryJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDeviceCategory->EName);
                    Gb2312ToUtf8(pRtnNetDeviceCategory->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDeviceCategoryJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetDeviceCategory) { 
                    params[0] = Local<v8::Value>(pRtnNetDeviceCategoryJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetDeviceCategory) { 
                delete pRtnNetDeviceCategory;
                pRtnNetDeviceCategory = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetDeviceCategoryTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetManufactoryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetManufactoryTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetManufactoryTopic_mutex);

    int ioUserNumb = g_RspQryNetManufactoryTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetManufactoryTopic_IOUser_vec.begin();
        it != g_RspQryNetManufactoryTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetManufactoryTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetManufactoryTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetManufactoryTopic_Data_map[*it].front());
            g_RspQryNetManufactoryTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetManufactoryTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetManufactoryTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetManufactoryTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetManufactoryTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetManufactoryTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetManufactoryTopic").ToLocalChecked());
            CShfeFtdcRspQryNetManufactoryField* pRspQryNetManufactory = (CShfeFtdcRspQryNetManufactoryField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetManufactoryTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetManufactoryTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetManufactoryJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetManufactory) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetManufactory->OperationType);
                    pRspQryNetManufactoryJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetManufactory->ID);
                    pRspQryNetManufactoryJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetManufactory->CName);
                    Gb2312ToUtf8(pRspQryNetManufactory->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetManufactoryJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetManufactory->EName);
                    Gb2312ToUtf8(pRspQryNetManufactory->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetManufactoryJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetManufactory) { 
                    params[0] = Local<v8::Value>(pRspQryNetManufactoryJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetManufactory) { 
                delete pRspQryNetManufactory;
                pRspQryNetManufactory = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetManufactoryTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetManufactoryTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetManufactoryTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetManufactoryTopic_mutex);

    int ioUserNumb = g_RtnNetManufactoryTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetManufactoryTopic_IOUser_vec.begin();
        it != g_RtnNetManufactoryTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetManufactoryTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetManufactoryTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetManufactoryTopic_Data_map[*it].front());
            g_RtnNetManufactoryTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetManufactoryTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetManufactoryTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetManufactoryTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetManufactoryTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetManufactoryTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetManufactoryTopic").ToLocalChecked());
            CShfeFtdcRtnNetManufactoryField* pRtnNetManufactory = (CShfeFtdcRtnNetManufactoryField*)(paramArray[1]);
            if (OnRtnNetManufactoryTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetManufactoryTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetManufactoryJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetManufactory) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetManufactory->OperationType);
                    pRtnNetManufactoryJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetManufactory->ID);
                    pRtnNetManufactoryJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetManufactory->CName);
                    Gb2312ToUtf8(pRtnNetManufactory->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetManufactoryJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetManufactory->EName);
                    Gb2312ToUtf8(pRtnNetManufactory->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetManufactoryJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetManufactory) { 
                    params[0] = Local<v8::Value>(pRtnNetManufactoryJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetManufactory) { 
                delete pRtnNetManufactory;
                pRtnNetManufactory = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetManufactoryTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetCommunityTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetCommunityTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetCommunityTopic_mutex);

    int ioUserNumb = g_RspQryNetCommunityTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetCommunityTopic_IOUser_vec.begin();
        it != g_RspQryNetCommunityTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetCommunityTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetCommunityTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetCommunityTopic_Data_map[*it].front());
            g_RspQryNetCommunityTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetCommunityTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetCommunityTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetCommunityTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetCommunityTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetCommunityTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetCommunityTopic").ToLocalChecked());
            CShfeFtdcRspQryNetCommunityField* pRspQryNetCommunity = (CShfeFtdcRspQryNetCommunityField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetCommunityTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetCommunityTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetCommunityJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetCommunity) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetCommunity->OperationType);
                    pRspQryNetCommunityJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetCommunity->ID);
                    pRspQryNetCommunityJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetCommunity->IPADDR);
                    Gb2312ToUtf8(pRspQryNetCommunity->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetCommunityJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> COMMUNITY = Nan::New<v8::String> ("COMMUNITY").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetCommunity->COMMUNITY);
                    Gb2312ToUtf8(pRspQryNetCommunity->COMMUNITY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> COMMUNITYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetCommunityJS->Set(Local<v8::Value> (COMMUNITY), Local<v8::Value>(COMMUNITYValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetCommunity) { 
                    params[0] = Local<v8::Value>(pRspQryNetCommunityJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetCommunity) { 
                delete pRspQryNetCommunity;
                pRspQryNetCommunity = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetCommunityTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetCommunityTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetCommunityTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetCommunityTopic_mutex);

    int ioUserNumb = g_RtnNetCommunityTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetCommunityTopic_IOUser_vec.begin();
        it != g_RtnNetCommunityTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetCommunityTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetCommunityTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetCommunityTopic_Data_map[*it].front());
            g_RtnNetCommunityTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetCommunityTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetCommunityTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetCommunityTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetCommunityTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetCommunityTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetCommunityTopic").ToLocalChecked());
            CShfeFtdcRtnNetCommunityField* pRtnNetCommunity = (CShfeFtdcRtnNetCommunityField*)(paramArray[1]);
            if (OnRtnNetCommunityTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetCommunityTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetCommunityJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetCommunity) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetCommunity->OperationType);
                    pRtnNetCommunityJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetCommunity->ID);
                    pRtnNetCommunityJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetCommunity->IPADDR);
                    Gb2312ToUtf8(pRtnNetCommunity->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetCommunityJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> COMMUNITY = Nan::New<v8::String> ("COMMUNITY").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetCommunity->COMMUNITY);
                    Gb2312ToUtf8(pRtnNetCommunity->COMMUNITY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> COMMUNITYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetCommunityJS->Set(Local<v8::Value> (COMMUNITY), Local<v8::Value>(COMMUNITYValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetCommunity) { 
                    params[0] = Local<v8::Value>(pRtnNetCommunityJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetCommunity) { 
                delete pRtnNetCommunity;
                pRtnNetCommunity = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetCommunityTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPortTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetPortTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetPortTypeTopic_mutex);

    int ioUserNumb = g_RspQryNetPortTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetPortTypeTopic_IOUser_vec.begin();
        it != g_RspQryNetPortTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetPortTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetPortTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetPortTypeTopic_Data_map[*it].front());
            g_RspQryNetPortTypeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetPortTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetPortTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetPortTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetPortTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetPortTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPortTypeTopic").ToLocalChecked());
            CShfeFtdcRspQryNetPortTypeField* pRspQryNetPortType = (CShfeFtdcRspQryNetPortTypeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetPortTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetPortTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetPortTypeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetPortType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPortType->OperationType);
                    pRspQryNetPortTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPortType->ID);
                    pRspQryNetPortTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPortType->CName);
                    Gb2312ToUtf8(pRspQryNetPortType->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPortTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPortType->EName);
                    Gb2312ToUtf8(pRspQryNetPortType->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPortTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPortType->Description);
                    Gb2312ToUtf8(pRspQryNetPortType->Description, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPortTypeJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetPortType) { 
                    params[0] = Local<v8::Value>(pRspQryNetPortTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetPortType) { 
                delete pRspQryNetPortType;
                pRspQryNetPortType = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetPortTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPortTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetPortTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetPortTypeTopic_mutex);

    int ioUserNumb = g_RtnNetPortTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetPortTypeTopic_IOUser_vec.begin();
        it != g_RtnNetPortTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetPortTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetPortTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetPortTypeTopic_Data_map[*it].front());
            g_RtnNetPortTypeTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetPortTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetPortTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetPortTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetPortTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetPortTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPortTypeTopic").ToLocalChecked());
            CShfeFtdcRtnNetPortTypeField* pRtnNetPortType = (CShfeFtdcRtnNetPortTypeField*)(paramArray[1]);
            if (OnRtnNetPortTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetPortTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetPortTypeJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetPortType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPortType->OperationType);
                    pRtnNetPortTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPortType->ID);
                    pRtnNetPortTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPortType->CName);
                    Gb2312ToUtf8(pRtnNetPortType->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPortTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPortType->EName);
                    Gb2312ToUtf8(pRtnNetPortType->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPortTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPortType->Description);
                    Gb2312ToUtf8(pRtnNetPortType->Description, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPortTypeJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetPortType) { 
                    params[0] = Local<v8::Value>(pRtnNetPortTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetPortType) { 
                delete pRtnNetPortType;
                pRtnNetPortType = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetPortTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPartAccessSpotTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetPartAccessSpotTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetPartAccessSpotTopic_mutex);

    int ioUserNumb = g_RspQryNetPartAccessSpotTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetPartAccessSpotTopic_IOUser_vec.begin();
        it != g_RspQryNetPartAccessSpotTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetPartAccessSpotTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetPartAccessSpotTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetPartAccessSpotTopic_Data_map[*it].front());
            g_RspQryNetPartAccessSpotTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetPartAccessSpotTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetPartAccessSpotTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetPartAccessSpotTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetPartAccessSpotTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetPartAccessSpotTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPartAccessSpotTopic").ToLocalChecked());
            CShfeFtdcRspQryNetPartAccessSpotField* pRspQryNetPartAccessSpot = (CShfeFtdcRspQryNetPartAccessSpotField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetPartAccessSpotTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetPartAccessSpotTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetPartAccessSpotJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetPartAccessSpot) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPartAccessSpot->OperationType);
                    pRspQryNetPartAccessSpotJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPartAccessSpot->ID);
                    pRspQryNetPartAccessSpotJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartAccessSpot->CName);
                    Gb2312ToUtf8(pRspQryNetPartAccessSpot->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartAccessSpotJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartAccessSpot->EName);
                    Gb2312ToUtf8(pRspQryNetPartAccessSpot->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartAccessSpotJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetPartAccessSpot) { 
                    params[0] = Local<v8::Value>(pRspQryNetPartAccessSpotJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetPartAccessSpot) { 
                delete pRspQryNetPartAccessSpot;
                pRspQryNetPartAccessSpot = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetPartAccessSpotTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPartAccessSpotTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetPartAccessSpotTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetPartAccessSpotTopic_mutex);

    int ioUserNumb = g_RtnNetPartAccessSpotTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetPartAccessSpotTopic_IOUser_vec.begin();
        it != g_RtnNetPartAccessSpotTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetPartAccessSpotTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetPartAccessSpotTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetPartAccessSpotTopic_Data_map[*it].front());
            g_RtnNetPartAccessSpotTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetPartAccessSpotTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetPartAccessSpotTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetPartAccessSpotTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetPartAccessSpotTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetPartAccessSpotTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPartAccessSpotTopic").ToLocalChecked());
            CShfeFtdcRtnNetPartAccessSpotField* pRtnNetPartAccessSpot = (CShfeFtdcRtnNetPartAccessSpotField*)(paramArray[1]);
            if (OnRtnNetPartAccessSpotTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetPartAccessSpotTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetPartAccessSpotJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetPartAccessSpot) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPartAccessSpot->OperationType);
                    pRtnNetPartAccessSpotJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPartAccessSpot->ID);
                    pRtnNetPartAccessSpotJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartAccessSpot->CName);
                    Gb2312ToUtf8(pRtnNetPartAccessSpot->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartAccessSpotJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartAccessSpot->EName);
                    Gb2312ToUtf8(pRtnNetPartAccessSpot->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartAccessSpotJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetPartAccessSpot) { 
                    params[0] = Local<v8::Value>(pRtnNetPartAccessSpotJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetPartAccessSpot) { 
                delete pRtnNetPartAccessSpot;
                pRtnNetPartAccessSpot = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetPartAccessSpotTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetInterfaceTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetInterfaceTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetInterfaceTopic_mutex);

    int ioUserNumb = g_RspQryNetInterfaceTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetInterfaceTopic_IOUser_vec.begin();
        it != g_RspQryNetInterfaceTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetInterfaceTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetInterfaceTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetInterfaceTopic_Data_map[*it].front());
            g_RspQryNetInterfaceTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetInterfaceTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetInterfaceTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetInterfaceTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetInterfaceTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetInterfaceTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetInterfaceTopic").ToLocalChecked());
            CShfeFtdcRspQryNetInterfaceField* pRspQryNetInterface = (CShfeFtdcRspQryNetInterfaceField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetInterfaceTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetInterfaceTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetInterfaceJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetInterface) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetInterface->OperationType);
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetInterface->ID);
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetInterface->ObjectID);
                    Gb2312ToUtf8(pRspQryNetInterface->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRspQryNetInterface->MonitorType_ID);
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                    v8::Local<v8::String> IfType = Nan::New<v8::String> ("IfType").ToLocalChecked();
                    v8::Local<v8::Integer> IfTypeValue = Nan::New<v8::Integer> (pRspQryNetInterface->IfType);
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (IfType), Local<v8::Value>(IfTypeValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetInterface->EName);
                    Gb2312ToUtf8(pRspQryNetInterface->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> IpAddress = Nan::New<v8::String> ("IpAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetInterface->IpAddress);
                    Gb2312ToUtf8(pRspQryNetInterface->IpAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IpAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (IpAddress), Local<v8::Value>(IpAddressValue));

                    v8::Local<v8::String> IpMask = Nan::New<v8::String> ("IpMask").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetInterface->IpMask);
                    Gb2312ToUtf8(pRspQryNetInterface->IpMask, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IpMaskValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (IpMask), Local<v8::Value>(IpMaskValue));

                    v8::Local<v8::String> IfStatus = Nan::New<v8::String> ("IfStatus").ToLocalChecked();
                    v8::Local<v8::Integer> IfStatusValue = Nan::New<v8::Integer> (pRspQryNetInterface->IfStatus);
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (IfStatus), Local<v8::Value>(IfStatusValue));

                    v8::Local<v8::String> MAC = Nan::New<v8::String> ("MAC").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetInterface->MAC);
                    Gb2312ToUtf8(pRspQryNetInterface->MAC, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MACValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (MAC), Local<v8::Value>(MACValue));

                    v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRspQryNetInterface->DeviceID);
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                    v8::Local<v8::String> DeviceObjectID = Nan::New<v8::String> ("DeviceObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetInterface->DeviceObjectID);
                    Gb2312ToUtf8(pRspQryNetInterface->DeviceObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (DeviceObjectID), Local<v8::Value>(DeviceObjectIDValue));

                    v8::Local<v8::String> DeviceIndex = Nan::New<v8::String> ("DeviceIndex").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetInterface->DeviceIndex);
                    Gb2312ToUtf8(pRspQryNetInterface->DeviceIndex, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceIndexValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (DeviceIndex), Local<v8::Value>(DeviceIndexValue));

                    v8::Local<v8::String> isPolling = Nan::New<v8::String> ("isPolling").ToLocalChecked();
                    v8::Local<v8::Integer> isPollingValue = Nan::New<v8::Integer> (pRspQryNetInterface->isPolling);
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (isPolling), Local<v8::Value>(isPollingValue));

                    v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetInterface->Description);
                    Gb2312ToUtf8(pRspQryNetInterface->Description, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetInterfaceJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetInterface) { 
                    params[0] = Local<v8::Value>(pRspQryNetInterfaceJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetInterface) { 
                delete pRspQryNetInterface;
                pRspQryNetInterface = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetInterfaceTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetInterfaceTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetInterfaceTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetInterfaceTopic_mutex);

    int ioUserNumb = g_RtnNetInterfaceTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetInterfaceTopic_IOUser_vec.begin();
        it != g_RtnNetInterfaceTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetInterfaceTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetInterfaceTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetInterfaceTopic_Data_map[*it].front());
            g_RtnNetInterfaceTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetInterfaceTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetInterfaceTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetInterfaceTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetInterfaceTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetInterfaceTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetInterfaceTopic").ToLocalChecked());
            CShfeFtdcRtnNetInterfaceField* pRtnNetInterface = (CShfeFtdcRtnNetInterfaceField*)(paramArray[1]);
            if (OnRtnNetInterfaceTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetInterfaceTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetInterfaceJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetInterface) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetInterface->OperationType);
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetInterface->ID);
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetInterface->ObjectID);
                    Gb2312ToUtf8(pRtnNetInterface->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRtnNetInterface->MonitorType_ID);
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                    v8::Local<v8::String> IfType = Nan::New<v8::String> ("IfType").ToLocalChecked();
                    v8::Local<v8::Integer> IfTypeValue = Nan::New<v8::Integer> (pRtnNetInterface->IfType);
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (IfType), Local<v8::Value>(IfTypeValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetInterface->EName);
                    Gb2312ToUtf8(pRtnNetInterface->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> IpAddress = Nan::New<v8::String> ("IpAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetInterface->IpAddress);
                    Gb2312ToUtf8(pRtnNetInterface->IpAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IpAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (IpAddress), Local<v8::Value>(IpAddressValue));

                    v8::Local<v8::String> IpMask = Nan::New<v8::String> ("IpMask").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetInterface->IpMask);
                    Gb2312ToUtf8(pRtnNetInterface->IpMask, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IpMaskValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (IpMask), Local<v8::Value>(IpMaskValue));

                    v8::Local<v8::String> IfStatus = Nan::New<v8::String> ("IfStatus").ToLocalChecked();
                    v8::Local<v8::Integer> IfStatusValue = Nan::New<v8::Integer> (pRtnNetInterface->IfStatus);
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (IfStatus), Local<v8::Value>(IfStatusValue));

                    v8::Local<v8::String> MAC = Nan::New<v8::String> ("MAC").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetInterface->MAC);
                    Gb2312ToUtf8(pRtnNetInterface->MAC, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MACValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (MAC), Local<v8::Value>(MACValue));

                    v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRtnNetInterface->DeviceID);
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                    v8::Local<v8::String> DeviceObjectID = Nan::New<v8::String> ("DeviceObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetInterface->DeviceObjectID);
                    Gb2312ToUtf8(pRtnNetInterface->DeviceObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (DeviceObjectID), Local<v8::Value>(DeviceObjectIDValue));

                    v8::Local<v8::String> DeviceIndex = Nan::New<v8::String> ("DeviceIndex").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetInterface->DeviceIndex);
                    Gb2312ToUtf8(pRtnNetInterface->DeviceIndex, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceIndexValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (DeviceIndex), Local<v8::Value>(DeviceIndexValue));

                    v8::Local<v8::String> isPolling = Nan::New<v8::String> ("isPolling").ToLocalChecked();
                    v8::Local<v8::Integer> isPollingValue = Nan::New<v8::Integer> (pRtnNetInterface->isPolling);
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (isPolling), Local<v8::Value>(isPollingValue));

                    v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetInterface->Description);
                    Gb2312ToUtf8(pRtnNetInterface->Description, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetInterfaceJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetInterface) { 
                    params[0] = Local<v8::Value>(pRtnNetInterfaceJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetInterface) { 
                delete pRtnNetInterface;
                pRtnNetInterface = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetInterfaceTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetGeneralOIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetGeneralOIDTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetGeneralOIDTopic_mutex);

    int ioUserNumb = g_RspQryNetGeneralOIDTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetGeneralOIDTopic_IOUser_vec.begin();
        it != g_RspQryNetGeneralOIDTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetGeneralOIDTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetGeneralOIDTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetGeneralOIDTopic_Data_map[*it].front());
            g_RspQryNetGeneralOIDTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetGeneralOIDTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetGeneralOIDTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetGeneralOIDTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetGeneralOIDTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetGeneralOIDTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetGeneralOIDTopic").ToLocalChecked());
            CShfeFtdcRspQryNetGeneralOIDField* pRspQryNetGeneralOID = (CShfeFtdcRspQryNetGeneralOIDField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetGeneralOIDTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetGeneralOIDTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetGeneralOIDJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetGeneralOID) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetGeneralOID->OperationType);
                    pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetGeneralOID->ID);
                    pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetGeneralOID->CName);
                    Gb2312ToUtf8(pRspQryNetGeneralOID->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetGeneralOID->EName);
                    Gb2312ToUtf8(pRspQryNetGeneralOID->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> OID = Nan::New<v8::String> ("OID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetGeneralOID->OID);
                    Gb2312ToUtf8(pRspQryNetGeneralOID->OID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (OID), Local<v8::Value>(OIDValue));

                    v8::Local<v8::String> Unit = Nan::New<v8::String> ("Unit").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetGeneralOID->Unit);
                    Gb2312ToUtf8(pRspQryNetGeneralOID->Unit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UnitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (Unit), Local<v8::Value>(UnitValue));

                    v8::Local<v8::String> isTheTable = Nan::New<v8::String> ("isTheTable").ToLocalChecked();
                    v8::Local<v8::Integer> isTheTableValue = Nan::New<v8::Integer> (pRspQryNetGeneralOID->isTheTable);
                    pRspQryNetGeneralOIDJS->Set(Local<v8::Value> (isTheTable), Local<v8::Value>(isTheTableValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetGeneralOID) { 
                    params[0] = Local<v8::Value>(pRspQryNetGeneralOIDJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetGeneralOID) { 
                delete pRspQryNetGeneralOID;
                pRspQryNetGeneralOID = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetGeneralOIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetGeneralOIDTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetGeneralOIDTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetGeneralOIDTopic_mutex);

    int ioUserNumb = g_RtnNetGeneralOIDTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetGeneralOIDTopic_IOUser_vec.begin();
        it != g_RtnNetGeneralOIDTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetGeneralOIDTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetGeneralOIDTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetGeneralOIDTopic_Data_map[*it].front());
            g_RtnNetGeneralOIDTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetGeneralOIDTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetGeneralOIDTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetGeneralOIDTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetGeneralOIDTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetGeneralOIDTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetGeneralOIDTopic").ToLocalChecked());
            CShfeFtdcRtnNetGeneralOIDField* pRtnNetGeneralOID = (CShfeFtdcRtnNetGeneralOIDField*)(paramArray[1]);
            if (OnRtnNetGeneralOIDTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetGeneralOIDTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetGeneralOIDJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetGeneralOID) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetGeneralOID->OperationType);
                    pRtnNetGeneralOIDJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetGeneralOID->ID);
                    pRtnNetGeneralOIDJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetGeneralOID->CName);
                    Gb2312ToUtf8(pRtnNetGeneralOID->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetGeneralOIDJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetGeneralOID->EName);
                    Gb2312ToUtf8(pRtnNetGeneralOID->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetGeneralOIDJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> OID = Nan::New<v8::String> ("OID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetGeneralOID->OID);
                    Gb2312ToUtf8(pRtnNetGeneralOID->OID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetGeneralOIDJS->Set(Local<v8::Value> (OID), Local<v8::Value>(OIDValue));

                    v8::Local<v8::String> Unit = Nan::New<v8::String> ("Unit").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetGeneralOID->Unit);
                    Gb2312ToUtf8(pRtnNetGeneralOID->Unit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UnitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetGeneralOIDJS->Set(Local<v8::Value> (Unit), Local<v8::Value>(UnitValue));

                    v8::Local<v8::String> isTheTable = Nan::New<v8::String> ("isTheTable").ToLocalChecked();
                    v8::Local<v8::Integer> isTheTableValue = Nan::New<v8::Integer> (pRtnNetGeneralOID->isTheTable);
                    pRtnNetGeneralOIDJS->Set(Local<v8::Value> (isTheTable), Local<v8::Value>(isTheTableValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetGeneralOID) { 
                    params[0] = Local<v8::Value>(pRtnNetGeneralOIDJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetGeneralOID) { 
                delete pRtnNetGeneralOID;
                pRtnNetGeneralOID = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetGeneralOIDTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTypeTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorTypeTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorTypeTopic_Data_map[*it].front());
            g_RspQryNetMonitorTypeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTypeTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorTypeField* pRspQryNetMonitorType = (CShfeFtdcRspQryNetMonitorTypeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorTypeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorType->OperationType);
                    pRspQryNetMonitorTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorType->ID);
                    pRspQryNetMonitorTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorType->CName);
                    Gb2312ToUtf8(pRspQryNetMonitorType->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorType->EName);
                    Gb2312ToUtf8(pRspQryNetMonitorType->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorType) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorType) { 
                delete pRspQryNetMonitorType;
                pRspQryNetMonitorType = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorTypeTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorTypeTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorTypeTopic_Data_map[*it].front());
            g_RtnNetMonitorTypeTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTypeTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorTypeField* pRtnNetMonitorType = (CShfeFtdcRtnNetMonitorTypeField*)(paramArray[1]);
            if (OnRtnNetMonitorTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorTypeJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorType->OperationType);
                    pRtnNetMonitorTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorType->ID);
                    pRtnNetMonitorTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorType->CName);
                    Gb2312ToUtf8(pRtnNetMonitorType->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorType->EName);
                    Gb2312ToUtf8(pRtnNetMonitorType->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorType) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorType) { 
                delete pRtnNetMonitorType;
                pRtnNetMonitorType = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorAttrScopeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorAttrScopeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorAttrScopeTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorAttrScopeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorAttrScopeTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorAttrScopeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorAttrScopeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorAttrScopeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorAttrScopeTopic_Data_map[*it].front());
            g_RspQryNetMonitorAttrScopeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorAttrScopeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorAttrScopeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorAttrScopeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorAttrScopeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorAttrScopeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorAttrScopeTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorAttrScopeField* pRspQryNetMonitorAttrScope = (CShfeFtdcRspQryNetMonitorAttrScopeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorAttrScopeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorAttrScopeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorAttrScopeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorAttrScope) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrScope->OperationType);
                    pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrScope->ID);
                    pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorAttrScope->CName);
                    Gb2312ToUtf8(pRspQryNetMonitorAttrScope->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorAttrScope->EName);
                    Gb2312ToUtf8(pRspQryNetMonitorAttrScope->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorAttrScope->Comments);
                    Gb2312ToUtf8(pRspQryNetMonitorAttrScope->Comments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorAttrScope) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorAttrScopeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorAttrScope) { 
                delete pRspQryNetMonitorAttrScope;
                pRspQryNetMonitorAttrScope = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorAttrScopeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorAttrScopeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorAttrScopeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorAttrScopeTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorAttrScopeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorAttrScopeTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorAttrScopeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorAttrScopeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorAttrScopeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorAttrScopeTopic_Data_map[*it].front());
            g_RtnNetMonitorAttrScopeTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorAttrScopeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorAttrScopeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorAttrScopeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorAttrScopeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorAttrScopeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorAttrScopeTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorAttrScopeField* pRtnNetMonitorAttrScope = (CShfeFtdcRtnNetMonitorAttrScopeField*)(paramArray[1]);
            if (OnRtnNetMonitorAttrScopeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorAttrScopeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorAttrScopeJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorAttrScope) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrScope->OperationType);
                    pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrScope->ID);
                    pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorAttrScope->CName);
                    Gb2312ToUtf8(pRtnNetMonitorAttrScope->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorAttrScope->EName);
                    Gb2312ToUtf8(pRtnNetMonitorAttrScope->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorAttrScope->Comments);
                    Gb2312ToUtf8(pRtnNetMonitorAttrScope->Comments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorAttrScope) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorAttrScopeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorAttrScope) { 
                delete pRtnNetMonitorAttrScope;
                pRtnNetMonitorAttrScope = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorAttrScopeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorAttrTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorAttrTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorAttrTypeTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorAttrTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorAttrTypeTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorAttrTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorAttrTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorAttrTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorAttrTypeTopic_Data_map[*it].front());
            g_RspQryNetMonitorAttrTypeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorAttrTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorAttrTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorAttrTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorAttrTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorAttrTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorAttrTypeTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorAttrTypeField* pRspQryNetMonitorAttrType = (CShfeFtdcRspQryNetMonitorAttrTypeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorAttrTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorAttrTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorAttrTypeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorAttrType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrType->OperationType);
                    pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrType->ID);
                    pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrType->MANUFACTORY_ID);
                    pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                    v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrType->MonitorType_ID);
                    pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                    v8::Local<v8::String> AttrType_ID = Nan::New<v8::String> ("AttrType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> AttrType_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorAttrType->AttrType_ID);
                    pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (AttrType_ID), Local<v8::Value>(AttrType_IDValue));

                    v8::Local<v8::String> MANUFACTORY = Nan::New<v8::String> ("MANUFACTORY").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorAttrType->MANUFACTORY);
                    Gb2312ToUtf8(pRspQryNetMonitorAttrType->MANUFACTORY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MANUFACTORYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (MANUFACTORY), Local<v8::Value>(MANUFACTORYValue));

                    v8::Local<v8::String> MonitorType = Nan::New<v8::String> ("MonitorType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorAttrType->MonitorType);
                    Gb2312ToUtf8(pRspQryNetMonitorAttrType->MonitorType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonitorTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (MonitorType), Local<v8::Value>(MonitorTypeValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorAttrType->AttrType);
                    Gb2312ToUtf8(pRspQryNetMonitorAttrType->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorAttrType) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorAttrTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorAttrType) { 
                delete pRspQryNetMonitorAttrType;
                pRspQryNetMonitorAttrType = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorAttrTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorAttrTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorAttrTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorAttrTypeTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorAttrTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorAttrTypeTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorAttrTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorAttrTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorAttrTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorAttrTypeTopic_Data_map[*it].front());
            g_RtnNetMonitorAttrTypeTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorAttrTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorAttrTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorAttrTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorAttrTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorAttrTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorAttrTypeTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorAttrTypeField* pRtnNetMonitorAttrType = (CShfeFtdcRtnNetMonitorAttrTypeField*)(paramArray[1]);
            if (OnRtnNetMonitorAttrTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorAttrTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorAttrTypeJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorAttrType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrType->OperationType);
                    pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrType->ID);
                    pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrType->MANUFACTORY_ID);
                    pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                    v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrType->MonitorType_ID);
                    pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                    v8::Local<v8::String> AttrType_ID = Nan::New<v8::String> ("AttrType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> AttrType_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorAttrType->AttrType_ID);
                    pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (AttrType_ID), Local<v8::Value>(AttrType_IDValue));

                    v8::Local<v8::String> MANUFACTORY = Nan::New<v8::String> ("MANUFACTORY").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorAttrType->MANUFACTORY);
                    Gb2312ToUtf8(pRtnNetMonitorAttrType->MANUFACTORY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MANUFACTORYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (MANUFACTORY), Local<v8::Value>(MANUFACTORYValue));

                    v8::Local<v8::String> MonitorType = Nan::New<v8::String> ("MonitorType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorAttrType->MonitorType);
                    Gb2312ToUtf8(pRtnNetMonitorAttrType->MonitorType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonitorTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (MonitorType), Local<v8::Value>(MonitorTypeValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorAttrType->AttrType);
                    Gb2312ToUtf8(pRtnNetMonitorAttrType->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorAttrType) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorAttrTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorAttrType) { 
                delete pRtnNetMonitorAttrType;
                pRtnNetMonitorAttrType = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorAttrTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorObjectAttrTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorObjectAttrTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorObjectAttrTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorObjectAttrTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorObjectAttrTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorObjectAttrTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorObjectAttrTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorObjectAttrTopic_Data_map[*it].front());
            g_RspQryNetMonitorObjectAttrTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorObjectAttrTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorObjectAttrTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorObjectAttrTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorObjectAttrTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorObjectAttrTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorObjectAttrTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorObjectAttrField* pRspQryNetMonitorObjectAttr = (CShfeFtdcRspQryNetMonitorObjectAttrField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorObjectAttrTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorObjectAttrTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorObjectAttrJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorObjectAttr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorObjectAttr->OperationType);
                    pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorObjectAttr->ID);
                    pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorObjectAttr->ObjectID);
                    Gb2312ToUtf8(pRspQryNetMonitorObjectAttr->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorObjectAttr->AttrType);
                    Gb2312ToUtf8(pRspQryNetMonitorObjectAttr->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> PolicyTypeID = Nan::New<v8::String> ("PolicyTypeID").ToLocalChecked();
                    v8::Local<v8::Integer> PolicyTypeIDValue = Nan::New<v8::Integer> (pRspQryNetMonitorObjectAttr->PolicyTypeID);
                    pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value> (PolicyTypeID), Local<v8::Value>(PolicyTypeIDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorObjectAttr) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorObjectAttrJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorObjectAttr) { 
                delete pRspQryNetMonitorObjectAttr;
                pRspQryNetMonitorObjectAttr = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorObjectAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorObjectAttrTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorObjectAttrTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorObjectAttrTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorObjectAttrTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorObjectAttrTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorObjectAttrTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorObjectAttrTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorObjectAttrTopic_Data_map[*it].front());
            g_RtnNetMonitorObjectAttrTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorObjectAttrTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorObjectAttrTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorObjectAttrTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorObjectAttrTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorObjectAttrTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorObjectAttrTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorObjectAttrField* pRtnNetMonitorObjectAttr = (CShfeFtdcRtnNetMonitorObjectAttrField*)(paramArray[1]);
            if (OnRtnNetMonitorObjectAttrTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorObjectAttrTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorObjectAttrJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorObjectAttr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorObjectAttr->OperationType);
                    pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorObjectAttr->ID);
                    pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorObjectAttr->ObjectID);
                    Gb2312ToUtf8(pRtnNetMonitorObjectAttr->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> AttrType = Nan::New<v8::String> ("AttrType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorObjectAttr->AttrType);
                    Gb2312ToUtf8(pRtnNetMonitorObjectAttr->AttrType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value> (AttrType), Local<v8::Value>(AttrTypeValue));

                    v8::Local<v8::String> PolicyTypeID = Nan::New<v8::String> ("PolicyTypeID").ToLocalChecked();
                    v8::Local<v8::Integer> PolicyTypeIDValue = Nan::New<v8::Integer> (pRtnNetMonitorObjectAttr->PolicyTypeID);
                    pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value> (PolicyTypeID), Local<v8::Value>(PolicyTypeIDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorObjectAttr) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorObjectAttrJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorObjectAttr) { 
                delete pRtnNetMonitorObjectAttr;
                pRtnNetMonitorObjectAttr = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorObjectAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetFuncAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetFuncAreaTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetFuncAreaTopic_mutex);

    int ioUserNumb = g_RspQryNetFuncAreaTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetFuncAreaTopic_IOUser_vec.begin();
        it != g_RspQryNetFuncAreaTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetFuncAreaTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetFuncAreaTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetFuncAreaTopic_Data_map[*it].front());
            g_RspQryNetFuncAreaTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetFuncAreaTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetFuncAreaTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetFuncAreaTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetFuncAreaTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetFuncAreaTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetFuncAreaTopic").ToLocalChecked());
            CShfeFtdcRspQryNetFuncAreaField* pRspQryNetFuncArea = (CShfeFtdcRspQryNetFuncAreaField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetFuncAreaTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetFuncAreaTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetFuncAreaJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetFuncArea) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetFuncArea->OperationType);
                    pRspQryNetFuncAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetFuncArea->ID);
                    pRspQryNetFuncAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRspQryNetFuncArea->SysNetSubAreaID);
                    pRspQryNetFuncAreaJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetFuncArea->CName);
                    Gb2312ToUtf8(pRspQryNetFuncArea->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetFuncAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetFuncArea->EName);
                    Gb2312ToUtf8(pRspQryNetFuncArea->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetFuncAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetFuncArea) { 
                    params[0] = Local<v8::Value>(pRspQryNetFuncAreaJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetFuncArea) { 
                delete pRspQryNetFuncArea;
                pRspQryNetFuncArea = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetFuncAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetFuncAreaTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetFuncAreaTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetFuncAreaTopic_mutex);

    int ioUserNumb = g_RtnNetFuncAreaTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetFuncAreaTopic_IOUser_vec.begin();
        it != g_RtnNetFuncAreaTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetFuncAreaTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetFuncAreaTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetFuncAreaTopic_Data_map[*it].front());
            g_RtnNetFuncAreaTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetFuncAreaTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetFuncAreaTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetFuncAreaTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetFuncAreaTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetFuncAreaTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetFuncAreaTopic").ToLocalChecked());
            CShfeFtdcRtnNetFuncAreaField* pRtnNetFuncArea = (CShfeFtdcRtnNetFuncAreaField*)(paramArray[1]);
            if (OnRtnNetFuncAreaTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetFuncAreaTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetFuncAreaJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetFuncArea) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetFuncArea->OperationType);
                    pRtnNetFuncAreaJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetFuncArea->ID);
                    pRtnNetFuncAreaJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SysNetSubAreaID = Nan::New<v8::String> ("SysNetSubAreaID").ToLocalChecked();
                    v8::Local<v8::Integer> SysNetSubAreaIDValue = Nan::New<v8::Integer> (pRtnNetFuncArea->SysNetSubAreaID);
                    pRtnNetFuncAreaJS->Set(Local<v8::Value> (SysNetSubAreaID), Local<v8::Value>(SysNetSubAreaIDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetFuncArea->CName);
                    Gb2312ToUtf8(pRtnNetFuncArea->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetFuncAreaJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetFuncArea->EName);
                    Gb2312ToUtf8(pRtnNetFuncArea->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetFuncAreaJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetFuncArea) { 
                    params[0] = Local<v8::Value>(pRtnNetFuncAreaJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetFuncArea) { 
                delete pRtnNetFuncArea;
                pRtnNetFuncArea = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetFuncAreaTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorCommandTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorCommandTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorCommandTypeTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorCommandTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorCommandTypeTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorCommandTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorCommandTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorCommandTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorCommandTypeTopic_Data_map[*it].front());
            g_RspQryNetMonitorCommandTypeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorCommandTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorCommandTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorCommandTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorCommandTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorCommandTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorCommandTypeTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorCommandTypeField* pRspQryNetMonitorCommandType = (CShfeFtdcRspQryNetMonitorCommandTypeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorCommandTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorCommandTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorCommandTypeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorCommandType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->OperationType);
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->ID);
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->Manufactory_ID);
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                    v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->MonitorType_ID);
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                    v8::Local<v8::String> DeviceModle_ID = Nan::New<v8::String> ("DeviceModle_ID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceModle_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->DeviceModle_ID);
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (DeviceModle_ID), Local<v8::Value>(DeviceModle_IDValue));

                    v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorCommandType->ActionGroup_ID);
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                    v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorCommandType->Manufactory);
                    Gb2312ToUtf8(pRspQryNetMonitorCommandType->Manufactory, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                    v8::Local<v8::String> MonitorType = Nan::New<v8::String> ("MonitorType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorCommandType->MonitorType);
                    Gb2312ToUtf8(pRspQryNetMonitorCommandType->MonitorType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonitorTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (MonitorType), Local<v8::Value>(MonitorTypeValue));

                    v8::Local<v8::String> DeviceModle = Nan::New<v8::String> ("DeviceModle").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorCommandType->DeviceModle);
                    Gb2312ToUtf8(pRspQryNetMonitorCommandType->DeviceModle, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceModleValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (DeviceModle), Local<v8::Value>(DeviceModleValue));

                    v8::Local<v8::String> ActionGroup = Nan::New<v8::String> ("ActionGroup").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorCommandType->ActionGroup);
                    Gb2312ToUtf8(pRspQryNetMonitorCommandType->ActionGroup, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionGroupValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (ActionGroup), Local<v8::Value>(ActionGroupValue));

                    v8::Local<v8::String> Command = Nan::New<v8::String> ("Command").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorCommandType->Command);
                    Gb2312ToUtf8(pRspQryNetMonitorCommandType->Command, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommandValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value> (Command), Local<v8::Value>(CommandValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorCommandType) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorCommandTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorCommandType) { 
                delete pRspQryNetMonitorCommandType;
                pRspQryNetMonitorCommandType = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorCommandTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorCommandTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorCommandTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorCommandTypeTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorCommandTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorCommandTypeTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorCommandTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorCommandTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorCommandTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorCommandTypeTopic_Data_map[*it].front());
            g_RtnNetMonitorCommandTypeTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorCommandTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorCommandTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorCommandTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorCommandTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorCommandTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorCommandTypeTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorCommandTypeField* pRtnNetMonitorCommandType = (CShfeFtdcRtnNetMonitorCommandTypeField*)(paramArray[1]);
            if (OnRtnNetMonitorCommandTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorCommandTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorCommandTypeJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorCommandType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->OperationType);
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->ID);
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->Manufactory_ID);
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                    v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->MonitorType_ID);
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                    v8::Local<v8::String> DeviceModle_ID = Nan::New<v8::String> ("DeviceModle_ID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceModle_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->DeviceModle_ID);
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (DeviceModle_ID), Local<v8::Value>(DeviceModle_IDValue));

                    v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorCommandType->ActionGroup_ID);
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                    v8::Local<v8::String> Manufactory = Nan::New<v8::String> ("Manufactory").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorCommandType->Manufactory);
                    Gb2312ToUtf8(pRtnNetMonitorCommandType->Manufactory, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ManufactoryValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (Manufactory), Local<v8::Value>(ManufactoryValue));

                    v8::Local<v8::String> MonitorType = Nan::New<v8::String> ("MonitorType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorCommandType->MonitorType);
                    Gb2312ToUtf8(pRtnNetMonitorCommandType->MonitorType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonitorTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (MonitorType), Local<v8::Value>(MonitorTypeValue));

                    v8::Local<v8::String> DeviceModle = Nan::New<v8::String> ("DeviceModle").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorCommandType->DeviceModle);
                    Gb2312ToUtf8(pRtnNetMonitorCommandType->DeviceModle, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceModleValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (DeviceModle), Local<v8::Value>(DeviceModleValue));

                    v8::Local<v8::String> ActionGroup = Nan::New<v8::String> ("ActionGroup").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorCommandType->ActionGroup);
                    Gb2312ToUtf8(pRtnNetMonitorCommandType->ActionGroup, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionGroupValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (ActionGroup), Local<v8::Value>(ActionGroupValue));

                    v8::Local<v8::String> Command = Nan::New<v8::String> ("Command").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorCommandType->Command);
                    Gb2312ToUtf8(pRtnNetMonitorCommandType->Command, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommandValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value> (Command), Local<v8::Value>(CommandValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorCommandType) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorCommandTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorCommandType) { 
                delete pRtnNetMonitorCommandType;
                pRtnNetMonitorCommandType = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorCommandTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorActionGroupTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorActionGroupTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorActionGroupTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorActionGroupTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorActionGroupTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorActionGroupTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorActionGroupTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorActionGroupTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorActionGroupTopic_Data_map[*it].front());
            g_RspQryNetMonitorActionGroupTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorActionGroupTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorActionGroupTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorActionGroupTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorActionGroupTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorActionGroupTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorActionGroupTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorActionGroupField* pRspQryNetMonitorActionGroup = (CShfeFtdcRspQryNetMonitorActionGroupField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorActionGroupTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorActionGroupTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorActionGroupJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorActionGroup) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionGroup->OperationType);
                    pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionGroup->ID);
                    pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorActionGroup->CName);
                    Gb2312ToUtf8(pRspQryNetMonitorActionGroup->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorActionGroup->EName);
                    Gb2312ToUtf8(pRspQryNetMonitorActionGroup->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> ActionType = Nan::New<v8::String> ("ActionType").ToLocalChecked();
                    v8::Local<v8::Integer> ActionTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionGroup->ActionType);
                    pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (ActionType), Local<v8::Value>(ActionTypeValue));

                    v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorActionGroup->Comments);
                    Gb2312ToUtf8(pRspQryNetMonitorActionGroup->Comments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorActionGroup) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorActionGroupJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorActionGroup) { 
                delete pRspQryNetMonitorActionGroup;
                pRspQryNetMonitorActionGroup = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorActionGroupTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorActionGroupTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorActionGroupTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorActionGroupTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorActionGroupTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorActionGroupTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorActionGroupTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorActionGroupTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorActionGroupTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorActionGroupTopic_Data_map[*it].front());
            g_RtnNetMonitorActionGroupTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorActionGroupTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorActionGroupTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorActionGroupTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorActionGroupTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorActionGroupTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorActionGroupTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorActionGroupField* pRtnNetMonitorActionGroup = (CShfeFtdcRtnNetMonitorActionGroupField*)(paramArray[1]);
            if (OnRtnNetMonitorActionGroupTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorActionGroupTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorActionGroupJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorActionGroup) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorActionGroup->OperationType);
                    pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorActionGroup->ID);
                    pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorActionGroup->CName);
                    Gb2312ToUtf8(pRtnNetMonitorActionGroup->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorActionGroup->EName);
                    Gb2312ToUtf8(pRtnNetMonitorActionGroup->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> ActionType = Nan::New<v8::String> ("ActionType").ToLocalChecked();
                    v8::Local<v8::Integer> ActionTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorActionGroup->ActionType);
                    pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (ActionType), Local<v8::Value>(ActionTypeValue));

                    v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorActionGroup->Comments);
                    Gb2312ToUtf8(pRtnNetMonitorActionGroup->Comments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorActionGroupJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorActionGroup) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorActionGroupJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorActionGroup) { 
                delete pRtnNetMonitorActionGroup;
                pRtnNetMonitorActionGroup = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorActionGroupTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorDeviceGroupTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorDeviceGroupTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorDeviceGroupTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorDeviceGroupTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorDeviceGroupTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorDeviceGroupTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorDeviceGroupTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorDeviceGroupTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorDeviceGroupTopic_Data_map[*it].front());
            g_RspQryNetMonitorDeviceGroupTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorDeviceGroupTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorDeviceGroupTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorDeviceGroupTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorDeviceGroupTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorDeviceGroupTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorDeviceGroupTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorDeviceGroupField* pRspQryNetMonitorDeviceGroup = (CShfeFtdcRspQryNetMonitorDeviceGroupField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorDeviceGroupTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorDeviceGroupTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorDeviceGroupJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorDeviceGroup) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceGroup->OperationType);
                    pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceGroup->ID);
                    pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorDeviceGroup->CName);
                    Gb2312ToUtf8(pRspQryNetMonitorDeviceGroup->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorDeviceGroup->EName);
                    Gb2312ToUtf8(pRspQryNetMonitorDeviceGroup->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> Condition = Nan::New<v8::String> ("Condition").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorDeviceGroup->Condition);
                    Gb2312ToUtf8(pRspQryNetMonitorDeviceGroup->Condition, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ConditionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (Condition), Local<v8::Value>(ConditionValue));

                    v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorDeviceGroup->Comments);
                    Gb2312ToUtf8(pRspQryNetMonitorDeviceGroup->Comments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorDeviceGroup) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorDeviceGroupJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorDeviceGroup) { 
                delete pRspQryNetMonitorDeviceGroup;
                pRspQryNetMonitorDeviceGroup = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorDeviceGroupTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorDeviceGroupTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorDeviceGroupTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorDeviceGroupTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorDeviceGroupTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorDeviceGroupTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorDeviceGroupTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorDeviceGroupTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorDeviceGroupTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorDeviceGroupTopic_Data_map[*it].front());
            g_RtnNetMonitorDeviceGroupTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorDeviceGroupTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorDeviceGroupTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorDeviceGroupTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorDeviceGroupTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorDeviceGroupTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorDeviceGroupTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorDeviceGroupField* pRtnNetMonitorDeviceGroup = (CShfeFtdcRtnNetMonitorDeviceGroupField*)(paramArray[1]);
            if (OnRtnNetMonitorDeviceGroupTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorDeviceGroupTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorDeviceGroupJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorDeviceGroup) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceGroup->OperationType);
                    pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceGroup->ID);
                    pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorDeviceGroup->CName);
                    Gb2312ToUtf8(pRtnNetMonitorDeviceGroup->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorDeviceGroup->EName);
                    Gb2312ToUtf8(pRtnNetMonitorDeviceGroup->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> Condition = Nan::New<v8::String> ("Condition").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorDeviceGroup->Condition);
                    Gb2312ToUtf8(pRtnNetMonitorDeviceGroup->Condition, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ConditionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (Condition), Local<v8::Value>(ConditionValue));

                    v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorDeviceGroup->Comments);
                    Gb2312ToUtf8(pRtnNetMonitorDeviceGroup->Comments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorDeviceGroup) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorDeviceGroupJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorDeviceGroup) { 
                delete pRtnNetMonitorDeviceGroup;
                pRtnNetMonitorDeviceGroup = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorDeviceGroupTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTaskInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorTaskInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTaskInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorTaskInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorTaskInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorTaskInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorTaskInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorTaskInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorTaskInfoTopic_Data_map[*it].front());
            g_RspQryNetMonitorTaskInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorTaskInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorTaskInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorTaskInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorTaskInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorTaskInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTaskInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorTaskInfoField* pRspQryNetMonitorTaskInfo = (CShfeFtdcRspQryNetMonitorTaskInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorTaskInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorTaskInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorTaskInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorTaskInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->OperationType);
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->ID);
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInfo->CName);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInfo->EName);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> DeviceGroup_ID = Nan::New<v8::String> ("DeviceGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->DeviceGroup_ID);
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (DeviceGroup_ID), Local<v8::Value>(DeviceGroup_IDValue));

                    v8::Local<v8::String> ManagerGroup_ID = Nan::New<v8::String> ("ManagerGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ManagerGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->ManagerGroup_ID);
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ManagerGroup_ID), Local<v8::Value>(ManagerGroup_IDValue));

                    v8::Local<v8::String> TimePolicy_ID = Nan::New<v8::String> ("TimePolicy_ID").ToLocalChecked();
                    v8::Local<v8::Integer> TimePolicy_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->TimePolicy_ID);
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (TimePolicy_ID), Local<v8::Value>(TimePolicy_IDValue));

                    v8::Local<v8::String> TaskPriority_ID = Nan::New<v8::String> ("TaskPriority_ID").ToLocalChecked();
                    v8::Local<v8::Integer> TaskPriority_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->TaskPriority_ID);
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskPriority_ID), Local<v8::Value>(TaskPriority_IDValue));

                    v8::Local<v8::String> OutputPolicy_ID = Nan::New<v8::String> ("OutputPolicy_ID").ToLocalChecked();
                    v8::Local<v8::Integer> OutputPolicy_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->OutputPolicy_ID);
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (OutputPolicy_ID), Local<v8::Value>(OutputPolicy_IDValue));

                    v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->ActionGroup_ID);
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                    v8::Local<v8::String> EventExprStr = Nan::New<v8::String> ("EventExprStr").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInfo->EventExprStr);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->EventExprStr, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventExprStrValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (EventExprStr), Local<v8::Value>(EventExprStrValue));

                    v8::Local<v8::String> DeviceGroup = Nan::New<v8::String> ("DeviceGroup").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInfo->DeviceGroup);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->DeviceGroup, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceGroupValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (DeviceGroup), Local<v8::Value>(DeviceGroupValue));

                    v8::Local<v8::String> ManagerGroup = Nan::New<v8::String> ("ManagerGroup").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInfo->ManagerGroup);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->ManagerGroup, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ManagerGroupValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ManagerGroup), Local<v8::Value>(ManagerGroupValue));

                    v8::Local<v8::String> TimePolicy = Nan::New<v8::String> ("TimePolicy").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInfo->TimePolicy);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->TimePolicy, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimePolicyValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (TimePolicy), Local<v8::Value>(TimePolicyValue));

                    v8::Local<v8::String> TaskPriority = Nan::New<v8::String> ("TaskPriority").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInfo->TaskPriority);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->TaskPriority, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TaskPriorityValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskPriority), Local<v8::Value>(TaskPriorityValue));

                    v8::Local<v8::String> OutputPolicy = Nan::New<v8::String> ("OutputPolicy").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInfo->OutputPolicy);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->OutputPolicy, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OutputPolicyValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (OutputPolicy), Local<v8::Value>(OutputPolicyValue));

                    v8::Local<v8::String> ActionGroup = Nan::New<v8::String> ("ActionGroup").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInfo->ActionGroup);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->ActionGroup, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionGroupValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ActionGroup), Local<v8::Value>(ActionGroupValue));

                    v8::Local<v8::String> ValidFlag = Nan::New<v8::String> ("ValidFlag").ToLocalChecked();
                    v8::Local<v8::Integer> ValidFlagValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->ValidFlag);
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (ValidFlag), Local<v8::Value>(ValidFlagValue));

                    v8::Local<v8::String> TaskStatus = Nan::New<v8::String> ("TaskStatus").ToLocalChecked();
                    v8::Local<v8::Integer> TaskStatusValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInfo->TaskStatus);
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskStatus), Local<v8::Value>(TaskStatusValue));

                    v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInfo->Comments);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInfo->Comments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorTaskInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorTaskInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorTaskInfo) { 
                delete pRspQryNetMonitorTaskInfo;
                pRspQryNetMonitorTaskInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorTaskInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTaskInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorTaskInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorTaskInfoTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorTaskInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorTaskInfoTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorTaskInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorTaskInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorTaskInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorTaskInfoTopic_Data_map[*it].front());
            g_RtnNetMonitorTaskInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorTaskInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorTaskInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorTaskInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorTaskInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorTaskInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTaskInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorTaskInfoField* pRtnNetMonitorTaskInfo = (CShfeFtdcRtnNetMonitorTaskInfoField*)(paramArray[1]);
            if (OnRtnNetMonitorTaskInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorTaskInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorTaskInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorTaskInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->OperationType);
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->ID);
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInfo->CName);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInfo->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInfo->EName);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInfo->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> DeviceGroup_ID = Nan::New<v8::String> ("DeviceGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->DeviceGroup_ID);
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (DeviceGroup_ID), Local<v8::Value>(DeviceGroup_IDValue));

                    v8::Local<v8::String> ManagerGroup_ID = Nan::New<v8::String> ("ManagerGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ManagerGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->ManagerGroup_ID);
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ManagerGroup_ID), Local<v8::Value>(ManagerGroup_IDValue));

                    v8::Local<v8::String> TimePolicy_ID = Nan::New<v8::String> ("TimePolicy_ID").ToLocalChecked();
                    v8::Local<v8::Integer> TimePolicy_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->TimePolicy_ID);
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (TimePolicy_ID), Local<v8::Value>(TimePolicy_IDValue));

                    v8::Local<v8::String> TaskPriority_ID = Nan::New<v8::String> ("TaskPriority_ID").ToLocalChecked();
                    v8::Local<v8::Integer> TaskPriority_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->TaskPriority_ID);
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskPriority_ID), Local<v8::Value>(TaskPriority_IDValue));

                    v8::Local<v8::String> OutputPolicy_ID = Nan::New<v8::String> ("OutputPolicy_ID").ToLocalChecked();
                    v8::Local<v8::Integer> OutputPolicy_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->OutputPolicy_ID);
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (OutputPolicy_ID), Local<v8::Value>(OutputPolicy_IDValue));

                    v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->ActionGroup_ID);
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                    v8::Local<v8::String> EventExprStr = Nan::New<v8::String> ("EventExprStr").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInfo->EventExprStr);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInfo->EventExprStr, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EventExprStrValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (EventExprStr), Local<v8::Value>(EventExprStrValue));

                    v8::Local<v8::String> DeviceGroup = Nan::New<v8::String> ("DeviceGroup").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInfo->DeviceGroup);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInfo->DeviceGroup, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceGroupValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (DeviceGroup), Local<v8::Value>(DeviceGroupValue));

                    v8::Local<v8::String> ManagerGroup = Nan::New<v8::String> ("ManagerGroup").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInfo->ManagerGroup);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInfo->ManagerGroup, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ManagerGroupValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ManagerGroup), Local<v8::Value>(ManagerGroupValue));

                    v8::Local<v8::String> TimePolicy = Nan::New<v8::String> ("TimePolicy").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInfo->TimePolicy);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInfo->TimePolicy, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimePolicyValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (TimePolicy), Local<v8::Value>(TimePolicyValue));

                    v8::Local<v8::String> TaskPriority = Nan::New<v8::String> ("TaskPriority").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInfo->TaskPriority);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInfo->TaskPriority, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TaskPriorityValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskPriority), Local<v8::Value>(TaskPriorityValue));

                    v8::Local<v8::String> OutputPolicy = Nan::New<v8::String> ("OutputPolicy").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInfo->OutputPolicy);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInfo->OutputPolicy, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> OutputPolicyValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (OutputPolicy), Local<v8::Value>(OutputPolicyValue));

                    v8::Local<v8::String> ActionGroup = Nan::New<v8::String> ("ActionGroup").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInfo->ActionGroup);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInfo->ActionGroup, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ActionGroupValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ActionGroup), Local<v8::Value>(ActionGroupValue));

                    v8::Local<v8::String> ValidFlag = Nan::New<v8::String> ("ValidFlag").ToLocalChecked();
                    v8::Local<v8::Integer> ValidFlagValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->ValidFlag);
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (ValidFlag), Local<v8::Value>(ValidFlagValue));

                    v8::Local<v8::String> TaskStatus = Nan::New<v8::String> ("TaskStatus").ToLocalChecked();
                    v8::Local<v8::Integer> TaskStatusValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInfo->TaskStatus);
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (TaskStatus), Local<v8::Value>(TaskStatusValue));

                    v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInfo->Comments);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInfo->Comments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorTaskInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorTaskInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorTaskInfo) { 
                delete pRtnNetMonitorTaskInfo;
                pRtnNetMonitorTaskInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorTaskInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTaskResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorTaskResultTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTaskResultTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorTaskResultTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorTaskResultTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorTaskResultTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorTaskResultTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorTaskResultTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorTaskResultTopic_Data_map[*it].front());
            g_RspQryNetMonitorTaskResultTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorTaskResultTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorTaskResultTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorTaskResultTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorTaskResultTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorTaskResultTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTaskResultTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorTaskResultField* pRspQryNetMonitorTaskResult = (CShfeFtdcRspQryNetMonitorTaskResultField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorTaskResultTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorTaskResultTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorTaskResultJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorTaskResult) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskResult->OperationType);
                    pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskResult->ObjectID);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskResult->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> Task_ID = Nan::New<v8::String> ("Task_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Task_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskResult->Task_ID);
                    pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (Task_ID), Local<v8::Value>(Task_IDValue));

                    v8::Local<v8::String> OperateTime = Nan::New<v8::String> ("OperateTime").ToLocalChecked();
                    v8::Local<v8::Integer> OperateTimeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskResult->OperateTime);
                    pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (OperateTime), Local<v8::Value>(OperateTimeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskResult->MonDate);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskResult->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskResult->MonTime);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskResult->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> InstructChain = Nan::New<v8::String> ("InstructChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskResult->InstructChain);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskResult->InstructChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstructChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (InstructChain), Local<v8::Value>(InstructChainValue));

                    v8::Local<v8::String> ResultChain = Nan::New<v8::String> ("ResultChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskResult->ResultChain);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskResult->ResultChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ResultChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (ResultChain), Local<v8::Value>(ResultChainValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskResult->Flag);
                    pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorTaskResult) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorTaskResultJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorTaskResult) { 
                delete pRspQryNetMonitorTaskResult;
                pRspQryNetMonitorTaskResult = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorTaskResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTaskResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorTaskResultTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorTaskResultTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorTaskResultTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorTaskResultTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorTaskResultTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorTaskResultTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorTaskResultTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorTaskResultTopic_Data_map[*it].front());
            g_RtnNetMonitorTaskResultTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorTaskResultTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorTaskResultTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorTaskResultTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorTaskResultTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorTaskResultTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTaskResultTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorTaskResultField* pRtnNetMonitorTaskResult = (CShfeFtdcRtnNetMonitorTaskResultField*)(paramArray[1]);
            if (OnRtnNetMonitorTaskResultTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorTaskResultTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorTaskResultJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorTaskResult) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskResult->OperationType);
                    pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskResult->ObjectID);
                    Gb2312ToUtf8(pRtnNetMonitorTaskResult->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> Task_ID = Nan::New<v8::String> ("Task_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Task_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskResult->Task_ID);
                    pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (Task_ID), Local<v8::Value>(Task_IDValue));

                    v8::Local<v8::String> OperateTime = Nan::New<v8::String> ("OperateTime").ToLocalChecked();
                    v8::Local<v8::Integer> OperateTimeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskResult->OperateTime);
                    pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (OperateTime), Local<v8::Value>(OperateTimeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskResult->MonDate);
                    Gb2312ToUtf8(pRtnNetMonitorTaskResult->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskResult->MonTime);
                    Gb2312ToUtf8(pRtnNetMonitorTaskResult->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> InstructChain = Nan::New<v8::String> ("InstructChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskResult->InstructChain);
                    Gb2312ToUtf8(pRtnNetMonitorTaskResult->InstructChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstructChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (InstructChain), Local<v8::Value>(InstructChainValue));

                    v8::Local<v8::String> ResultChain = Nan::New<v8::String> ("ResultChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskResult->ResultChain);
                    Gb2312ToUtf8(pRtnNetMonitorTaskResult->ResultChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ResultChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (ResultChain), Local<v8::Value>(ResultChainValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskResult->Flag);
                    pRtnNetMonitorTaskResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorTaskResult) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorTaskResultJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorTaskResult) { 
                delete pRtnNetMonitorTaskResult;
                pRtnNetMonitorTaskResult = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorTaskResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTaskObjectSetTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorTaskObjectSetTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTaskObjectSetTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorTaskObjectSetTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorTaskObjectSetTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorTaskObjectSetTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorTaskObjectSetTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorTaskObjectSetTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorTaskObjectSetTopic_Data_map[*it].front());
            g_RspQryNetMonitorTaskObjectSetTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorTaskObjectSetTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorTaskObjectSetTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorTaskObjectSetTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorTaskObjectSetTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorTaskObjectSetTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTaskObjectSetTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorTaskObjectSetField* pRspQryNetMonitorTaskObjectSet = (CShfeFtdcRspQryNetMonitorTaskObjectSetField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorTaskObjectSetTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorTaskObjectSetTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorTaskObjectSetJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorTaskObjectSet) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskObjectSet->OperationType);
                    pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskObjectSet->ID);
                    pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> DeviceGroup_ID = Nan::New<v8::String> ("DeviceGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskObjectSet->DeviceGroup_ID);
                    pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (DeviceGroup_ID), Local<v8::Value>(DeviceGroup_IDValue));

                    v8::Local<v8::String> Device_ID = Nan::New<v8::String> ("Device_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Device_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskObjectSet->Device_ID);
                    pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (Device_ID), Local<v8::Value>(Device_IDValue));

                    v8::Local<v8::String> DataCenter = Nan::New<v8::String> ("DataCenter").ToLocalChecked();
                    v8::Local<v8::Integer> DataCenterValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskObjectSet->DataCenter);
                    pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (DataCenter), Local<v8::Value>(DataCenterValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorTaskObjectSet) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorTaskObjectSetJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorTaskObjectSet) { 
                delete pRspQryNetMonitorTaskObjectSet;
                pRspQryNetMonitorTaskObjectSet = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorTaskObjectSetTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTaskObjectSetTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorTaskObjectSetTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorTaskObjectSetTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorTaskObjectSetTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorTaskObjectSetTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorTaskObjectSetTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorTaskObjectSetTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorTaskObjectSetTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorTaskObjectSetTopic_Data_map[*it].front());
            g_RtnNetMonitorTaskObjectSetTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorTaskObjectSetTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorTaskObjectSetTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorTaskObjectSetTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorTaskObjectSetTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorTaskObjectSetTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTaskObjectSetTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorTaskObjectSetField* pRtnNetMonitorTaskObjectSet = (CShfeFtdcRtnNetMonitorTaskObjectSetField*)(paramArray[1]);
            if (OnRtnNetMonitorTaskObjectSetTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorTaskObjectSetTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorTaskObjectSetJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorTaskObjectSet) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskObjectSet->OperationType);
                    pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskObjectSet->ID);
                    pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> DeviceGroup_ID = Nan::New<v8::String> ("DeviceGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskObjectSet->DeviceGroup_ID);
                    pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (DeviceGroup_ID), Local<v8::Value>(DeviceGroup_IDValue));

                    v8::Local<v8::String> Device_ID = Nan::New<v8::String> ("Device_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Device_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskObjectSet->Device_ID);
                    pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (Device_ID), Local<v8::Value>(Device_IDValue));

                    v8::Local<v8::String> DataCenter = Nan::New<v8::String> ("DataCenter").ToLocalChecked();
                    v8::Local<v8::Integer> DataCenterValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskObjectSet->DataCenter);
                    pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value> (DataCenter), Local<v8::Value>(DataCenterValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorTaskObjectSet) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorTaskObjectSetJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorTaskObjectSet) { 
                delete pRtnNetMonitorTaskObjectSet;
                pRtnNetMonitorTaskObjectSet = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorTaskObjectSetTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetPartyLinkInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetPartyLinkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetPartyLinkInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetPartyLinkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetPartyLinkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetPartyLinkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetPartyLinkInfoTopic_Data_map[*it].front());
            g_RspQryNetPartyLinkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetPartyLinkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetPartyLinkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetPartyLinkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPartyLinkInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetPartyLinkInfoField* pRspQryNetPartyLinkInfo = (CShfeFtdcRspQryNetPartyLinkInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetPartyLinkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetPartyLinkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetPartyLinkInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetPartyLinkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkInfo->OperationType);
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkInfo->ID);
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->MEMBER_NO);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->MEMBER_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                    v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->MEMBER_NAME);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->MEMBER_NAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                    v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->REMOTE_ADDR);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->REMOTE_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                    v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->LOCAL_ADDR);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->LOCAL_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                    v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->ADDRESS);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->ADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                    v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->LINE_STATUS);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->LINE_STATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                    v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->CONTACT);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->CONTACT, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                    v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->TELEPHONE);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->TELEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                    v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->MOBILEPHONE);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->MOBILEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                    v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->EMAIL);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->EMAIL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                    v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->FAX);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->FAX, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FAXValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                    v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->PROVINCE);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->PROVINCE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->DDN_NO);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->IN_MODE);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IN_MODE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                    v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->IP_WAN);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IP_WAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                    v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->IP_LAN);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IP_LAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->IPADDR);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->Interface);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->Interface, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                    v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->INTERFACE_DATE);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->INTERFACE_DATE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                    v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->SOFTWARE);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->SOFTWARE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                    v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->FEE_TYPE);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->FEE_TYPE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                    v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->SERVICEPROVIDER);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->SERVICEPROVIDER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                    v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->IF_ZIYING);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IF_ZIYING, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                    v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->IF_TUOGUAN);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->IF_TUOGUAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                    v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->HASOTHER);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->HASOTHER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                    v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->SEAT_NO);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->SEAT_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                    v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkInfo->PRO);
                    Gb2312ToUtf8(pRspQryNetPartyLinkInfo->PRO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetPartyLinkInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetPartyLinkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetPartyLinkInfo) { 
                delete pRspQryNetPartyLinkInfo;
                pRspQryNetPartyLinkInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetPartyLinkInfoTopic_mutex);

    int ioUserNumb = g_RtnNetPartyLinkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetPartyLinkInfoTopic_IOUser_vec.begin();
        it != g_RtnNetPartyLinkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetPartyLinkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetPartyLinkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetPartyLinkInfoTopic_Data_map[*it].front());
            g_RtnNetPartyLinkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetPartyLinkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetPartyLinkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetPartyLinkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPartyLinkInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetPartyLinkInfoField* pRtnNetPartyLinkInfo = (CShfeFtdcRtnNetPartyLinkInfoField*)(paramArray[1]);
            if (OnRtnNetPartyLinkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetPartyLinkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetPartyLinkInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetPartyLinkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPartyLinkInfo->OperationType);
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPartyLinkInfo->ID);
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->MEMBER_NO);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->MEMBER_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                    v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->MEMBER_NAME);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->MEMBER_NAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                    v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->REMOTE_ADDR);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->REMOTE_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                    v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->LOCAL_ADDR);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->LOCAL_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                    v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->ADDRESS);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->ADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                    v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->LINE_STATUS);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->LINE_STATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                    v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->CONTACT);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->CONTACT, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                    v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->TELEPHONE);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->TELEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                    v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->MOBILEPHONE);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->MOBILEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                    v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->EMAIL);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->EMAIL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                    v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->FAX);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->FAX, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FAXValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                    v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->PROVINCE);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->PROVINCE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->DDN_NO);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->IN_MODE);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->IN_MODE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                    v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->IP_WAN);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->IP_WAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                    v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->IP_LAN);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->IP_LAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->IPADDR);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->Interface);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->Interface, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                    v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->INTERFACE_DATE);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->INTERFACE_DATE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                    v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->SOFTWARE);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->SOFTWARE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                    v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->FEE_TYPE);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->FEE_TYPE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                    v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->SERVICEPROVIDER);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->SERVICEPROVIDER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                    v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->IF_ZIYING);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->IF_ZIYING, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                    v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->IF_TUOGUAN);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->IF_TUOGUAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                    v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->HASOTHER);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->HASOTHER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                    v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->SEAT_NO);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->SEAT_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                    v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkInfo->PRO);
                    Gb2312ToUtf8(pRtnNetPartyLinkInfo->PRO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetPartyLinkInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetPartyLinkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetPartyLinkInfo) { 
                delete pRtnNetPartyLinkInfo;
                pRtnNetPartyLinkInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorActionAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorActionAttrTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorActionAttrTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorActionAttrTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorActionAttrTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorActionAttrTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorActionAttrTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorActionAttrTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorActionAttrTopic_Data_map[*it].front());
            g_RspQryNetMonitorActionAttrTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorActionAttrTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorActionAttrTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorActionAttrTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorActionAttrTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorActionAttrTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorActionAttrTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorActionAttrField* pRspQryNetMonitorActionAttr = (CShfeFtdcRspQryNetMonitorActionAttrField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorActionAttrTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorActionAttrTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorActionAttrJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorActionAttr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionAttr->OperationType);
                    pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionAttr->ID);
                    pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionAttr->ActionGroup_ID);
                    pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                    v8::Local<v8::String> MonitorAttr_ID = Nan::New<v8::String> ("MonitorAttr_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorAttr_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorActionAttr->MonitorAttr_ID);
                    pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value> (MonitorAttr_ID), Local<v8::Value>(MonitorAttr_IDValue));

                    v8::Local<v8::String> MonitorAttrName = Nan::New<v8::String> ("MonitorAttrName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorActionAttr->MonitorAttrName);
                    Gb2312ToUtf8(pRspQryNetMonitorActionAttr->MonitorAttrName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonitorAttrNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value> (MonitorAttrName), Local<v8::Value>(MonitorAttrNameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorActionAttr) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorActionAttrJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorActionAttr) { 
                delete pRspQryNetMonitorActionAttr;
                pRspQryNetMonitorActionAttr = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorActionAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorActionAttrTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorActionAttrTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorActionAttrTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorActionAttrTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorActionAttrTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorActionAttrTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorActionAttrTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorActionAttrTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorActionAttrTopic_Data_map[*it].front());
            g_RtnNetMonitorActionAttrTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorActionAttrTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorActionAttrTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorActionAttrTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorActionAttrTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorActionAttrTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorActionAttrTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorActionAttrField* pRtnNetMonitorActionAttr = (CShfeFtdcRtnNetMonitorActionAttrField*)(paramArray[1]);
            if (OnRtnNetMonitorActionAttrTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorActionAttrTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorActionAttrJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorActionAttr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorActionAttr->OperationType);
                    pRtnNetMonitorActionAttrJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorActionAttr->ID);
                    pRtnNetMonitorActionAttrJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ActionGroup_ID = Nan::New<v8::String> ("ActionGroup_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ActionGroup_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorActionAttr->ActionGroup_ID);
                    pRtnNetMonitorActionAttrJS->Set(Local<v8::Value> (ActionGroup_ID), Local<v8::Value>(ActionGroup_IDValue));

                    v8::Local<v8::String> MonitorAttr_ID = Nan::New<v8::String> ("MonitorAttr_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorAttr_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorActionAttr->MonitorAttr_ID);
                    pRtnNetMonitorActionAttrJS->Set(Local<v8::Value> (MonitorAttr_ID), Local<v8::Value>(MonitorAttr_IDValue));

                    v8::Local<v8::String> MonitorAttrName = Nan::New<v8::String> ("MonitorAttrName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorActionAttr->MonitorAttrName);
                    Gb2312ToUtf8(pRtnNetMonitorActionAttr->MonitorAttrName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonitorAttrNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorActionAttrJS->Set(Local<v8::Value> (MonitorAttrName), Local<v8::Value>(MonitorAttrNameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorActionAttr) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorActionAttrJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorActionAttr) { 
                delete pRtnNetMonitorActionAttr;
                pRtnNetMonitorActionAttr = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorActionAttrTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetModuleTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetModuleTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetModuleTopic_mutex);

    int ioUserNumb = g_RspQryNetModuleTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetModuleTopic_IOUser_vec.begin();
        it != g_RspQryNetModuleTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetModuleTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetModuleTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetModuleTopic_Data_map[*it].front());
            g_RspQryNetModuleTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetModuleTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetModuleTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetModuleTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetModuleTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetModuleTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetModuleTopic").ToLocalChecked());
            CShfeFtdcRspQryNetModuleField* pRspQryNetModule = (CShfeFtdcRspQryNetModuleField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetModuleTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetModuleTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetModuleJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetModule) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetModule->OperationType);
                    pRspQryNetModuleJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetModule->ID);
                    pRspQryNetModuleJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetModule->ObjectID);
                    Gb2312ToUtf8(pRspQryNetModule->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetModuleJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRspQryNetModule->MonitorType_ID);
                    pRspQryNetModuleJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                    v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRspQryNetModule->DeviceID);
                    pRspQryNetModuleJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                    v8::Local<v8::String> DeviceObjectID = Nan::New<v8::String> ("DeviceObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetModule->DeviceObjectID);
                    Gb2312ToUtf8(pRspQryNetModule->DeviceObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetModuleJS->Set(Local<v8::Value> (DeviceObjectID), Local<v8::Value>(DeviceObjectIDValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetModule->Name);
                    Gb2312ToUtf8(pRspQryNetModule->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetModuleJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetModule->Description);
                    Gb2312ToUtf8(pRspQryNetModule->Description, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetModuleJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                    v8::Local<v8::String> ModuleIndex = Nan::New<v8::String> ("ModuleIndex").ToLocalChecked();
                    v8::Local<v8::Integer> ModuleIndexValue = Nan::New<v8::Integer> (pRspQryNetModule->ModuleIndex);
                    pRspQryNetModuleJS->Set(Local<v8::Value> (ModuleIndex), Local<v8::Value>(ModuleIndexValue));

                    v8::Local<v8::String> EntPhyIndex = Nan::New<v8::String> ("EntPhyIndex").ToLocalChecked();
                    v8::Local<v8::Integer> EntPhyIndexValue = Nan::New<v8::Integer> (pRspQryNetModule->EntPhyIndex);
                    pRspQryNetModuleJS->Set(Local<v8::Value> (EntPhyIndex), Local<v8::Value>(EntPhyIndexValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetModule) { 
                    params[0] = Local<v8::Value>(pRspQryNetModuleJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetModule) { 
                delete pRspQryNetModule;
                pRspQryNetModule = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetModuleTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetModuleTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetModuleTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetModuleTopic_mutex);

    int ioUserNumb = g_RtnNetModuleTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetModuleTopic_IOUser_vec.begin();
        it != g_RtnNetModuleTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetModuleTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetModuleTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetModuleTopic_Data_map[*it].front());
            g_RtnNetModuleTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetModuleTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetModuleTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetModuleTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetModuleTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetModuleTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetModuleTopic").ToLocalChecked());
            CShfeFtdcRtnNetModuleField* pRtnNetModule = (CShfeFtdcRtnNetModuleField*)(paramArray[1]);
            if (OnRtnNetModuleTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetModuleTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetModuleJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetModule) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetModule->OperationType);
                    pRtnNetModuleJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetModule->ID);
                    pRtnNetModuleJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetModule->ObjectID);
                    Gb2312ToUtf8(pRtnNetModule->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetModuleJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonitorType_ID = Nan::New<v8::String> ("MonitorType_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MonitorType_IDValue = Nan::New<v8::Integer> (pRtnNetModule->MonitorType_ID);
                    pRtnNetModuleJS->Set(Local<v8::Value> (MonitorType_ID), Local<v8::Value>(MonitorType_IDValue));

                    v8::Local<v8::String> DeviceID = Nan::New<v8::String> ("DeviceID").ToLocalChecked();
                    v8::Local<v8::Integer> DeviceIDValue = Nan::New<v8::Integer> (pRtnNetModule->DeviceID);
                    pRtnNetModuleJS->Set(Local<v8::Value> (DeviceID), Local<v8::Value>(DeviceIDValue));

                    v8::Local<v8::String> DeviceObjectID = Nan::New<v8::String> ("DeviceObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetModule->DeviceObjectID);
                    Gb2312ToUtf8(pRtnNetModule->DeviceObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetModuleJS->Set(Local<v8::Value> (DeviceObjectID), Local<v8::Value>(DeviceObjectIDValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetModule->Name);
                    Gb2312ToUtf8(pRtnNetModule->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetModuleJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> Description = Nan::New<v8::String> ("Description").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetModule->Description);
                    Gb2312ToUtf8(pRtnNetModule->Description, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DescriptionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetModuleJS->Set(Local<v8::Value> (Description), Local<v8::Value>(DescriptionValue));

                    v8::Local<v8::String> ModuleIndex = Nan::New<v8::String> ("ModuleIndex").ToLocalChecked();
                    v8::Local<v8::Integer> ModuleIndexValue = Nan::New<v8::Integer> (pRtnNetModule->ModuleIndex);
                    pRtnNetModuleJS->Set(Local<v8::Value> (ModuleIndex), Local<v8::Value>(ModuleIndexValue));

                    v8::Local<v8::String> EntPhyIndex = Nan::New<v8::String> ("EntPhyIndex").ToLocalChecked();
                    v8::Local<v8::Integer> EntPhyIndexValue = Nan::New<v8::Integer> (pRtnNetModule->EntPhyIndex);
                    pRtnNetModuleJS->Set(Local<v8::Value> (EntPhyIndex), Local<v8::Value>(EntPhyIndexValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetModule) { 
                    params[0] = Local<v8::Value>(pRtnNetModuleJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetModule) { 
                delete pRtnNetModule;
                pRtnNetModule = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetModuleTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetEventExprTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetEventExprTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetEventExprTopic_mutex);

    int ioUserNumb = g_RspQryNetEventExprTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetEventExprTopic_IOUser_vec.begin();
        it != g_RspQryNetEventExprTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetEventExprTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetEventExprTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetEventExprTopic_Data_map[*it].front());
            g_RspQryNetEventExprTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetEventExprTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetEventExprTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetEventExprTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetEventExprTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetEventExprTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetEventExprTopic").ToLocalChecked());
            CShfeFtdcRspQryNetEventExprField* pRspQryNetEventExpr = (CShfeFtdcRspQryNetEventExprField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetEventExprTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetEventExprTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetEventExprJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetEventExpr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->OperationType);
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->ID);
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CNAME = Nan::New<v8::String> ("CNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventExpr->CNAME);
                    Gb2312ToUtf8(pRspQryNetEventExpr->CNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (CNAME), Local<v8::Value>(CNAMEValue));

                    v8::Local<v8::String> ENAME = Nan::New<v8::String> ("ENAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventExpr->ENAME);
                    Gb2312ToUtf8(pRspQryNetEventExpr->ENAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (ENAME), Local<v8::Value>(ENAMEValue));

                    v8::Local<v8::String> WarningLEVEL = Nan::New<v8::String> ("WarningLEVEL").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventExpr->WarningLEVEL);
                    Gb2312ToUtf8(pRspQryNetEventExpr->WarningLEVEL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> WarningLEVELValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (WarningLEVEL), Local<v8::Value>(WarningLEVELValue));

                    v8::Local<v8::String> EventTypeID = Nan::New<v8::String> ("EventTypeID").ToLocalChecked();
                    v8::Local<v8::Integer> EventTypeIDValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->EventTypeID);
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (EventTypeID), Local<v8::Value>(EventTypeIDValue));

                    v8::Local<v8::String> SubEventTypeID = Nan::New<v8::String> ("SubEventTypeID").ToLocalChecked();
                    v8::Local<v8::Integer> SubEventTypeIDValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->SubEventTypeID);
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (SubEventTypeID), Local<v8::Value>(SubEventTypeIDValue));

                    v8::Local<v8::String> GIVEUPTIME = Nan::New<v8::String> ("GIVEUPTIME").ToLocalChecked();
                    v8::Local<v8::Integer> GIVEUPTIMEValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->GIVEUPTIME);
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (GIVEUPTIME), Local<v8::Value>(GIVEUPTIMEValue));

                    v8::Local<v8::String> CONTROL = Nan::New<v8::String> ("CONTROL").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventExpr->CONTROL);
                    Gb2312ToUtf8(pRspQryNetEventExpr->CONTROL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONTROLValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (CONTROL), Local<v8::Value>(CONTROLValue));

                    v8::Local<v8::String> EXPR = Nan::New<v8::String> ("EXPR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventExpr->EXPR);
                    Gb2312ToUtf8(pRspQryNetEventExpr->EXPR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EXPRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (EXPR), Local<v8::Value>(EXPRValue));

                    v8::Local<v8::String> BRIEF = Nan::New<v8::String> ("BRIEF").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventExpr->BRIEF);
                    Gb2312ToUtf8(pRspQryNetEventExpr->BRIEF, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BRIEFValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (BRIEF), Local<v8::Value>(BRIEFValue));

                    v8::Local<v8::String> DISCRIPTION = Nan::New<v8::String> ("DISCRIPTION").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventExpr->DISCRIPTION);
                    Gb2312ToUtf8(pRspQryNetEventExpr->DISCRIPTION, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DISCRIPTIONValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (DISCRIPTION), Local<v8::Value>(DISCRIPTIONValue));

                    v8::Local<v8::String> MSGGROUP_ID = Nan::New<v8::String> ("MSGGROUP_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MSGGROUP_IDValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->MSGGROUP_ID);
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (MSGGROUP_ID), Local<v8::Value>(MSGGROUP_IDValue));

                    v8::Local<v8::String> ADMINGROUP_ID = Nan::New<v8::String> ("ADMINGROUP_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ADMINGROUP_IDValue = Nan::New<v8::Integer> (pRspQryNetEventExpr->ADMINGROUP_ID);
                    pRspQryNetEventExprJS->Set(Local<v8::Value> (ADMINGROUP_ID), Local<v8::Value>(ADMINGROUP_IDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetEventExpr) { 
                    params[0] = Local<v8::Value>(pRspQryNetEventExprJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetEventExpr) { 
                delete pRspQryNetEventExpr;
                pRspQryNetEventExpr = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetEventExprTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetEventExprTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetEventExprTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetEventExprTopic_mutex);

    int ioUserNumb = g_RtnNetEventExprTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetEventExprTopic_IOUser_vec.begin();
        it != g_RtnNetEventExprTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetEventExprTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetEventExprTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetEventExprTopic_Data_map[*it].front());
            g_RtnNetEventExprTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetEventExprTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetEventExprTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetEventExprTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetEventExprTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetEventExprTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetEventExprTopic").ToLocalChecked());
            CShfeFtdcRtnNetEventExprField* pRtnNetEventExpr = (CShfeFtdcRtnNetEventExprField*)(paramArray[1]);
            if (OnRtnNetEventExprTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetEventExprTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetEventExprJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetEventExpr) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetEventExpr->OperationType);
                    pRtnNetEventExprJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetEventExpr->ID);
                    pRtnNetEventExprJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CNAME = Nan::New<v8::String> ("CNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventExpr->CNAME);
                    Gb2312ToUtf8(pRtnNetEventExpr->CNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventExprJS->Set(Local<v8::Value> (CNAME), Local<v8::Value>(CNAMEValue));

                    v8::Local<v8::String> ENAME = Nan::New<v8::String> ("ENAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventExpr->ENAME);
                    Gb2312ToUtf8(pRtnNetEventExpr->ENAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventExprJS->Set(Local<v8::Value> (ENAME), Local<v8::Value>(ENAMEValue));

                    v8::Local<v8::String> WarningLEVEL = Nan::New<v8::String> ("WarningLEVEL").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventExpr->WarningLEVEL);
                    Gb2312ToUtf8(pRtnNetEventExpr->WarningLEVEL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> WarningLEVELValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventExprJS->Set(Local<v8::Value> (WarningLEVEL), Local<v8::Value>(WarningLEVELValue));

                    v8::Local<v8::String> EventTypeID = Nan::New<v8::String> ("EventTypeID").ToLocalChecked();
                    v8::Local<v8::Integer> EventTypeIDValue = Nan::New<v8::Integer> (pRtnNetEventExpr->EventTypeID);
                    pRtnNetEventExprJS->Set(Local<v8::Value> (EventTypeID), Local<v8::Value>(EventTypeIDValue));

                    v8::Local<v8::String> SubEventTypeID = Nan::New<v8::String> ("SubEventTypeID").ToLocalChecked();
                    v8::Local<v8::Integer> SubEventTypeIDValue = Nan::New<v8::Integer> (pRtnNetEventExpr->SubEventTypeID);
                    pRtnNetEventExprJS->Set(Local<v8::Value> (SubEventTypeID), Local<v8::Value>(SubEventTypeIDValue));

                    v8::Local<v8::String> GIVEUPTIME = Nan::New<v8::String> ("GIVEUPTIME").ToLocalChecked();
                    v8::Local<v8::Integer> GIVEUPTIMEValue = Nan::New<v8::Integer> (pRtnNetEventExpr->GIVEUPTIME);
                    pRtnNetEventExprJS->Set(Local<v8::Value> (GIVEUPTIME), Local<v8::Value>(GIVEUPTIMEValue));

                    v8::Local<v8::String> CONTROL = Nan::New<v8::String> ("CONTROL").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventExpr->CONTROL);
                    Gb2312ToUtf8(pRtnNetEventExpr->CONTROL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONTROLValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventExprJS->Set(Local<v8::Value> (CONTROL), Local<v8::Value>(CONTROLValue));

                    v8::Local<v8::String> EXPR = Nan::New<v8::String> ("EXPR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventExpr->EXPR);
                    Gb2312ToUtf8(pRtnNetEventExpr->EXPR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EXPRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventExprJS->Set(Local<v8::Value> (EXPR), Local<v8::Value>(EXPRValue));

                    v8::Local<v8::String> BRIEF = Nan::New<v8::String> ("BRIEF").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventExpr->BRIEF);
                    Gb2312ToUtf8(pRtnNetEventExpr->BRIEF, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BRIEFValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventExprJS->Set(Local<v8::Value> (BRIEF), Local<v8::Value>(BRIEFValue));

                    v8::Local<v8::String> DISCRIPTION = Nan::New<v8::String> ("DISCRIPTION").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventExpr->DISCRIPTION);
                    Gb2312ToUtf8(pRtnNetEventExpr->DISCRIPTION, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DISCRIPTIONValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventExprJS->Set(Local<v8::Value> (DISCRIPTION), Local<v8::Value>(DISCRIPTIONValue));

                    v8::Local<v8::String> MSGGROUP_ID = Nan::New<v8::String> ("MSGGROUP_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MSGGROUP_IDValue = Nan::New<v8::Integer> (pRtnNetEventExpr->MSGGROUP_ID);
                    pRtnNetEventExprJS->Set(Local<v8::Value> (MSGGROUP_ID), Local<v8::Value>(MSGGROUP_IDValue));

                    v8::Local<v8::String> ADMINGROUP_ID = Nan::New<v8::String> ("ADMINGROUP_ID").ToLocalChecked();
                    v8::Local<v8::Integer> ADMINGROUP_IDValue = Nan::New<v8::Integer> (pRtnNetEventExpr->ADMINGROUP_ID);
                    pRtnNetEventExprJS->Set(Local<v8::Value> (ADMINGROUP_ID), Local<v8::Value>(ADMINGROUP_IDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetEventExpr) { 
                    params[0] = Local<v8::Value>(pRtnNetEventExprJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetEventExpr) { 
                delete pRtnNetEventExpr;
                pRtnNetEventExpr = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetEventExprTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetEventTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetEventTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetEventTypeTopic_mutex);

    int ioUserNumb = g_RspQryNetEventTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetEventTypeTopic_IOUser_vec.begin();
        it != g_RspQryNetEventTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetEventTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetEventTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetEventTypeTopic_Data_map[*it].front());
            g_RspQryNetEventTypeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetEventTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetEventTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetEventTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetEventTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetEventTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetEventTypeTopic").ToLocalChecked());
            CShfeFtdcRspQryNetEventTypeField* pRspQryNetEventType = (CShfeFtdcRspQryNetEventTypeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetEventTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetEventTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetEventTypeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetEventType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetEventType->OperationType);
                    pRspQryNetEventTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetEventType->ID);
                    pRspQryNetEventTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventType->CName);
                    Gb2312ToUtf8(pRspQryNetEventType->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventType->EName);
                    Gb2312ToUtf8(pRspQryNetEventType->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetEventType) { 
                    params[0] = Local<v8::Value>(pRspQryNetEventTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetEventType) { 
                delete pRspQryNetEventType;
                pRspQryNetEventType = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetEventTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetEventTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetEventTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetEventTypeTopic_mutex);

    int ioUserNumb = g_RtnNetEventTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetEventTypeTopic_IOUser_vec.begin();
        it != g_RtnNetEventTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetEventTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetEventTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetEventTypeTopic_Data_map[*it].front());
            g_RtnNetEventTypeTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetEventTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetEventTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetEventTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetEventTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetEventTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetEventTypeTopic").ToLocalChecked());
            CShfeFtdcRtnNetEventTypeField* pRtnNetEventType = (CShfeFtdcRtnNetEventTypeField*)(paramArray[1]);
            if (OnRtnNetEventTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetEventTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetEventTypeJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetEventType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetEventType->OperationType);
                    pRtnNetEventTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetEventType->ID);
                    pRtnNetEventTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventType->CName);
                    Gb2312ToUtf8(pRtnNetEventType->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventType->EName);
                    Gb2312ToUtf8(pRtnNetEventType->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetEventType) { 
                    params[0] = Local<v8::Value>(pRtnNetEventTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetEventType) { 
                delete pRtnNetEventType;
                pRtnNetEventType = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetEventTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetSubEventTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetSubEventTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetSubEventTypeTopic_mutex);

    int ioUserNumb = g_RspQryNetSubEventTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetSubEventTypeTopic_IOUser_vec.begin();
        it != g_RspQryNetSubEventTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetSubEventTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetSubEventTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetSubEventTypeTopic_Data_map[*it].front());
            g_RspQryNetSubEventTypeTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetSubEventTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetSubEventTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetSubEventTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetSubEventTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetSubEventTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetSubEventTypeTopic").ToLocalChecked());
            CShfeFtdcRspQryNetSubEventTypeField* pRspQryNetSubEventType = (CShfeFtdcRspQryNetSubEventTypeField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetSubEventTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetSubEventTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetSubEventTypeJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetSubEventType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetSubEventType->OperationType);
                    pRspQryNetSubEventTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetSubEventType->ID);
                    pRspQryNetSubEventTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetSubEventType->CName);
                    Gb2312ToUtf8(pRspQryNetSubEventType->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetSubEventTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetSubEventType->EName);
                    Gb2312ToUtf8(pRspQryNetSubEventType->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetSubEventTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetSubEventType) { 
                    params[0] = Local<v8::Value>(pRspQryNetSubEventTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetSubEventType) { 
                delete pRspQryNetSubEventType;
                pRspQryNetSubEventType = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetSubEventTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetSubEventTypeTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetSubEventTypeTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetSubEventTypeTopic_mutex);

    int ioUserNumb = g_RtnNetSubEventTypeTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetSubEventTypeTopic_IOUser_vec.begin();
        it != g_RtnNetSubEventTypeTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetSubEventTypeTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetSubEventTypeTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetSubEventTypeTopic_Data_map[*it].front());
            g_RtnNetSubEventTypeTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetSubEventTypeTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetSubEventTypeTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetSubEventTypeTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetSubEventTypeTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetSubEventTypeTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetSubEventTypeTopic").ToLocalChecked());
            CShfeFtdcRtnNetSubEventTypeField* pRtnNetSubEventType = (CShfeFtdcRtnNetSubEventTypeField*)(paramArray[1]);
            if (OnRtnNetSubEventTypeTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetSubEventTypeTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetSubEventTypeJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetSubEventType) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetSubEventType->OperationType);
                    pRtnNetSubEventTypeJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetSubEventType->ID);
                    pRtnNetSubEventTypeJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetSubEventType->CName);
                    Gb2312ToUtf8(pRtnNetSubEventType->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetSubEventTypeJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetSubEventType->EName);
                    Gb2312ToUtf8(pRtnNetSubEventType->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetSubEventTypeJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetSubEventType) { 
                    params[0] = Local<v8::Value>(pRtnNetSubEventTypeJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetSubEventType) { 
                delete pRtnNetSubEventType;
                pRtnNetSubEventType = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetSubEventTypeTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetEventLevelTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetEventLevelTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetEventLevelTopic_mutex);

    int ioUserNumb = g_RspQryNetEventLevelTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetEventLevelTopic_IOUser_vec.begin();
        it != g_RspQryNetEventLevelTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetEventLevelTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetEventLevelTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetEventLevelTopic_Data_map[*it].front());
            g_RspQryNetEventLevelTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetEventLevelTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetEventLevelTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetEventLevelTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetEventLevelTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetEventLevelTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetEventLevelTopic").ToLocalChecked());
            CShfeFtdcRspQryNetEventLevelField* pRspQryNetEventLevel = (CShfeFtdcRspQryNetEventLevelField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetEventLevelTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetEventLevelTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetEventLevelJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetEventLevel) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetEventLevel->OperationType);
                    pRspQryNetEventLevelJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetEventLevel->ID);
                    pRspQryNetEventLevelJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventLevel->CName);
                    Gb2312ToUtf8(pRspQryNetEventLevel->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventLevelJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventLevel->EName);
                    Gb2312ToUtf8(pRspQryNetEventLevel->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventLevelJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> DISCRIPTION = Nan::New<v8::String> ("DISCRIPTION").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetEventLevel->DISCRIPTION);
                    Gb2312ToUtf8(pRspQryNetEventLevel->DISCRIPTION, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DISCRIPTIONValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetEventLevelJS->Set(Local<v8::Value> (DISCRIPTION), Local<v8::Value>(DISCRIPTIONValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetEventLevel) { 
                    params[0] = Local<v8::Value>(pRspQryNetEventLevelJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetEventLevel) { 
                delete pRspQryNetEventLevel;
                pRspQryNetEventLevel = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetEventLevelTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetEventLevelTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetEventLevelTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetEventLevelTopic_mutex);

    int ioUserNumb = g_RtnNetEventLevelTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetEventLevelTopic_IOUser_vec.begin();
        it != g_RtnNetEventLevelTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetEventLevelTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetEventLevelTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetEventLevelTopic_Data_map[*it].front());
            g_RtnNetEventLevelTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetEventLevelTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetEventLevelTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetEventLevelTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetEventLevelTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetEventLevelTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetEventLevelTopic").ToLocalChecked());
            CShfeFtdcRtnNetEventLevelField* pRtnNetEventLevel = (CShfeFtdcRtnNetEventLevelField*)(paramArray[1]);
            if (OnRtnNetEventLevelTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetEventLevelTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetEventLevelJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetEventLevel) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetEventLevel->OperationType);
                    pRtnNetEventLevelJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetEventLevel->ID);
                    pRtnNetEventLevelJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> CName = Nan::New<v8::String> ("CName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventLevel->CName);
                    Gb2312ToUtf8(pRtnNetEventLevel->CName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventLevelJS->Set(Local<v8::Value> (CName), Local<v8::Value>(CNameValue));

                    v8::Local<v8::String> EName = Nan::New<v8::String> ("EName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventLevel->EName);
                    Gb2312ToUtf8(pRtnNetEventLevel->EName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ENameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventLevelJS->Set(Local<v8::Value> (EName), Local<v8::Value>(ENameValue));

                    v8::Local<v8::String> DISCRIPTION = Nan::New<v8::String> ("DISCRIPTION").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetEventLevel->DISCRIPTION);
                    Gb2312ToUtf8(pRtnNetEventLevel->DISCRIPTION, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DISCRIPTIONValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetEventLevelJS->Set(Local<v8::Value> (DISCRIPTION), Local<v8::Value>(DISCRIPTIONValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetEventLevel) { 
                    params[0] = Local<v8::Value>(pRtnNetEventLevelJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetEventLevel) { 
                delete pRtnNetEventLevel;
                pRtnNetEventLevel = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetEventLevelTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTaskStatusResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorTaskStatusResultTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTaskStatusResultTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorTaskStatusResultTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorTaskStatusResultTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorTaskStatusResultTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorTaskStatusResultTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorTaskStatusResultTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorTaskStatusResultTopic_Data_map[*it].front());
            g_RspQryNetMonitorTaskStatusResultTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorTaskStatusResultTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorTaskStatusResultTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorTaskStatusResultTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorTaskStatusResultTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorTaskStatusResultTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTaskStatusResultTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorTaskStatusResultField* pRspQryNetMonitorTaskStatusResult = (CShfeFtdcRspQryNetMonitorTaskStatusResultField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorTaskStatusResultTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorTaskStatusResultTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorTaskStatusResultJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorTaskStatusResult) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskStatusResult->OperationType);
                    pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskStatusResult->ObjectID);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskStatusResult->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> Task_ID = Nan::New<v8::String> ("Task_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Task_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskStatusResult->Task_ID);
                    pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (Task_ID), Local<v8::Value>(Task_IDValue));

                    v8::Local<v8::String> OperateTime = Nan::New<v8::String> ("OperateTime").ToLocalChecked();
                    v8::Local<v8::Integer> OperateTimeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskStatusResult->OperateTime);
                    pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (OperateTime), Local<v8::Value>(OperateTimeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskStatusResult->MonDate);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskStatusResult->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskStatusResult->MonTime);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskStatusResult->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskStatusResult->Flag);
                    pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorTaskStatusResult) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorTaskStatusResultJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorTaskStatusResult) { 
                delete pRspQryNetMonitorTaskStatusResult;
                pRspQryNetMonitorTaskStatusResult = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorTaskStatusResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTaskStatusResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorTaskStatusResultTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorTaskStatusResultTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorTaskStatusResultTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorTaskStatusResultTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorTaskStatusResultTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorTaskStatusResultTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorTaskStatusResultTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorTaskStatusResultTopic_Data_map[*it].front());
            g_RtnNetMonitorTaskStatusResultTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorTaskStatusResultTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorTaskStatusResultTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorTaskStatusResultTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorTaskStatusResultTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorTaskStatusResultTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTaskStatusResultTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorTaskStatusResultField* pRtnNetMonitorTaskStatusResult = (CShfeFtdcRtnNetMonitorTaskStatusResultField*)(paramArray[1]);
            if (OnRtnNetMonitorTaskStatusResultTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorTaskStatusResultTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorTaskStatusResultJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorTaskStatusResult) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskStatusResult->OperationType);
                    pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskStatusResult->ObjectID);
                    Gb2312ToUtf8(pRtnNetMonitorTaskStatusResult->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> Task_ID = Nan::New<v8::String> ("Task_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Task_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskStatusResult->Task_ID);
                    pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (Task_ID), Local<v8::Value>(Task_IDValue));

                    v8::Local<v8::String> OperateTime = Nan::New<v8::String> ("OperateTime").ToLocalChecked();
                    v8::Local<v8::Integer> OperateTimeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskStatusResult->OperateTime);
                    pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (OperateTime), Local<v8::Value>(OperateTimeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskStatusResult->MonDate);
                    Gb2312ToUtf8(pRtnNetMonitorTaskStatusResult->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskStatusResult->MonTime);
                    Gb2312ToUtf8(pRtnNetMonitorTaskStatusResult->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskStatusResult->Flag);
                    pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorTaskStatusResult) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorTaskStatusResultJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorTaskStatusResult) { 
                delete pRtnNetMonitorTaskStatusResult;
                pRtnNetMonitorTaskStatusResult = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorTaskStatusResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetCfgFileTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetCfgFileTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetCfgFileTopic_mutex);

    int ioUserNumb = g_RspQryNetCfgFileTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetCfgFileTopic_IOUser_vec.begin();
        it != g_RspQryNetCfgFileTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetCfgFileTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetCfgFileTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetCfgFileTopic_Data_map[*it].front());
            g_RspQryNetCfgFileTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetCfgFileTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetCfgFileTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetCfgFileTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetCfgFileTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetCfgFileTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetCfgFileTopic").ToLocalChecked());
            CShfeFtdcRspQryNetCfgFileField* pRspQryNetCfgFile = (CShfeFtdcRspQryNetCfgFileField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetCfgFileTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetCfgFileTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetCfgFileJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetCfgFile) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetCfgFile->OperationType);
                    pRspQryNetCfgFileJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetCfgFile->ObjectID);
                    Gb2312ToUtf8(pRspQryNetCfgFile->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetCfgFileJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetCfgFile->MonDate);
                    Gb2312ToUtf8(pRspQryNetCfgFile->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetCfgFileJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetCfgFile->MonTime);
                    Gb2312ToUtf8(pRspQryNetCfgFile->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetCfgFileJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> CfgFileName = Nan::New<v8::String> ("CfgFileName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetCfgFile->CfgFileName);
                    Gb2312ToUtf8(pRspQryNetCfgFile->CfgFileName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CfgFileNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetCfgFileJS->Set(Local<v8::Value> (CfgFileName), Local<v8::Value>(CfgFileNameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetCfgFile) { 
                    params[0] = Local<v8::Value>(pRspQryNetCfgFileJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetCfgFile) { 
                delete pRspQryNetCfgFile;
                pRspQryNetCfgFile = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetCfgFileTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetCfgFileTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetCfgFileTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetCfgFileTopic_mutex);

    int ioUserNumb = g_RtnNetCfgFileTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetCfgFileTopic_IOUser_vec.begin();
        it != g_RtnNetCfgFileTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetCfgFileTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetCfgFileTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetCfgFileTopic_Data_map[*it].front());
            g_RtnNetCfgFileTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetCfgFileTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetCfgFileTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetCfgFileTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetCfgFileTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetCfgFileTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetCfgFileTopic").ToLocalChecked());
            CShfeFtdcRtnNetCfgFileField* pRtnNetCfgFile = (CShfeFtdcRtnNetCfgFileField*)(paramArray[1]);
            if (OnRtnNetCfgFileTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetCfgFileTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetCfgFileJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetCfgFile) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetCfgFile->OperationType);
                    pRtnNetCfgFileJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetCfgFile->ObjectID);
                    Gb2312ToUtf8(pRtnNetCfgFile->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetCfgFileJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetCfgFile->MonDate);
                    Gb2312ToUtf8(pRtnNetCfgFile->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetCfgFileJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetCfgFile->MonTime);
                    Gb2312ToUtf8(pRtnNetCfgFile->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetCfgFileJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> CfgFileName = Nan::New<v8::String> ("CfgFileName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetCfgFile->CfgFileName);
                    Gb2312ToUtf8(pRtnNetCfgFile->CfgFileName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CfgFileNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetCfgFileJS->Set(Local<v8::Value> (CfgFileName), Local<v8::Value>(CfgFileNameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetCfgFile) { 
                    params[0] = Local<v8::Value>(pRtnNetCfgFileJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetCfgFile) { 
                delete pRtnNetCfgFile;
                pRtnNetCfgFile = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetCfgFileTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorDeviceTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorDeviceTaskTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorDeviceTaskTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorDeviceTaskTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorDeviceTaskTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorDeviceTaskTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorDeviceTaskTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorDeviceTaskTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorDeviceTaskTopic_Data_map[*it].front());
            g_RspQryNetMonitorDeviceTaskTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorDeviceTaskTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorDeviceTaskTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorDeviceTaskTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorDeviceTaskTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorDeviceTaskTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorDeviceTaskTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorDeviceTaskField* pRspQryNetMonitorDeviceTask = (CShfeFtdcRspQryNetMonitorDeviceTaskField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorDeviceTaskTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorDeviceTaskTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorDeviceTaskJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorDeviceTask) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceTask->OperationType);
                    pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceTask->ID);
                    pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorDeviceTask->ObjectID);
                    Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorDeviceTask->IPAddress);
                    Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceTask->Manufactory_ID);
                    pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                    v8::Local<v8::String> InstructChain = Nan::New<v8::String> ("InstructChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorDeviceTask->InstructChain);
                    Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->InstructChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstructChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructChain), Local<v8::Value>(InstructChainValue));

                    v8::Local<v8::String> InstructAlias = Nan::New<v8::String> ("InstructAlias").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorDeviceTask->InstructAlias);
                    Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->InstructAlias, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstructAliasValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructAlias), Local<v8::Value>(InstructAliasValue));

                    v8::Local<v8::String> InstructArgs = Nan::New<v8::String> ("InstructArgs").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorDeviceTask->InstructArgs);
                    Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->InstructArgs, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstructArgsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructArgs), Local<v8::Value>(InstructArgsValue));

                    v8::Local<v8::String> DefParamChain = Nan::New<v8::String> ("DefParamChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorDeviceTask->DefParamChain);
                    Gb2312ToUtf8(pRspQryNetMonitorDeviceTask->DefParamChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DefParamChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (DefParamChain), Local<v8::Value>(DefParamChainValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRspQryNetMonitorDeviceTask->Flag);
                    pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorDeviceTask) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorDeviceTaskJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorDeviceTask) { 
                delete pRspQryNetMonitorDeviceTask;
                pRspQryNetMonitorDeviceTask = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorDeviceTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorDeviceTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorDeviceTaskTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorDeviceTaskTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorDeviceTaskTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorDeviceTaskTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorDeviceTaskTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorDeviceTaskTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorDeviceTaskTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorDeviceTaskTopic_Data_map[*it].front());
            g_RtnNetMonitorDeviceTaskTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorDeviceTaskTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorDeviceTaskTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorDeviceTaskTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorDeviceTaskTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorDeviceTaskTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorDeviceTaskTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorDeviceTaskField* pRtnNetMonitorDeviceTask = (CShfeFtdcRtnNetMonitorDeviceTaskField*)(paramArray[1]);
            if (OnRtnNetMonitorDeviceTaskTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorDeviceTaskTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorDeviceTaskJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorDeviceTask) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceTask->OperationType);
                    pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceTask->ID);
                    pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ObjectID = Nan::New<v8::String> ("ObjectID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorDeviceTask->ObjectID);
                    Gb2312ToUtf8(pRtnNetMonitorDeviceTask->ObjectID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ObjectIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (ObjectID), Local<v8::Value>(ObjectIDValue));

                    v8::Local<v8::String> IPAddress = Nan::New<v8::String> ("IPAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorDeviceTask->IPAddress);
                    Gb2312ToUtf8(pRtnNetMonitorDeviceTask->IPAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (IPAddress), Local<v8::Value>(IPAddressValue));

                    v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceTask->Manufactory_ID);
                    pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                    v8::Local<v8::String> InstructChain = Nan::New<v8::String> ("InstructChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorDeviceTask->InstructChain);
                    Gb2312ToUtf8(pRtnNetMonitorDeviceTask->InstructChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstructChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructChain), Local<v8::Value>(InstructChainValue));

                    v8::Local<v8::String> InstructAlias = Nan::New<v8::String> ("InstructAlias").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorDeviceTask->InstructAlias);
                    Gb2312ToUtf8(pRtnNetMonitorDeviceTask->InstructAlias, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstructAliasValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructAlias), Local<v8::Value>(InstructAliasValue));

                    v8::Local<v8::String> InstructArgs = Nan::New<v8::String> ("InstructArgs").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorDeviceTask->InstructArgs);
                    Gb2312ToUtf8(pRtnNetMonitorDeviceTask->InstructArgs, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstructArgsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (InstructArgs), Local<v8::Value>(InstructArgsValue));

                    v8::Local<v8::String> DefParamChain = Nan::New<v8::String> ("DefParamChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorDeviceTask->DefParamChain);
                    Gb2312ToUtf8(pRtnNetMonitorDeviceTask->DefParamChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DefParamChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (DefParamChain), Local<v8::Value>(DefParamChainValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRtnNetMonitorDeviceTask->Flag);
                    pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorDeviceTask) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorDeviceTaskJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorDeviceTask) { 
                delete pRtnNetMonitorDeviceTask;
                pRtnNetMonitorDeviceTask = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorDeviceTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMonitorTaskInstAttrsTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMonitorTaskInstAttrsTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMonitorTaskInstAttrsTopic_mutex);

    int ioUserNumb = g_RspQryNetMonitorTaskInstAttrsTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMonitorTaskInstAttrsTopic_IOUser_vec.begin();
        it != g_RspQryNetMonitorTaskInstAttrsTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMonitorTaskInstAttrsTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMonitorTaskInstAttrsTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMonitorTaskInstAttrsTopic_Data_map[*it].front());
            g_RspQryNetMonitorTaskInstAttrsTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMonitorTaskInstAttrsTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMonitorTaskInstAttrsTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMonitorTaskInstAttrsTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMonitorTaskInstAttrsTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMonitorTaskInstAttrsTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTaskInstAttrsTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMonitorTaskInstAttrsField* pRspQryNetMonitorTaskInstAttrs = (CShfeFtdcRspQryNetMonitorTaskInstAttrsField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMonitorTaskInstAttrsTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMonitorTaskInstAttrsTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMonitorTaskInstAttrsJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMonitorTaskInstAttrs) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInstAttrs->OperationType);
                    pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInstAttrs->ID);
                    pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRspQryNetMonitorTaskInstAttrs->Manufactory_ID);
                    pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                    v8::Local<v8::String> InstructAlias = Nan::New<v8::String> ("InstructAlias").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInstAttrs->InstructAlias);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInstAttrs->InstructAlias, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstructAliasValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (InstructAlias), Local<v8::Value>(InstructAliasValue));

                    v8::Local<v8::String> DEVICETYPE = Nan::New<v8::String> ("DEVICETYPE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInstAttrs->DEVICETYPE);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInstAttrs->DEVICETYPE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DEVICETYPEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DEVICETYPE), Local<v8::Value>(DEVICETYPEValue));

                    v8::Local<v8::String> AttrsChain = Nan::New<v8::String> ("AttrsChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInstAttrs->AttrsChain);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInstAttrs->AttrsChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrsChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (AttrsChain), Local<v8::Value>(AttrsChainValue));

                    v8::Local<v8::String> DefRegularChain = Nan::New<v8::String> ("DefRegularChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInstAttrs->DefRegularChain);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInstAttrs->DefRegularChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DefRegularChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DefRegularChain), Local<v8::Value>(DefRegularChainValue));

                    v8::Local<v8::String> DefParamChain = Nan::New<v8::String> ("DefParamChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMonitorTaskInstAttrs->DefParamChain);
                    Gb2312ToUtf8(pRspQryNetMonitorTaskInstAttrs->DefParamChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DefParamChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DefParamChain), Local<v8::Value>(DefParamChainValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMonitorTaskInstAttrs) { 
                    params[0] = Local<v8::Value>(pRspQryNetMonitorTaskInstAttrsJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMonitorTaskInstAttrs) { 
                delete pRspQryNetMonitorTaskInstAttrs;
                pRspQryNetMonitorTaskInstAttrs = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMonitorTaskInstAttrsTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMonitorTaskInstAttrsTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMonitorTaskInstAttrsTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMonitorTaskInstAttrsTopic_mutex);

    int ioUserNumb = g_RtnNetMonitorTaskInstAttrsTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMonitorTaskInstAttrsTopic_IOUser_vec.begin();
        it != g_RtnNetMonitorTaskInstAttrsTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMonitorTaskInstAttrsTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMonitorTaskInstAttrsTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMonitorTaskInstAttrsTopic_Data_map[*it].front());
            g_RtnNetMonitorTaskInstAttrsTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMonitorTaskInstAttrsTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMonitorTaskInstAttrsTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMonitorTaskInstAttrsTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMonitorTaskInstAttrsTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMonitorTaskInstAttrsTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTaskInstAttrsTopic").ToLocalChecked());
            CShfeFtdcRtnNetMonitorTaskInstAttrsField* pRtnNetMonitorTaskInstAttrs = (CShfeFtdcRtnNetMonitorTaskInstAttrsField*)(paramArray[1]);
            if (OnRtnNetMonitorTaskInstAttrsTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMonitorTaskInstAttrsTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMonitorTaskInstAttrsJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMonitorTaskInstAttrs) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInstAttrs->OperationType);
                    pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInstAttrs->ID);
                    pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> Manufactory_ID = Nan::New<v8::String> ("Manufactory_ID").ToLocalChecked();
                    v8::Local<v8::Integer> Manufactory_IDValue = Nan::New<v8::Integer> (pRtnNetMonitorTaskInstAttrs->Manufactory_ID);
                    pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (Manufactory_ID), Local<v8::Value>(Manufactory_IDValue));

                    v8::Local<v8::String> InstructAlias = Nan::New<v8::String> ("InstructAlias").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInstAttrs->InstructAlias);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInstAttrs->InstructAlias, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InstructAliasValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (InstructAlias), Local<v8::Value>(InstructAliasValue));

                    v8::Local<v8::String> DEVICETYPE = Nan::New<v8::String> ("DEVICETYPE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInstAttrs->DEVICETYPE);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInstAttrs->DEVICETYPE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DEVICETYPEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DEVICETYPE), Local<v8::Value>(DEVICETYPEValue));

                    v8::Local<v8::String> AttrsChain = Nan::New<v8::String> ("AttrsChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInstAttrs->AttrsChain);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInstAttrs->AttrsChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> AttrsChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (AttrsChain), Local<v8::Value>(AttrsChainValue));

                    v8::Local<v8::String> DefRegularChain = Nan::New<v8::String> ("DefRegularChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInstAttrs->DefRegularChain);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInstAttrs->DefRegularChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DefRegularChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DefRegularChain), Local<v8::Value>(DefRegularChainValue));

                    v8::Local<v8::String> DefParamChain = Nan::New<v8::String> ("DefParamChain").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMonitorTaskInstAttrs->DefParamChain);
                    Gb2312ToUtf8(pRtnNetMonitorTaskInstAttrs->DefParamChain, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DefParamChainValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value> (DefParamChain), Local<v8::Value>(DefParamChainValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMonitorTaskInstAttrs) { 
                    params[0] = Local<v8::Value>(pRtnNetMonitorTaskInstAttrsJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMonitorTaskInstAttrs) { 
                delete pRtnNetMonitorTaskInstAttrs;
                pRtnNetMonitorTaskInstAttrs = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMonitorTaskInstAttrsTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryFileGeneralOperTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryFileGeneralOperTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryFileGeneralOperTopic_mutex);

    int ioUserNumb = g_RspQryFileGeneralOperTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryFileGeneralOperTopic_IOUser_vec.begin();
        it != g_RspQryFileGeneralOperTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryFileGeneralOperTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryFileGeneralOperTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryFileGeneralOperTopic_Data_map[*it].front());
            g_RspQryFileGeneralOperTopic_Data_map[*it].pop();
        }
    }
    g_RspQryFileGeneralOperTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryFileGeneralOperTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryFileGeneralOperTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryFileGeneralOperTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryFileGeneralOperTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryFileGeneralOperTopic").ToLocalChecked());
            CShfeFtdcRspQryFileGeneralOperField* pRspQryFileGeneralOper = (CShfeFtdcRspQryFileGeneralOperField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryFileGeneralOperTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryFileGeneralOperTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryFileGeneralOperJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryFileGeneralOper) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->OperationType);
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> FileName = Nan::New<v8::String> ("FileName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileGeneralOper->FileName);
                    Gb2312ToUtf8(pRspQryFileGeneralOper->FileName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (FileName), Local<v8::Value>(FileNameValue));

                    v8::Local<v8::String> Version = Nan::New<v8::String> ("Version").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileGeneralOper->Version);
                    Gb2312ToUtf8(pRspQryFileGeneralOper->Version, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> VersionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (Version), Local<v8::Value>(VersionValue));

                    v8::Local<v8::String> SubVersion = Nan::New<v8::String> ("SubVersion").ToLocalChecked();
                    v8::Local<v8::Integer> SubVersionValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->SubVersion);
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (SubVersion), Local<v8::Value>(SubVersionValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileGeneralOper->MonDate);
                    Gb2312ToUtf8(pRspQryFileGeneralOper->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileGeneralOper->MonTime);
                    Gb2312ToUtf8(pRspQryFileGeneralOper->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileGeneralOper->UserName);
                    Gb2312ToUtf8(pRspQryFileGeneralOper->UserName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                    v8::Local<v8::String> OperType = Nan::New<v8::String> ("OperType").ToLocalChecked();
                    v8::Local<v8::Integer> OperTypeValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->OperType);
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (OperType), Local<v8::Value>(OperTypeValue));

                    v8::Local<v8::String> OperResult = Nan::New<v8::String> ("OperResult").ToLocalChecked();
                    v8::Local<v8::Integer> OperResultValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->OperResult);
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (OperResult), Local<v8::Value>(OperResultValue));

                    v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileGeneralOper->Comments);
                    Gb2312ToUtf8(pRspQryFileGeneralOper->Comments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                    v8::Local<v8::String> Offset = Nan::New<v8::String> ("Offset").ToLocalChecked();
                    v8::Local<v8::Integer> OffsetValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->Offset);
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (Offset), Local<v8::Value>(OffsetValue));

                    v8::Local<v8::String> Length = Nan::New<v8::String> ("Length").ToLocalChecked();
                    v8::Local<v8::Integer> LengthValue = Nan::New<v8::Integer> (pRspQryFileGeneralOper->Length);
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (Length), Local<v8::Value>(LengthValue));

                    v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryFileGeneralOper->FileContent);
                    Gb2312ToUtf8(pRspQryFileGeneralOper->FileContent, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryFileGeneralOperJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryFileGeneralOper) { 
                    params[0] = Local<v8::Value>(pRspQryFileGeneralOperJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryFileGeneralOper) { 
                delete pRspQryFileGeneralOper;
                pRspQryFileGeneralOper = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryFileGeneralOperTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnFileGeneralOperTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnFileGeneralOperTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnFileGeneralOperTopic_mutex);

    int ioUserNumb = g_RtnFileGeneralOperTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnFileGeneralOperTopic_IOUser_vec.begin();
        it != g_RtnFileGeneralOperTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnFileGeneralOperTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnFileGeneralOperTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnFileGeneralOperTopic_Data_map[*it].front());
            g_RtnFileGeneralOperTopic_Data_map[*it].pop();
        }
    }
    g_RtnFileGeneralOperTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnFileGeneralOperTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnFileGeneralOperTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnFileGeneralOperTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnFileGeneralOperTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnFileGeneralOperTopic").ToLocalChecked());
            CShfeFtdcRtnFileGeneralOperField* pRtnFileGeneralOper = (CShfeFtdcRtnFileGeneralOperField*)(paramArray[1]);
            if (OnRtnFileGeneralOperTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnFileGeneralOperTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnFileGeneralOperJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnFileGeneralOper) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->OperationType);
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> FileName = Nan::New<v8::String> ("FileName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileGeneralOper->FileName);
                    Gb2312ToUtf8(pRtnFileGeneralOper->FileName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (FileName), Local<v8::Value>(FileNameValue));

                    v8::Local<v8::String> Version = Nan::New<v8::String> ("Version").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileGeneralOper->Version);
                    Gb2312ToUtf8(pRtnFileGeneralOper->Version, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> VersionValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (Version), Local<v8::Value>(VersionValue));

                    v8::Local<v8::String> SubVersion = Nan::New<v8::String> ("SubVersion").ToLocalChecked();
                    v8::Local<v8::Integer> SubVersionValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->SubVersion);
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (SubVersion), Local<v8::Value>(SubVersionValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileGeneralOper->MonDate);
                    Gb2312ToUtf8(pRtnFileGeneralOper->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileGeneralOper->MonTime);
                    Gb2312ToUtf8(pRtnFileGeneralOper->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> UserName = Nan::New<v8::String> ("UserName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileGeneralOper->UserName);
                    Gb2312ToUtf8(pRtnFileGeneralOper->UserName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> UserNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (UserName), Local<v8::Value>(UserNameValue));

                    v8::Local<v8::String> OperType = Nan::New<v8::String> ("OperType").ToLocalChecked();
                    v8::Local<v8::Integer> OperTypeValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->OperType);
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (OperType), Local<v8::Value>(OperTypeValue));

                    v8::Local<v8::String> OperResult = Nan::New<v8::String> ("OperResult").ToLocalChecked();
                    v8::Local<v8::Integer> OperResultValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->OperResult);
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (OperResult), Local<v8::Value>(OperResultValue));

                    v8::Local<v8::String> Comments = Nan::New<v8::String> ("Comments").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileGeneralOper->Comments);
                    Gb2312ToUtf8(pRtnFileGeneralOper->Comments, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CommentsValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (Comments), Local<v8::Value>(CommentsValue));

                    v8::Local<v8::String> Offset = Nan::New<v8::String> ("Offset").ToLocalChecked();
                    v8::Local<v8::Integer> OffsetValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->Offset);
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (Offset), Local<v8::Value>(OffsetValue));

                    v8::Local<v8::String> Length = Nan::New<v8::String> ("Length").ToLocalChecked();
                    v8::Local<v8::Integer> LengthValue = Nan::New<v8::Integer> (pRtnFileGeneralOper->Length);
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (Length), Local<v8::Value>(LengthValue));

                    v8::Local<v8::String> FileContent = Nan::New<v8::String> ("FileContent").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnFileGeneralOper->FileContent);
                    Gb2312ToUtf8(pRtnFileGeneralOper->FileContent, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FileContentValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnFileGeneralOperJS->Set(Local<v8::Value> (FileContent), Local<v8::Value>(FileContentValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnFileGeneralOper) { 
                    params[0] = Local<v8::Value>(pRtnFileGeneralOperJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnFileGeneralOper) { 
                delete pRtnFileGeneralOper;
                pRtnFileGeneralOper = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnFileGeneralOperTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetBaseLineTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetBaseLineTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetBaseLineTopic_mutex);

    int ioUserNumb = g_RspQryNetBaseLineTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetBaseLineTopic_IOUser_vec.begin();
        it != g_RspQryNetBaseLineTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetBaseLineTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetBaseLineTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetBaseLineTopic_Data_map[*it].front());
            g_RspQryNetBaseLineTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetBaseLineTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetBaseLineTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetBaseLineTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetBaseLineTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetBaseLineTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetBaseLineTopic").ToLocalChecked());
            CShfeFtdcRspQryNetBaseLineField* pRspQryNetBaseLine = (CShfeFtdcRspQryNetBaseLineField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetBaseLineTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetBaseLineTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetBaseLineJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetBaseLine) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetBaseLine->OperationType);
                    pRspQryNetBaseLineJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetBaseLine->ID);
                    pRspQryNetBaseLineJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRspQryNetBaseLine->MANUFACTORY_ID);
                    pRspQryNetBaseLineJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLine->Name);
                    Gb2312ToUtf8(pRspQryNetBaseLine->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> SerialUsed = Nan::New<v8::String> ("SerialUsed").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLine->SerialUsed);
                    Gb2312ToUtf8(pRspQryNetBaseLine->SerialUsed, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SerialUsedValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineJS->Set(Local<v8::Value> (SerialUsed), Local<v8::Value>(SerialUsedValue));

                    v8::Local<v8::String> data = Nan::New<v8::String> ("data").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLine->data);
                    Gb2312ToUtf8(pRspQryNetBaseLine->data, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> dataValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineJS->Set(Local<v8::Value> (data), Local<v8::Value>(dataValue));

                    v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLine->memo);
                    Gb2312ToUtf8(pRspQryNetBaseLine->memo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> memoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRspQryNetBaseLine->Flag);
                    pRspQryNetBaseLineJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetBaseLine) { 
                    params[0] = Local<v8::Value>(pRspQryNetBaseLineJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetBaseLine) { 
                delete pRspQryNetBaseLine;
                pRspQryNetBaseLine = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetBaseLineTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetBaseLineTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetBaseLineTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetBaseLineTopic_mutex);

    int ioUserNumb = g_RtnNetBaseLineTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetBaseLineTopic_IOUser_vec.begin();
        it != g_RtnNetBaseLineTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetBaseLineTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetBaseLineTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetBaseLineTopic_Data_map[*it].front());
            g_RtnNetBaseLineTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetBaseLineTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetBaseLineTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetBaseLineTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetBaseLineTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetBaseLineTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetBaseLineTopic").ToLocalChecked());
            CShfeFtdcRtnNetBaseLineField* pRtnNetBaseLine = (CShfeFtdcRtnNetBaseLineField*)(paramArray[1]);
            if (OnRtnNetBaseLineTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetBaseLineTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetBaseLineJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetBaseLine) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetBaseLine->OperationType);
                    pRtnNetBaseLineJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetBaseLine->ID);
                    pRtnNetBaseLineJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> MANUFACTORY_ID = Nan::New<v8::String> ("MANUFACTORY_ID").ToLocalChecked();
                    v8::Local<v8::Integer> MANUFACTORY_IDValue = Nan::New<v8::Integer> (pRtnNetBaseLine->MANUFACTORY_ID);
                    pRtnNetBaseLineJS->Set(Local<v8::Value> (MANUFACTORY_ID), Local<v8::Value>(MANUFACTORY_IDValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLine->Name);
                    Gb2312ToUtf8(pRtnNetBaseLine->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> SerialUsed = Nan::New<v8::String> ("SerialUsed").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLine->SerialUsed);
                    Gb2312ToUtf8(pRtnNetBaseLine->SerialUsed, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SerialUsedValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineJS->Set(Local<v8::Value> (SerialUsed), Local<v8::Value>(SerialUsedValue));

                    v8::Local<v8::String> data = Nan::New<v8::String> ("data").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLine->data);
                    Gb2312ToUtf8(pRtnNetBaseLine->data, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> dataValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineJS->Set(Local<v8::Value> (data), Local<v8::Value>(dataValue));

                    v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLine->memo);
                    Gb2312ToUtf8(pRtnNetBaseLine->memo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> memoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRtnNetBaseLine->Flag);
                    pRtnNetBaseLineJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetBaseLine) { 
                    params[0] = Local<v8::Value>(pRtnNetBaseLineJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetBaseLine) { 
                delete pRtnNetBaseLine;
                pRtnNetBaseLine = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetBaseLineTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetBaseLineTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetBaseLineTaskTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetBaseLineTaskTopic_mutex);

    int ioUserNumb = g_RspQryNetBaseLineTaskTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetBaseLineTaskTopic_IOUser_vec.begin();
        it != g_RspQryNetBaseLineTaskTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetBaseLineTaskTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetBaseLineTaskTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetBaseLineTaskTopic_Data_map[*it].front());
            g_RspQryNetBaseLineTaskTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetBaseLineTaskTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetBaseLineTaskTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetBaseLineTaskTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetBaseLineTaskTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetBaseLineTaskTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetBaseLineTaskTopic").ToLocalChecked());
            CShfeFtdcRspQryNetBaseLineTaskField* pRspQryNetBaseLineTask = (CShfeFtdcRspQryNetBaseLineTaskField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetBaseLineTaskTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetBaseLineTaskTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetBaseLineTaskJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetBaseLineTask) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetBaseLineTask->OperationType);
                    pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetBaseLineTask->ID);
                    pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineTask->Name);
                    Gb2312ToUtf8(pRspQryNetBaseLineTask->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> BaseLineIDList = Nan::New<v8::String> ("BaseLineIDList").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineTask->BaseLineIDList);
                    Gb2312ToUtf8(pRspQryNetBaseLineTask->BaseLineIDList, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BaseLineIDListValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (BaseLineIDList), Local<v8::Value>(BaseLineIDListValue));

                    v8::Local<v8::String> DeviceIDList = Nan::New<v8::String> ("DeviceIDList").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineTask->DeviceIDList);
                    Gb2312ToUtf8(pRspQryNetBaseLineTask->DeviceIDList, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceIDListValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (DeviceIDList), Local<v8::Value>(DeviceIDListValue));

                    v8::Local<v8::String> GenDate = Nan::New<v8::String> ("GenDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineTask->GenDate);
                    Gb2312ToUtf8(pRspQryNetBaseLineTask->GenDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (GenDate), Local<v8::Value>(GenDateValue));

                    v8::Local<v8::String> GenTime = Nan::New<v8::String> ("GenTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineTask->GenTime);
                    Gb2312ToUtf8(pRspQryNetBaseLineTask->GenTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (GenTime), Local<v8::Value>(GenTimeValue));

                    v8::Local<v8::String> GenUser = Nan::New<v8::String> ("GenUser").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineTask->GenUser);
                    Gb2312ToUtf8(pRspQryNetBaseLineTask->GenUser, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenUserValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (GenUser), Local<v8::Value>(GenUserValue));

                    v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineTask->memo);
                    Gb2312ToUtf8(pRspQryNetBaseLineTask->memo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> memoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineTaskJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetBaseLineTask) { 
                    params[0] = Local<v8::Value>(pRspQryNetBaseLineTaskJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetBaseLineTask) { 
                delete pRspQryNetBaseLineTask;
                pRspQryNetBaseLineTask = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetBaseLineTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetBaseLineTaskTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetBaseLineTaskTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetBaseLineTaskTopic_mutex);

    int ioUserNumb = g_RtnNetBaseLineTaskTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetBaseLineTaskTopic_IOUser_vec.begin();
        it != g_RtnNetBaseLineTaskTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetBaseLineTaskTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetBaseLineTaskTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetBaseLineTaskTopic_Data_map[*it].front());
            g_RtnNetBaseLineTaskTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetBaseLineTaskTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetBaseLineTaskTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetBaseLineTaskTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetBaseLineTaskTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetBaseLineTaskTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetBaseLineTaskTopic").ToLocalChecked());
            CShfeFtdcRtnNetBaseLineTaskField* pRtnNetBaseLineTask = (CShfeFtdcRtnNetBaseLineTaskField*)(paramArray[1]);
            if (OnRtnNetBaseLineTaskTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetBaseLineTaskTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetBaseLineTaskJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetBaseLineTask) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetBaseLineTask->OperationType);
                    pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetBaseLineTask->ID);
                    pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> Name = Nan::New<v8::String> ("Name").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineTask->Name);
                    Gb2312ToUtf8(pRtnNetBaseLineTask->Name, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (Name), Local<v8::Value>(NameValue));

                    v8::Local<v8::String> BaseLineIDList = Nan::New<v8::String> ("BaseLineIDList").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineTask->BaseLineIDList);
                    Gb2312ToUtf8(pRtnNetBaseLineTask->BaseLineIDList, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BaseLineIDListValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (BaseLineIDList), Local<v8::Value>(BaseLineIDListValue));

                    v8::Local<v8::String> DeviceIDList = Nan::New<v8::String> ("DeviceIDList").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineTask->DeviceIDList);
                    Gb2312ToUtf8(pRtnNetBaseLineTask->DeviceIDList, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceIDListValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (DeviceIDList), Local<v8::Value>(DeviceIDListValue));

                    v8::Local<v8::String> GenDate = Nan::New<v8::String> ("GenDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineTask->GenDate);
                    Gb2312ToUtf8(pRtnNetBaseLineTask->GenDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (GenDate), Local<v8::Value>(GenDateValue));

                    v8::Local<v8::String> GenTime = Nan::New<v8::String> ("GenTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineTask->GenTime);
                    Gb2312ToUtf8(pRtnNetBaseLineTask->GenTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (GenTime), Local<v8::Value>(GenTimeValue));

                    v8::Local<v8::String> GenUser = Nan::New<v8::String> ("GenUser").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineTask->GenUser);
                    Gb2312ToUtf8(pRtnNetBaseLineTask->GenUser, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenUserValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (GenUser), Local<v8::Value>(GenUserValue));

                    v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineTask->memo);
                    Gb2312ToUtf8(pRtnNetBaseLineTask->memo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> memoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineTaskJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetBaseLineTask) { 
                    params[0] = Local<v8::Value>(pRtnNetBaseLineTaskJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetBaseLineTask) { 
                delete pRtnNetBaseLineTask;
                pRtnNetBaseLineTask = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetBaseLineTaskTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetBaseLineResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetBaseLineResultTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetBaseLineResultTopic_mutex);

    int ioUserNumb = g_RspQryNetBaseLineResultTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetBaseLineResultTopic_IOUser_vec.begin();
        it != g_RspQryNetBaseLineResultTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetBaseLineResultTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetBaseLineResultTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetBaseLineResultTopic_Data_map[*it].front());
            g_RspQryNetBaseLineResultTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetBaseLineResultTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetBaseLineResultTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetBaseLineResultTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetBaseLineResultTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetBaseLineResultTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetBaseLineResultTopic").ToLocalChecked());
            CShfeFtdcRspQryNetBaseLineResultField* pRspQryNetBaseLineResult = (CShfeFtdcRspQryNetBaseLineResultField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetBaseLineResultTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetBaseLineResultTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetBaseLineResultJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetBaseLineResult) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetBaseLineResult->OperationType);
                    pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetBaseLineResult->ID);
                    pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> BaseLineName = Nan::New<v8::String> ("BaseLineName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineResult->BaseLineName);
                    Gb2312ToUtf8(pRspQryNetBaseLineResult->BaseLineName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BaseLineNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (BaseLineName), Local<v8::Value>(BaseLineNameValue));

                    v8::Local<v8::String> DeviceObjID = Nan::New<v8::String> ("DeviceObjID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineResult->DeviceObjID);
                    Gb2312ToUtf8(pRspQryNetBaseLineResult->DeviceObjID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceObjIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (DeviceObjID), Local<v8::Value>(DeviceObjIDValue));

                    v8::Local<v8::String> DeviceIP = Nan::New<v8::String> ("DeviceIP").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineResult->DeviceIP);
                    Gb2312ToUtf8(pRspQryNetBaseLineResult->DeviceIP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceIPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (DeviceIP), Local<v8::Value>(DeviceIPValue));

                    v8::Local<v8::String> Result = Nan::New<v8::String> ("Result").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineResult->Result);
                    Gb2312ToUtf8(pRspQryNetBaseLineResult->Result, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ResultValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (Result), Local<v8::Value>(ResultValue));

                    v8::Local<v8::String> GenDate = Nan::New<v8::String> ("GenDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineResult->GenDate);
                    Gb2312ToUtf8(pRspQryNetBaseLineResult->GenDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (GenDate), Local<v8::Value>(GenDateValue));

                    v8::Local<v8::String> GenTime = Nan::New<v8::String> ("GenTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineResult->GenTime);
                    Gb2312ToUtf8(pRspQryNetBaseLineResult->GenTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (GenTime), Local<v8::Value>(GenTimeValue));

                    v8::Local<v8::String> GenUser = Nan::New<v8::String> ("GenUser").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetBaseLineResult->GenUser);
                    Gb2312ToUtf8(pRspQryNetBaseLineResult->GenUser, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenUserValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (GenUser), Local<v8::Value>(GenUserValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRspQryNetBaseLineResult->Flag);
                    pRspQryNetBaseLineResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetBaseLineResult) { 
                    params[0] = Local<v8::Value>(pRspQryNetBaseLineResultJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetBaseLineResult) { 
                delete pRspQryNetBaseLineResult;
                pRspQryNetBaseLineResult = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetBaseLineResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetBaseLineResultTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetBaseLineResultTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetBaseLineResultTopic_mutex);

    int ioUserNumb = g_RtnNetBaseLineResultTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetBaseLineResultTopic_IOUser_vec.begin();
        it != g_RtnNetBaseLineResultTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetBaseLineResultTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetBaseLineResultTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetBaseLineResultTopic_Data_map[*it].front());
            g_RtnNetBaseLineResultTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetBaseLineResultTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetBaseLineResultTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetBaseLineResultTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetBaseLineResultTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetBaseLineResultTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetBaseLineResultTopic").ToLocalChecked());
            CShfeFtdcRtnNetBaseLineResultField* pRtnNetBaseLineResult = (CShfeFtdcRtnNetBaseLineResultField*)(paramArray[1]);
            if (OnRtnNetBaseLineResultTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetBaseLineResultTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetBaseLineResultJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetBaseLineResult) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetBaseLineResult->OperationType);
                    pRtnNetBaseLineResultJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetBaseLineResult->ID);
                    pRtnNetBaseLineResultJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> BaseLineName = Nan::New<v8::String> ("BaseLineName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineResult->BaseLineName);
                    Gb2312ToUtf8(pRtnNetBaseLineResult->BaseLineName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BaseLineNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineResultJS->Set(Local<v8::Value> (BaseLineName), Local<v8::Value>(BaseLineNameValue));

                    v8::Local<v8::String> DeviceObjID = Nan::New<v8::String> ("DeviceObjID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineResult->DeviceObjID);
                    Gb2312ToUtf8(pRtnNetBaseLineResult->DeviceObjID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceObjIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineResultJS->Set(Local<v8::Value> (DeviceObjID), Local<v8::Value>(DeviceObjIDValue));

                    v8::Local<v8::String> DeviceIP = Nan::New<v8::String> ("DeviceIP").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineResult->DeviceIP);
                    Gb2312ToUtf8(pRtnNetBaseLineResult->DeviceIP, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DeviceIPValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineResultJS->Set(Local<v8::Value> (DeviceIP), Local<v8::Value>(DeviceIPValue));

                    v8::Local<v8::String> Result = Nan::New<v8::String> ("Result").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineResult->Result);
                    Gb2312ToUtf8(pRtnNetBaseLineResult->Result, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ResultValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineResultJS->Set(Local<v8::Value> (Result), Local<v8::Value>(ResultValue));

                    v8::Local<v8::String> GenDate = Nan::New<v8::String> ("GenDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineResult->GenDate);
                    Gb2312ToUtf8(pRtnNetBaseLineResult->GenDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineResultJS->Set(Local<v8::Value> (GenDate), Local<v8::Value>(GenDateValue));

                    v8::Local<v8::String> GenTime = Nan::New<v8::String> ("GenTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineResult->GenTime);
                    Gb2312ToUtf8(pRtnNetBaseLineResult->GenTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineResultJS->Set(Local<v8::Value> (GenTime), Local<v8::Value>(GenTimeValue));

                    v8::Local<v8::String> GenUser = Nan::New<v8::String> ("GenUser").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetBaseLineResult->GenUser);
                    Gb2312ToUtf8(pRtnNetBaseLineResult->GenUser, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> GenUserValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetBaseLineResultJS->Set(Local<v8::Value> (GenUser), Local<v8::Value>(GenUserValue));

                    v8::Local<v8::String> Flag = Nan::New<v8::String> ("Flag").ToLocalChecked();
                    v8::Local<v8::Integer> FlagValue = Nan::New<v8::Integer> (pRtnNetBaseLineResult->Flag);
                    pRtnNetBaseLineResultJS->Set(Local<v8::Value> (Flag), Local<v8::Value>(FlagValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetBaseLineResult) { 
                    params[0] = Local<v8::Value>(pRtnNetBaseLineResultJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetBaseLineResult) { 
                delete pRtnNetBaseLineResult;
                pRtnNetBaseLineResult = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetBaseLineResultTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPartyLinkStatusInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetPartyLinkStatusInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetPartyLinkStatusInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetPartyLinkStatusInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetPartyLinkStatusInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetPartyLinkStatusInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetPartyLinkStatusInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetPartyLinkStatusInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetPartyLinkStatusInfoTopic_Data_map[*it].front());
            g_RspQryNetPartyLinkStatusInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetPartyLinkStatusInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetPartyLinkStatusInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetPartyLinkStatusInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetPartyLinkStatusInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetPartyLinkStatusInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPartyLinkStatusInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetPartyLinkStatusInfoField* pRspQryNetPartyLinkStatusInfo = (CShfeFtdcRspQryNetPartyLinkStatusInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetPartyLinkStatusInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetPartyLinkStatusInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetPartyLinkStatusInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetPartyLinkStatusInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPartyLinkStatusInfo->OperationType);
                    pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkStatusInfo->MonDate);
                    Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkStatusInfo->MonTime);
                    Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkStatusInfo->SEAT_NO);
                    Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->SEAT_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkStatusInfo->IPADDR);
                    Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkStatusInfo->Interface);
                    Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->Interface, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                    v8::Local<v8::String> status = Nan::New<v8::String> ("status").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartyLinkStatusInfo->status);
                    Gb2312ToUtf8(pRspQryNetPartyLinkStatusInfo->status, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> statusValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (status), Local<v8::Value>(statusValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetPartyLinkStatusInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetPartyLinkStatusInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetPartyLinkStatusInfo) { 
                delete pRspQryNetPartyLinkStatusInfo;
                pRspQryNetPartyLinkStatusInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetPartyLinkStatusInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPartyLinkStatusInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetPartyLinkStatusInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetPartyLinkStatusInfoTopic_mutex);

    int ioUserNumb = g_RtnNetPartyLinkStatusInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetPartyLinkStatusInfoTopic_IOUser_vec.begin();
        it != g_RtnNetPartyLinkStatusInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetPartyLinkStatusInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetPartyLinkStatusInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetPartyLinkStatusInfoTopic_Data_map[*it].front());
            g_RtnNetPartyLinkStatusInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetPartyLinkStatusInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetPartyLinkStatusInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetPartyLinkStatusInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetPartyLinkStatusInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetPartyLinkStatusInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPartyLinkStatusInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetPartyLinkStatusInfoField* pRtnNetPartyLinkStatusInfo = (CShfeFtdcRtnNetPartyLinkStatusInfoField*)(paramArray[1]);
            if (OnRtnNetPartyLinkStatusInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetPartyLinkStatusInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetPartyLinkStatusInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetPartyLinkStatusInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPartyLinkStatusInfo->OperationType);
                    pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkStatusInfo->MonDate);
                    Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkStatusInfo->MonTime);
                    Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkStatusInfo->SEAT_NO);
                    Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->SEAT_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkStatusInfo->IPADDR);
                    Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkStatusInfo->Interface);
                    Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->Interface, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                    v8::Local<v8::String> status = Nan::New<v8::String> ("status").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartyLinkStatusInfo->status);
                    Gb2312ToUtf8(pRtnNetPartyLinkStatusInfo->status, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> statusValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value> (status), Local<v8::Value>(statusValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetPartyLinkStatusInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetPartyLinkStatusInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetPartyLinkStatusInfo) { 
                delete pRtnNetPartyLinkStatusInfo;
                pRtnNetPartyLinkStatusInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetPartyLinkStatusInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetMemberSDHLineInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetMemberSDHLineInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetMemberSDHLineInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetMemberSDHLineInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetMemberSDHLineInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetMemberSDHLineInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetMemberSDHLineInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetMemberSDHLineInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetMemberSDHLineInfoTopic_Data_map[*it].front());
            g_RspQryNetMemberSDHLineInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetMemberSDHLineInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetMemberSDHLineInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetMemberSDHLineInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetMemberSDHLineInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetMemberSDHLineInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMemberSDHLineInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetMemberSDHLineInfoField* pRspQryNetMemberSDHLineInfo = (CShfeFtdcRspQryNetMemberSDHLineInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetMemberSDHLineInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetMemberSDHLineInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetMemberSDHLineInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetMemberSDHLineInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetMemberSDHLineInfo->OperationType);
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetMemberSDHLineInfo->ID);
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SeqNo = Nan::New<v8::String> ("SeqNo").ToLocalChecked();
                    v8::Local<v8::Integer> SeqNoValue = Nan::New<v8::Integer> (pRspQryNetMemberSDHLineInfo->SeqNo);
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (SeqNo), Local<v8::Value>(SeqNoValue));

                    v8::Local<v8::String> MemContractNo = Nan::New<v8::String> ("MemContractNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->MemContractNo);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->MemContractNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MemContractNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MemContractNo), Local<v8::Value>(MemContractNoValue));

                    v8::Local<v8::String> ApplyPerson = Nan::New<v8::String> ("ApplyPerson").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->ApplyPerson);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->ApplyPerson, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ApplyPersonValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ApplyPerson), Local<v8::Value>(ApplyPersonValue));

                    v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                    v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRspQryNetMemberSDHLineInfo->MonthlyRental);
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                    v8::Local<v8::String> MemberNo = Nan::New<v8::String> ("MemberNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->MemberNo);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->MemberNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MemberNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MemberNo), Local<v8::Value>(MemberNoValue));

                    v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->ParticipantName);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->ParticipantName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                    v8::Local<v8::String> ClientManager = Nan::New<v8::String> ("ClientManager").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->ClientManager);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->ClientManager, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientManagerValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ClientManager), Local<v8::Value>(ClientManagerValue));

                    v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->Bandwidth);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->Bandwidth, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                    v8::Local<v8::String> InterfaceType = Nan::New<v8::String> ("InterfaceType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->InterfaceType);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->InterfaceType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (InterfaceType), Local<v8::Value>(InterfaceTypeValue));

                    v8::Local<v8::String> RemoteCircuit = Nan::New<v8::String> ("RemoteCircuit").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->RemoteCircuit);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->RemoteCircuit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemoteCircuitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (RemoteCircuit), Local<v8::Value>(RemoteCircuitValue));

                    v8::Local<v8::String> LocalCircuit = Nan::New<v8::String> ("LocalCircuit").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->LocalCircuit);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->LocalCircuit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LocalCircuitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (LocalCircuit), Local<v8::Value>(LocalCircuitValue));

                    v8::Local<v8::String> Remark = Nan::New<v8::String> ("Remark").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->Remark);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->Remark, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemarkValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Remark), Local<v8::Value>(RemarkValue));

                    v8::Local<v8::String> EndALineAddress = Nan::New<v8::String> ("EndALineAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->EndALineAddress);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->EndALineAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndALineAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndALineAddress), Local<v8::Value>(EndALineAddressValue));

                    v8::Local<v8::String> EndAContact = Nan::New<v8::String> ("EndAContact").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->EndAContact);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->EndAContact, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndAContactValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndAContact), Local<v8::Value>(EndAContactValue));

                    v8::Local<v8::String> EndZLineAddress = Nan::New<v8::String> ("EndZLineAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->EndZLineAddress);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->EndZLineAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndZLineAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndZLineAddress), Local<v8::Value>(EndZLineAddressValue));

                    v8::Local<v8::String> ContactName = Nan::New<v8::String> ("ContactName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->ContactName);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->ContactName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ContactNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ContactName), Local<v8::Value>(ContactNameValue));

                    v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->TELEPHONE);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->TELEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                    v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->MOBILEPHONE);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->MOBILEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->IPADDR);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->Interface);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->Interface, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                    v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->PROVINCE);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->PROVINCE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                    v8::Local<v8::String> StartPortID = Nan::New<v8::String> ("StartPortID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->StartPortID);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->StartPortID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartPortIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (StartPortID), Local<v8::Value>(StartPortIDValue));

                    v8::Local<v8::String> StartJump = Nan::New<v8::String> ("StartJump").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->StartJump);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->StartJump, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartJumpValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (StartJump), Local<v8::Value>(StartJumpValue));

                    v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetMemberSDHLineInfo->LINE_STATUS);
                    Gb2312ToUtf8(pRspQryNetMemberSDHLineInfo->LINE_STATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                    v8::Local<v8::String> DataCenterID = Nan::New<v8::String> ("DataCenterID").ToLocalChecked();
                    v8::Local<v8::Integer> DataCenterIDValue = Nan::New<v8::Integer> (pRspQryNetMemberSDHLineInfo->DataCenterID);
                    pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value> (DataCenterID), Local<v8::Value>(DataCenterIDValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetMemberSDHLineInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetMemberSDHLineInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetMemberSDHLineInfo) { 
                delete pRspQryNetMemberSDHLineInfo;
                pRspQryNetMemberSDHLineInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetMemberSDHLineInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetMemberSDHLineInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetMemberSDHLineInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetMemberSDHLineInfoTopic_mutex);

    int ioUserNumb = g_RtnNetMemberSDHLineInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetMemberSDHLineInfoTopic_IOUser_vec.begin();
        it != g_RtnNetMemberSDHLineInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetMemberSDHLineInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetMemberSDHLineInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetMemberSDHLineInfoTopic_Data_map[*it].front());
            g_RtnNetMemberSDHLineInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetMemberSDHLineInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetMemberSDHLineInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetMemberSDHLineInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetMemberSDHLineInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetMemberSDHLineInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMemberSDHLineInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetMemberSDHLineInfoField* pRtnNetMemberSDHLineInfo = (CShfeFtdcRtnNetMemberSDHLineInfoField*)(paramArray[1]);
            if (OnRtnNetMemberSDHLineInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetMemberSDHLineInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetMemberSDHLineInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetMemberSDHLineInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetMemberSDHLineInfo->OperationType);
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetMemberSDHLineInfo->ID);
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SeqNo = Nan::New<v8::String> ("SeqNo").ToLocalChecked();
                    v8::Local<v8::Integer> SeqNoValue = Nan::New<v8::Integer> (pRtnNetMemberSDHLineInfo->SeqNo);
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (SeqNo), Local<v8::Value>(SeqNoValue));

                    v8::Local<v8::String> MemContractNo = Nan::New<v8::String> ("MemContractNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->MemContractNo);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->MemContractNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MemContractNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MemContractNo), Local<v8::Value>(MemContractNoValue));

                    v8::Local<v8::String> ApplyPerson = Nan::New<v8::String> ("ApplyPerson").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->ApplyPerson);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->ApplyPerson, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ApplyPersonValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ApplyPerson), Local<v8::Value>(ApplyPersonValue));

                    v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                    v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRtnNetMemberSDHLineInfo->MonthlyRental);
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                    v8::Local<v8::String> MemberNo = Nan::New<v8::String> ("MemberNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->MemberNo);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->MemberNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MemberNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MemberNo), Local<v8::Value>(MemberNoValue));

                    v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->ParticipantName);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->ParticipantName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                    v8::Local<v8::String> ClientManager = Nan::New<v8::String> ("ClientManager").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->ClientManager);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->ClientManager, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientManagerValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ClientManager), Local<v8::Value>(ClientManagerValue));

                    v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->Bandwidth);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->Bandwidth, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                    v8::Local<v8::String> InterfaceType = Nan::New<v8::String> ("InterfaceType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->InterfaceType);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->InterfaceType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (InterfaceType), Local<v8::Value>(InterfaceTypeValue));

                    v8::Local<v8::String> RemoteCircuit = Nan::New<v8::String> ("RemoteCircuit").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->RemoteCircuit);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->RemoteCircuit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemoteCircuitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (RemoteCircuit), Local<v8::Value>(RemoteCircuitValue));

                    v8::Local<v8::String> LocalCircuit = Nan::New<v8::String> ("LocalCircuit").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->LocalCircuit);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->LocalCircuit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LocalCircuitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (LocalCircuit), Local<v8::Value>(LocalCircuitValue));

                    v8::Local<v8::String> Remark = Nan::New<v8::String> ("Remark").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->Remark);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->Remark, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemarkValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Remark), Local<v8::Value>(RemarkValue));

                    v8::Local<v8::String> EndALineAddress = Nan::New<v8::String> ("EndALineAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->EndALineAddress);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->EndALineAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndALineAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndALineAddress), Local<v8::Value>(EndALineAddressValue));

                    v8::Local<v8::String> EndAContact = Nan::New<v8::String> ("EndAContact").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->EndAContact);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->EndAContact, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndAContactValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndAContact), Local<v8::Value>(EndAContactValue));

                    v8::Local<v8::String> EndZLineAddress = Nan::New<v8::String> ("EndZLineAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->EndZLineAddress);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->EndZLineAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndZLineAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (EndZLineAddress), Local<v8::Value>(EndZLineAddressValue));

                    v8::Local<v8::String> ContactName = Nan::New<v8::String> ("ContactName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->ContactName);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->ContactName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ContactNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (ContactName), Local<v8::Value>(ContactNameValue));

                    v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->TELEPHONE);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->TELEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                    v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->MOBILEPHONE);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->MOBILEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->IPADDR);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->Interface);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->Interface, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                    v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->PROVINCE);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->PROVINCE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                    v8::Local<v8::String> StartPortID = Nan::New<v8::String> ("StartPortID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->StartPortID);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->StartPortID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartPortIDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (StartPortID), Local<v8::Value>(StartPortIDValue));

                    v8::Local<v8::String> StartJump = Nan::New<v8::String> ("StartJump").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->StartJump);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->StartJump, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> StartJumpValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (StartJump), Local<v8::Value>(StartJumpValue));

                    v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetMemberSDHLineInfo->LINE_STATUS);
                    Gb2312ToUtf8(pRtnNetMemberSDHLineInfo->LINE_STATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                    v8::Local<v8::String> DataCenterID = Nan::New<v8::String> ("DataCenterID").ToLocalChecked();
                    v8::Local<v8::Integer> DataCenterIDValue = Nan::New<v8::Integer> (pRtnNetMemberSDHLineInfo->DataCenterID);
                    pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value> (DataCenterID), Local<v8::Value>(DataCenterIDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetMemberSDHLineInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetMemberSDHLineInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetMemberSDHLineInfo) { 
                delete pRtnNetMemberSDHLineInfo;
                pRtnNetMemberSDHLineInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetMemberSDHLineInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetDDNLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetDDNLinkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetDDNLinkInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetDDNLinkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetDDNLinkInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetDDNLinkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetDDNLinkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetDDNLinkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetDDNLinkInfoTopic_Data_map[*it].front());
            g_RspQryNetDDNLinkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetDDNLinkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetDDNLinkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetDDNLinkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetDDNLinkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetDDNLinkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDDNLinkInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetDDNLinkInfoField* pRspQryNetDDNLinkInfo = (CShfeFtdcRspQryNetDDNLinkInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetDDNLinkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetDDNLinkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetDDNLinkInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetDDNLinkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetDDNLinkInfo->OperationType);
                    pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetDDNLinkInfo->ID);
                    pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDDNLinkInfo->ClientName);
                    Gb2312ToUtf8(pRspQryNetDDNLinkInfo->ClientName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDDNLinkInfo->DDN_NO);
                    Gb2312ToUtf8(pRspQryNetDDNLinkInfo->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> BusinessUnit = Nan::New<v8::String> ("BusinessUnit").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDDNLinkInfo->BusinessUnit);
                    Gb2312ToUtf8(pRspQryNetDDNLinkInfo->BusinessUnit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BusinessUnitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (BusinessUnit), Local<v8::Value>(BusinessUnitValue));

                    v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDDNLinkInfo->Bandwidth);
                    Gb2312ToUtf8(pRspQryNetDDNLinkInfo->Bandwidth, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                    v8::Local<v8::String> EndAAddress = Nan::New<v8::String> ("EndAAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDDNLinkInfo->EndAAddress);
                    Gb2312ToUtf8(pRspQryNetDDNLinkInfo->EndAAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndAAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (EndAAddress), Local<v8::Value>(EndAAddressValue));

                    v8::Local<v8::String> EndAContactName = Nan::New<v8::String> ("EndAContactName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDDNLinkInfo->EndAContactName);
                    Gb2312ToUtf8(pRspQryNetDDNLinkInfo->EndAContactName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndAContactNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (EndAContactName), Local<v8::Value>(EndAContactNameValue));

                    v8::Local<v8::String> EndZAddress = Nan::New<v8::String> ("EndZAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDDNLinkInfo->EndZAddress);
                    Gb2312ToUtf8(pRspQryNetDDNLinkInfo->EndZAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndZAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (EndZAddress), Local<v8::Value>(EndZAddressValue));

                    v8::Local<v8::String> EndZContactName = Nan::New<v8::String> ("EndZContactName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetDDNLinkInfo->EndZContactName);
                    Gb2312ToUtf8(pRspQryNetDDNLinkInfo->EndZContactName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndZContactNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value> (EndZContactName), Local<v8::Value>(EndZContactNameValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetDDNLinkInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetDDNLinkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetDDNLinkInfo) { 
                delete pRspQryNetDDNLinkInfo;
                pRspQryNetDDNLinkInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetDDNLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetDDNLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetDDNLinkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetDDNLinkInfoTopic_mutex);

    int ioUserNumb = g_RtnNetDDNLinkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetDDNLinkInfoTopic_IOUser_vec.begin();
        it != g_RtnNetDDNLinkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetDDNLinkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetDDNLinkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetDDNLinkInfoTopic_Data_map[*it].front());
            g_RtnNetDDNLinkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetDDNLinkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetDDNLinkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetDDNLinkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetDDNLinkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetDDNLinkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDDNLinkInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetDDNLinkInfoField* pRtnNetDDNLinkInfo = (CShfeFtdcRtnNetDDNLinkInfoField*)(paramArray[1]);
            if (OnRtnNetDDNLinkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetDDNLinkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetDDNLinkInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetDDNLinkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetDDNLinkInfo->OperationType);
                    pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetDDNLinkInfo->ID);
                    pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ClientName = Nan::New<v8::String> ("ClientName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDDNLinkInfo->ClientName);
                    Gb2312ToUtf8(pRtnNetDDNLinkInfo->ClientName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ClientNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (ClientName), Local<v8::Value>(ClientNameValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDDNLinkInfo->DDN_NO);
                    Gb2312ToUtf8(pRtnNetDDNLinkInfo->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> BusinessUnit = Nan::New<v8::String> ("BusinessUnit").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDDNLinkInfo->BusinessUnit);
                    Gb2312ToUtf8(pRtnNetDDNLinkInfo->BusinessUnit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BusinessUnitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (BusinessUnit), Local<v8::Value>(BusinessUnitValue));

                    v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDDNLinkInfo->Bandwidth);
                    Gb2312ToUtf8(pRtnNetDDNLinkInfo->Bandwidth, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                    v8::Local<v8::String> EndAAddress = Nan::New<v8::String> ("EndAAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDDNLinkInfo->EndAAddress);
                    Gb2312ToUtf8(pRtnNetDDNLinkInfo->EndAAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndAAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (EndAAddress), Local<v8::Value>(EndAAddressValue));

                    v8::Local<v8::String> EndAContactName = Nan::New<v8::String> ("EndAContactName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDDNLinkInfo->EndAContactName);
                    Gb2312ToUtf8(pRtnNetDDNLinkInfo->EndAContactName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndAContactNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (EndAContactName), Local<v8::Value>(EndAContactNameValue));

                    v8::Local<v8::String> EndZAddress = Nan::New<v8::String> ("EndZAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDDNLinkInfo->EndZAddress);
                    Gb2312ToUtf8(pRtnNetDDNLinkInfo->EndZAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndZAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (EndZAddress), Local<v8::Value>(EndZAddressValue));

                    v8::Local<v8::String> EndZContactName = Nan::New<v8::String> ("EndZContactName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetDDNLinkInfo->EndZContactName);
                    Gb2312ToUtf8(pRtnNetDDNLinkInfo->EndZContactName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndZContactNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetDDNLinkInfoJS->Set(Local<v8::Value> (EndZContactName), Local<v8::Value>(EndZContactNameValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetDDNLinkInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetDDNLinkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetDDNLinkInfo) { 
                delete pRtnNetDDNLinkInfo;
                pRtnNetDDNLinkInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetDDNLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPseudMemberLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetPseudMemberLinkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetPseudMemberLinkInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetPseudMemberLinkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetPseudMemberLinkInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetPseudMemberLinkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetPseudMemberLinkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetPseudMemberLinkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetPseudMemberLinkInfoTopic_Data_map[*it].front());
            g_RspQryNetPseudMemberLinkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetPseudMemberLinkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetPseudMemberLinkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetPseudMemberLinkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetPseudMemberLinkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetPseudMemberLinkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPseudMemberLinkInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetPseudMemberLinkInfoField* pRspQryNetPseudMemberLinkInfo = (CShfeFtdcRspQryNetPseudMemberLinkInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetPseudMemberLinkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetPseudMemberLinkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetPseudMemberLinkInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetPseudMemberLinkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPseudMemberLinkInfo->OperationType);
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPseudMemberLinkInfo->ID);
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SeqNo = Nan::New<v8::String> ("SeqNo").ToLocalChecked();
                    v8::Local<v8::Integer> SeqNoValue = Nan::New<v8::Integer> (pRspQryNetPseudMemberLinkInfo->SeqNo);
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (SeqNo), Local<v8::Value>(SeqNoValue));

                    v8::Local<v8::String> MemContractNo = Nan::New<v8::String> ("MemContractNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->MemContractNo);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->MemContractNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MemContractNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (MemContractNo), Local<v8::Value>(MemContractNoValue));

                    v8::Local<v8::String> LineUsage = Nan::New<v8::String> ("LineUsage").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->LineUsage);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->LineUsage, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LineUsageValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LineUsage), Local<v8::Value>(LineUsageValue));

                    v8::Local<v8::String> LocalCircuit = Nan::New<v8::String> ("LocalCircuit").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->LocalCircuit);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->LocalCircuit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LocalCircuitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LocalCircuit), Local<v8::Value>(LocalCircuitValue));

                    v8::Local<v8::String> RemoteCircuit = Nan::New<v8::String> ("RemoteCircuit").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->RemoteCircuit);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->RemoteCircuit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemoteCircuitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (RemoteCircuit), Local<v8::Value>(RemoteCircuitValue));

                    v8::Local<v8::String> BusinessUnit = Nan::New<v8::String> ("BusinessUnit").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->BusinessUnit);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->BusinessUnit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BusinessUnitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (BusinessUnit), Local<v8::Value>(BusinessUnitValue));

                    v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->Bandwidth);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->Bandwidth, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                    v8::Local<v8::String> ApplyPerson = Nan::New<v8::String> ("ApplyPerson").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->ApplyPerson);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->ApplyPerson, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ApplyPersonValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (ApplyPerson), Local<v8::Value>(ApplyPersonValue));

                    v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                    v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRspQryNetPseudMemberLinkInfo->MonthlyRental);
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                    v8::Local<v8::String> EndAAddress = Nan::New<v8::String> ("EndAAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->EndAAddress);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->EndAAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndAAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndAAddress), Local<v8::Value>(EndAAddressValue));

                    v8::Local<v8::String> EndAContactName = Nan::New<v8::String> ("EndAContactName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->EndAContactName);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->EndAContactName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndAContactNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndAContactName), Local<v8::Value>(EndAContactNameValue));

                    v8::Local<v8::String> EndZAddress = Nan::New<v8::String> ("EndZAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->EndZAddress);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->EndZAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndZAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndZAddress), Local<v8::Value>(EndZAddressValue));

                    v8::Local<v8::String> EndZContactName = Nan::New<v8::String> ("EndZContactName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->EndZContactName);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->EndZContactName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndZContactNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndZContactName), Local<v8::Value>(EndZContactNameValue));

                    v8::Local<v8::String> Telephone = Nan::New<v8::String> ("Telephone").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->Telephone);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->Telephone, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TelephoneValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (Telephone), Local<v8::Value>(TelephoneValue));

                    v8::Local<v8::String> LineInfo = Nan::New<v8::String> ("LineInfo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->LineInfo);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->LineInfo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LineInfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LineInfo), Local<v8::Value>(LineInfoValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPseudMemberLinkInfo->IPADDR);
                    Gb2312ToUtf8(pRspQryNetPseudMemberLinkInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetPseudMemberLinkInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetPseudMemberLinkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetPseudMemberLinkInfo) { 
                delete pRspQryNetPseudMemberLinkInfo;
                pRspQryNetPseudMemberLinkInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetPseudMemberLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPseudMemberLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetPseudMemberLinkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetPseudMemberLinkInfoTopic_mutex);

    int ioUserNumb = g_RtnNetPseudMemberLinkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetPseudMemberLinkInfoTopic_IOUser_vec.begin();
        it != g_RtnNetPseudMemberLinkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetPseudMemberLinkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetPseudMemberLinkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetPseudMemberLinkInfoTopic_Data_map[*it].front());
            g_RtnNetPseudMemberLinkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetPseudMemberLinkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetPseudMemberLinkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetPseudMemberLinkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetPseudMemberLinkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetPseudMemberLinkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPseudMemberLinkInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetPseudMemberLinkInfoField* pRtnNetPseudMemberLinkInfo = (CShfeFtdcRtnNetPseudMemberLinkInfoField*)(paramArray[1]);
            if (OnRtnNetPseudMemberLinkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetPseudMemberLinkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetPseudMemberLinkInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetPseudMemberLinkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPseudMemberLinkInfo->OperationType);
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPseudMemberLinkInfo->ID);
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SeqNo = Nan::New<v8::String> ("SeqNo").ToLocalChecked();
                    v8::Local<v8::Integer> SeqNoValue = Nan::New<v8::Integer> (pRtnNetPseudMemberLinkInfo->SeqNo);
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (SeqNo), Local<v8::Value>(SeqNoValue));

                    v8::Local<v8::String> MemContractNo = Nan::New<v8::String> ("MemContractNo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->MemContractNo);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->MemContractNo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MemContractNoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (MemContractNo), Local<v8::Value>(MemContractNoValue));

                    v8::Local<v8::String> LineUsage = Nan::New<v8::String> ("LineUsage").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->LineUsage);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->LineUsage, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LineUsageValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LineUsage), Local<v8::Value>(LineUsageValue));

                    v8::Local<v8::String> LocalCircuit = Nan::New<v8::String> ("LocalCircuit").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->LocalCircuit);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->LocalCircuit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LocalCircuitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LocalCircuit), Local<v8::Value>(LocalCircuitValue));

                    v8::Local<v8::String> RemoteCircuit = Nan::New<v8::String> ("RemoteCircuit").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->RemoteCircuit);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->RemoteCircuit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemoteCircuitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (RemoteCircuit), Local<v8::Value>(RemoteCircuitValue));

                    v8::Local<v8::String> BusinessUnit = Nan::New<v8::String> ("BusinessUnit").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->BusinessUnit);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->BusinessUnit, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BusinessUnitValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (BusinessUnit), Local<v8::Value>(BusinessUnitValue));

                    v8::Local<v8::String> Bandwidth = Nan::New<v8::String> ("Bandwidth").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->Bandwidth);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->Bandwidth, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> BandwidthValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (Bandwidth), Local<v8::Value>(BandwidthValue));

                    v8::Local<v8::String> ApplyPerson = Nan::New<v8::String> ("ApplyPerson").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->ApplyPerson);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->ApplyPerson, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ApplyPersonValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (ApplyPerson), Local<v8::Value>(ApplyPersonValue));

                    v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                    v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRtnNetPseudMemberLinkInfo->MonthlyRental);
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                    v8::Local<v8::String> EndAAddress = Nan::New<v8::String> ("EndAAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->EndAAddress);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->EndAAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndAAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndAAddress), Local<v8::Value>(EndAAddressValue));

                    v8::Local<v8::String> EndAContactName = Nan::New<v8::String> ("EndAContactName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->EndAContactName);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->EndAContactName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndAContactNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndAContactName), Local<v8::Value>(EndAContactNameValue));

                    v8::Local<v8::String> EndZAddress = Nan::New<v8::String> ("EndZAddress").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->EndZAddress);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->EndZAddress, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndZAddressValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndZAddress), Local<v8::Value>(EndZAddressValue));

                    v8::Local<v8::String> EndZContactName = Nan::New<v8::String> ("EndZContactName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->EndZContactName);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->EndZContactName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EndZContactNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (EndZContactName), Local<v8::Value>(EndZContactNameValue));

                    v8::Local<v8::String> Telephone = Nan::New<v8::String> ("Telephone").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->Telephone);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->Telephone, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TelephoneValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (Telephone), Local<v8::Value>(TelephoneValue));

                    v8::Local<v8::String> LineInfo = Nan::New<v8::String> ("LineInfo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->LineInfo);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->LineInfo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LineInfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (LineInfo), Local<v8::Value>(LineInfoValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPseudMemberLinkInfo->IPADDR);
                    Gb2312ToUtf8(pRtnNetPseudMemberLinkInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetPseudMemberLinkInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetPseudMemberLinkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetPseudMemberLinkInfo) { 
                delete pRtnNetPseudMemberLinkInfo;
                pRtnNetPseudMemberLinkInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetPseudMemberLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryOuterDeviceInfTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryOuterDeviceInfTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryOuterDeviceInfTopic_mutex);

    int ioUserNumb = g_RspQryOuterDeviceInfTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryOuterDeviceInfTopic_IOUser_vec.begin();
        it != g_RspQryOuterDeviceInfTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryOuterDeviceInfTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryOuterDeviceInfTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryOuterDeviceInfTopic_Data_map[*it].front());
            g_RspQryOuterDeviceInfTopic_Data_map[*it].pop();
        }
    }
    g_RspQryOuterDeviceInfTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryOuterDeviceInfTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryOuterDeviceInfTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryOuterDeviceInfTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryOuterDeviceInfTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryOuterDeviceInfTopic").ToLocalChecked());
            CShfeFtdcRspQryOuterDeviceInfField* pRspQryOuterDeviceInf = (CShfeFtdcRspQryOuterDeviceInfField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryOuterDeviceInfTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryOuterDeviceInfTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryOuterDeviceInfJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryOuterDeviceInf) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryOuterDeviceInf->OperationType);
                    pRspQryOuterDeviceInfJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryOuterDeviceInf->ID);
                    pRspQryOuterDeviceInfJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOuterDeviceInf->IPADDR);
                    Gb2312ToUtf8(pRspQryOuterDeviceInf->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOuterDeviceInfJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> NAME = Nan::New<v8::String> ("NAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOuterDeviceInf->NAME);
                    Gb2312ToUtf8(pRspQryOuterDeviceInf->NAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOuterDeviceInfJS->Set(Local<v8::Value> (NAME), Local<v8::Value>(NAMEValue));

                    v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryOuterDeviceInf->memo);
                    Gb2312ToUtf8(pRspQryOuterDeviceInf->memo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> memoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryOuterDeviceInfJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryOuterDeviceInf) { 
                    params[0] = Local<v8::Value>(pRspQryOuterDeviceInfJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryOuterDeviceInf) { 
                delete pRspQryOuterDeviceInf;
                pRspQryOuterDeviceInf = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryOuterDeviceInfTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetOuterDeviceInfTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetOuterDeviceInfTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetOuterDeviceInfTopic_mutex);

    int ioUserNumb = g_RtnNetOuterDeviceInfTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetOuterDeviceInfTopic_IOUser_vec.begin();
        it != g_RtnNetOuterDeviceInfTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetOuterDeviceInfTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetOuterDeviceInfTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetOuterDeviceInfTopic_Data_map[*it].front());
            g_RtnNetOuterDeviceInfTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetOuterDeviceInfTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetOuterDeviceInfTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetOuterDeviceInfTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetOuterDeviceInfTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetOuterDeviceInfTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetOuterDeviceInfTopic").ToLocalChecked());
            CShfeFtdcRtnNetOuterDeviceInfField* pRtnNetOuterDeviceInf = (CShfeFtdcRtnNetOuterDeviceInfField*)(paramArray[1]);
            if (OnRtnNetOuterDeviceInfTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetOuterDeviceInfTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetOuterDeviceInfJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetOuterDeviceInf) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetOuterDeviceInf->OperationType);
                    pRtnNetOuterDeviceInfJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetOuterDeviceInf->ID);
                    pRtnNetOuterDeviceInfJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetOuterDeviceInf->IPADDR);
                    Gb2312ToUtf8(pRtnNetOuterDeviceInf->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetOuterDeviceInfJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> NAME = Nan::New<v8::String> ("NAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetOuterDeviceInf->NAME);
                    Gb2312ToUtf8(pRtnNetOuterDeviceInf->NAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> NAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetOuterDeviceInfJS->Set(Local<v8::Value> (NAME), Local<v8::Value>(NAMEValue));

                    v8::Local<v8::String> memo = Nan::New<v8::String> ("memo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetOuterDeviceInf->memo);
                    Gb2312ToUtf8(pRtnNetOuterDeviceInf->memo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> memoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetOuterDeviceInfJS->Set(Local<v8::Value> (memo), Local<v8::Value>(memoValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetOuterDeviceInf) { 
                    params[0] = Local<v8::Value>(pRtnNetOuterDeviceInfJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetOuterDeviceInf) { 
                delete pRtnNetOuterDeviceInf;
                pRtnNetOuterDeviceInf = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetOuterDeviceInfTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetLocalPingResultInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetLocalPingResultInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetLocalPingResultInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetLocalPingResultInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetLocalPingResultInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetLocalPingResultInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetLocalPingResultInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetLocalPingResultInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetLocalPingResultInfoTopic_Data_map[*it].front());
            g_RspQryNetLocalPingResultInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetLocalPingResultInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetLocalPingResultInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetLocalPingResultInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetLocalPingResultInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetLocalPingResultInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetLocalPingResultInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetLocalPingResultInfoField* pRspQryNetLocalPingResultInfo = (CShfeFtdcRspQryNetLocalPingResultInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetLocalPingResultInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetLocalPingResultInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetLocalPingResultInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetLocalPingResultInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetLocalPingResultInfo->OperationType);
                    pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetLocalPingResultInfo->ID);
                    pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SouIPADDR = Nan::New<v8::String> ("SouIPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetLocalPingResultInfo->SouIPADDR);
                    Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->SouIPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SouIPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (SouIPADDR), Local<v8::Value>(SouIPADDRValue));

                    v8::Local<v8::String> SouNAME = Nan::New<v8::String> ("SouNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetLocalPingResultInfo->SouNAME);
                    Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->SouNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SouNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (SouNAME), Local<v8::Value>(SouNAMEValue));

                    v8::Local<v8::String> TarIPADDR = Nan::New<v8::String> ("TarIPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetLocalPingResultInfo->TarIPADDR);
                    Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->TarIPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TarIPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (TarIPADDR), Local<v8::Value>(TarIPADDRValue));

                    v8::Local<v8::String> TarNAME = Nan::New<v8::String> ("TarNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetLocalPingResultInfo->TarNAME);
                    Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->TarNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TarNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (TarNAME), Local<v8::Value>(TarNAMEValue));

                    v8::Local<v8::String> PDateSta = Nan::New<v8::String> ("PDateSta").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetLocalPingResultInfo->PDateSta);
                    Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->PDateSta, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PDateStaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (PDateSta), Local<v8::Value>(PDateStaValue));

                    v8::Local<v8::String> PTimeSta = Nan::New<v8::String> ("PTimeSta").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetLocalPingResultInfo->PTimeSta);
                    Gb2312ToUtf8(pRspQryNetLocalPingResultInfo->PTimeSta, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PTimeStaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (PTimeSta), Local<v8::Value>(PTimeStaValue));

                    v8::Local<v8::String> ConnRate = Nan::New<v8::String> ("ConnRate").ToLocalChecked();
                    v8::Local<v8::Integer> ConnRateValue = Nan::New<v8::Integer> (pRspQryNetLocalPingResultInfo->ConnRate);
                    pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value> (ConnRate), Local<v8::Value>(ConnRateValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetLocalPingResultInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetLocalPingResultInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetLocalPingResultInfo) { 
                delete pRspQryNetLocalPingResultInfo;
                pRspQryNetLocalPingResultInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetLocalPingResultInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetLocalPingResultInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetLocalPingResultInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetLocalPingResultInfoTopic_mutex);

    int ioUserNumb = g_RtnNetLocalPingResultInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetLocalPingResultInfoTopic_IOUser_vec.begin();
        it != g_RtnNetLocalPingResultInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetLocalPingResultInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetLocalPingResultInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetLocalPingResultInfoTopic_Data_map[*it].front());
            g_RtnNetLocalPingResultInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetLocalPingResultInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetLocalPingResultInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetLocalPingResultInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetLocalPingResultInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetLocalPingResultInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetLocalPingResultInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetLocalPingResultInfoField* pRtnNetLocalPingResultInfo = (CShfeFtdcRtnNetLocalPingResultInfoField*)(paramArray[1]);
            if (OnRtnNetLocalPingResultInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetLocalPingResultInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetLocalPingResultInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetLocalPingResultInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetLocalPingResultInfo->OperationType);
                    pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetLocalPingResultInfo->ID);
                    pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SouIPADDR = Nan::New<v8::String> ("SouIPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetLocalPingResultInfo->SouIPADDR);
                    Gb2312ToUtf8(pRtnNetLocalPingResultInfo->SouIPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SouIPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (SouIPADDR), Local<v8::Value>(SouIPADDRValue));

                    v8::Local<v8::String> SouNAME = Nan::New<v8::String> ("SouNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetLocalPingResultInfo->SouNAME);
                    Gb2312ToUtf8(pRtnNetLocalPingResultInfo->SouNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SouNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (SouNAME), Local<v8::Value>(SouNAMEValue));

                    v8::Local<v8::String> TarIPADDR = Nan::New<v8::String> ("TarIPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetLocalPingResultInfo->TarIPADDR);
                    Gb2312ToUtf8(pRtnNetLocalPingResultInfo->TarIPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TarIPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (TarIPADDR), Local<v8::Value>(TarIPADDRValue));

                    v8::Local<v8::String> TarNAME = Nan::New<v8::String> ("TarNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetLocalPingResultInfo->TarNAME);
                    Gb2312ToUtf8(pRtnNetLocalPingResultInfo->TarNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TarNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (TarNAME), Local<v8::Value>(TarNAMEValue));

                    v8::Local<v8::String> PDateSta = Nan::New<v8::String> ("PDateSta").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetLocalPingResultInfo->PDateSta);
                    Gb2312ToUtf8(pRtnNetLocalPingResultInfo->PDateSta, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PDateStaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (PDateSta), Local<v8::Value>(PDateStaValue));

                    v8::Local<v8::String> PTimeSta = Nan::New<v8::String> ("PTimeSta").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetLocalPingResultInfo->PTimeSta);
                    Gb2312ToUtf8(pRtnNetLocalPingResultInfo->PTimeSta, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PTimeStaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (PTimeSta), Local<v8::Value>(PTimeStaValue));

                    v8::Local<v8::String> ConnRate = Nan::New<v8::String> ("ConnRate").ToLocalChecked();
                    v8::Local<v8::Integer> ConnRateValue = Nan::New<v8::Integer> (pRtnNetLocalPingResultInfo->ConnRate);
                    pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value> (ConnRate), Local<v8::Value>(ConnRateValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetLocalPingResultInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetLocalPingResultInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetLocalPingResultInfo) { 
                delete pRtnNetLocalPingResultInfo;
                pRtnNetLocalPingResultInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetLocalPingResultInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetRomotePingResultInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetRomotePingResultInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetRomotePingResultInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetRomotePingResultInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetRomotePingResultInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetRomotePingResultInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetRomotePingResultInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetRomotePingResultInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetRomotePingResultInfoTopic_Data_map[*it].front());
            g_RspQryNetRomotePingResultInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetRomotePingResultInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetRomotePingResultInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetRomotePingResultInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetRomotePingResultInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetRomotePingResultInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetRomotePingResultInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetRomotePingResultInfoField* pRspQryNetRomotePingResultInfo = (CShfeFtdcRspQryNetRomotePingResultInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetRomotePingResultInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetRomotePingResultInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetRomotePingResultInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetRomotePingResultInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetRomotePingResultInfo->OperationType);
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetRomotePingResultInfo->ID);
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SouIPADDR = Nan::New<v8::String> ("SouIPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRomotePingResultInfo->SouIPADDR);
                    Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->SouIPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SouIPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (SouIPADDR), Local<v8::Value>(SouIPADDRValue));

                    v8::Local<v8::String> SouNAME = Nan::New<v8::String> ("SouNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRomotePingResultInfo->SouNAME);
                    Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->SouNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SouNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (SouNAME), Local<v8::Value>(SouNAMEValue));

                    v8::Local<v8::String> TarIPADDR = Nan::New<v8::String> ("TarIPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRomotePingResultInfo->TarIPADDR);
                    Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->TarIPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TarIPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (TarIPADDR), Local<v8::Value>(TarIPADDRValue));

                    v8::Local<v8::String> TarNAME = Nan::New<v8::String> ("TarNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRomotePingResultInfo->TarNAME);
                    Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->TarNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TarNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (TarNAME), Local<v8::Value>(TarNAMEValue));

                    v8::Local<v8::String> PDateSta = Nan::New<v8::String> ("PDateSta").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRomotePingResultInfo->PDateSta);
                    Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->PDateSta, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PDateStaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (PDateSta), Local<v8::Value>(PDateStaValue));

                    v8::Local<v8::String> PTimeSta = Nan::New<v8::String> ("PTimeSta").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRomotePingResultInfo->PTimeSta);
                    Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->PTimeSta, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PTimeStaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (PTimeSta), Local<v8::Value>(PTimeStaValue));

                    v8::Local<v8::String> ConnRate = Nan::New<v8::String> ("ConnRate").ToLocalChecked();
                    v8::Local<v8::Integer> ConnRateValue = Nan::New<v8::Integer> (pRspQryNetRomotePingResultInfo->ConnRate);
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (ConnRate), Local<v8::Value>(ConnRateValue));

                    v8::Local<v8::String> TimeDlyMin = Nan::New<v8::String> ("TimeDlyMin").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRomotePingResultInfo->TimeDlyMin);
                    Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->TimeDlyMin, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimeDlyMinValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyMin), Local<v8::Value>(TimeDlyMinValue));

                    v8::Local<v8::String> TimeDlyMax = Nan::New<v8::String> ("TimeDlyMax").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRomotePingResultInfo->TimeDlyMax);
                    Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->TimeDlyMax, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimeDlyMaxValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyMax), Local<v8::Value>(TimeDlyMaxValue));

                    v8::Local<v8::String> TimeDlyAvg = Nan::New<v8::String> ("TimeDlyAvg").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetRomotePingResultInfo->TimeDlyAvg);
                    Gb2312ToUtf8(pRspQryNetRomotePingResultInfo->TimeDlyAvg, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimeDlyAvgValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyAvg), Local<v8::Value>(TimeDlyAvgValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetRomotePingResultInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetRomotePingResultInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetRomotePingResultInfo) { 
                delete pRspQryNetRomotePingResultInfo;
                pRspQryNetRomotePingResultInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetRomotePingResultInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetRomotePingResultInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetRomotePingResultInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetRomotePingResultInfoTopic_mutex);

    int ioUserNumb = g_RtnNetRomotePingResultInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetRomotePingResultInfoTopic_IOUser_vec.begin();
        it != g_RtnNetRomotePingResultInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetRomotePingResultInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetRomotePingResultInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetRomotePingResultInfoTopic_Data_map[*it].front());
            g_RtnNetRomotePingResultInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetRomotePingResultInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetRomotePingResultInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetRomotePingResultInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetRomotePingResultInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetRomotePingResultInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetRomotePingResultInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetRomotePingResultInfoField* pRtnNetRomotePingResultInfo = (CShfeFtdcRtnNetRomotePingResultInfoField*)(paramArray[1]);
            if (OnRtnNetRomotePingResultInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetRomotePingResultInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetRomotePingResultInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetRomotePingResultInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetRomotePingResultInfo->OperationType);
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetRomotePingResultInfo->ID);
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> SouIPADDR = Nan::New<v8::String> ("SouIPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRomotePingResultInfo->SouIPADDR);
                    Gb2312ToUtf8(pRtnNetRomotePingResultInfo->SouIPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SouIPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (SouIPADDR), Local<v8::Value>(SouIPADDRValue));

                    v8::Local<v8::String> SouNAME = Nan::New<v8::String> ("SouNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRomotePingResultInfo->SouNAME);
                    Gb2312ToUtf8(pRtnNetRomotePingResultInfo->SouNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SouNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (SouNAME), Local<v8::Value>(SouNAMEValue));

                    v8::Local<v8::String> TarIPADDR = Nan::New<v8::String> ("TarIPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRomotePingResultInfo->TarIPADDR);
                    Gb2312ToUtf8(pRtnNetRomotePingResultInfo->TarIPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TarIPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (TarIPADDR), Local<v8::Value>(TarIPADDRValue));

                    v8::Local<v8::String> TarNAME = Nan::New<v8::String> ("TarNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRomotePingResultInfo->TarNAME);
                    Gb2312ToUtf8(pRtnNetRomotePingResultInfo->TarNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TarNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (TarNAME), Local<v8::Value>(TarNAMEValue));

                    v8::Local<v8::String> PDateSta = Nan::New<v8::String> ("PDateSta").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRomotePingResultInfo->PDateSta);
                    Gb2312ToUtf8(pRtnNetRomotePingResultInfo->PDateSta, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PDateStaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (PDateSta), Local<v8::Value>(PDateStaValue));

                    v8::Local<v8::String> PTimeSta = Nan::New<v8::String> ("PTimeSta").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRomotePingResultInfo->PTimeSta);
                    Gb2312ToUtf8(pRtnNetRomotePingResultInfo->PTimeSta, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PTimeStaValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (PTimeSta), Local<v8::Value>(PTimeStaValue));

                    v8::Local<v8::String> ConnRate = Nan::New<v8::String> ("ConnRate").ToLocalChecked();
                    v8::Local<v8::Integer> ConnRateValue = Nan::New<v8::Integer> (pRtnNetRomotePingResultInfo->ConnRate);
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (ConnRate), Local<v8::Value>(ConnRateValue));

                    v8::Local<v8::String> TimeDlyMin = Nan::New<v8::String> ("TimeDlyMin").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRomotePingResultInfo->TimeDlyMin);
                    Gb2312ToUtf8(pRtnNetRomotePingResultInfo->TimeDlyMin, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimeDlyMinValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyMin), Local<v8::Value>(TimeDlyMinValue));

                    v8::Local<v8::String> TimeDlyMax = Nan::New<v8::String> ("TimeDlyMax").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRomotePingResultInfo->TimeDlyMax);
                    Gb2312ToUtf8(pRtnNetRomotePingResultInfo->TimeDlyMax, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimeDlyMaxValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyMax), Local<v8::Value>(TimeDlyMaxValue));

                    v8::Local<v8::String> TimeDlyAvg = Nan::New<v8::String> ("TimeDlyAvg").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetRomotePingResultInfo->TimeDlyAvg);
                    Gb2312ToUtf8(pRtnNetRomotePingResultInfo->TimeDlyAvg, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TimeDlyAvgValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value> (TimeDlyAvg), Local<v8::Value>(TimeDlyAvgValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetRomotePingResultInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetRomotePingResultInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetRomotePingResultInfo) { 
                delete pRtnNetRomotePingResultInfo;
                pRtnNetRomotePingResultInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetRomotePingResultInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMonitorTopProcessInfo (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnMonitorTopProcessInfo: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnMonitorTopProcessInfo_mutex);

    int ioUserNumb = g_RtnMonitorTopProcessInfo_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnMonitorTopProcessInfo_IOUser_vec.begin();
        it != g_RtnMonitorTopProcessInfo_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnMonitorTopProcessInfo_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnMonitorTopProcessInfo_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnMonitorTopProcessInfo_Data_map[*it].front());
            g_RtnMonitorTopProcessInfo_Data_map[*it].pop();
        }
    }
    g_RtnMonitorTopProcessInfo_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnMonitorTopProcessInfo_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnMonitorTopProcessInfo paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnMonitorTopProcessInfo: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnMonitorTopProcessInfo = localSpiObj->Get(Nan::New<v8::String>("OnRtnMonitorTopProcessInfo").ToLocalChecked());
            CShfeFtdcRtnMonitorTopProcessInfoField* pRtnMonitorTopProcessInfo = (CShfeFtdcRtnMonitorTopProcessInfoField*)(paramArray[1]);
            if (OnRtnMonitorTopProcessInfo->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnMonitorTopProcessInfo);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnMonitorTopProcessInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnMonitorTopProcessInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> HostName = Nan::New<v8::String> ("HostName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorTopProcessInfo->HostName);
                    Gb2312ToUtf8(pRtnMonitorTopProcessInfo->HostName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HostNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (HostName), Local<v8::Value>(HostNameValue));

                    v8::Local<v8::String> MonDate = Nan::New<v8::String> ("MonDate").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorTopProcessInfo->MonDate);
                    Gb2312ToUtf8(pRtnMonitorTopProcessInfo->MonDate, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonDateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (MonDate), Local<v8::Value>(MonDateValue));

                    v8::Local<v8::String> MonTime = Nan::New<v8::String> ("MonTime").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorTopProcessInfo->MonTime);
                    Gb2312ToUtf8(pRtnMonitorTopProcessInfo->MonTime, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MonTimeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (MonTime), Local<v8::Value>(MonTimeValue));

                    v8::Local<v8::String> CPU = Nan::New<v8::String> ("CPU").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorTopProcessInfo->CPU);
                    Gb2312ToUtf8(pRtnMonitorTopProcessInfo->CPU, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CPUValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (CPU), Local<v8::Value>(CPUValue));

                    v8::Local<v8::String> TTY = Nan::New<v8::String> ("TTY").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorTopProcessInfo->TTY);
                    Gb2312ToUtf8(pRtnMonitorTopProcessInfo->TTY, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TTYValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (TTY), Local<v8::Value>(TTYValue));

                    v8::Local<v8::String> PID = Nan::New<v8::String> ("PID").ToLocalChecked();
                    v8::Local<v8::Integer> PIDValue = Nan::New<v8::Integer> (pRtnMonitorTopProcessInfo->PID);
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (PID), Local<v8::Value>(PIDValue));

                    v8::Local<v8::String> USERNAME = Nan::New<v8::String> ("USERNAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorTopProcessInfo->USERNAME);
                    Gb2312ToUtf8(pRtnMonitorTopProcessInfo->USERNAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> USERNAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (USERNAME), Local<v8::Value>(USERNAMEValue));

                    v8::Local<v8::String> PRI = Nan::New<v8::String> ("PRI").ToLocalChecked();
                    v8::Local<v8::Integer> PRIValue = Nan::New<v8::Integer> (pRtnMonitorTopProcessInfo->PRI);
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (PRI), Local<v8::Value>(PRIValue));

                    v8::Local<v8::String> NI = Nan::New<v8::String> ("NI").ToLocalChecked();
                    v8::Local<v8::Integer> NIValue = Nan::New<v8::Integer> (pRtnMonitorTopProcessInfo->NI);
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (NI), Local<v8::Value>(NIValue));

                    v8::Local<v8::String> SSIZE = Nan::New<v8::String> ("SSIZE").ToLocalChecked();
                    v8::Local<v8::Integer> SSIZEValue = Nan::New<v8::Integer> (pRtnMonitorTopProcessInfo->SSIZE);
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (SSIZE), Local<v8::Value>(SSIZEValue));

                    v8::Local<v8::String> RES = Nan::New<v8::String> ("RES").ToLocalChecked();
                    v8::Local<v8::Integer> RESValue = Nan::New<v8::Integer> (pRtnMonitorTopProcessInfo->RES);
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (RES), Local<v8::Value>(RESValue));

                    v8::Local<v8::String> STATE = Nan::New<v8::String> ("STATE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorTopProcessInfo->STATE);
                    Gb2312ToUtf8(pRtnMonitorTopProcessInfo->STATE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> STATEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (STATE), Local<v8::Value>(STATEValue));

                    v8::Local<v8::String> STIME = Nan::New<v8::String> ("STIME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorTopProcessInfo->STIME);
                    Gb2312ToUtf8(pRtnMonitorTopProcessInfo->STIME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> STIMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (STIME), Local<v8::Value>(STIMEValue));

                    v8::Local<v8::String> pWCPU = Nan::New<v8::String> ("pWCPU").ToLocalChecked();
                    v8::Local<v8::Number> pWCPUValue = Nan::New<v8::Number> (pRtnMonitorTopProcessInfo->pWCPU);
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (pWCPU), Local<v8::Value>(pWCPUValue));

                    v8::Local<v8::String> pCPU = Nan::New<v8::String> ("pCPU").ToLocalChecked();
                    v8::Local<v8::Number> pCPUValue = Nan::New<v8::Number> (pRtnMonitorTopProcessInfo->pCPU);
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (pCPU), Local<v8::Value>(pCPUValue));

                    v8::Local<v8::String> COMMAND = Nan::New<v8::String> ("COMMAND").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMonitorTopProcessInfo->COMMAND);
                    Gb2312ToUtf8(pRtnMonitorTopProcessInfo->COMMAND, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> COMMANDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value> (COMMAND), Local<v8::Value>(COMMANDValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnMonitorTopProcessInfo) { 
                    params[0] = Local<v8::Value>(pRtnMonitorTopProcessInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnMonitorTopProcessInfo) { 
                delete pRtnMonitorTopProcessInfo;
                pRtnMonitorTopProcessInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnMonitorTopProcessInfo: END! ******\n", g_RunningResult_File);
}

void OnRspQrySysInternalTopologyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQrySysInternalTopologyTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQrySysInternalTopologyTopic_mutex);

    int ioUserNumb = g_RspQrySysInternalTopologyTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQrySysInternalTopologyTopic_IOUser_vec.begin();
        it != g_RspQrySysInternalTopologyTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQrySysInternalTopologyTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQrySysInternalTopologyTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQrySysInternalTopologyTopic_Data_map[*it].front());
            g_RspQrySysInternalTopologyTopic_Data_map[*it].pop();
        }
    }
    g_RspQrySysInternalTopologyTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQrySysInternalTopologyTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQrySysInternalTopologyTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQrySysInternalTopologyTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQrySysInternalTopologyTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysInternalTopologyTopic").ToLocalChecked());
            CShfeFtdcRspQrySysInternalTopologyField* pRspQrySysInternalTopology = (CShfeFtdcRspQrySysInternalTopologyField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQrySysInternalTopologyTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQrySysInternalTopologyTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQrySysInternalTopologyJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQrySysInternalTopology) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> InfoType = Nan::New<v8::String> ("InfoType").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysInternalTopology->InfoType);
                    Gb2312ToUtf8(pRspQrySysInternalTopology->InfoType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InfoTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (InfoType), Local<v8::Value>(InfoTypeValue));

                    v8::Local<v8::String> Node1_ID = Nan::New<v8::String> ("Node1_ID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysInternalTopology->Node1_ID);
                    Gb2312ToUtf8(pRspQrySysInternalTopology->Node1_ID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Node1_IDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (Node1_ID), Local<v8::Value>(Node1_IDValue));

                    v8::Local<v8::String> Node1_Info = Nan::New<v8::String> ("Node1_Info").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysInternalTopology->Node1_Info);
                    Gb2312ToUtf8(pRspQrySysInternalTopology->Node1_Info, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Node1_InfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (Node1_Info), Local<v8::Value>(Node1_InfoValue));

                    v8::Local<v8::String> LinkInfo = Nan::New<v8::String> ("LinkInfo").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysInternalTopology->LinkInfo);
                    Gb2312ToUtf8(pRspQrySysInternalTopology->LinkInfo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LinkInfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (LinkInfo), Local<v8::Value>(LinkInfoValue));

                    v8::Local<v8::String> LinkState = Nan::New<v8::String> ("LinkState").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysInternalTopology->LinkState);
                    Gb2312ToUtf8(pRspQrySysInternalTopology->LinkState, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LinkStateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (LinkState), Local<v8::Value>(LinkStateValue));

                    v8::Local<v8::String> Node2_ID = Nan::New<v8::String> ("Node2_ID").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysInternalTopology->Node2_ID);
                    Gb2312ToUtf8(pRspQrySysInternalTopology->Node2_ID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Node2_IDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (Node2_ID), Local<v8::Value>(Node2_IDValue));

                    v8::Local<v8::String> Node2_Info = Nan::New<v8::String> ("Node2_Info").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQrySysInternalTopology->Node2_Info);
                    Gb2312ToUtf8(pRspQrySysInternalTopology->Node2_Info, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Node2_InfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQrySysInternalTopologyJS->Set(Local<v8::Value> (Node2_Info), Local<v8::Value>(Node2_InfoValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQrySysInternalTopology) { 
                    params[0] = Local<v8::Value>(pRspQrySysInternalTopologyJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQrySysInternalTopology) { 
                delete pRspQrySysInternalTopology;
                pRspQrySysInternalTopology = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQrySysInternalTopologyTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnSysInternalTopologyTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnSysInternalTopologyTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnSysInternalTopologyTopic_mutex);

    int ioUserNumb = g_RtnSysInternalTopologyTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnSysInternalTopologyTopic_IOUser_vec.begin();
        it != g_RtnSysInternalTopologyTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnSysInternalTopologyTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnSysInternalTopologyTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnSysInternalTopologyTopic_Data_map[*it].front());
            g_RtnSysInternalTopologyTopic_Data_map[*it].pop();
        }
    }
    g_RtnSysInternalTopologyTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnSysInternalTopologyTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnSysInternalTopologyTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnSysInternalTopologyTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnSysInternalTopologyTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnSysInternalTopologyTopic").ToLocalChecked());
            CShfeFtdcRtnSysInternalTopologyField* pRtnSysInternalTopology = (CShfeFtdcRtnSysInternalTopologyField*)(paramArray[1]);
            if (OnRtnSysInternalTopologyTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnSysInternalTopologyTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnSysInternalTopologyJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnSysInternalTopology) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> InfoType = Nan::New<v8::String> ("InfoType").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysInternalTopology->InfoType);
                    Gb2312ToUtf8(pRtnSysInternalTopology->InfoType, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InfoTypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysInternalTopologyJS->Set(Local<v8::Value> (InfoType), Local<v8::Value>(InfoTypeValue));

                    v8::Local<v8::String> Node1_ID = Nan::New<v8::String> ("Node1_ID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysInternalTopology->Node1_ID);
                    Gb2312ToUtf8(pRtnSysInternalTopology->Node1_ID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Node1_IDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysInternalTopologyJS->Set(Local<v8::Value> (Node1_ID), Local<v8::Value>(Node1_IDValue));

                    v8::Local<v8::String> Node1_Info = Nan::New<v8::String> ("Node1_Info").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysInternalTopology->Node1_Info);
                    Gb2312ToUtf8(pRtnSysInternalTopology->Node1_Info, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Node1_InfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysInternalTopologyJS->Set(Local<v8::Value> (Node1_Info), Local<v8::Value>(Node1_InfoValue));

                    v8::Local<v8::String> LinkInfo = Nan::New<v8::String> ("LinkInfo").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysInternalTopology->LinkInfo);
                    Gb2312ToUtf8(pRtnSysInternalTopology->LinkInfo, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LinkInfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysInternalTopologyJS->Set(Local<v8::Value> (LinkInfo), Local<v8::Value>(LinkInfoValue));

                    v8::Local<v8::String> LinkState = Nan::New<v8::String> ("LinkState").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysInternalTopology->LinkState);
                    Gb2312ToUtf8(pRtnSysInternalTopology->LinkState, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LinkStateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysInternalTopologyJS->Set(Local<v8::Value> (LinkState), Local<v8::Value>(LinkStateValue));

                    v8::Local<v8::String> Node2_ID = Nan::New<v8::String> ("Node2_ID").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysInternalTopology->Node2_ID);
                    Gb2312ToUtf8(pRtnSysInternalTopology->Node2_ID, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Node2_IDValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysInternalTopologyJS->Set(Local<v8::Value> (Node2_ID), Local<v8::Value>(Node2_IDValue));

                    v8::Local<v8::String> Node2_Info = Nan::New<v8::String> ("Node2_Info").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnSysInternalTopology->Node2_Info);
                    Gb2312ToUtf8(pRtnSysInternalTopology->Node2_Info, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Node2_InfoValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnSysInternalTopologyJS->Set(Local<v8::Value> (Node2_Info), Local<v8::Value>(Node2_InfoValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnSysInternalTopology) { 
                    params[0] = Local<v8::Value>(pRtnSysInternalTopologyJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnSysInternalTopology) { 
                delete pRtnSysInternalTopology;
                pRtnSysInternalTopology = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnSysInternalTopologyTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryMemberLinkCostTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryMemberLinkCostTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryMemberLinkCostTopic_mutex);

    int ioUserNumb = g_RspQryMemberLinkCostTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryMemberLinkCostTopic_IOUser_vec.begin();
        it != g_RspQryMemberLinkCostTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryMemberLinkCostTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryMemberLinkCostTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryMemberLinkCostTopic_Data_map[*it].front());
            g_RspQryMemberLinkCostTopic_Data_map[*it].pop();
        }
    }
    g_RspQryMemberLinkCostTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryMemberLinkCostTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryMemberLinkCostTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryMemberLinkCostTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryMemberLinkCostTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryMemberLinkCostTopic").ToLocalChecked());
            CShfeFtdcRspQryMemberLinkCostField* pRspQryMemberLinkCost = (CShfeFtdcRspQryMemberLinkCostField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryMemberLinkCostTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryMemberLinkCostTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryMemberLinkCostJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryMemberLinkCost) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryMemberLinkCost->OperationType);
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryMemberLinkCost->ID);
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemberLinkCost->ParticipantName);
                    Gb2312ToUtf8(pRspQryMemberLinkCost->ParticipantName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemberLinkCost->DDN_NO);
                    Gb2312ToUtf8(pRspQryMemberLinkCost->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> ServiceProvider = Nan::New<v8::String> ("ServiceProvider").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemberLinkCost->ServiceProvider);
                    Gb2312ToUtf8(pRspQryMemberLinkCost->ServiceProvider, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ServiceProviderValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (ServiceProvider), Local<v8::Value>(ServiceProviderValue));

                    v8::Local<v8::String> Pay_Date = Nan::New<v8::String> ("Pay_Date").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemberLinkCost->Pay_Date);
                    Gb2312ToUtf8(pRspQryMemberLinkCost->Pay_Date, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Pay_DateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (Pay_Date), Local<v8::Value>(Pay_DateValue));

                    v8::Local<v8::String> B_Pay_Date = Nan::New<v8::String> ("B_Pay_Date").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemberLinkCost->B_Pay_Date);
                    Gb2312ToUtf8(pRspQryMemberLinkCost->B_Pay_Date, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> B_Pay_DateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (B_Pay_Date), Local<v8::Value>(B_Pay_DateValue));

                    v8::Local<v8::String> D_Pay_Date = Nan::New<v8::String> ("D_Pay_Date").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemberLinkCost->D_Pay_Date);
                    Gb2312ToUtf8(pRspQryMemberLinkCost->D_Pay_Date, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> D_Pay_DateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (D_Pay_Date), Local<v8::Value>(D_Pay_DateValue));

                    v8::Local<v8::String> Charge = Nan::New<v8::String> ("Charge").ToLocalChecked();
                    v8::Local<v8::Integer> ChargeValue = Nan::New<v8::Integer> (pRspQryMemberLinkCost->Charge);
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (Charge), Local<v8::Value>(ChargeValue));

                    v8::Local<v8::String> Fee_Type = Nan::New<v8::String> ("Fee_Type").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemberLinkCost->Fee_Type);
                    Gb2312ToUtf8(pRspQryMemberLinkCost->Fee_Type, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Fee_TypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (Fee_Type), Local<v8::Value>(Fee_TypeValue));

                    v8::Local<v8::String> Pro = Nan::New<v8::String> ("Pro").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryMemberLinkCost->Pro);
                    Gb2312ToUtf8(pRspQryMemberLinkCost->Pro, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ProValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryMemberLinkCostJS->Set(Local<v8::Value> (Pro), Local<v8::Value>(ProValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryMemberLinkCost) { 
                    params[0] = Local<v8::Value>(pRspQryMemberLinkCostJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryMemberLinkCost) { 
                delete pRspQryMemberLinkCost;
                pRspQryMemberLinkCost = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryMemberLinkCostTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnMemberLinkCostTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnMemberLinkCostTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnMemberLinkCostTopic_mutex);

    int ioUserNumb = g_RtnMemberLinkCostTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnMemberLinkCostTopic_IOUser_vec.begin();
        it != g_RtnMemberLinkCostTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnMemberLinkCostTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnMemberLinkCostTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnMemberLinkCostTopic_Data_map[*it].front());
            g_RtnMemberLinkCostTopic_Data_map[*it].pop();
        }
    }
    g_RtnMemberLinkCostTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnMemberLinkCostTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnMemberLinkCostTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnMemberLinkCostTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnMemberLinkCostTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnMemberLinkCostTopic").ToLocalChecked());
            CShfeFtdcRtnMemberLinkCostField* pRtnMemberLinkCost = (CShfeFtdcRtnMemberLinkCostField*)(paramArray[1]);
            if (OnRtnMemberLinkCostTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnMemberLinkCostTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnMemberLinkCostJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnMemberLinkCost) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnMemberLinkCost->OperationType);
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnMemberLinkCost->ID);
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> ParticipantName = Nan::New<v8::String> ("ParticipantName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemberLinkCost->ParticipantName);
                    Gb2312ToUtf8(pRtnMemberLinkCost->ParticipantName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ParticipantNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (ParticipantName), Local<v8::Value>(ParticipantNameValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemberLinkCost->DDN_NO);
                    Gb2312ToUtf8(pRtnMemberLinkCost->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> ServiceProvider = Nan::New<v8::String> ("ServiceProvider").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemberLinkCost->ServiceProvider);
                    Gb2312ToUtf8(pRtnMemberLinkCost->ServiceProvider, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ServiceProviderValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (ServiceProvider), Local<v8::Value>(ServiceProviderValue));

                    v8::Local<v8::String> Pay_Date = Nan::New<v8::String> ("Pay_Date").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemberLinkCost->Pay_Date);
                    Gb2312ToUtf8(pRtnMemberLinkCost->Pay_Date, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Pay_DateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (Pay_Date), Local<v8::Value>(Pay_DateValue));

                    v8::Local<v8::String> B_Pay_Date = Nan::New<v8::String> ("B_Pay_Date").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemberLinkCost->B_Pay_Date);
                    Gb2312ToUtf8(pRtnMemberLinkCost->B_Pay_Date, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> B_Pay_DateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (B_Pay_Date), Local<v8::Value>(B_Pay_DateValue));

                    v8::Local<v8::String> D_Pay_Date = Nan::New<v8::String> ("D_Pay_Date").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemberLinkCost->D_Pay_Date);
                    Gb2312ToUtf8(pRtnMemberLinkCost->D_Pay_Date, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> D_Pay_DateValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (D_Pay_Date), Local<v8::Value>(D_Pay_DateValue));

                    v8::Local<v8::String> Charge = Nan::New<v8::String> ("Charge").ToLocalChecked();
                    v8::Local<v8::Integer> ChargeValue = Nan::New<v8::Integer> (pRtnMemberLinkCost->Charge);
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (Charge), Local<v8::Value>(ChargeValue));

                    v8::Local<v8::String> Fee_Type = Nan::New<v8::String> ("Fee_Type").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemberLinkCost->Fee_Type);
                    Gb2312ToUtf8(pRtnMemberLinkCost->Fee_Type, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> Fee_TypeValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (Fee_Type), Local<v8::Value>(Fee_TypeValue));

                    v8::Local<v8::String> Pro = Nan::New<v8::String> ("Pro").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnMemberLinkCost->Pro);
                    Gb2312ToUtf8(pRtnMemberLinkCost->Pro, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ProValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnMemberLinkCostJS->Set(Local<v8::Value> (Pro), Local<v8::Value>(ProValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnMemberLinkCost) { 
                    params[0] = Local<v8::Value>(pRtnMemberLinkCostJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnMemberLinkCost) { 
                delete pRtnMemberLinkCost;
                pRtnMemberLinkCost = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnMemberLinkCostTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetPartylinkMonthlyRentTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetPartylinkMonthlyRentTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetPartylinkMonthlyRentTopic_mutex);

    int ioUserNumb = g_RspQryNetPartylinkMonthlyRentTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetPartylinkMonthlyRentTopic_IOUser_vec.begin();
        it != g_RspQryNetPartylinkMonthlyRentTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetPartylinkMonthlyRentTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetPartylinkMonthlyRentTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetPartylinkMonthlyRentTopic_Data_map[*it].front());
            g_RspQryNetPartylinkMonthlyRentTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetPartylinkMonthlyRentTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetPartylinkMonthlyRentTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetPartylinkMonthlyRentTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetPartylinkMonthlyRentTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetPartylinkMonthlyRentTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPartylinkMonthlyRentTopic").ToLocalChecked());
            CShfeFtdcRspQryNetPartylinkMonthlyRentField* pRspQryNetPartylinkMonthlyRent = (CShfeFtdcRspQryNetPartylinkMonthlyRentField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetPartylinkMonthlyRentTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetPartylinkMonthlyRentTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetPartylinkMonthlyRentJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetPartylinkMonthlyRent) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetPartylinkMonthlyRent->OperationType);
                    pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetPartylinkMonthlyRent->ID);
                    pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> LineName = Nan::New<v8::String> ("LineName").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartylinkMonthlyRent->LineName);
                    Gb2312ToUtf8(pRspQryNetPartylinkMonthlyRent->LineName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LineNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (LineName), Local<v8::Value>(LineNameValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartylinkMonthlyRent->DDN_NO);
                    Gb2312ToUtf8(pRspQryNetPartylinkMonthlyRent->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> ServiceProvider = Nan::New<v8::String> ("ServiceProvider").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartylinkMonthlyRent->ServiceProvider);
                    Gb2312ToUtf8(pRspQryNetPartylinkMonthlyRent->ServiceProvider, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ServiceProviderValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (ServiceProvider), Local<v8::Value>(ServiceProviderValue));

                    v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                    v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRspQryNetPartylinkMonthlyRent->MonthlyRental);
                    pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                    v8::Local<v8::String> Remark = Nan::New<v8::String> ("Remark").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetPartylinkMonthlyRent->Remark);
                    Gb2312ToUtf8(pRspQryNetPartylinkMonthlyRent->Remark, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemarkValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (Remark), Local<v8::Value>(RemarkValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetPartylinkMonthlyRent) { 
                    params[0] = Local<v8::Value>(pRspQryNetPartylinkMonthlyRentJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetPartylinkMonthlyRent) { 
                delete pRspQryNetPartylinkMonthlyRent;
                pRspQryNetPartylinkMonthlyRent = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetPartylinkMonthlyRentTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetPartylinkMonthlyRentTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetPartylinkMonthlyRentTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetPartylinkMonthlyRentTopic_mutex);

    int ioUserNumb = g_RtnNetPartylinkMonthlyRentTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetPartylinkMonthlyRentTopic_IOUser_vec.begin();
        it != g_RtnNetPartylinkMonthlyRentTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetPartylinkMonthlyRentTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetPartylinkMonthlyRentTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetPartylinkMonthlyRentTopic_Data_map[*it].front());
            g_RtnNetPartylinkMonthlyRentTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetPartylinkMonthlyRentTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetPartylinkMonthlyRentTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetPartylinkMonthlyRentTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetPartylinkMonthlyRentTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetPartylinkMonthlyRentTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPartylinkMonthlyRentTopic").ToLocalChecked());
            CShfeFtdcRtnNetPartylinkMonthlyRentField* pRtnNetPartylinkMonthlyRent = (CShfeFtdcRtnNetPartylinkMonthlyRentField*)(paramArray[1]);
            if (OnRtnNetPartylinkMonthlyRentTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetPartylinkMonthlyRentTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetPartylinkMonthlyRentJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetPartylinkMonthlyRent) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetPartylinkMonthlyRent->OperationType);
                    pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetPartylinkMonthlyRent->ID);
                    pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> LineName = Nan::New<v8::String> ("LineName").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartylinkMonthlyRent->LineName);
                    Gb2312ToUtf8(pRtnNetPartylinkMonthlyRent->LineName, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LineNameValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (LineName), Local<v8::Value>(LineNameValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartylinkMonthlyRent->DDN_NO);
                    Gb2312ToUtf8(pRtnNetPartylinkMonthlyRent->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> ServiceProvider = Nan::New<v8::String> ("ServiceProvider").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartylinkMonthlyRent->ServiceProvider);
                    Gb2312ToUtf8(pRtnNetPartylinkMonthlyRent->ServiceProvider, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ServiceProviderValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (ServiceProvider), Local<v8::Value>(ServiceProviderValue));

                    v8::Local<v8::String> MonthlyRental = Nan::New<v8::String> ("MonthlyRental").ToLocalChecked();
                    v8::Local<v8::Integer> MonthlyRentalValue = Nan::New<v8::Integer> (pRtnNetPartylinkMonthlyRent->MonthlyRental);
                    pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (MonthlyRental), Local<v8::Value>(MonthlyRentalValue));

                    v8::Local<v8::String> Remark = Nan::New<v8::String> ("Remark").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetPartylinkMonthlyRent->Remark);
                    Gb2312ToUtf8(pRtnNetPartylinkMonthlyRent->Remark, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> RemarkValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value> (Remark), Local<v8::Value>(RemarkValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetPartylinkMonthlyRent) { 
                    params[0] = Local<v8::Value>(pRtnNetPartylinkMonthlyRentJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetPartylinkMonthlyRent) { 
                delete pRtnNetPartylinkMonthlyRent;
                pRtnNetPartylinkMonthlyRent = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetPartylinkMonthlyRentTopic: END! ******\n", g_RunningResult_File);
}

void OnRspQryNetNonPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RspQryNetNonPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RspQryNetNonPartyLinkInfoTopic_mutex);

    int ioUserNumb = g_RspQryNetNonPartyLinkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RspQryNetNonPartyLinkInfoTopic_IOUser_vec.begin();
        it != g_RspQryNetNonPartyLinkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RspQryNetNonPartyLinkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RspQryNetNonPartyLinkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RspQryNetNonPartyLinkInfoTopic_Data_map[*it].front());
            g_RspQryNetNonPartyLinkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RspQryNetNonPartyLinkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RspQryNetNonPartyLinkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RspQryNetNonPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RspQryNetNonPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRspQryNetNonPartyLinkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetNonPartyLinkInfoTopic").ToLocalChecked());
            CShfeFtdcRspQryNetNonPartyLinkInfoField* pRspQryNetNonPartyLinkInfo = (CShfeFtdcRspQryNetNonPartyLinkInfoField*)(paramArray[1]);
            CShfeFtdcRspInfoField *pRspInfo = (CShfeFtdcRspInfoField *)(paramArray[2]);
            int* pRequestID = (int*)paramArray[3];
            bool* pIsLastNew = (bool*)paramArray[4];

            if (OnRspQryNetNonPartyLinkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRspQryNetNonPartyLinkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRspQryNetNonPartyLinkInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Object> pRspInfoJS = Nan::New<v8::Object>();
                v8::Local<v8::Integer> nRequestIDJS = Nan::New<v8::Integer>(*pRequestID);
                v8::Local<v8::Boolean> nIsLastNewJS = Nan::New<v8::Boolean>(*pIsLastNew);
                
                if (NULL != pRspQryNetNonPartyLinkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRspQryNetNonPartyLinkInfo->OperationType);
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRspQryNetNonPartyLinkInfo->ID);
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->MEMBER_NO);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->MEMBER_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                    v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->MEMBER_NAME);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->MEMBER_NAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                    v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->REMOTE_ADDR);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->REMOTE_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                    v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->LOCAL_ADDR);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->LOCAL_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                    v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->ADDRESS);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->ADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                    v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->LINE_STATUS);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->LINE_STATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                    v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->CONTACT);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->CONTACT, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                    v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->TELEPHONE);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->TELEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                    v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->MOBILEPHONE);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->MOBILEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                    v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->EMAIL);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->EMAIL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                    v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->FAX);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->FAX, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FAXValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                    v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->PROVINCE);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->PROVINCE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->DDN_NO);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->IN_MODE);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IN_MODE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                    v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->IP_WAN);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IP_WAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                    v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->IP_LAN);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IP_LAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->IPADDR);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->Interface);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->Interface, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                    v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->INTERFACE_DATE);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->INTERFACE_DATE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                    v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->SOFTWARE);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->SOFTWARE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                    v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->FEE_TYPE);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->FEE_TYPE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                    v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->SERVICEPROVIDER);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->SERVICEPROVIDER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                    v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->IF_ZIYING);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IF_ZIYING, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                    v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->IF_TUOGUAN);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->IF_TUOGUAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                    v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->HASOTHER);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->HASOTHER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                    v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->SEAT_NO);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->SEAT_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                    v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                    gb2312dataLen = strlen(pRspQryNetNonPartyLinkInfo->PRO);
                    Gb2312ToUtf8(pRspQryNetNonPartyLinkInfo->PRO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

                };

                if (NULL != pRspInfo){
                    v8::Local<v8::String>  ErrorID = Nan::New<v8::String>("ErrorID").ToLocalChecked();
                    v8::Local<v8::Integer> ErrorIDValue = Nan::New<v8::Integer>(pRspInfo->ErrorID);
                    pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
                        
                    v8::Local<v8::String>  ErrorMsg = Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
                    v8::Local<v8::String>  ErrorMsggValue = Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();                                
                    pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
			    }                

                v8::Local<v8::Value> params[4];
                if (NULL != pRspQryNetNonPartyLinkInfo) { 
                    params[0] = Local<v8::Value>(pRspQryNetNonPartyLinkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                if (NULL != pRspInfo) {
                    params[1] = Local<v8::Value>(pRspInfoJS);
                } else {
                    params[1] = Local<v8::Value>(Nan::Undefined());
                }
                params[2] = Local<v8::Value>(nRequestIDJS);
                params[3] = Local<v8::Value>(nIsLastNewJS);
                
                callback.Call(localSpiObj, 4, params);

            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRspQryNetNonPartyLinkInfo) { 
                delete pRspQryNetNonPartyLinkInfo;
                pRspQryNetNonPartyLinkInfo = NULL;
            }

            if (NULL != pRspInfo) {
                delete pRspInfo;
                pRspInfo = NULL;
            }       
            
            if (NULL != pRequestID) {
                delete pRequestID;
                pRequestID = NULL;
            }  
            
            if (NULL != pIsLastNew) {
                delete pIsLastNew;
                pIsLastNew = NULL;
            }  

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RspQryNetNonPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

void OnRtnNetNonPartyLinkInfoTopic (uv_async_t *handle)
{
    OutputCallbackMessage("\n****** v8-transform-func:: RtnNetNonPartyLinkInfoTopic: START! ******", g_RunningResult_File);
    queue<void**>* pReceivedData;
    uv_mutex_lock (&g_RtnNetNonPartyLinkInfoTopic_mutex);

    int ioUserNumb = g_RtnNetNonPartyLinkInfoTopic_IOUser_vec.size();
    pReceivedData = new queue<void**>[ioUserNumb];
    int i = 0;
    for(vector<FRONT_ID>::iterator it = g_RtnNetNonPartyLinkInfoTopic_IOUser_vec.begin();
        it != g_RtnNetNonPartyLinkInfoTopic_IOUser_vec.end(); it++ , i++) {
        int dataNumb = g_RtnNetNonPartyLinkInfoTopic_Data_map[*it].size();
        OutputCallbackMessage("dataNumb in this queue is: ",  dataNumb, g_RunningResult_File);
        while (!g_RtnNetNonPartyLinkInfoTopic_Data_map[*it].empty()) {
            pReceivedData[i].push (g_RtnNetNonPartyLinkInfoTopic_Data_map[*it].front());
            g_RtnNetNonPartyLinkInfoTopic_Data_map[*it].pop();
        }
    }
    g_RtnNetNonPartyLinkInfoTopic_IOUser_vec.clear();

    uv_mutex_unlock (&g_RtnNetNonPartyLinkInfoTopic_mutex);

    for (int i = 0; i < ioUserNumb; ++i) {
        while ( !pReceivedData[i].empty() ) {
            void** paramArray = pReceivedData[i].front();
            pReceivedData[i].pop();

            if (NULL == paramArray ) {
                OutputCallbackMessage ("v8-transform-func::Delivered RtnNetNonPartyLinkInfoTopic paramArray is NULL", g_RunningResult_File);
                OutputCallbackMessage ("****** v8-transform-func:: RtnNetNonPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
                return;
            }

            Nan::HandleScope scope;
            Nan::Persistent<v8::Object>* pSpiObj = (Nan::Persistent<v8::Object>*)paramArray[0];
            if (pSpiObj->IsEmpty()) {
                OutputCallbackMessage ("v8-transform-func::pSpiObj is NULL", g_RunningResult_File);
                return;
            }
        
            v8::Local<v8::Object> localSpiObj = Nan::New<v8::Object>(*pSpiObj);            
            v8::Local<v8::Value> OnRtnNetNonPartyLinkInfoTopic = localSpiObj->Get(Nan::New<v8::String>("OnRtnNetNonPartyLinkInfoTopic").ToLocalChecked());
            CShfeFtdcRtnNetNonPartyLinkInfoField* pRtnNetNonPartyLinkInfo = (CShfeFtdcRtnNetNonPartyLinkInfoField*)(paramArray[1]);
            if (OnRtnNetNonPartyLinkInfoTopic->IsFunction()) {

                v8::Local<v8::Function> function = v8::Local<v8::Function>::Cast(OnRtnNetNonPartyLinkInfoTopic);
                Nan::Callback callback(function);

                v8::Local<v8::Object> pRtnNetNonPartyLinkInfoJS = Nan::New<v8::Object>();
                
                if (NULL != pRtnNetNonPartyLinkInfo) { 
                    string utf8string;
                    const int utf8dataLen = 4096 * 12;
                    int gb2312dataLen;
                    char utf8data[utf8dataLen];

                    v8::Local<v8::String> OperationType = Nan::New<v8::String> ("OperationType").ToLocalChecked();
                    v8::Local<v8::Integer> OperationTypeValue = Nan::New<v8::Integer> (pRtnNetNonPartyLinkInfo->OperationType);
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (OperationType), Local<v8::Value>(OperationTypeValue));

                    v8::Local<v8::String> ID = Nan::New<v8::String> ("ID").ToLocalChecked();
                    v8::Local<v8::Integer> IDValue = Nan::New<v8::Integer> (pRtnNetNonPartyLinkInfo->ID);
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (ID), Local<v8::Value>(IDValue));

                    v8::Local<v8::String> MEMBER_NO = Nan::New<v8::String> ("MEMBER_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->MEMBER_NO);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->MEMBER_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NO), Local<v8::Value>(MEMBER_NOValue));

                    v8::Local<v8::String> MEMBER_NAME = Nan::New<v8::String> ("MEMBER_NAME").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->MEMBER_NAME);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->MEMBER_NAME, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MEMBER_NAMEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MEMBER_NAME), Local<v8::Value>(MEMBER_NAMEValue));

                    v8::Local<v8::String> REMOTE_ADDR = Nan::New<v8::String> ("REMOTE_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->REMOTE_ADDR);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->REMOTE_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> REMOTE_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (REMOTE_ADDR), Local<v8::Value>(REMOTE_ADDRValue));

                    v8::Local<v8::String> LOCAL_ADDR = Nan::New<v8::String> ("LOCAL_ADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->LOCAL_ADDR);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->LOCAL_ADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LOCAL_ADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (LOCAL_ADDR), Local<v8::Value>(LOCAL_ADDRValue));

                    v8::Local<v8::String> ADDRESS = Nan::New<v8::String> ("ADDRESS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->ADDRESS);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->ADDRESS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> ADDRESSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (ADDRESS), Local<v8::Value>(ADDRESSValue));

                    v8::Local<v8::String> LINE_STATUS = Nan::New<v8::String> ("LINE_STATUS").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->LINE_STATUS);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->LINE_STATUS, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> LINE_STATUSValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (LINE_STATUS), Local<v8::Value>(LINE_STATUSValue));

                    v8::Local<v8::String> CONTACT = Nan::New<v8::String> ("CONTACT").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->CONTACT);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->CONTACT, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> CONTACTValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (CONTACT), Local<v8::Value>(CONTACTValue));

                    v8::Local<v8::String> TELEPHONE = Nan::New<v8::String> ("TELEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->TELEPHONE);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->TELEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> TELEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (TELEPHONE), Local<v8::Value>(TELEPHONEValue));

                    v8::Local<v8::String> MOBILEPHONE = Nan::New<v8::String> ("MOBILEPHONE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->MOBILEPHONE);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->MOBILEPHONE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> MOBILEPHONEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (MOBILEPHONE), Local<v8::Value>(MOBILEPHONEValue));

                    v8::Local<v8::String> EMAIL = Nan::New<v8::String> ("EMAIL").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->EMAIL);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->EMAIL, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> EMAILValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (EMAIL), Local<v8::Value>(EMAILValue));

                    v8::Local<v8::String> FAX = Nan::New<v8::String> ("FAX").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->FAX);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->FAX, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FAXValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (FAX), Local<v8::Value>(FAXValue));

                    v8::Local<v8::String> PROVINCE = Nan::New<v8::String> ("PROVINCE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->PROVINCE);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->PROVINCE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROVINCEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (PROVINCE), Local<v8::Value>(PROVINCEValue));

                    v8::Local<v8::String> DDN_NO = Nan::New<v8::String> ("DDN_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->DDN_NO);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->DDN_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> DDN_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (DDN_NO), Local<v8::Value>(DDN_NOValue));

                    v8::Local<v8::String> IN_MODE = Nan::New<v8::String> ("IN_MODE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->IN_MODE);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IN_MODE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IN_MODEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IN_MODE), Local<v8::Value>(IN_MODEValue));

                    v8::Local<v8::String> IP_WAN = Nan::New<v8::String> ("IP_WAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->IP_WAN);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IP_WAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_WANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IP_WAN), Local<v8::Value>(IP_WANValue));

                    v8::Local<v8::String> IP_LAN = Nan::New<v8::String> ("IP_LAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->IP_LAN);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IP_LAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IP_LANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IP_LAN), Local<v8::Value>(IP_LANValue));

                    v8::Local<v8::String> IPADDR = Nan::New<v8::String> ("IPADDR").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->IPADDR);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IPADDR, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IPADDRValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IPADDR), Local<v8::Value>(IPADDRValue));

                    v8::Local<v8::String> Interface = Nan::New<v8::String> ("Interface").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->Interface);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->Interface, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> InterfaceValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (Interface), Local<v8::Value>(InterfaceValue));

                    v8::Local<v8::String> INTERFACE_DATE = Nan::New<v8::String> ("INTERFACE_DATE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->INTERFACE_DATE);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->INTERFACE_DATE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> INTERFACE_DATEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (INTERFACE_DATE), Local<v8::Value>(INTERFACE_DATEValue));

                    v8::Local<v8::String> SOFTWARE = Nan::New<v8::String> ("SOFTWARE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->SOFTWARE);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->SOFTWARE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SOFTWAREValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SOFTWARE), Local<v8::Value>(SOFTWAREValue));

                    v8::Local<v8::String> FEE_TYPE = Nan::New<v8::String> ("FEE_TYPE").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->FEE_TYPE);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->FEE_TYPE, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> FEE_TYPEValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (FEE_TYPE), Local<v8::Value>(FEE_TYPEValue));

                    v8::Local<v8::String> SERVICEPROVIDER = Nan::New<v8::String> ("SERVICEPROVIDER").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->SERVICEPROVIDER);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->SERVICEPROVIDER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SERVICEPROVIDERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SERVICEPROVIDER), Local<v8::Value>(SERVICEPROVIDERValue));

                    v8::Local<v8::String> IF_ZIYING = Nan::New<v8::String> ("IF_ZIYING").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->IF_ZIYING);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IF_ZIYING, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_ZIYINGValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IF_ZIYING), Local<v8::Value>(IF_ZIYINGValue));

                    v8::Local<v8::String> IF_TUOGUAN = Nan::New<v8::String> ("IF_TUOGUAN").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->IF_TUOGUAN);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->IF_TUOGUAN, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> IF_TUOGUANValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (IF_TUOGUAN), Local<v8::Value>(IF_TUOGUANValue));

                    v8::Local<v8::String> HASOTHER = Nan::New<v8::String> ("HASOTHER").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->HASOTHER);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->HASOTHER, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> HASOTHERValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (HASOTHER), Local<v8::Value>(HASOTHERValue));

                    v8::Local<v8::String> SEAT_NO = Nan::New<v8::String> ("SEAT_NO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->SEAT_NO);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->SEAT_NO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> SEAT_NOValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (SEAT_NO), Local<v8::Value>(SEAT_NOValue));

                    v8::Local<v8::String> PRO = Nan::New<v8::String> ("PRO").ToLocalChecked();
                    gb2312dataLen = strlen(pRtnNetNonPartyLinkInfo->PRO);
                    Gb2312ToUtf8(pRtnNetNonPartyLinkInfo->PRO, gb2312dataLen, utf8data, utf8dataLen);
                    v8::Local<v8::String> PROValue = Nan::New<v8::String> (utf8data).ToLocalChecked();
                    pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value> (PRO), Local<v8::Value>(PROValue));

                };
                

                v8::Local<v8::Value> params[1];
                if (NULL != pRtnNetNonPartyLinkInfo) { 
                    params[0] = Local<v8::Value>(pRtnNetNonPartyLinkInfoJS);
                } else { 
                    params[0] = Local<v8::Value>(Nan::Undefined());
                };

                callback.Call(localSpiObj, 1, params);
                
            } // OnFrontConnected->IsFunction() end!


            if(NULL != pSpiObj) {
                delete pSpiObj;
                pSpiObj = NULL;
            }
            if (NULL != pRtnNetNonPartyLinkInfo) { 
                delete pRtnNetNonPartyLinkInfo;
                pRtnNetNonPartyLinkInfo = NULL;
            }

            if (NULL != paramArray) {
                delete []paramArray;
                paramArray = NULL;
            }       
         } // while() end!;
     } // for() end!
     
     if (NULL != pReceivedData) {
        delete[] pReceivedData;
        pReceivedData = NULL;
     }
     
    OutputCallbackMessage("****** v8-transform-func:: RtnNetNonPartyLinkInfoTopic: END! ******\n", g_RunningResult_File);
}

